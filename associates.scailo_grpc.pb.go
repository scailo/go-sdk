// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: associates.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssociatesService_ImportFromReq_FullMethodName         = "/Scailo.AssociatesService/ImportFromReq"
	AssociatesService_Create_FullMethodName                = "/Scailo.AssociatesService/Create"
	AssociatesService_Update_FullMethodName                = "/Scailo.AssociatesService/Update"
	AssociatesService_Discard_FullMethodName               = "/Scailo.AssociatesService/Discard"
	AssociatesService_Restore_FullMethodName               = "/Scailo.AssociatesService/Restore"
	AssociatesService_ViewByID_FullMethodName              = "/Scailo.AssociatesService/ViewByID"
	AssociatesService_ViewByUUID_FullMethodName            = "/Scailo.AssociatesService/ViewByUUID"
	AssociatesService_ViewEssentialByID_FullMethodName     = "/Scailo.AssociatesService/ViewEssentialByID"
	AssociatesService_ViewEssentialByUUID_FullMethodName   = "/Scailo.AssociatesService/ViewEssentialByUUID"
	AssociatesService_ViewFromIDs_FullMethodName           = "/Scailo.AssociatesService/ViewFromIDs"
	AssociatesService_DownloadVCard_FullMethodName         = "/Scailo.AssociatesService/DownloadVCard"
	AssociatesService_ViewAll_FullMethodName               = "/Scailo.AssociatesService/ViewAll"
	AssociatesService_ViewAllForEntityUUID_FullMethodName  = "/Scailo.AssociatesService/ViewAllForEntityUUID"
	AssociatesService_ViewWithPagination_FullMethodName    = "/Scailo.AssociatesService/ViewWithPagination"
	AssociatesService_CheckModifyPermission_FullMethodName = "/Scailo.AssociatesService/CheckModifyPermission"
	AssociatesService_CheckAddPermission_FullMethodName    = "/Scailo.AssociatesService/CheckAddPermission"
	AssociatesService_SearchAll_FullMethodName             = "/Scailo.AssociatesService/SearchAll"
	AssociatesService_Filter_FullMethodName                = "/Scailo.AssociatesService/Filter"
	AssociatesService_Count_FullMethodName                 = "/Scailo.AssociatesService/Count"
	AssociatesService_DownloadAsCSV_FullMethodName         = "/Scailo.AssociatesService/DownloadAsCSV"
	AssociatesService_ImportFromCSV_FullMethodName         = "/Scailo.AssociatesService/ImportFromCSV"
)

// AssociatesServiceClient is the client API for AssociatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the methods applicable on each associate
type AssociatesServiceClient interface {
	// Import associates
	ImportFromReq(ctx context.Context, in *AssociatesServiceImportRequest, opts ...grpc.CallOption) (*AssociatesList, error)
	// Create a associate
	Create(ctx context.Context, in *AssociatesServiceCreateRequest, opts ...grpc.CallOption) (*Associate, error)
	// Update a associate
	Update(ctx context.Context, in *AssociatesServiceUpdateRequest, opts ...grpc.CallOption) (*Associate, error)
	// Discard the associate
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore the associate
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Associate, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Associate, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Associate, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Associate, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*AssociatesList, error)
	// Download Associate by ID as a vCard
	DownloadVCard(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*BytesResponse, error)
	// View all associates
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*AssociatesList, error)
	// View all associates with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*AssociatesList, error)
	// View associates with pagination
	ViewWithPagination(ctx context.Context, in *AssociatesServicePaginationReq, opts ...grpc.CallOption) (*AssociatePaginationResp, error)
	// Check if the user has permission to modify an associate
	CheckModifyPermission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Check if the user has permission to add an associate
	CheckAddPermission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BooleanResponse, error)
	// View all associates that match the given search key
	SearchAll(ctx context.Context, in *AssociatesServiceSearchAllReq, opts ...grpc.CallOption) (*AssociatesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *AssociatesServiceFilterReq, opts ...grpc.CallOption) (*AssociatesList, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *AssociatesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *AssociatesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type associatesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssociatesServiceClient(cc grpc.ClientConnInterface) AssociatesServiceClient {
	return &associatesServiceClient{cc}
}

func (c *associatesServiceClient) ImportFromReq(ctx context.Context, in *AssociatesServiceImportRequest, opts ...grpc.CallOption) (*AssociatesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociatesList)
	err := c.cc.Invoke(ctx, AssociatesService_ImportFromReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) Create(ctx context.Context, in *AssociatesServiceCreateRequest, opts ...grpc.CallOption) (*Associate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Associate)
	err := c.cc.Invoke(ctx, AssociatesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) Update(ctx context.Context, in *AssociatesServiceUpdateRequest, opts ...grpc.CallOption) (*Associate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Associate)
	err := c.cc.Invoke(ctx, AssociatesService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AssociatesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AssociatesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Associate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Associate)
	err := c.cc.Invoke(ctx, AssociatesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Associate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Associate)
	err := c.cc.Invoke(ctx, AssociatesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Associate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Associate)
	err := c.cc.Invoke(ctx, AssociatesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Associate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Associate)
	err := c.cc.Invoke(ctx, AssociatesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*AssociatesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociatesList)
	err := c.cc.Invoke(ctx, AssociatesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) DownloadVCard(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*BytesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BytesResponse)
	err := c.cc.Invoke(ctx, AssociatesService_DownloadVCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*AssociatesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociatesList)
	err := c.cc.Invoke(ctx, AssociatesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*AssociatesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociatesList)
	err := c.cc.Invoke(ctx, AssociatesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) ViewWithPagination(ctx context.Context, in *AssociatesServicePaginationReq, opts ...grpc.CallOption) (*AssociatePaginationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociatePaginationResp)
	err := c.cc.Invoke(ctx, AssociatesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) CheckModifyPermission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, AssociatesService_CheckModifyPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) CheckAddPermission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, AssociatesService_CheckAddPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) SearchAll(ctx context.Context, in *AssociatesServiceSearchAllReq, opts ...grpc.CallOption) (*AssociatesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociatesList)
	err := c.cc.Invoke(ctx, AssociatesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) Filter(ctx context.Context, in *AssociatesServiceFilterReq, opts ...grpc.CallOption) (*AssociatesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociatesList)
	err := c.cc.Invoke(ctx, AssociatesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) Count(ctx context.Context, in *AssociatesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, AssociatesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) DownloadAsCSV(ctx context.Context, in *AssociatesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, AssociatesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associatesServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, AssociatesService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssociatesService
