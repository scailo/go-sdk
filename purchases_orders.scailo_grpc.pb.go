// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: purchases_orders.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PurchasesOrdersService_Create_FullMethodName                                    = "/Scailo.PurchasesOrdersService/Create"
	PurchasesOrdersService_Draft_FullMethodName                                     = "/Scailo.PurchasesOrdersService/Draft"
	PurchasesOrdersService_DraftUpdate_FullMethodName                               = "/Scailo.PurchasesOrdersService/DraftUpdate"
	PurchasesOrdersService_SendForVerification_FullMethodName                       = "/Scailo.PurchasesOrdersService/SendForVerification"
	PurchasesOrdersService_Verify_FullMethodName                                    = "/Scailo.PurchasesOrdersService/Verify"
	PurchasesOrdersService_Approve_FullMethodName                                   = "/Scailo.PurchasesOrdersService/Approve"
	PurchasesOrdersService_SendForRevision_FullMethodName                           = "/Scailo.PurchasesOrdersService/SendForRevision"
	PurchasesOrdersService_RevisionUpdate_FullMethodName                            = "/Scailo.PurchasesOrdersService/RevisionUpdate"
	PurchasesOrdersService_Halt_FullMethodName                                      = "/Scailo.PurchasesOrdersService/Halt"
	PurchasesOrdersService_Discard_FullMethodName                                   = "/Scailo.PurchasesOrdersService/Discard"
	PurchasesOrdersService_Restore_FullMethodName                                   = "/Scailo.PurchasesOrdersService/Restore"
	PurchasesOrdersService_Complete_FullMethodName                                  = "/Scailo.PurchasesOrdersService/Complete"
	PurchasesOrdersService_Repeat_FullMethodName                                    = "/Scailo.PurchasesOrdersService/Repeat"
	PurchasesOrdersService_Reopen_FullMethodName                                    = "/Scailo.PurchasesOrdersService/Reopen"
	PurchasesOrdersService_CommentAdd_FullMethodName                                = "/Scailo.PurchasesOrdersService/CommentAdd"
	PurchasesOrdersService_SendEmail_FullMethodName                                 = "/Scailo.PurchasesOrdersService/SendEmail"
	PurchasesOrdersService_Autofill_FullMethodName                                  = "/Scailo.PurchasesOrdersService/Autofill"
	PurchasesOrdersService_Amend_FullMethodName                                     = "/Scailo.PurchasesOrdersService/Amend"
	PurchasesOrdersService_CreateMagicLink_FullMethodName                           = "/Scailo.PurchasesOrdersService/CreateMagicLink"
	PurchasesOrdersService_AddPurchaseOrderItem_FullMethodName                      = "/Scailo.PurchasesOrdersService/AddPurchaseOrderItem"
	PurchasesOrdersService_ModifyPurchaseOrderItem_FullMethodName                   = "/Scailo.PurchasesOrdersService/ModifyPurchaseOrderItem"
	PurchasesOrdersService_ApprovePurchaseOrderItem_FullMethodName                  = "/Scailo.PurchasesOrdersService/ApprovePurchaseOrderItem"
	PurchasesOrdersService_DeletePurchaseOrderItem_FullMethodName                   = "/Scailo.PurchasesOrdersService/DeletePurchaseOrderItem"
	PurchasesOrdersService_ReorderPurchaseOrderItems_FullMethodName                 = "/Scailo.PurchasesOrdersService/ReorderPurchaseOrderItems"
	PurchasesOrdersService_ViewPurchaseOrderItemByID_FullMethodName                 = "/Scailo.PurchasesOrdersService/ViewPurchaseOrderItemByID"
	PurchasesOrdersService_ViewPurchaseOrderItemPrice_FullMethodName                = "/Scailo.PurchasesOrdersService/ViewPurchaseOrderItemPrice"
	PurchasesOrdersService_ViewApprovedPurchaseOrderItems_FullMethodName            = "/Scailo.PurchasesOrdersService/ViewApprovedPurchaseOrderItems"
	PurchasesOrdersService_ViewUnapprovedPurchaseOrderItems_FullMethodName          = "/Scailo.PurchasesOrdersService/ViewUnapprovedPurchaseOrderItems"
	PurchasesOrdersService_ViewPurchaseOrderItemHistory_FullMethodName              = "/Scailo.PurchasesOrdersService/ViewPurchaseOrderItemHistory"
	PurchasesOrdersService_ViewPaginatedApprovedPurchaseOrderItems_FullMethodName   = "/Scailo.PurchasesOrdersService/ViewPaginatedApprovedPurchaseOrderItems"
	PurchasesOrdersService_ViewPaginatedUnapprovedPurchaseOrderItems_FullMethodName = "/Scailo.PurchasesOrdersService/ViewPaginatedUnapprovedPurchaseOrderItems"
	PurchasesOrdersService_SearchItemsWithPagination_FullMethodName                 = "/Scailo.PurchasesOrdersService/SearchItemsWithPagination"
	PurchasesOrdersService_DownloadItemsAsCSV_FullMethodName                        = "/Scailo.PurchasesOrdersService/DownloadItemsAsCSV"
	PurchasesOrdersService_DownloadItemsTemplateAsCSV_FullMethodName                = "/Scailo.PurchasesOrdersService/DownloadItemsTemplateAsCSV"
	PurchasesOrdersService_UploadPurchaseOrderItems_FullMethodName                  = "/Scailo.PurchasesOrdersService/UploadPurchaseOrderItems"
	PurchasesOrdersService_AddPurchaseOrderContact_FullMethodName                   = "/Scailo.PurchasesOrdersService/AddPurchaseOrderContact"
	PurchasesOrdersService_ApprovePurchaseOrderContact_FullMethodName               = "/Scailo.PurchasesOrdersService/ApprovePurchaseOrderContact"
	PurchasesOrdersService_DeletePurchaseOrderContact_FullMethodName                = "/Scailo.PurchasesOrdersService/DeletePurchaseOrderContact"
	PurchasesOrdersService_ViewPurchaseOrderContactByID_FullMethodName              = "/Scailo.PurchasesOrdersService/ViewPurchaseOrderContactByID"
	PurchasesOrdersService_ViewPurchaseOrderContacts_FullMethodName                 = "/Scailo.PurchasesOrdersService/ViewPurchaseOrderContacts"
	PurchasesOrdersService_AddPurchaseOrderReference_FullMethodName                 = "/Scailo.PurchasesOrdersService/AddPurchaseOrderReference"
	PurchasesOrdersService_ApprovePurchaseOrderReference_FullMethodName             = "/Scailo.PurchasesOrdersService/ApprovePurchaseOrderReference"
	PurchasesOrdersService_DeletePurchaseOrderReference_FullMethodName              = "/Scailo.PurchasesOrdersService/DeletePurchaseOrderReference"
	PurchasesOrdersService_ViewPurchaseOrderReferenceByID_FullMethodName            = "/Scailo.PurchasesOrdersService/ViewPurchaseOrderReferenceByID"
	PurchasesOrdersService_ViewPurchaseOrderReferences_FullMethodName               = "/Scailo.PurchasesOrdersService/ViewPurchaseOrderReferences"
	PurchasesOrdersService_ViewByID_FullMethodName                                  = "/Scailo.PurchasesOrdersService/ViewByID"
	PurchasesOrdersService_ViewByUUID_FullMethodName                                = "/Scailo.PurchasesOrdersService/ViewByUUID"
	PurchasesOrdersService_ViewByReferenceID_FullMethodName                         = "/Scailo.PurchasesOrdersService/ViewByReferenceID"
	PurchasesOrdersService_ViewEssentialByID_FullMethodName                         = "/Scailo.PurchasesOrdersService/ViewEssentialByID"
	PurchasesOrdersService_ViewEssentialByUUID_FullMethodName                       = "/Scailo.PurchasesOrdersService/ViewEssentialByUUID"
	PurchasesOrdersService_ViewFromIDs_FullMethodName                               = "/Scailo.PurchasesOrdersService/ViewFromIDs"
	PurchasesOrdersService_ViewAncillaryParametersByUUID_FullMethodName             = "/Scailo.PurchasesOrdersService/ViewAncillaryParametersByUUID"
	PurchasesOrdersService_ViewAll_FullMethodName                                   = "/Scailo.PurchasesOrdersService/ViewAll"
	PurchasesOrdersService_ViewAllForEntityUUID_FullMethodName                      = "/Scailo.PurchasesOrdersService/ViewAllForEntityUUID"
	PurchasesOrdersService_ViewWithPagination_FullMethodName                        = "/Scailo.PurchasesOrdersService/ViewWithPagination"
	PurchasesOrdersService_ViewAmendments_FullMethodName                            = "/Scailo.PurchasesOrdersService/ViewAmendments"
	PurchasesOrdersService_ViewInventoryStatistics_FullMethodName                   = "/Scailo.PurchasesOrdersService/ViewInventoryStatistics"
	PurchasesOrdersService_ViewBillingStatistics_FullMethodName                     = "/Scailo.PurchasesOrdersService/ViewBillingStatistics"
	PurchasesOrdersService_ViewInventoryMatch_FullMethodName                        = "/Scailo.PurchasesOrdersService/ViewInventoryMatch"
	PurchasesOrdersService_ViewPriceMatch_FullMethodName                            = "/Scailo.PurchasesOrdersService/ViewPriceMatch"
	PurchasesOrdersService_ViewProspectiveFamilies_FullMethodName                   = "/Scailo.PurchasesOrdersService/ViewProspectiveFamilies"
	PurchasesOrdersService_FilterProspectiveFamilies_FullMethodName                 = "/Scailo.PurchasesOrdersService/FilterProspectiveFamilies"
	PurchasesOrdersService_ViewProspectivePurchaseOrderItem_FullMethodName          = "/Scailo.PurchasesOrdersService/ViewProspectivePurchaseOrderItem"
	PurchasesOrdersService_IsDownloadable_FullMethodName                            = "/Scailo.PurchasesOrdersService/IsDownloadable"
	PurchasesOrdersService_DownloadByUUID_FullMethodName                            = "/Scailo.PurchasesOrdersService/DownloadByUUID"
	PurchasesOrdersService_SearchAll_FullMethodName                                 = "/Scailo.PurchasesOrdersService/SearchAll"
	PurchasesOrdersService_Filter_FullMethodName                                    = "/Scailo.PurchasesOrdersService/Filter"
	PurchasesOrdersService_CountInStatus_FullMethodName                             = "/Scailo.PurchasesOrdersService/CountInStatus"
	PurchasesOrdersService_Count_FullMethodName                                     = "/Scailo.PurchasesOrdersService/Count"
	PurchasesOrdersService_AccruedValue_FullMethodName                              = "/Scailo.PurchasesOrdersService/AccruedValue"
	PurchasesOrdersService_DownloadAsCSV_FullMethodName                             = "/Scailo.PurchasesOrdersService/DownloadAsCSV"
)

// PurchasesOrdersServiceClient is the client API for PurchasesOrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each purchase order
type PurchasesOrdersServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *PurchasesOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *PurchasesOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *PurchasesOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *PurchasesOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the purchase order
	Autofill(ctx context.Context, in *PurchasesOrdersServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Amend the purchase order and send for revision
	Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add an item to a purchase order
	AddPurchaseOrderItem(ctx context.Context, in *PurchasesOrdersServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a purchase order
	ModifyPurchaseOrderItem(ctx context.Context, in *PurchasesOrdersServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a purchase order
	ApprovePurchaseOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a purchase order
	DeletePurchaseOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a purchase order
	ReorderPurchaseOrderItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Purchase Order Item by ID
	ViewPurchaseOrderItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrderItem, error)
	// View Purchase Order Item's price after factoring in the discount
	ViewPurchaseOrderItemPrice(ctx context.Context, in *PurchaseOrderItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PriceResponse, error)
	// View approved purchase order items for given purchase order ID
	ViewApprovedPurchaseOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchaseOrderItemsList, error)
	// View unapproved purchase order items for given purchase order ID
	ViewUnapprovedPurchaseOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchaseOrderItemsList, error)
	// View the history of the purchase order item
	ViewPurchaseOrderItemHistory(ctx context.Context, in *PurchaseOrderItemHistoryRequest, opts ...grpc.CallOption) (*PurchaseOrderItemsList, error)
	// View approved purchase order items for given purchase order ID with pagination
	ViewPaginatedApprovedPurchaseOrderItems(ctx context.Context, in *PurchaseOrderItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesOrdersServicePaginatedItemsResponse, error)
	// View unapproved purchase order items for given purchase order ID with pagination
	ViewPaginatedUnapprovedPurchaseOrderItems(ctx context.Context, in *PurchaseOrderItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesOrdersServicePaginatedItemsResponse, error)
	// Search through purchase order items with pagination
	SearchItemsWithPagination(ctx context.Context, in *PurchaseOrderItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesOrdersServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadPurchaseOrderItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a contact
	AddPurchaseOrderContact(ctx context.Context, in *PurchasesOrdersServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a contact
	ApprovePurchaseOrderContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a contact
	DeletePurchaseOrderContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a contact for the given ID
	ViewPurchaseOrderContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrderContact, error)
	// View all contacts for given purchase order UUID
	ViewPurchaseOrderContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderContactsList, error)
	// Add a reference
	AddPurchaseOrderReference(ctx context.Context, in *PurchasesOrdersServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a reference
	ApprovePurchaseOrderReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a reference
	DeletePurchaseOrderReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a reference for the given ID
	ViewPurchaseOrderReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrderReference, error)
	// View all references for given purchase order ID
	ViewPurchaseOrderReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrderReferencesList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrder, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrder, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PurchaseOrder, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrder, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrder, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PurchasesOrdersList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PurchasesOrdersList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasesOrdersList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *PurchasesOrdersServicePaginationReq, opts ...grpc.CallOption) (*PurchasesOrdersServicePaginationResponse, error)
	// View all the amendments made
	ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error)
	// View Inventory Statistics of Purchase Order
	ViewInventoryStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderInventoryStatistics, error)
	// View Billing Statistics of Purchase Order
	ViewBillingStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderBillingStatistics, error)
	// View Inventory Match of all the families within a Purchase Order
	ViewInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderInventoryMatchList, error)
	// View Price Match of all the families within a Purchase Order (between the purchase order, and the corresponding vendor invoices, and any corresponding debit notes)
	ViewPriceMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderPriceMatchList, error)
	// View prospective families for the given purchase order
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective purchase order item info for the given family ID and purchase order ID
	ViewProspectivePurchaseOrderItem(ctx context.Context, in *PurchaseOrderItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PurchasesOrdersServiceItemCreateRequest, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download purchase order with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *PurchasesOrdersServiceSearchAllReq, opts ...grpc.CallOption) (*PurchasesOrdersList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *PurchasesOrdersServiceFilterReq, opts ...grpc.CallOption) (*PurchasesOrdersList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *PurchasesOrdersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// Returns the sum of the total value of all the records that match the given criteria
	AccruedValue(ctx context.Context, in *PurchasesOrdersServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *PurchasesOrdersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type purchasesOrdersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchasesOrdersServiceClient(cc grpc.ClientConnInterface) PurchasesOrdersServiceClient {
	return &purchasesOrdersServiceClient{cc}
}

func (c *purchasesOrdersServiceClient) Create(ctx context.Context, in *PurchasesOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Draft(ctx context.Context, in *PurchasesOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) DraftUpdate(ctx context.Context, in *PurchasesOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) RevisionUpdate(ctx context.Context, in *PurchasesOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Autofill(ctx context.Context, in *PurchasesOrdersServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) AddPurchaseOrderItem(ctx context.Context, in *PurchasesOrdersServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_AddPurchaseOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ModifyPurchaseOrderItem(ctx context.Context, in *PurchasesOrdersServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ModifyPurchaseOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ApprovePurchaseOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ApprovePurchaseOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) DeletePurchaseOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_DeletePurchaseOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ReorderPurchaseOrderItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ReorderPurchaseOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewPurchaseOrderItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrderItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderItem)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewPurchaseOrderItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewPurchaseOrderItemPrice(ctx context.Context, in *PurchaseOrderItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewPurchaseOrderItemPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewApprovedPurchaseOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchaseOrderItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderItemsList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewApprovedPurchaseOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewUnapprovedPurchaseOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchaseOrderItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderItemsList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewUnapprovedPurchaseOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewPurchaseOrderItemHistory(ctx context.Context, in *PurchaseOrderItemHistoryRequest, opts ...grpc.CallOption) (*PurchaseOrderItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderItemsList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewPurchaseOrderItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewPaginatedApprovedPurchaseOrderItems(ctx context.Context, in *PurchaseOrderItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewPaginatedApprovedPurchaseOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewPaginatedUnapprovedPurchaseOrderItems(ctx context.Context, in *PurchaseOrderItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewPaginatedUnapprovedPurchaseOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) SearchItemsWithPagination(ctx context.Context, in *PurchaseOrderItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) UploadPurchaseOrderItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_UploadPurchaseOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) AddPurchaseOrderContact(ctx context.Context, in *PurchasesOrdersServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_AddPurchaseOrderContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ApprovePurchaseOrderContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ApprovePurchaseOrderContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) DeletePurchaseOrderContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_DeletePurchaseOrderContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewPurchaseOrderContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrderContact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderContact)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewPurchaseOrderContactByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewPurchaseOrderContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderContactsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderContactsList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewPurchaseOrderContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) AddPurchaseOrderReference(ctx context.Context, in *PurchasesOrdersServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_AddPurchaseOrderReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ApprovePurchaseOrderReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ApprovePurchaseOrderReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) DeletePurchaseOrderReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_DeletePurchaseOrderReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewPurchaseOrderReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrderReference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderReference)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewPurchaseOrderReferenceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewPurchaseOrderReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrderReferencesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderReferencesList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewPurchaseOrderReferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrder)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrder)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PurchaseOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrder)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrder)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrder)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PurchasesOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesOrdersList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderAncillaryParameters)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PurchasesOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesOrdersList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasesOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesOrdersList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewWithPagination(ctx context.Context, in *PurchasesOrdersServicePaginationReq, opts ...grpc.CallOption) (*PurchasesOrdersServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesOrdersServicePaginationResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendmentLogsList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewInventoryStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderInventoryStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderInventoryStatistics)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewInventoryStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewBillingStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderBillingStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderBillingStatistics)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewBillingStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderInventoryMatchList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderInventoryMatchList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewInventoryMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewPriceMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseOrderPriceMatchList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderPriceMatchList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewPriceMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) ViewProspectivePurchaseOrderItem(ctx context.Context, in *PurchaseOrderItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PurchasesOrdersServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesOrdersServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_ViewProspectivePurchaseOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) SearchAll(ctx context.Context, in *PurchasesOrdersServiceSearchAllReq, opts ...grpc.CallOption) (*PurchasesOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesOrdersList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Filter(ctx context.Context, in *PurchasesOrdersServiceFilterReq, opts ...grpc.CallOption) (*PurchasesOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesOrdersList)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) Count(ctx context.Context, in *PurchasesOrdersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) AccruedValue(ctx context.Context, in *PurchasesOrdersServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_AccruedValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesOrdersServiceClient) DownloadAsCSV(ctx context.Context, in *PurchasesOrdersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesOrdersService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchasesOrdersService
