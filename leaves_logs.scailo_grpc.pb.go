// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: leaves_logs.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeavesLogsService_Filter_FullMethodName              = "/Scailo.LeavesLogsService/Filter"
	LeavesLogsService_CountEmployeeLeaves_FullMethodName = "/Scailo.LeavesLogsService/CountEmployeeLeaves"
	LeavesLogsService_Count_FullMethodName               = "/Scailo.LeavesLogsService/Count"
)

// LeavesLogsServiceClient is the client API for LeavesLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each record
type LeavesLogsServiceClient interface {
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *LeavesLogsServiceFilterReq, opts ...grpc.CallOption) (*LeavesLogsList, error)
	// Count leaves of employee
	CountEmployeeLeaves(ctx context.Context, in *LeavesLogsCountEmployeeLeavesRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *LeavesLogsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
}

type leavesLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeavesLogsServiceClient(cc grpc.ClientConnInterface) LeavesLogsServiceClient {
	return &leavesLogsServiceClient{cc}
}

func (c *leavesLogsServiceClient) Filter(ctx context.Context, in *LeavesLogsServiceFilterReq, opts ...grpc.CallOption) (*LeavesLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesLogsList)
	err := c.cc.Invoke(ctx, LeavesLogsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesLogsServiceClient) CountEmployeeLeaves(ctx context.Context, in *LeavesLogsCountEmployeeLeavesRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, LeavesLogsService_CountEmployeeLeaves_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesLogsServiceClient) Count(ctx context.Context, in *LeavesLogsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, LeavesLogsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeavesLogsService
