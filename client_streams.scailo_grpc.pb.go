// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: client_streams.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientStreamsService_Create_FullMethodName                                  = "/Scailo.ClientStreamsService/Create"
	ClientStreamsService_Update_FullMethodName                                  = "/Scailo.ClientStreamsService/Update"
	ClientStreamsService_Cancel_FullMethodName                                  = "/Scailo.ClientStreamsService/Cancel"
	ClientStreamsService_Complete_FullMethodName                                = "/Scailo.ClientStreamsService/Complete"
	ClientStreamsService_Reopen_FullMethodName                                  = "/Scailo.ClientStreamsService/Reopen"
	ClientStreamsService_Repeat_FullMethodName                                  = "/Scailo.ClientStreamsService/Repeat"
	ClientStreamsService_CommentAdd_FullMethodName                              = "/Scailo.ClientStreamsService/CommentAdd"
	ClientStreamsService_AddMessage_FullMethodName                              = "/Scailo.ClientStreamsService/AddMessage"
	ClientStreamsService_SaveMessageForLater_FullMethodName                     = "/Scailo.ClientStreamsService/SaveMessageForLater"
	ClientStreamsService_DeleteMessage_FullMethodName                           = "/Scailo.ClientStreamsService/DeleteMessage"
	ClientStreamsService_ViewMessageByUUID_FullMethodName                       = "/Scailo.ClientStreamsService/ViewMessageByUUID"
	ClientStreamsService_ViewMessages_FullMethodName                            = "/Scailo.ClientStreamsService/ViewMessages"
	ClientStreamsService_ViewPaginatedMessages_FullMethodName                   = "/Scailo.ClientStreamsService/ViewPaginatedMessages"
	ClientStreamsService_SearchMessagesWithPagination_FullMethodName            = "/Scailo.ClientStreamsService/SearchMessagesWithPagination"
	ClientStreamsService_ViewMessageReceipts_FullMethodName                     = "/Scailo.ClientStreamsService/ViewMessageReceipts"
	ClientStreamsService_AddInternalSubscriber_FullMethodName                   = "/Scailo.ClientStreamsService/AddInternalSubscriber"
	ClientStreamsService_DeleteInternalSubscriber_FullMethodName                = "/Scailo.ClientStreamsService/DeleteInternalSubscriber"
	ClientStreamsService_ViewInternalSubscriberByID_FullMethodName              = "/Scailo.ClientStreamsService/ViewInternalSubscriberByID"
	ClientStreamsService_ViewInternalSubscribers_FullMethodName                 = "/Scailo.ClientStreamsService/ViewInternalSubscribers"
	ClientStreamsService_ImportInternalSubscribersFromTeam_FullMethodName       = "/Scailo.ClientStreamsService/ImportInternalSubscribersFromTeam"
	ClientStreamsService_ImportInternalSubscribersFromDepartment_FullMethodName = "/Scailo.ClientStreamsService/ImportInternalSubscribersFromDepartment"
	ClientStreamsService_AddClientSubscriber_FullMethodName                     = "/Scailo.ClientStreamsService/AddClientSubscriber"
	ClientStreamsService_DeleteClientSubscriber_FullMethodName                  = "/Scailo.ClientStreamsService/DeleteClientSubscriber"
	ClientStreamsService_ViewClientSubscriberByID_FullMethodName                = "/Scailo.ClientStreamsService/ViewClientSubscriberByID"
	ClientStreamsService_ViewClientSubscribers_FullMethodName                   = "/Scailo.ClientStreamsService/ViewClientSubscribers"
	ClientStreamsService_ViewByID_FullMethodName                                = "/Scailo.ClientStreamsService/ViewByID"
	ClientStreamsService_ViewByUUID_FullMethodName                              = "/Scailo.ClientStreamsService/ViewByUUID"
	ClientStreamsService_ViewEssentialByID_FullMethodName                       = "/Scailo.ClientStreamsService/ViewEssentialByID"
	ClientStreamsService_ViewEssentialByUUID_FullMethodName                     = "/Scailo.ClientStreamsService/ViewEssentialByUUID"
	ClientStreamsService_ViewFromIDs_FullMethodName                             = "/Scailo.ClientStreamsService/ViewFromIDs"
	ClientStreamsService_ViewAll_FullMethodName                                 = "/Scailo.ClientStreamsService/ViewAll"
	ClientStreamsService_ViewAllForEntityUUID_FullMethodName                    = "/Scailo.ClientStreamsService/ViewAllForEntityUUID"
	ClientStreamsService_ViewWithPagination_FullMethodName                      = "/Scailo.ClientStreamsService/ViewWithPagination"
	ClientStreamsService_SearchAll_FullMethodName                               = "/Scailo.ClientStreamsService/SearchAll"
	ClientStreamsService_Filter_FullMethodName                                  = "/Scailo.ClientStreamsService/Filter"
	ClientStreamsService_Count_FullMethodName                                   = "/Scailo.ClientStreamsService/Count"
	ClientStreamsService_DownloadAsCSV_FullMethodName                           = "/Scailo.ClientStreamsService/DownloadAsCSV"
)

// ClientStreamsServiceClient is the client API for ClientStreamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each client stream
type ClientStreamsServiceClient interface {
	// Create
	Create(ctx context.Context, in *ClientStreamsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Update
	Update(ctx context.Context, in *ClientStreamsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Cancel
	Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Add a message to an client stream
	AddMessage(ctx context.Context, in *ClientStreamsServiceMessageCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Saves a message for viewing it later
	SaveMessageForLater(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Delete a message in an client stream
	DeleteMessage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// View Client Stream Message by UUID
	ViewMessageByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamMessage, error)
	// View all messages for given client stream UUID
	ViewMessages(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamMessagesList, error)
	// View client stream messages for given client stream ID with pagination
	ViewPaginatedMessages(ctx context.Context, in *ClientStreamMessagesSearchRequest, opts ...grpc.CallOption) (*ClientStreamsServicePaginatedMessagesResponse, error)
	// Search through client stream messages with pagination
	SearchMessagesWithPagination(ctx context.Context, in *ClientStreamMessagesSearchRequest, opts ...grpc.CallOption) (*ClientStreamsServicePaginatedMessagesResponse, error)
	// View all receipts for the given message UUID
	ViewMessageReceipts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamMessageReceiptsList, error)
	// Add an internal subscriber
	AddInternalSubscriber(ctx context.Context, in *ClientStreamsServiceInternalSubscriberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an internal subscriber
	DeleteInternalSubscriber(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View an internal subscriber for the given ID
	ViewInternalSubscriberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientStreamInternalSubscriber, error)
	// View all internal subscribers for given client stream UUID
	ViewInternalSubscribers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamInternalSubscribersList, error)
	// Import users as internal subscribers from team and returns the ID of the client stream
	ImportInternalSubscribersFromTeam(ctx context.Context, in *ClientStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Import users as internal subscribers from department and returns the ID of the client stream
	ImportInternalSubscribersFromDepartment(ctx context.Context, in *ClientStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a client subscriber
	AddClientSubscriber(ctx context.Context, in *ClientStreamsServiceClientSubscriberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a client subscriber
	DeleteClientSubscriber(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View client subscriber for the given ID
	ViewClientSubscriberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientStreamClientSubscriber, error)
	// View all client subscribers for given client stream UUID
	ViewClientSubscribers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamClientSubscribersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientStream, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStream, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientStream, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStream, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ClientStreamsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ClientStreamsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ClientStreamsServicePaginationReq, opts ...grpc.CallOption) (*ClientStreamsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ClientStreamsServiceSearchAllReq, opts ...grpc.CallOption) (*ClientStreamsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ClientStreamsServiceFilterReq, opts ...grpc.CallOption) (*ClientStreamsList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ClientStreamsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request
	DownloadAsCSV(ctx context.Context, in *ClientStreamsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type clientStreamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamsServiceClient(cc grpc.ClientConnInterface) ClientStreamsServiceClient {
	return &clientStreamsServiceClient{cc}
}

func (c *clientStreamsServiceClient) Create(ctx context.Context, in *ClientStreamsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ClientStreamsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) Update(ctx context.Context, in *ClientStreamsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ClientStreamsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ClientStreamsService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ClientStreamsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ClientStreamsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ClientStreamsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ClientStreamsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) AddMessage(ctx context.Context, in *ClientStreamsServiceMessageCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ClientStreamsService_AddMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) SaveMessageForLater(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ClientStreamsService_SaveMessageForLater_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) DeleteMessage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ClientStreamsService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewMessageByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamMessage)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewMessageByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewMessages(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamMessagesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamMessagesList)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewPaginatedMessages(ctx context.Context, in *ClientStreamMessagesSearchRequest, opts ...grpc.CallOption) (*ClientStreamsServicePaginatedMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamsServicePaginatedMessagesResponse)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewPaginatedMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) SearchMessagesWithPagination(ctx context.Context, in *ClientStreamMessagesSearchRequest, opts ...grpc.CallOption) (*ClientStreamsServicePaginatedMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamsServicePaginatedMessagesResponse)
	err := c.cc.Invoke(ctx, ClientStreamsService_SearchMessagesWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewMessageReceipts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamMessageReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamMessageReceiptsList)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewMessageReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) AddInternalSubscriber(ctx context.Context, in *ClientStreamsServiceInternalSubscriberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientStreamsService_AddInternalSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) DeleteInternalSubscriber(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientStreamsService_DeleteInternalSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewInternalSubscriberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientStreamInternalSubscriber, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamInternalSubscriber)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewInternalSubscriberByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewInternalSubscribers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamInternalSubscribersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamInternalSubscribersList)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewInternalSubscribers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ImportInternalSubscribersFromTeam(ctx context.Context, in *ClientStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientStreamsService_ImportInternalSubscribersFromTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ImportInternalSubscribersFromDepartment(ctx context.Context, in *ClientStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientStreamsService_ImportInternalSubscribersFromDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) AddClientSubscriber(ctx context.Context, in *ClientStreamsServiceClientSubscriberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientStreamsService_AddClientSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) DeleteClientSubscriber(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientStreamsService_DeleteClientSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewClientSubscriberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientStreamClientSubscriber, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamClientSubscriber)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewClientSubscriberByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewClientSubscribers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamClientSubscribersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamClientSubscribersList)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewClientSubscribers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStream)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStream)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStream)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStream)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ClientStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamsList)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ClientStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamsList)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamsList)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) ViewWithPagination(ctx context.Context, in *ClientStreamsServicePaginationReq, opts ...grpc.CallOption) (*ClientStreamsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamsServicePaginationResponse)
	err := c.cc.Invoke(ctx, ClientStreamsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) SearchAll(ctx context.Context, in *ClientStreamsServiceSearchAllReq, opts ...grpc.CallOption) (*ClientStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamsList)
	err := c.cc.Invoke(ctx, ClientStreamsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) Filter(ctx context.Context, in *ClientStreamsServiceFilterReq, opts ...grpc.CallOption) (*ClientStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStreamsList)
	err := c.cc.Invoke(ctx, ClientStreamsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) Count(ctx context.Context, in *ClientStreamsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ClientStreamsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStreamsServiceClient) DownloadAsCSV(ctx context.Context, in *ClientStreamsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ClientStreamsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientStreamsService
