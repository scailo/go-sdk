// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: tax_groups.scailo.proto

package sdk

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the available categories for a tax group
type TAX_GROUP_CATEGORY int32

const (
	// The default category, and is useful only for filter and search queries when the category needs to be disregarded
	TAX_GROUP_CATEGORY_TAX_GROUP_CATEGORY_ANY_UNSPECIFIED TAX_GROUP_CATEGORY = 0
	// Denotes that the tax group belongs to the general category (applicable on purchase and sales)
	TAX_GROUP_CATEGORY_TAX_GROUP_CATEGORY_GENERAL TAX_GROUP_CATEGORY = 1
	// Denotes that the tax group belongs to the payroll category (applicable when computing payroll)
	TAX_GROUP_CATEGORY_TAX_GROUP_CATEGORY_PAYROLL TAX_GROUP_CATEGORY = 2
	// Denotes that the tax group belongs to the cumulative excess on goods category (applicable when calculating the excess tax on goods)
	TAX_GROUP_CATEGORY_TAX_GROUP_CATEGORY_CUMULATIVE_EXCESS_ON_GOODS TAX_GROUP_CATEGORY = 3
)

// Enum value maps for TAX_GROUP_CATEGORY.
var (
	TAX_GROUP_CATEGORY_name = map[int32]string{
		0: "TAX_GROUP_CATEGORY_ANY_UNSPECIFIED",
		1: "TAX_GROUP_CATEGORY_GENERAL",
		2: "TAX_GROUP_CATEGORY_PAYROLL",
		3: "TAX_GROUP_CATEGORY_CUMULATIVE_EXCESS_ON_GOODS",
	}
	TAX_GROUP_CATEGORY_value = map[string]int32{
		"TAX_GROUP_CATEGORY_ANY_UNSPECIFIED":            0,
		"TAX_GROUP_CATEGORY_GENERAL":                    1,
		"TAX_GROUP_CATEGORY_PAYROLL":                    2,
		"TAX_GROUP_CATEGORY_CUMULATIVE_EXCESS_ON_GOODS": 3,
	}
)

func (x TAX_GROUP_CATEGORY) Enum() *TAX_GROUP_CATEGORY {
	p := new(TAX_GROUP_CATEGORY)
	*p = x
	return p
}

func (x TAX_GROUP_CATEGORY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TAX_GROUP_CATEGORY) Descriptor() protoreflect.EnumDescriptor {
	return file_tax_groups_scailo_proto_enumTypes[0].Descriptor()
}

func (TAX_GROUP_CATEGORY) Type() protoreflect.EnumType {
	return &file_tax_groups_scailo_proto_enumTypes[0]
}

func (x TAX_GROUP_CATEGORY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TAX_GROUP_CATEGORY.Descriptor instead.
func (TAX_GROUP_CATEGORY) EnumDescriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{0}
}

// Describes the available sort keys
type TAX_GROUP_SORT_KEY int32

const (
	// Fetch ordered results by id
	TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_ID_UNSPECIFIED TAX_GROUP_SORT_KEY = 0
	// Fetch ordered results by the creation timestamp
	TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_CREATED_AT TAX_GROUP_SORT_KEY = 1
	// Fetch ordered results by the modified timestamp
	TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_MODIFIED_AT TAX_GROUP_SORT_KEY = 2
	// Fetch ordered results by the approved on timestamp
	TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_APPROVED_ON TAX_GROUP_SORT_KEY = 3
	// Fetch ordered results by the approved by field
	TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_APPROVED_BY TAX_GROUP_SORT_KEY = 4
	// Fetch ordered results by the approver's role ID
	TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_APPROVER_ROLE_ID TAX_GROUP_SORT_KEY = 5
	// Fetch ordered results by the name
	TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_NAME TAX_GROUP_SORT_KEY = 10
	// Fetch ordered results by the code
	TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_CODE TAX_GROUP_SORT_KEY = 11
)

// Enum value maps for TAX_GROUP_SORT_KEY.
var (
	TAX_GROUP_SORT_KEY_name = map[int32]string{
		0:  "TAX_GROUP_SORT_KEY_ID_UNSPECIFIED",
		1:  "TAX_GROUP_SORT_KEY_CREATED_AT",
		2:  "TAX_GROUP_SORT_KEY_MODIFIED_AT",
		3:  "TAX_GROUP_SORT_KEY_APPROVED_ON",
		4:  "TAX_GROUP_SORT_KEY_APPROVED_BY",
		5:  "TAX_GROUP_SORT_KEY_APPROVER_ROLE_ID",
		10: "TAX_GROUP_SORT_KEY_NAME",
		11: "TAX_GROUP_SORT_KEY_CODE",
	}
	TAX_GROUP_SORT_KEY_value = map[string]int32{
		"TAX_GROUP_SORT_KEY_ID_UNSPECIFIED":   0,
		"TAX_GROUP_SORT_KEY_CREATED_AT":       1,
		"TAX_GROUP_SORT_KEY_MODIFIED_AT":      2,
		"TAX_GROUP_SORT_KEY_APPROVED_ON":      3,
		"TAX_GROUP_SORT_KEY_APPROVED_BY":      4,
		"TAX_GROUP_SORT_KEY_APPROVER_ROLE_ID": 5,
		"TAX_GROUP_SORT_KEY_NAME":             10,
		"TAX_GROUP_SORT_KEY_CODE":             11,
	}
)

func (x TAX_GROUP_SORT_KEY) Enum() *TAX_GROUP_SORT_KEY {
	p := new(TAX_GROUP_SORT_KEY)
	*p = x
	return p
}

func (x TAX_GROUP_SORT_KEY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TAX_GROUP_SORT_KEY) Descriptor() protoreflect.EnumDescriptor {
	return file_tax_groups_scailo_proto_enumTypes[1].Descriptor()
}

func (TAX_GROUP_SORT_KEY) Type() protoreflect.EnumType {
	return &file_tax_groups_scailo_proto_enumTypes[1]
}

func (x TAX_GROUP_SORT_KEY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TAX_GROUP_SORT_KEY.Descriptor instead.
func (TAX_GROUP_SORT_KEY) EnumDescriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{1}
}

// Describes the groups necessary to create a record
type TaxGroupsServiceCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TaxGroups a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// TaxGroups any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,2,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The name of the tax group
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The unique code by which the tax group is classified
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The category of the tax group
	Category TAX_GROUP_CATEGORY `protobuf:"varint,11,opt,name=category,proto3,enum=Scailo.TAX_GROUP_CATEGORY" json:"category,omitempty"`
	// The description of the tax group
	Description   string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsServiceCreateRequest) Reset() {
	*x = TaxGroupsServiceCreateRequest{}
	mi := &file_tax_groups_scailo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsServiceCreateRequest) ProtoMessage() {}

func (x *TaxGroupsServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*TaxGroupsServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{0}
}

func (x *TaxGroupsServiceCreateRequest) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxGroupsServiceCreateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *TaxGroupsServiceCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxGroupsServiceCreateRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaxGroupsServiceCreateRequest) GetCategory() TAX_GROUP_CATEGORY {
	if x != nil {
		return x.Category
	}
	return TAX_GROUP_CATEGORY_TAX_GROUP_CATEGORY_ANY_UNSPECIFIED
}

func (x *TaxGroupsServiceCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the groups necessary to update a record
type TaxGroupsServiceUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TaxGroups any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,1,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The ID of the record that needs to be updated
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Optional boolean value that denotes if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
	NotifyUsers bool `protobuf:"varint,3,opt,name=notify_users,json=notifyUsers,proto3" json:"notify_users,omitempty"`
	// The name of the tax group
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The unique code by which the tax group is classified
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The description of the tax group
	Description   string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsServiceUpdateRequest) Reset() {
	*x = TaxGroupsServiceUpdateRequest{}
	mi := &file_tax_groups_scailo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsServiceUpdateRequest) ProtoMessage() {}

func (x *TaxGroupsServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*TaxGroupsServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{1}
}

func (x *TaxGroupsServiceUpdateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *TaxGroupsServiceUpdateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxGroupsServiceUpdateRequest) GetNotifyUsers() bool {
	if x != nil {
		return x.NotifyUsers
	}
	return false
}

func (x *TaxGroupsServiceUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxGroupsServiceUpdateRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaxGroupsServiceUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the groups that are part of a standard response
type TaxGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TaxGroups a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// TaxGroups the metadata of this tax group
	Metadata *EmployeeMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// TaxGroups the approval metadata
	ApprovalMetadata *ApprovalMetadata `protobuf:"bytes,3,opt,name=approval_metadata,json=approvalMetadata,proto3" json:"approval_metadata,omitempty"`
	// The status of this tax group
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,4,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// TaxGroups the logs of every operation performed on this tax group
	Logs []*LogbookLogConciseSLC `protobuf:"bytes,5,rep,name=logs,proto3" json:"logs,omitempty"`
	// The name of the tax group
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The unique code by which the tax group is classified
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The category of the tax group
	Category TAX_GROUP_CATEGORY `protobuf:"varint,11,opt,name=category,proto3,enum=Scailo.TAX_GROUP_CATEGORY" json:"category,omitempty"`
	// The description of the tax group
	Description string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// The list of associated tax group items
	List []*TaxGroupItem `protobuf:"bytes,30,rep,name=list,proto3" json:"list,omitempty"`
	// The list of associated tax parameters
	TaxParams []*TaxParam `protobuf:"bytes,50,rep,name=tax_params,json=taxParams,proto3" json:"tax_params,omitempty"`
	// The cumulative tax percentage
	CumulativeTaxPercentage float64 `protobuf:"fixed64,60,opt,name=cumulative_tax_percentage,json=cumulativeTaxPercentage,proto3" json:"cumulative_tax_percentage,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TaxGroup) Reset() {
	*x = TaxGroup{}
	mi := &file_tax_groups_scailo_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroup) ProtoMessage() {}

func (x *TaxGroup) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroup.ProtoReflect.Descriptor instead.
func (*TaxGroup) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{2}
}

func (x *TaxGroup) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxGroup) GetMetadata() *EmployeeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaxGroup) GetApprovalMetadata() *ApprovalMetadata {
	if x != nil {
		return x.ApprovalMetadata
	}
	return nil
}

func (x *TaxGroup) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *TaxGroup) GetLogs() []*LogbookLogConciseSLC {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TaxGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxGroup) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaxGroup) GetCategory() TAX_GROUP_CATEGORY {
	if x != nil {
		return x.Category
	}
	return TAX_GROUP_CATEGORY_TAX_GROUP_CATEGORY_ANY_UNSPECIFIED
}

func (x *TaxGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaxGroup) GetList() []*TaxGroupItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TaxGroup) GetTaxParams() []*TaxParam {
	if x != nil {
		return x.TaxParams
	}
	return nil
}

func (x *TaxGroup) GetCumulativeTaxPercentage() float64 {
	if x != nil {
		return x.CumulativeTaxPercentage
	}
	return 0
}

// Describes the message consisting of the list of records
type TaxGroupsList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of records
	List          []*TaxGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsList) Reset() {
	*x = TaxGroupsList{}
	mi := &file_tax_groups_scailo_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsList) ProtoMessage() {}

func (x *TaxGroupsList) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsList.ProtoReflect.Descriptor instead.
func (*TaxGroupsList) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{3}
}

func (x *TaxGroupsList) GetList() []*TaxGroup {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes a pagination request to retrieve records
type TaxGroupsServicePaginationReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey TAX_GROUP_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.TAX_GROUP_SORT_KEY" json:"sort_key,omitempty"`
	// The status of this tax group
	Status        STANDARD_LIFECYCLE_STATUS `protobuf:"varint,6,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsServicePaginationReq) Reset() {
	*x = TaxGroupsServicePaginationReq{}
	mi := &file_tax_groups_scailo_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsServicePaginationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsServicePaginationReq) ProtoMessage() {}

func (x *TaxGroupsServicePaginationReq) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsServicePaginationReq.ProtoReflect.Descriptor instead.
func (*TaxGroupsServicePaginationReq) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{4}
}

func (x *TaxGroupsServicePaginationReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *TaxGroupsServicePaginationReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaxGroupsServicePaginationReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaxGroupsServicePaginationReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *TaxGroupsServicePaginationReq) GetSortKey() TAX_GROUP_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_ID_UNSPECIFIED
}

func (x *TaxGroupsServicePaginationReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

// Describes the response to a pagination request
type TaxGroupsServicePaginationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of records in this payload
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The total number of records that are available
	Total uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// The list of records
	Payload       []*TaxGroup `protobuf:"bytes,4,rep,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsServicePaginationResponse) Reset() {
	*x = TaxGroupsServicePaginationResponse{}
	mi := &file_tax_groups_scailo_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsServicePaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsServicePaginationResponse) ProtoMessage() {}

func (x *TaxGroupsServicePaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsServicePaginationResponse.ProtoReflect.Descriptor instead.
func (*TaxGroupsServicePaginationResponse) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{5}
}

func (x *TaxGroupsServicePaginationResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaxGroupsServicePaginationResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaxGroupsServicePaginationResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaxGroupsServicePaginationResponse) GetPayload() []*TaxGroup {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Describes the base request payload of a filter search
type TaxGroupsServiceFilterReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey TAX_GROUP_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.TAX_GROUP_SORT_KEY" json:"sort_key,omitempty"`
	// The minimum timestamp that needs to be considered to filter by creation
	CreationTimestampStart uint64 `protobuf:"varint,101,opt,name=creation_timestamp_start,json=creationTimestampStart,proto3" json:"creation_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by creation
	CreationTimestampEnd uint64 `protobuf:"varint,102,opt,name=creation_timestamp_end,json=creationTimestampEnd,proto3" json:"creation_timestamp_end,omitempty"`
	// The minimum timestamp that needs to be considered to filter by modification
	ModificationTimestampStart uint64 `protobuf:"varint,103,opt,name=modification_timestamp_start,json=modificationTimestampStart,proto3" json:"modification_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by modification
	ModificationTimestampEnd uint64 `protobuf:"varint,104,opt,name=modification_timestamp_end,json=modificationTimestampEnd,proto3" json:"modification_timestamp_end,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,8,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// The status of this tax group
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// The start range of approved timestamp
	ApprovedOnStart uint64 `protobuf:"varint,11,opt,name=approved_on_start,json=approvedOnStart,proto3" json:"approved_on_start,omitempty"`
	// The end range of approved timestamp
	ApprovedOnEnd uint64 `protobuf:"varint,12,opt,name=approved_on_end,json=approvedOnEnd,proto3" json:"approved_on_end,omitempty"`
	// The ID of the approver
	ApprovedByUserId uint64 `protobuf:"varint,13,opt,name=approved_by_user_id,json=approvedByUserId,proto3" json:"approved_by_user_id,omitempty"`
	// The role ID of the approver
	ApproverRoleId uint64 `protobuf:"varint,14,opt,name=approver_role_id,json=approverRoleId,proto3" json:"approver_role_id,omitempty"`
	// The name of the tax group
	Name string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// The unique code by which the location is classified
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The category of the tax group
	Category      TAX_GROUP_CATEGORY `protobuf:"varint,32,opt,name=category,proto3,enum=Scailo.TAX_GROUP_CATEGORY" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsServiceFilterReq) Reset() {
	*x = TaxGroupsServiceFilterReq{}
	mi := &file_tax_groups_scailo_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsServiceFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsServiceFilterReq) ProtoMessage() {}

func (x *TaxGroupsServiceFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsServiceFilterReq.ProtoReflect.Descriptor instead.
func (*TaxGroupsServiceFilterReq) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{6}
}

func (x *TaxGroupsServiceFilterReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *TaxGroupsServiceFilterReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaxGroupsServiceFilterReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaxGroupsServiceFilterReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *TaxGroupsServiceFilterReq) GetSortKey() TAX_GROUP_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_ID_UNSPECIFIED
}

func (x *TaxGroupsServiceFilterReq) GetCreationTimestampStart() uint64 {
	if x != nil {
		return x.CreationTimestampStart
	}
	return 0
}

func (x *TaxGroupsServiceFilterReq) GetCreationTimestampEnd() uint64 {
	if x != nil {
		return x.CreationTimestampEnd
	}
	return 0
}

func (x *TaxGroupsServiceFilterReq) GetModificationTimestampStart() uint64 {
	if x != nil {
		return x.ModificationTimestampStart
	}
	return 0
}

func (x *TaxGroupsServiceFilterReq) GetModificationTimestampEnd() uint64 {
	if x != nil {
		return x.ModificationTimestampEnd
	}
	return 0
}

func (x *TaxGroupsServiceFilterReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxGroupsServiceFilterReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *TaxGroupsServiceFilterReq) GetApprovedOnStart() uint64 {
	if x != nil {
		return x.ApprovedOnStart
	}
	return 0
}

func (x *TaxGroupsServiceFilterReq) GetApprovedOnEnd() uint64 {
	if x != nil {
		return x.ApprovedOnEnd
	}
	return 0
}

func (x *TaxGroupsServiceFilterReq) GetApprovedByUserId() uint64 {
	if x != nil {
		return x.ApprovedByUserId
	}
	return 0
}

func (x *TaxGroupsServiceFilterReq) GetApproverRoleId() uint64 {
	if x != nil {
		return x.ApproverRoleId
	}
	return 0
}

func (x *TaxGroupsServiceFilterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxGroupsServiceFilterReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaxGroupsServiceFilterReq) GetCategory() TAX_GROUP_CATEGORY {
	if x != nil {
		return x.Category
	}
	return TAX_GROUP_CATEGORY_TAX_GROUP_CATEGORY_ANY_UNSPECIFIED
}

// Describes the base request payload of a count search
type TaxGroupsServiceCountReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The minimum timestamp that needs to be considered to filter by creation
	CreationTimestampStart uint64 `protobuf:"varint,101,opt,name=creation_timestamp_start,json=creationTimestampStart,proto3" json:"creation_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by creation
	CreationTimestampEnd uint64 `protobuf:"varint,102,opt,name=creation_timestamp_end,json=creationTimestampEnd,proto3" json:"creation_timestamp_end,omitempty"`
	// The minimum timestamp that needs to be considered to filter by modification
	ModificationTimestampStart uint64 `protobuf:"varint,103,opt,name=modification_timestamp_start,json=modificationTimestampStart,proto3" json:"modification_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by modification
	ModificationTimestampEnd uint64 `protobuf:"varint,104,opt,name=modification_timestamp_end,json=modificationTimestampEnd,proto3" json:"modification_timestamp_end,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,8,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// The status of this tax group
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// The start range of approved timestamp
	ApprovedOnStart uint64 `protobuf:"varint,11,opt,name=approved_on_start,json=approvedOnStart,proto3" json:"approved_on_start,omitempty"`
	// The end range of approved timestamp
	ApprovedOnEnd uint64 `protobuf:"varint,12,opt,name=approved_on_end,json=approvedOnEnd,proto3" json:"approved_on_end,omitempty"`
	// The ID of the approver
	ApprovedByUserId uint64 `protobuf:"varint,13,opt,name=approved_by_user_id,json=approvedByUserId,proto3" json:"approved_by_user_id,omitempty"`
	// The role ID of the approver
	ApproverRoleId uint64 `protobuf:"varint,14,opt,name=approver_role_id,json=approverRoleId,proto3" json:"approver_role_id,omitempty"`
	// The name of the tax group
	Name string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// The unique code by which the location is classified
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The category of the tax group
	Category      TAX_GROUP_CATEGORY `protobuf:"varint,32,opt,name=category,proto3,enum=Scailo.TAX_GROUP_CATEGORY" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsServiceCountReq) Reset() {
	*x = TaxGroupsServiceCountReq{}
	mi := &file_tax_groups_scailo_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsServiceCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsServiceCountReq) ProtoMessage() {}

func (x *TaxGroupsServiceCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsServiceCountReq.ProtoReflect.Descriptor instead.
func (*TaxGroupsServiceCountReq) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{7}
}

func (x *TaxGroupsServiceCountReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *TaxGroupsServiceCountReq) GetCreationTimestampStart() uint64 {
	if x != nil {
		return x.CreationTimestampStart
	}
	return 0
}

func (x *TaxGroupsServiceCountReq) GetCreationTimestampEnd() uint64 {
	if x != nil {
		return x.CreationTimestampEnd
	}
	return 0
}

func (x *TaxGroupsServiceCountReq) GetModificationTimestampStart() uint64 {
	if x != nil {
		return x.ModificationTimestampStart
	}
	return 0
}

func (x *TaxGroupsServiceCountReq) GetModificationTimestampEnd() uint64 {
	if x != nil {
		return x.ModificationTimestampEnd
	}
	return 0
}

func (x *TaxGroupsServiceCountReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxGroupsServiceCountReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *TaxGroupsServiceCountReq) GetApprovedOnStart() uint64 {
	if x != nil {
		return x.ApprovedOnStart
	}
	return 0
}

func (x *TaxGroupsServiceCountReq) GetApprovedOnEnd() uint64 {
	if x != nil {
		return x.ApprovedOnEnd
	}
	return 0
}

func (x *TaxGroupsServiceCountReq) GetApprovedByUserId() uint64 {
	if x != nil {
		return x.ApprovedByUserId
	}
	return 0
}

func (x *TaxGroupsServiceCountReq) GetApproverRoleId() uint64 {
	if x != nil {
		return x.ApproverRoleId
	}
	return 0
}

func (x *TaxGroupsServiceCountReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxGroupsServiceCountReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaxGroupsServiceCountReq) GetCategory() TAX_GROUP_CATEGORY {
	if x != nil {
		return x.Category
	}
	return TAX_GROUP_CATEGORY_TAX_GROUP_CATEGORY_ANY_UNSPECIFIED
}

// Describes the request payload for performing a generic search operation on records
type TaxGroupsServiceSearchAllReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey TAX_GROUP_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.TAX_GROUP_SORT_KEY" json:"sort_key,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,6,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Limit the search space to the given status
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// Describes the key with which the search operation needs to be performed
	SearchKey string `protobuf:"bytes,11,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	// The category of the tax group
	Category      TAX_GROUP_CATEGORY `protobuf:"varint,32,opt,name=category,proto3,enum=Scailo.TAX_GROUP_CATEGORY" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsServiceSearchAllReq) Reset() {
	*x = TaxGroupsServiceSearchAllReq{}
	mi := &file_tax_groups_scailo_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsServiceSearchAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsServiceSearchAllReq) ProtoMessage() {}

func (x *TaxGroupsServiceSearchAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsServiceSearchAllReq.ProtoReflect.Descriptor instead.
func (*TaxGroupsServiceSearchAllReq) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{8}
}

func (x *TaxGroupsServiceSearchAllReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *TaxGroupsServiceSearchAllReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaxGroupsServiceSearchAllReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaxGroupsServiceSearchAllReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *TaxGroupsServiceSearchAllReq) GetSortKey() TAX_GROUP_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return TAX_GROUP_SORT_KEY_TAX_GROUP_SORT_KEY_ID_UNSPECIFIED
}

func (x *TaxGroupsServiceSearchAllReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxGroupsServiceSearchAllReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *TaxGroupsServiceSearchAllReq) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *TaxGroupsServiceSearchAllReq) GetCategory() TAX_GROUP_CATEGORY {
	if x != nil {
		return x.Category
	}
	return TAX_GROUP_CATEGORY_TAX_GROUP_CATEGORY_ANY_UNSPECIFIED
}

// Describes the parameters required to add a param to a tax group
type TaxGroupsServiceItemCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,1,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// Stores the ID of the tax group
	TaxGroupId uint64 `protobuf:"varint,10,opt,name=tax_group_id,json=taxGroupId,proto3" json:"tax_group_id,omitempty"`
	// The ID of the tax param that is a part of the tax group
	TaxParamId uint64 `protobuf:"varint,11,opt,name=tax_param_id,json=taxParamId,proto3" json:"tax_param_id,omitempty"`
	// An optional description
	Description   string `protobuf:"bytes,40,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsServiceItemCreateRequest) Reset() {
	*x = TaxGroupsServiceItemCreateRequest{}
	mi := &file_tax_groups_scailo_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsServiceItemCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsServiceItemCreateRequest) ProtoMessage() {}

func (x *TaxGroupsServiceItemCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsServiceItemCreateRequest.ProtoReflect.Descriptor instead.
func (*TaxGroupsServiceItemCreateRequest) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{9}
}

func (x *TaxGroupsServiceItemCreateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *TaxGroupsServiceItemCreateRequest) GetTaxGroupId() uint64 {
	if x != nil {
		return x.TaxGroupId
	}
	return 0
}

func (x *TaxGroupsServiceItemCreateRequest) GetTaxParamId() uint64 {
	if x != nil {
		return x.TaxParamId
	}
	return 0
}

func (x *TaxGroupsServiceItemCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the parameters required to update a param in a tax group
type TaxGroupsServiceItemUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,1,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The ID of the record
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// An optional description
	Description   string `protobuf:"bytes,40,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsServiceItemUpdateRequest) Reset() {
	*x = TaxGroupsServiceItemUpdateRequest{}
	mi := &file_tax_groups_scailo_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsServiceItemUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsServiceItemUpdateRequest) ProtoMessage() {}

func (x *TaxGroupsServiceItemUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsServiceItemUpdateRequest.ProtoReflect.Descriptor instead.
func (*TaxGroupsServiceItemUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{10}
}

func (x *TaxGroupsServiceItemUpdateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *TaxGroupsServiceItemUpdateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxGroupsServiceItemUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the parameters that constitute a param associated to a tax group
type TaxGroupItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores the metadata of this tax group
	Metadata *EmployeeMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Stores the approval metadata
	ApprovalMetadata *ApprovalMetadata `protobuf:"bytes,3,opt,name=approval_metadata,json=approvalMetadata,proto3" json:"approval_metadata,omitempty"`
	// Denotes if this record requires approval (or has been approved)
	NeedApproval bool `protobuf:"varint,4,opt,name=need_approval,json=needApproval,proto3" json:"need_approval,omitempty"`
	// Stores any comment that the user might have added during an operation
	UserComment string `protobuf:"bytes,5,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// Stores the ID of the tax group
	TaxGroupId uint64 `protobuf:"varint,10,opt,name=tax_group_id,json=taxGroupId,proto3" json:"tax_group_id,omitempty"`
	// The ID of the tax param that is a part of the tax group
	TaxParamId uint64 `protobuf:"varint,11,opt,name=tax_param_id,json=taxParamId,proto3" json:"tax_param_id,omitempty"`
	// An optional description
	Description   string `protobuf:"bytes,40,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupItem) Reset() {
	*x = TaxGroupItem{}
	mi := &file_tax_groups_scailo_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupItem) ProtoMessage() {}

func (x *TaxGroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupItem.ProtoReflect.Descriptor instead.
func (*TaxGroupItem) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{11}
}

func (x *TaxGroupItem) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxGroupItem) GetMetadata() *EmployeeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaxGroupItem) GetApprovalMetadata() *ApprovalMetadata {
	if x != nil {
		return x.ApprovalMetadata
	}
	return nil
}

func (x *TaxGroupItem) GetNeedApproval() bool {
	if x != nil {
		return x.NeedApproval
	}
	return false
}

func (x *TaxGroupItem) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *TaxGroupItem) GetTaxGroupId() uint64 {
	if x != nil {
		return x.TaxGroupId
	}
	return 0
}

func (x *TaxGroupItem) GetTaxParamId() uint64 {
	if x != nil {
		return x.TaxParamId
	}
	return 0
}

func (x *TaxGroupItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the message consisting of the list of tax group params
type TaxGroupsItemsList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of records
	List          []*TaxGroupItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupsItemsList) Reset() {
	*x = TaxGroupsItemsList{}
	mi := &file_tax_groups_scailo_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupsItemsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupsItemsList) ProtoMessage() {}

func (x *TaxGroupsItemsList) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupsItemsList.ProtoReflect.Descriptor instead.
func (*TaxGroupsItemsList) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{12}
}

func (x *TaxGroupsItemsList) GetList() []*TaxGroupItem {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes the parameters that are required to retrieve the history of the record
type TaxGroupItemHistoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores the ID of the tax group
	TaxGroupId uint64 `protobuf:"varint,10,opt,name=tax_group_id,json=taxGroupId,proto3" json:"tax_group_id,omitempty"`
	// The ID of the tax param that is a part of the tax group
	TaxParamId    uint64 `protobuf:"varint,11,opt,name=tax_param_id,json=taxParamId,proto3" json:"tax_param_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxGroupItemHistoryRequest) Reset() {
	*x = TaxGroupItemHistoryRequest{}
	mi := &file_tax_groups_scailo_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxGroupItemHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxGroupItemHistoryRequest) ProtoMessage() {}

func (x *TaxGroupItemHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_groups_scailo_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxGroupItemHistoryRequest.ProtoReflect.Descriptor instead.
func (*TaxGroupItemHistoryRequest) Descriptor() ([]byte, []int) {
	return file_tax_groups_scailo_proto_rawDescGZIP(), []int{13}
}

func (x *TaxGroupItemHistoryRequest) GetTaxGroupId() uint64 {
	if x != nil {
		return x.TaxGroupId
	}
	return 0
}

func (x *TaxGroupItemHistoryRequest) GetTaxParamId() uint64 {
	if x != nil {
		return x.TaxParamId
	}
	return 0
}

var File_tax_groups_scailo_proto protoreflect.FileDescriptor

const file_tax_groups_scailo_proto_rawDesc = "" +
	"\n" +
	"\x17tax_groups.scailo.proto\x12\x06Scailo\x1a\x11base.scailo.proto\x1a\x1bbuf/validate/validate.proto\x1a\x17tax_params.scailo.proto\"\xf7\x01\n" +
	"\x1dTaxGroupsServiceCreateRequest\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x12!\n" +
	"\fuser_comment\x18\x02 \x01(\tR\vuserComment\x12\x1b\n" +
	"\x04name\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12\x1b\n" +
	"\x04code\x18\x15 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04code\x126\n" +
	"\bcategory\x18\v \x01(\x0e2\x1a.Scailo.TAX_GROUP_CATEGORYR\bcategory\x12 \n" +
	"\vdescription\x18\f \x01(\tR\vdescription\"\xda\x01\n" +
	"\x1dTaxGroupsServiceUpdateRequest\x12!\n" +
	"\fuser_comment\x18\x01 \x01(\tR\vuserComment\x12\x17\n" +
	"\x02id\x18\x02 \x01(\x04B\a\xbaH\x042\x02 \x00R\x02id\x12!\n" +
	"\fnotify_users\x18\x03 \x01(\bR\vnotifyUsers\x12\x1b\n" +
	"\x04name\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12\x1b\n" +
	"\x04code\x18\x15 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04code\x12 \n" +
	"\vdescription\x18\f \x01(\tR\vdescription\"\xae\x04\n" +
	"\bTaxGroup\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x124\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.Scailo.EmployeeMetadataR\bmetadata\x12E\n" +
	"\x11approval_metadata\x18\x03 \x01(\v2\x18.Scailo.ApprovalMetadataR\x10approvalMetadata\x129\n" +
	"\x06status\x18\x04 \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x120\n" +
	"\x04logs\x18\x05 \x03(\v2\x1c.Scailo.LogbookLogConciseSLCR\x04logs\x12\x12\n" +
	"\x04name\x18\n" +
	" \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\x15 \x01(\tR\x04code\x126\n" +
	"\bcategory\x18\v \x01(\x0e2\x1a.Scailo.TAX_GROUP_CATEGORYR\bcategory\x12 \n" +
	"\vdescription\x18\f \x01(\tR\vdescription\x12(\n" +
	"\x04list\x18\x1e \x03(\v2\x14.Scailo.TaxGroupItemR\x04list\x12/\n" +
	"\n" +
	"tax_params\x182 \x03(\v2\x10.Scailo.TaxParamR\ttaxParams\x12:\n" +
	"\x19cumulative_tax_percentage\x18< \x01(\x01R\x17cumulativeTaxPercentage\"5\n" +
	"\rTaxGroupsList\x12$\n" +
	"\x04list\x18\x01 \x03(\v2\x10.Scailo.TaxGroupR\x04list\"\xb6\x02\n" +
	"\x1dTaxGroupsServicePaginationReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12\x1d\n" +
	"\x05count\x18\x02 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x125\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1a.Scailo.TAX_GROUP_SORT_KEYR\asortKey\x129\n" +
	"\x06status\x18\x06 \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\"\x94\x01\n" +
	"\"TaxGroupsServicePaginationResponse\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x04R\x05count\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x04R\x06offset\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x04R\x05total\x12*\n" +
	"\apayload\x18\x04 \x03(\v2\x10.Scailo.TaxGroupR\apayload\"\xd9\x06\n" +
	"\x19TaxGroupsServiceFilterReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12&\n" +
	"\x05count\x18\x02 \x01(\x03B\x10\xbaH\r\"\v(\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x125\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1a.Scailo.TAX_GROUP_SORT_KEYR\asortKey\x128\n" +
	"\x18creation_timestamp_start\x18e \x01(\x04R\x16creationTimestampStart\x124\n" +
	"\x16creation_timestamp_end\x18f \x01(\x04R\x14creationTimestampEnd\x12@\n" +
	"\x1cmodification_timestamp_start\x18g \x01(\x04R\x1amodificationTimestampStart\x12<\n" +
	"\x1amodification_timestamp_end\x18h \x01(\x04R\x18modificationTimestampEnd\x12\x1f\n" +
	"\ventity_uuid\x18\b \x01(\tR\n" +
	"entityUuid\x129\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x12*\n" +
	"\x11approved_on_start\x18\v \x01(\x04R\x0fapprovedOnStart\x12&\n" +
	"\x0fapproved_on_end\x18\f \x01(\x04R\rapprovedOnEnd\x12-\n" +
	"\x13approved_by_user_id\x18\r \x01(\x04R\x10approvedByUserId\x12(\n" +
	"\x10approver_role_id\x18\x0e \x01(\x04R\x0eapproverRoleId\x12\x12\n" +
	"\x04name\x18\x14 \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\x15 \x01(\tR\x04code\x126\n" +
	"\bcategory\x18  \x01(\x0e2\x1a.Scailo.TAX_GROUP_CATEGORYR\bcategory\"\xa5\x05\n" +
	"\x18TaxGroupsServiceCountReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x128\n" +
	"\x18creation_timestamp_start\x18e \x01(\x04R\x16creationTimestampStart\x124\n" +
	"\x16creation_timestamp_end\x18f \x01(\x04R\x14creationTimestampEnd\x12@\n" +
	"\x1cmodification_timestamp_start\x18g \x01(\x04R\x1amodificationTimestampStart\x12<\n" +
	"\x1amodification_timestamp_end\x18h \x01(\x04R\x18modificationTimestampEnd\x12\x1f\n" +
	"\ventity_uuid\x18\b \x01(\tR\n" +
	"entityUuid\x129\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x12*\n" +
	"\x11approved_on_start\x18\v \x01(\x04R\x0fapprovedOnStart\x12&\n" +
	"\x0fapproved_on_end\x18\f \x01(\x04R\rapprovedOnEnd\x12-\n" +
	"\x13approved_by_user_id\x18\r \x01(\x04R\x10approvedByUserId\x12(\n" +
	"\x10approver_role_id\x18\x0e \x01(\x04R\x0eapproverRoleId\x12\x12\n" +
	"\x04name\x18\x14 \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\x15 \x01(\tR\x04code\x126\n" +
	"\bcategory\x18  \x01(\x0e2\x1a.Scailo.TAX_GROUP_CATEGORYR\bcategory\"\xb6\x03\n" +
	"\x1cTaxGroupsServiceSearchAllReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12&\n" +
	"\x05count\x18\x02 \x01(\x03B\x10\xbaH\r\"\v(\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x125\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1a.Scailo.TAX_GROUP_SORT_KEYR\asortKey\x12\x1f\n" +
	"\ventity_uuid\x18\x06 \x01(\tR\n" +
	"entityUuid\x129\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x12\x1d\n" +
	"\n" +
	"search_key\x18\v \x01(\tR\tsearchKey\x126\n" +
	"\bcategory\x18  \x01(\x0e2\x1a.Scailo.TAX_GROUP_CATEGORYR\bcategory\"\xbe\x01\n" +
	"!TaxGroupsServiceItemCreateRequest\x12!\n" +
	"\fuser_comment\x18\x01 \x01(\tR\vuserComment\x12)\n" +
	"\ftax_group_id\x18\n" +
	" \x01(\x04B\a\xbaH\x042\x02 \x00R\n" +
	"taxGroupId\x12)\n" +
	"\ftax_param_id\x18\v \x01(\x04B\a\xbaH\x042\x02 \x00R\n" +
	"taxParamId\x12 \n" +
	"\vdescription\x18( \x01(\tR\vdescription\"\x81\x01\n" +
	"!TaxGroupsServiceItemUpdateRequest\x12!\n" +
	"\fuser_comment\x18\x01 \x01(\tR\vuserComment\x12\x17\n" +
	"\x02id\x18\x02 \x01(\x04B\a\xbaH\x042\x02 \x00R\x02id\x12 \n" +
	"\vdescription\x18( \x01(\tR\vdescription\"\xec\x02\n" +
	"\fTaxGroupItem\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x124\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.Scailo.EmployeeMetadataR\bmetadata\x12E\n" +
	"\x11approval_metadata\x18\x03 \x01(\v2\x18.Scailo.ApprovalMetadataR\x10approvalMetadata\x12#\n" +
	"\rneed_approval\x18\x04 \x01(\bR\fneedApproval\x12!\n" +
	"\fuser_comment\x18\x05 \x01(\tR\vuserComment\x12)\n" +
	"\ftax_group_id\x18\n" +
	" \x01(\x04B\a\xbaH\x042\x02 \x00R\n" +
	"taxGroupId\x12)\n" +
	"\ftax_param_id\x18\v \x01(\x04B\a\xbaH\x042\x02 \x00R\n" +
	"taxParamId\x12 \n" +
	"\vdescription\x18( \x01(\tR\vdescription\">\n" +
	"\x12TaxGroupsItemsList\x12(\n" +
	"\x04list\x18\x01 \x03(\v2\x14.Scailo.TaxGroupItemR\x04list\"r\n" +
	"\x1aTaxGroupItemHistoryRequest\x12)\n" +
	"\ftax_group_id\x18\n" +
	" \x01(\x04B\a\xbaH\x042\x02 \x00R\n" +
	"taxGroupId\x12)\n" +
	"\ftax_param_id\x18\v \x01(\x04B\a\xbaH\x042\x02 \x00R\n" +
	"taxParamId*\xaf\x01\n" +
	"\x12TAX_GROUP_CATEGORY\x12&\n" +
	"\"TAX_GROUP_CATEGORY_ANY_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aTAX_GROUP_CATEGORY_GENERAL\x10\x01\x12\x1e\n" +
	"\x1aTAX_GROUP_CATEGORY_PAYROLL\x10\x02\x121\n" +
	"-TAX_GROUP_CATEGORY_CUMULATIVE_EXCESS_ON_GOODS\x10\x03*\xad\x02\n" +
	"\x12TAX_GROUP_SORT_KEY\x12%\n" +
	"!TAX_GROUP_SORT_KEY_ID_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dTAX_GROUP_SORT_KEY_CREATED_AT\x10\x01\x12\"\n" +
	"\x1eTAX_GROUP_SORT_KEY_MODIFIED_AT\x10\x02\x12\"\n" +
	"\x1eTAX_GROUP_SORT_KEY_APPROVED_ON\x10\x03\x12\"\n" +
	"\x1eTAX_GROUP_SORT_KEY_APPROVED_BY\x10\x04\x12'\n" +
	"#TAX_GROUP_SORT_KEY_APPROVER_ROLE_ID\x10\x05\x12\x1b\n" +
	"\x17TAX_GROUP_SORT_KEY_NAME\x10\n" +
	"\x12\x1b\n" +
	"\x17TAX_GROUP_SORT_KEY_CODE\x10\v2\x8f\x15\n" +
	"\x10TaxGroupsService\x12K\n" +
	"\x06Create\x12%.Scailo.TaxGroupsServiceCreateRequest\x1a\x1a.Scailo.IdentifierResponse\x12J\n" +
	"\x05Draft\x12%.Scailo.TaxGroupsServiceCreateRequest\x1a\x1a.Scailo.IdentifierResponse\x12P\n" +
	"\vDraftUpdate\x12%.Scailo.TaxGroupsServiceUpdateRequest\x1a\x1a.Scailo.IdentifierResponse\x12X\n" +
	"\x13SendForVerification\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12K\n" +
	"\x06Verify\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12L\n" +
	"\aApprove\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12T\n" +
	"\x0fSendForRevision\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12S\n" +
	"\x0eRevisionUpdate\x12%.Scailo.TaxGroupsServiceUpdateRequest\x1a\x1a.Scailo.IdentifierResponse\x12I\n" +
	"\x04Halt\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12L\n" +
	"\aDiscard\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12L\n" +
	"\aRestore\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12O\n" +
	"\n" +
	"CommentAdd\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12X\n" +
	"\x0fAddTaxGroupItem\x12).Scailo.TaxGroupsServiceItemCreateRequest\x1a\x1a.Scailo.IdentifierResponse\x12[\n" +
	"\x12ModifyTaxGroupItem\x12).Scailo.TaxGroupsServiceItemUpdateRequest\x1a\x1a.Scailo.IdentifierResponse\x12T\n" +
	"\x13ApproveTaxGroupItem\x12!.Scailo.IdentifierWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12S\n" +
	"\x12DeleteTaxGroupItem\x12!.Scailo.IdentifierWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12O\n" +
	"\x14ReorderTaxGroupItems\x12\x1b.Scailo.ReorderItemsRequest\x1a\x1a.Scailo.IdentifierResponse\x12@\n" +
	"\x14ViewTaxGroupItemByID\x12\x12.Scailo.Identifier\x1a\x14.Scailo.TaxGroupItem\x12X\n" +
	"\x19ViewApprovedTaxGroupItems\x12\x1f.Scailo.IdentifierWithSearchKey\x1a\x1a.Scailo.TaxGroupsItemsList\x12Z\n" +
	"\x1bViewUnapprovedTaxGroupItems\x12\x1f.Scailo.IdentifierWithSearchKey\x1a\x1a.Scailo.TaxGroupsItemsList\x12Y\n" +
	"\x17ViewTaxGroupItemHistory\x12\".Scailo.TaxGroupItemHistoryRequest\x1a\x1a.Scailo.TaxGroupsItemsList\x120\n" +
	"\bViewByID\x12\x12.Scailo.Identifier\x1a\x10.Scailo.TaxGroup\x126\n" +
	"\n" +
	"ViewByUUID\x12\x16.Scailo.IdentifierUUID\x1a\x10.Scailo.TaxGroup\x129\n" +
	"\x11ViewEssentialByID\x12\x12.Scailo.Identifier\x1a\x10.Scailo.TaxGroup\x12?\n" +
	"\x13ViewEssentialByUUID\x12\x16.Scailo.IdentifierUUID\x1a\x10.Scailo.TaxGroup\x12=\n" +
	"\vViewFromIDs\x12\x17.Scailo.IdentifiersList\x1a\x15.Scailo.TaxGroupsList\x126\n" +
	"\aViewAll\x12\x14.Scailo.ActiveStatus\x1a\x15.Scailo.TaxGroupsList\x12E\n" +
	"\x14ViewAllForEntityUUID\x12\x16.Scailo.IdentifierUUID\x1a\x15.Scailo.TaxGroupsList\x12g\n" +
	"\x12ViewWithPagination\x12%.Scailo.TaxGroupsServicePaginationReq\x1a*.Scailo.TaxGroupsServicePaginationResponse\x12H\n" +
	"\tSearchAll\x12$.Scailo.TaxGroupsServiceSearchAllReq\x1a\x15.Scailo.TaxGroupsList\x12B\n" +
	"\x06Filter\x12!.Scailo.TaxGroupsServiceFilterReq\x1a\x15.Scailo.TaxGroupsList\x12G\n" +
	"\rCountInStatus\x12\x1f.Scailo.CountInSLCStatusRequest\x1a\x15.Scailo.CountResponse\x12@\n" +
	"\x05Count\x12 .Scailo.TaxGroupsServiceCountReq\x1a\x15.Scailo.CountResponse\x12H\n" +
	"\rDownloadAsCSV\x12!.Scailo.TaxGroupsServiceFilterReq\x1a\x14.Scailo.StandardFile\x12B\n" +
	"\rImportFromCSV\x12\x14.Scailo.StandardFile\x1a\x1b.Scailo.IdentifierUUIDsListBf\n" +
	"\n" +
	"com.ScailoB\x14TaxGroupsScailoProtoP\x01Z\n" +
	"Scailo/sdk\xa2\x02\x03SXX\xaa\x02\x06Scailo\xca\x02\x06Scailo\xe2\x02\x12Scailo\\GPBMetadata\xea\x02\x06Scailob\x06proto3"

var (
	file_tax_groups_scailo_proto_rawDescOnce sync.Once
	file_tax_groups_scailo_proto_rawDescData []byte
)

func file_tax_groups_scailo_proto_rawDescGZIP() []byte {
	file_tax_groups_scailo_proto_rawDescOnce.Do(func() {
		file_tax_groups_scailo_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tax_groups_scailo_proto_rawDesc), len(file_tax_groups_scailo_proto_rawDesc)))
	})
	return file_tax_groups_scailo_proto_rawDescData
}

var file_tax_groups_scailo_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tax_groups_scailo_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_tax_groups_scailo_proto_goTypes = []any{
	(TAX_GROUP_CATEGORY)(0),                    // 0: Scailo.TAX_GROUP_CATEGORY
	(TAX_GROUP_SORT_KEY)(0),                    // 1: Scailo.TAX_GROUP_SORT_KEY
	(*TaxGroupsServiceCreateRequest)(nil),      // 2: Scailo.TaxGroupsServiceCreateRequest
	(*TaxGroupsServiceUpdateRequest)(nil),      // 3: Scailo.TaxGroupsServiceUpdateRequest
	(*TaxGroup)(nil),                           // 4: Scailo.TaxGroup
	(*TaxGroupsList)(nil),                      // 5: Scailo.TaxGroupsList
	(*TaxGroupsServicePaginationReq)(nil),      // 6: Scailo.TaxGroupsServicePaginationReq
	(*TaxGroupsServicePaginationResponse)(nil), // 7: Scailo.TaxGroupsServicePaginationResponse
	(*TaxGroupsServiceFilterReq)(nil),          // 8: Scailo.TaxGroupsServiceFilterReq
	(*TaxGroupsServiceCountReq)(nil),           // 9: Scailo.TaxGroupsServiceCountReq
	(*TaxGroupsServiceSearchAllReq)(nil),       // 10: Scailo.TaxGroupsServiceSearchAllReq
	(*TaxGroupsServiceItemCreateRequest)(nil),  // 11: Scailo.TaxGroupsServiceItemCreateRequest
	(*TaxGroupsServiceItemUpdateRequest)(nil),  // 12: Scailo.TaxGroupsServiceItemUpdateRequest
	(*TaxGroupItem)(nil),                       // 13: Scailo.TaxGroupItem
	(*TaxGroupsItemsList)(nil),                 // 14: Scailo.TaxGroupsItemsList
	(*TaxGroupItemHistoryRequest)(nil),         // 15: Scailo.TaxGroupItemHistoryRequest
	(*EmployeeMetadata)(nil),                   // 16: Scailo.EmployeeMetadata
	(*ApprovalMetadata)(nil),                   // 17: Scailo.ApprovalMetadata
	(STANDARD_LIFECYCLE_STATUS)(0),             // 18: Scailo.STANDARD_LIFECYCLE_STATUS
	(*LogbookLogConciseSLC)(nil),               // 19: Scailo.LogbookLogConciseSLC
	(*TaxParam)(nil),                           // 20: Scailo.TaxParam
	(BOOL_FILTER)(0),                           // 21: Scailo.BOOL_FILTER
	(SORT_ORDER)(0),                            // 22: Scailo.SORT_ORDER
	(*IdentifierUUIDWithUserComment)(nil),      // 23: Scailo.IdentifierUUIDWithUserComment
	(*IdentifierWithUserComment)(nil),          // 24: Scailo.IdentifierWithUserComment
	(*ReorderItemsRequest)(nil),                // 25: Scailo.ReorderItemsRequest
	(*Identifier)(nil),                         // 26: Scailo.Identifier
	(*IdentifierWithSearchKey)(nil),            // 27: Scailo.IdentifierWithSearchKey
	(*IdentifierUUID)(nil),                     // 28: Scailo.IdentifierUUID
	(*IdentifiersList)(nil),                    // 29: Scailo.IdentifiersList
	(*ActiveStatus)(nil),                       // 30: Scailo.ActiveStatus
	(*CountInSLCStatusRequest)(nil),            // 31: Scailo.CountInSLCStatusRequest
	(*StandardFile)(nil),                       // 32: Scailo.StandardFile
	(*IdentifierResponse)(nil),                 // 33: Scailo.IdentifierResponse
	(*CountResponse)(nil),                      // 34: Scailo.CountResponse
	(*IdentifierUUIDsList)(nil),                // 35: Scailo.IdentifierUUIDsList
}
var file_tax_groups_scailo_proto_depIdxs = []int32{
	0,  // 0: Scailo.TaxGroupsServiceCreateRequest.category:type_name -> Scailo.TAX_GROUP_CATEGORY
	16, // 1: Scailo.TaxGroup.metadata:type_name -> Scailo.EmployeeMetadata
	17, // 2: Scailo.TaxGroup.approval_metadata:type_name -> Scailo.ApprovalMetadata
	18, // 3: Scailo.TaxGroup.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	19, // 4: Scailo.TaxGroup.logs:type_name -> Scailo.LogbookLogConciseSLC
	0,  // 5: Scailo.TaxGroup.category:type_name -> Scailo.TAX_GROUP_CATEGORY
	13, // 6: Scailo.TaxGroup.list:type_name -> Scailo.TaxGroupItem
	20, // 7: Scailo.TaxGroup.tax_params:type_name -> Scailo.TaxParam
	4,  // 8: Scailo.TaxGroupsList.list:type_name -> Scailo.TaxGroup
	21, // 9: Scailo.TaxGroupsServicePaginationReq.is_active:type_name -> Scailo.BOOL_FILTER
	22, // 10: Scailo.TaxGroupsServicePaginationReq.sort_order:type_name -> Scailo.SORT_ORDER
	1,  // 11: Scailo.TaxGroupsServicePaginationReq.sort_key:type_name -> Scailo.TAX_GROUP_SORT_KEY
	18, // 12: Scailo.TaxGroupsServicePaginationReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	4,  // 13: Scailo.TaxGroupsServicePaginationResponse.payload:type_name -> Scailo.TaxGroup
	21, // 14: Scailo.TaxGroupsServiceFilterReq.is_active:type_name -> Scailo.BOOL_FILTER
	22, // 15: Scailo.TaxGroupsServiceFilterReq.sort_order:type_name -> Scailo.SORT_ORDER
	1,  // 16: Scailo.TaxGroupsServiceFilterReq.sort_key:type_name -> Scailo.TAX_GROUP_SORT_KEY
	18, // 17: Scailo.TaxGroupsServiceFilterReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	0,  // 18: Scailo.TaxGroupsServiceFilterReq.category:type_name -> Scailo.TAX_GROUP_CATEGORY
	21, // 19: Scailo.TaxGroupsServiceCountReq.is_active:type_name -> Scailo.BOOL_FILTER
	18, // 20: Scailo.TaxGroupsServiceCountReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	0,  // 21: Scailo.TaxGroupsServiceCountReq.category:type_name -> Scailo.TAX_GROUP_CATEGORY
	21, // 22: Scailo.TaxGroupsServiceSearchAllReq.is_active:type_name -> Scailo.BOOL_FILTER
	22, // 23: Scailo.TaxGroupsServiceSearchAllReq.sort_order:type_name -> Scailo.SORT_ORDER
	1,  // 24: Scailo.TaxGroupsServiceSearchAllReq.sort_key:type_name -> Scailo.TAX_GROUP_SORT_KEY
	18, // 25: Scailo.TaxGroupsServiceSearchAllReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	0,  // 26: Scailo.TaxGroupsServiceSearchAllReq.category:type_name -> Scailo.TAX_GROUP_CATEGORY
	16, // 27: Scailo.TaxGroupItem.metadata:type_name -> Scailo.EmployeeMetadata
	17, // 28: Scailo.TaxGroupItem.approval_metadata:type_name -> Scailo.ApprovalMetadata
	13, // 29: Scailo.TaxGroupsItemsList.list:type_name -> Scailo.TaxGroupItem
	2,  // 30: Scailo.TaxGroupsService.Create:input_type -> Scailo.TaxGroupsServiceCreateRequest
	2,  // 31: Scailo.TaxGroupsService.Draft:input_type -> Scailo.TaxGroupsServiceCreateRequest
	3,  // 32: Scailo.TaxGroupsService.DraftUpdate:input_type -> Scailo.TaxGroupsServiceUpdateRequest
	23, // 33: Scailo.TaxGroupsService.SendForVerification:input_type -> Scailo.IdentifierUUIDWithUserComment
	23, // 34: Scailo.TaxGroupsService.Verify:input_type -> Scailo.IdentifierUUIDWithUserComment
	23, // 35: Scailo.TaxGroupsService.Approve:input_type -> Scailo.IdentifierUUIDWithUserComment
	23, // 36: Scailo.TaxGroupsService.SendForRevision:input_type -> Scailo.IdentifierUUIDWithUserComment
	3,  // 37: Scailo.TaxGroupsService.RevisionUpdate:input_type -> Scailo.TaxGroupsServiceUpdateRequest
	23, // 38: Scailo.TaxGroupsService.Halt:input_type -> Scailo.IdentifierUUIDWithUserComment
	23, // 39: Scailo.TaxGroupsService.Discard:input_type -> Scailo.IdentifierUUIDWithUserComment
	23, // 40: Scailo.TaxGroupsService.Restore:input_type -> Scailo.IdentifierUUIDWithUserComment
	23, // 41: Scailo.TaxGroupsService.CommentAdd:input_type -> Scailo.IdentifierUUIDWithUserComment
	11, // 42: Scailo.TaxGroupsService.AddTaxGroupItem:input_type -> Scailo.TaxGroupsServiceItemCreateRequest
	12, // 43: Scailo.TaxGroupsService.ModifyTaxGroupItem:input_type -> Scailo.TaxGroupsServiceItemUpdateRequest
	24, // 44: Scailo.TaxGroupsService.ApproveTaxGroupItem:input_type -> Scailo.IdentifierWithUserComment
	24, // 45: Scailo.TaxGroupsService.DeleteTaxGroupItem:input_type -> Scailo.IdentifierWithUserComment
	25, // 46: Scailo.TaxGroupsService.ReorderTaxGroupItems:input_type -> Scailo.ReorderItemsRequest
	26, // 47: Scailo.TaxGroupsService.ViewTaxGroupItemByID:input_type -> Scailo.Identifier
	27, // 48: Scailo.TaxGroupsService.ViewApprovedTaxGroupItems:input_type -> Scailo.IdentifierWithSearchKey
	27, // 49: Scailo.TaxGroupsService.ViewUnapprovedTaxGroupItems:input_type -> Scailo.IdentifierWithSearchKey
	15, // 50: Scailo.TaxGroupsService.ViewTaxGroupItemHistory:input_type -> Scailo.TaxGroupItemHistoryRequest
	26, // 51: Scailo.TaxGroupsService.ViewByID:input_type -> Scailo.Identifier
	28, // 52: Scailo.TaxGroupsService.ViewByUUID:input_type -> Scailo.IdentifierUUID
	26, // 53: Scailo.TaxGroupsService.ViewEssentialByID:input_type -> Scailo.Identifier
	28, // 54: Scailo.TaxGroupsService.ViewEssentialByUUID:input_type -> Scailo.IdentifierUUID
	29, // 55: Scailo.TaxGroupsService.ViewFromIDs:input_type -> Scailo.IdentifiersList
	30, // 56: Scailo.TaxGroupsService.ViewAll:input_type -> Scailo.ActiveStatus
	28, // 57: Scailo.TaxGroupsService.ViewAllForEntityUUID:input_type -> Scailo.IdentifierUUID
	6,  // 58: Scailo.TaxGroupsService.ViewWithPagination:input_type -> Scailo.TaxGroupsServicePaginationReq
	10, // 59: Scailo.TaxGroupsService.SearchAll:input_type -> Scailo.TaxGroupsServiceSearchAllReq
	8,  // 60: Scailo.TaxGroupsService.Filter:input_type -> Scailo.TaxGroupsServiceFilterReq
	31, // 61: Scailo.TaxGroupsService.CountInStatus:input_type -> Scailo.CountInSLCStatusRequest
	9,  // 62: Scailo.TaxGroupsService.Count:input_type -> Scailo.TaxGroupsServiceCountReq
	8,  // 63: Scailo.TaxGroupsService.DownloadAsCSV:input_type -> Scailo.TaxGroupsServiceFilterReq
	32, // 64: Scailo.TaxGroupsService.ImportFromCSV:input_type -> Scailo.StandardFile
	33, // 65: Scailo.TaxGroupsService.Create:output_type -> Scailo.IdentifierResponse
	33, // 66: Scailo.TaxGroupsService.Draft:output_type -> Scailo.IdentifierResponse
	33, // 67: Scailo.TaxGroupsService.DraftUpdate:output_type -> Scailo.IdentifierResponse
	33, // 68: Scailo.TaxGroupsService.SendForVerification:output_type -> Scailo.IdentifierResponse
	33, // 69: Scailo.TaxGroupsService.Verify:output_type -> Scailo.IdentifierResponse
	33, // 70: Scailo.TaxGroupsService.Approve:output_type -> Scailo.IdentifierResponse
	33, // 71: Scailo.TaxGroupsService.SendForRevision:output_type -> Scailo.IdentifierResponse
	33, // 72: Scailo.TaxGroupsService.RevisionUpdate:output_type -> Scailo.IdentifierResponse
	33, // 73: Scailo.TaxGroupsService.Halt:output_type -> Scailo.IdentifierResponse
	33, // 74: Scailo.TaxGroupsService.Discard:output_type -> Scailo.IdentifierResponse
	33, // 75: Scailo.TaxGroupsService.Restore:output_type -> Scailo.IdentifierResponse
	33, // 76: Scailo.TaxGroupsService.CommentAdd:output_type -> Scailo.IdentifierResponse
	33, // 77: Scailo.TaxGroupsService.AddTaxGroupItem:output_type -> Scailo.IdentifierResponse
	33, // 78: Scailo.TaxGroupsService.ModifyTaxGroupItem:output_type -> Scailo.IdentifierResponse
	33, // 79: Scailo.TaxGroupsService.ApproveTaxGroupItem:output_type -> Scailo.IdentifierResponse
	33, // 80: Scailo.TaxGroupsService.DeleteTaxGroupItem:output_type -> Scailo.IdentifierResponse
	33, // 81: Scailo.TaxGroupsService.ReorderTaxGroupItems:output_type -> Scailo.IdentifierResponse
	13, // 82: Scailo.TaxGroupsService.ViewTaxGroupItemByID:output_type -> Scailo.TaxGroupItem
	14, // 83: Scailo.TaxGroupsService.ViewApprovedTaxGroupItems:output_type -> Scailo.TaxGroupsItemsList
	14, // 84: Scailo.TaxGroupsService.ViewUnapprovedTaxGroupItems:output_type -> Scailo.TaxGroupsItemsList
	14, // 85: Scailo.TaxGroupsService.ViewTaxGroupItemHistory:output_type -> Scailo.TaxGroupsItemsList
	4,  // 86: Scailo.TaxGroupsService.ViewByID:output_type -> Scailo.TaxGroup
	4,  // 87: Scailo.TaxGroupsService.ViewByUUID:output_type -> Scailo.TaxGroup
	4,  // 88: Scailo.TaxGroupsService.ViewEssentialByID:output_type -> Scailo.TaxGroup
	4,  // 89: Scailo.TaxGroupsService.ViewEssentialByUUID:output_type -> Scailo.TaxGroup
	5,  // 90: Scailo.TaxGroupsService.ViewFromIDs:output_type -> Scailo.TaxGroupsList
	5,  // 91: Scailo.TaxGroupsService.ViewAll:output_type -> Scailo.TaxGroupsList
	5,  // 92: Scailo.TaxGroupsService.ViewAllForEntityUUID:output_type -> Scailo.TaxGroupsList
	7,  // 93: Scailo.TaxGroupsService.ViewWithPagination:output_type -> Scailo.TaxGroupsServicePaginationResponse
	5,  // 94: Scailo.TaxGroupsService.SearchAll:output_type -> Scailo.TaxGroupsList
	5,  // 95: Scailo.TaxGroupsService.Filter:output_type -> Scailo.TaxGroupsList
	34, // 96: Scailo.TaxGroupsService.CountInStatus:output_type -> Scailo.CountResponse
	34, // 97: Scailo.TaxGroupsService.Count:output_type -> Scailo.CountResponse
	32, // 98: Scailo.TaxGroupsService.DownloadAsCSV:output_type -> Scailo.StandardFile
	35, // 99: Scailo.TaxGroupsService.ImportFromCSV:output_type -> Scailo.IdentifierUUIDsList
	65, // [65:100] is the sub-list for method output_type
	30, // [30:65] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_tax_groups_scailo_proto_init() }
func file_tax_groups_scailo_proto_init() {
	if File_tax_groups_scailo_proto != nil {
		return
	}
	file_base_scailo_proto_init()
	file_tax_params_scailo_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tax_groups_scailo_proto_rawDesc), len(file_tax_groups_scailo_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tax_groups_scailo_proto_goTypes,
		DependencyIndexes: file_tax_groups_scailo_proto_depIdxs,
		EnumInfos:         file_tax_groups_scailo_proto_enumTypes,
		MessageInfos:      file_tax_groups_scailo_proto_msgTypes,
	}.Build()
	File_tax_groups_scailo_proto = out.File
	file_tax_groups_scailo_proto_goTypes = nil
	file_tax_groups_scailo_proto_depIdxs = nil
}
