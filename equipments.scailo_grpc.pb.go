// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: equipments.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EquipmentsService_Create_FullMethodName                    = "/Scailo.EquipmentsService/Create"
	EquipmentsService_SendToStore_FullMethodName               = "/Scailo.EquipmentsService/SendToStore"
	EquipmentsService_Update_FullMethodName                    = "/Scailo.EquipmentsService/Update"
	EquipmentsService_SendForRework_FullMethodName             = "/Scailo.EquipmentsService/SendForRework"
	EquipmentsService_SendForQC_FullMethodName                 = "/Scailo.EquipmentsService/SendForQC"
	EquipmentsService_SplitLot_FullMethodName                  = "/Scailo.EquipmentsService/SplitLot"
	EquipmentsService_Partition_FullMethodName                 = "/Scailo.EquipmentsService/Partition"
	EquipmentsService_Consume_FullMethodName                   = "/Scailo.EquipmentsService/Consume"
	EquipmentsService_Reject_FullMethodName                    = "/Scailo.EquipmentsService/Reject"
	EquipmentsService_Scrap_FullMethodName                     = "/Scailo.EquipmentsService/Scrap"
	EquipmentsService_ReturnMaterial_FullMethodName            = "/Scailo.EquipmentsService/ReturnMaterial"
	EquipmentsService_Discard_FullMethodName                   = "/Scailo.EquipmentsService/Discard"
	EquipmentsService_CommentAdd_FullMethodName                = "/Scailo.EquipmentsService/CommentAdd"
	EquipmentsService_CreateMagicLink_FullMethodName           = "/Scailo.EquipmentsService/CreateMagicLink"
	EquipmentsService_ViewByID_FullMethodName                  = "/Scailo.EquipmentsService/ViewByID"
	EquipmentsService_ViewByUUID_FullMethodName                = "/Scailo.EquipmentsService/ViewByUUID"
	EquipmentsService_ViewEssentialByID_FullMethodName         = "/Scailo.EquipmentsService/ViewEssentialByID"
	EquipmentsService_ViewEssentialByUUID_FullMethodName       = "/Scailo.EquipmentsService/ViewEssentialByUUID"
	EquipmentsService_ViewFromIDs_FullMethodName               = "/Scailo.EquipmentsService/ViewFromIDs"
	EquipmentsService_ViewFromUUIDs_FullMethodName             = "/Scailo.EquipmentsService/ViewFromUUIDs"
	EquipmentsService_ViewAll_FullMethodName                   = "/Scailo.EquipmentsService/ViewAll"
	EquipmentsService_ViewWithPagination_FullMethodName        = "/Scailo.EquipmentsService/ViewWithPagination"
	EquipmentsService_DownloadQCReportByID_FullMethodName      = "/Scailo.EquipmentsService/DownloadQCReportByID"
	EquipmentsService_DownloadQCReportByUUID_FullMethodName    = "/Scailo.EquipmentsService/DownloadQCReportByUUID"
	EquipmentsService_DownloadLabelByID_FullMethodName         = "/Scailo.EquipmentsService/DownloadLabelByID"
	EquipmentsService_DownloadLabelByUUID_FullMethodName       = "/Scailo.EquipmentsService/DownloadLabelByUUID"
	EquipmentsService_ViewInventoryInteractions_FullMethodName = "/Scailo.EquipmentsService/ViewInventoryInteractions"
	EquipmentsService_SearchAll_FullMethodName                 = "/Scailo.EquipmentsService/SearchAll"
	EquipmentsService_Filter_FullMethodName                    = "/Scailo.EquipmentsService/Filter"
	EquipmentsService_Count_FullMethodName                     = "/Scailo.EquipmentsService/Count"
	EquipmentsService_DownloadAsCSV_FullMethodName             = "/Scailo.EquipmentsService/DownloadAsCSV"
	EquipmentsService_DownloadImportTemplate_FullMethodName    = "/Scailo.EquipmentsService/DownloadImportTemplate"
	EquipmentsService_ImportFromCSV_FullMethodName             = "/Scailo.EquipmentsService/ImportFromCSV"
)

// EquipmentsServiceClient is the client API for EquipmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each equipment
type EquipmentsServiceClient interface {
	// Create (and Send for QC)
	Create(ctx context.Context, in *EquipmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send to Store
	SendToStore(ctx context.Context, in *EquipmentsServiceSendToStoreRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update
	Update(ctx context.Context, in *EquipmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for Rework
	SendForRework(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for QC
	SendForQC(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Split into unit quantities
	SplitLot(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a partition from the parent lot (and returns the identifier of the new partition)
	Partition(ctx context.Context, in *InventoryPartitionRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Consume
	Consume(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reject
	Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Scrap
	Scrap(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Return
	ReturnMaterial(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Equipment, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Equipment, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Equipment, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Equipment, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*EquipmentsList, error)
	// View all records with the given UUIDs
	ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*EquipmentsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*EquipmentsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *EquipmentsServicePaginationReq, opts ...grpc.CallOption) (*EquipmentsServicePaginationResponse, error)
	// Download QC Report with the given Identifier
	DownloadQCReportByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error)
	// Download QC Report with the given IdentifierUUID (can be used to allow public downloads)
	DownloadQCReportByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download Label for the given Identifier
	DownloadLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error)
	// Download Label for the given IdentifierUUID (can be used to allow public downloads)
	DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all inventory interactions for equipment with the given IdentifierUUID
	ViewInventoryInteractions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InventoryInteractionsList, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *EquipmentsServiceSearchAllReq, opts ...grpc.CallOption) (*EquipmentsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *EquipmentsServiceFilterReq, opts ...grpc.CallOption) (*EquipmentsList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *EquipmentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request
	DownloadAsCSV(ctx context.Context, in *EquipmentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload records
	DownloadImportTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file. Imports records as initial stock
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type equipmentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipmentsServiceClient(cc grpc.ClientConnInterface) EquipmentsServiceClient {
	return &equipmentsServiceClient{cc}
}

func (c *equipmentsServiceClient) Create(ctx context.Context, in *EquipmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) SendToStore(ctx context.Context, in *EquipmentsServiceSendToStoreRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_SendToStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) Update(ctx context.Context, in *EquipmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) SendForRework(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_SendForRework_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) SendForQC(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_SendForQC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) SplitLot(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_SplitLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) Partition(ctx context.Context, in *InventoryPartitionRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_Partition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) Consume(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_Consume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_Reject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) Scrap(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_Scrap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ReturnMaterial(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_ReturnMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, EquipmentsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Equipment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Equipment)
	err := c.cc.Invoke(ctx, EquipmentsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Equipment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Equipment)
	err := c.cc.Invoke(ctx, EquipmentsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Equipment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Equipment)
	err := c.cc.Invoke(ctx, EquipmentsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Equipment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Equipment)
	err := c.cc.Invoke(ctx, EquipmentsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*EquipmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquipmentsList)
	err := c.cc.Invoke(ctx, EquipmentsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*EquipmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquipmentsList)
	err := c.cc.Invoke(ctx, EquipmentsService_ViewFromUUIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*EquipmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquipmentsList)
	err := c.cc.Invoke(ctx, EquipmentsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ViewWithPagination(ctx context.Context, in *EquipmentsServicePaginationReq, opts ...grpc.CallOption) (*EquipmentsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquipmentsServicePaginationResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) DownloadQCReportByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquipmentsService_DownloadQCReportByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) DownloadQCReportByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquipmentsService_DownloadQCReportByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) DownloadLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquipmentsService_DownloadLabelByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquipmentsService_DownloadLabelByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ViewInventoryInteractions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InventoryInteractionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryInteractionsList)
	err := c.cc.Invoke(ctx, EquipmentsService_ViewInventoryInteractions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) SearchAll(ctx context.Context, in *EquipmentsServiceSearchAllReq, opts ...grpc.CallOption) (*EquipmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquipmentsList)
	err := c.cc.Invoke(ctx, EquipmentsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) Filter(ctx context.Context, in *EquipmentsServiceFilterReq, opts ...grpc.CallOption) (*EquipmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquipmentsList)
	err := c.cc.Invoke(ctx, EquipmentsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) Count(ctx context.Context, in *EquipmentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, EquipmentsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) DownloadAsCSV(ctx context.Context, in *EquipmentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquipmentsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) DownloadImportTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquipmentsService_DownloadImportTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, EquipmentsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipmentsService
