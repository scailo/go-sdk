// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: forms_sections.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FormsSectionsService_Create_FullMethodName               = "/Scailo.FormsSectionsService/Create"
	FormsSectionsService_Update_FullMethodName               = "/Scailo.FormsSectionsService/Update"
	FormsSectionsService_Discard_FullMethodName              = "/Scailo.FormsSectionsService/Discard"
	FormsSectionsService_Restore_FullMethodName              = "/Scailo.FormsSectionsService/Restore"
	FormsSectionsService_ViewByID_FullMethodName             = "/Scailo.FormsSectionsService/ViewByID"
	FormsSectionsService_ViewByUUID_FullMethodName           = "/Scailo.FormsSectionsService/ViewByUUID"
	FormsSectionsService_ViewEssentialByID_FullMethodName    = "/Scailo.FormsSectionsService/ViewEssentialByID"
	FormsSectionsService_ViewEssentialByUUID_FullMethodName  = "/Scailo.FormsSectionsService/ViewEssentialByUUID"
	FormsSectionsService_ViewFromIDs_FullMethodName          = "/Scailo.FormsSectionsService/ViewFromIDs"
	FormsSectionsService_ViewAll_FullMethodName              = "/Scailo.FormsSectionsService/ViewAll"
	FormsSectionsService_ViewAllForEntityUUID_FullMethodName = "/Scailo.FormsSectionsService/ViewAllForEntityUUID"
	FormsSectionsService_ViewWithPagination_FullMethodName   = "/Scailo.FormsSectionsService/ViewWithPagination"
	FormsSectionsService_SearchAll_FullMethodName            = "/Scailo.FormsSectionsService/SearchAll"
	FormsSectionsService_Filter_FullMethodName               = "/Scailo.FormsSectionsService/Filter"
	FormsSectionsService_Count_FullMethodName                = "/Scailo.FormsSectionsService/Count"
	FormsSectionsService_DownloadAsCSV_FullMethodName        = "/Scailo.FormsSectionsService/DownloadAsCSV"
	FormsSectionsService_ImportFromCSV_FullMethodName        = "/Scailo.FormsSectionsService/ImportFromCSV"
)

// FormsSectionsServiceClient is the client API for FormsSectionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the methods applicable on each form section
type FormsSectionsServiceClient interface {
	// Create a form section
	Create(ctx context.Context, in *FormsSectionsServiceCreateRequest, opts ...grpc.CallOption) (*FormSection, error)
	// Update a form section
	Update(ctx context.Context, in *FormsSectionsServiceUpdateRequest, opts ...grpc.CallOption) (*FormSection, error)
	// Discard the form section
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore the form section
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FormSection, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormSection, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FormSection, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormSection, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*FormsSectionsList, error)
	// View all forms sections
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*FormsSectionsList, error)
	// View all forms sections with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormsSectionsList, error)
	// View forms sections with pagination
	ViewWithPagination(ctx context.Context, in *FormsSectionsServicePaginationReq, opts ...grpc.CallOption) (*FormSectionPaginationResp, error)
	// View all forms sections that match the given search key
	SearchAll(ctx context.Context, in *FormsSectionsServiceSearchAllReq, opts ...grpc.CallOption) (*FormsSectionsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *FormsSectionsServiceFilterReq, opts ...grpc.CallOption) (*FormsSectionsList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *FormsSectionsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *FormsSectionsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type formsSectionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormsSectionsServiceClient(cc grpc.ClientConnInterface) FormsSectionsServiceClient {
	return &formsSectionsServiceClient{cc}
}

func (c *formsSectionsServiceClient) Create(ctx context.Context, in *FormsSectionsServiceCreateRequest, opts ...grpc.CallOption) (*FormSection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormSection)
	err := c.cc.Invoke(ctx, FormsSectionsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) Update(ctx context.Context, in *FormsSectionsServiceUpdateRequest, opts ...grpc.CallOption) (*FormSection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormSection)
	err := c.cc.Invoke(ctx, FormsSectionsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FormsSectionsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FormsSectionsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FormSection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormSection)
	err := c.cc.Invoke(ctx, FormsSectionsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormSection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormSection)
	err := c.cc.Invoke(ctx, FormsSectionsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FormSection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormSection)
	err := c.cc.Invoke(ctx, FormsSectionsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormSection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormSection)
	err := c.cc.Invoke(ctx, FormsSectionsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*FormsSectionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormsSectionsList)
	err := c.cc.Invoke(ctx, FormsSectionsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*FormsSectionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormsSectionsList)
	err := c.cc.Invoke(ctx, FormsSectionsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormsSectionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormsSectionsList)
	err := c.cc.Invoke(ctx, FormsSectionsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) ViewWithPagination(ctx context.Context, in *FormsSectionsServicePaginationReq, opts ...grpc.CallOption) (*FormSectionPaginationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormSectionPaginationResp)
	err := c.cc.Invoke(ctx, FormsSectionsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) SearchAll(ctx context.Context, in *FormsSectionsServiceSearchAllReq, opts ...grpc.CallOption) (*FormsSectionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormsSectionsList)
	err := c.cc.Invoke(ctx, FormsSectionsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) Filter(ctx context.Context, in *FormsSectionsServiceFilterReq, opts ...grpc.CallOption) (*FormsSectionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormsSectionsList)
	err := c.cc.Invoke(ctx, FormsSectionsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) Count(ctx context.Context, in *FormsSectionsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, FormsSectionsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) DownloadAsCSV(ctx context.Context, in *FormsSectionsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, FormsSectionsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsSectionsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, FormsSectionsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormsSectionsService
