// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sales_quotations.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SalesQuotationsService_Create_FullMethodName                                     = "/Scailo.SalesQuotationsService/Create"
	SalesQuotationsService_Draft_FullMethodName                                      = "/Scailo.SalesQuotationsService/Draft"
	SalesQuotationsService_DraftUpdate_FullMethodName                                = "/Scailo.SalesQuotationsService/DraftUpdate"
	SalesQuotationsService_SendForVerification_FullMethodName                        = "/Scailo.SalesQuotationsService/SendForVerification"
	SalesQuotationsService_Verify_FullMethodName                                     = "/Scailo.SalesQuotationsService/Verify"
	SalesQuotationsService_Approve_FullMethodName                                    = "/Scailo.SalesQuotationsService/Approve"
	SalesQuotationsService_SendForRevision_FullMethodName                            = "/Scailo.SalesQuotationsService/SendForRevision"
	SalesQuotationsService_RevisionUpdate_FullMethodName                             = "/Scailo.SalesQuotationsService/RevisionUpdate"
	SalesQuotationsService_Halt_FullMethodName                                       = "/Scailo.SalesQuotationsService/Halt"
	SalesQuotationsService_Discard_FullMethodName                                    = "/Scailo.SalesQuotationsService/Discard"
	SalesQuotationsService_Restore_FullMethodName                                    = "/Scailo.SalesQuotationsService/Restore"
	SalesQuotationsService_Complete_FullMethodName                                   = "/Scailo.SalesQuotationsService/Complete"
	SalesQuotationsService_Repeat_FullMethodName                                     = "/Scailo.SalesQuotationsService/Repeat"
	SalesQuotationsService_Reopen_FullMethodName                                     = "/Scailo.SalesQuotationsService/Reopen"
	SalesQuotationsService_CommentAdd_FullMethodName                                 = "/Scailo.SalesQuotationsService/CommentAdd"
	SalesQuotationsService_SendEmail_FullMethodName                                  = "/Scailo.SalesQuotationsService/SendEmail"
	SalesQuotationsService_Autofill_FullMethodName                                   = "/Scailo.SalesQuotationsService/Autofill"
	SalesQuotationsService_Amend_FullMethodName                                      = "/Scailo.SalesQuotationsService/Amend"
	SalesQuotationsService_CreateMagicLink_FullMethodName                            = "/Scailo.SalesQuotationsService/CreateMagicLink"
	SalesQuotationsService_AddMultipleSalesQuotationItems_FullMethodName             = "/Scailo.SalesQuotationsService/AddMultipleSalesQuotationItems"
	SalesQuotationsService_AddSalesQuotationItem_FullMethodName                      = "/Scailo.SalesQuotationsService/AddSalesQuotationItem"
	SalesQuotationsService_ModifySalesQuotationItem_FullMethodName                   = "/Scailo.SalesQuotationsService/ModifySalesQuotationItem"
	SalesQuotationsService_ApproveSalesQuotationItem_FullMethodName                  = "/Scailo.SalesQuotationsService/ApproveSalesQuotationItem"
	SalesQuotationsService_DeleteSalesQuotationItem_FullMethodName                   = "/Scailo.SalesQuotationsService/DeleteSalesQuotationItem"
	SalesQuotationsService_ReorderSalesQuotationItems_FullMethodName                 = "/Scailo.SalesQuotationsService/ReorderSalesQuotationItems"
	SalesQuotationsService_ViewSalesQuotationItemByID_FullMethodName                 = "/Scailo.SalesQuotationsService/ViewSalesQuotationItemByID"
	SalesQuotationsService_ViewSalesQuotationItemPrice_FullMethodName                = "/Scailo.SalesQuotationsService/ViewSalesQuotationItemPrice"
	SalesQuotationsService_ViewApprovedSalesQuotationItems_FullMethodName            = "/Scailo.SalesQuotationsService/ViewApprovedSalesQuotationItems"
	SalesQuotationsService_ViewUnapprovedSalesQuotationItems_FullMethodName          = "/Scailo.SalesQuotationsService/ViewUnapprovedSalesQuotationItems"
	SalesQuotationsService_ViewSalesQuotationItemHistory_FullMethodName              = "/Scailo.SalesQuotationsService/ViewSalesQuotationItemHistory"
	SalesQuotationsService_ViewPaginatedApprovedSalesQuotationItems_FullMethodName   = "/Scailo.SalesQuotationsService/ViewPaginatedApprovedSalesQuotationItems"
	SalesQuotationsService_ViewPaginatedUnapprovedSalesQuotationItems_FullMethodName = "/Scailo.SalesQuotationsService/ViewPaginatedUnapprovedSalesQuotationItems"
	SalesQuotationsService_SearchItemsWithPagination_FullMethodName                  = "/Scailo.SalesQuotationsService/SearchItemsWithPagination"
	SalesQuotationsService_DownloadItemsAsCSV_FullMethodName                         = "/Scailo.SalesQuotationsService/DownloadItemsAsCSV"
	SalesQuotationsService_DownloadItemsTemplateAsCSV_FullMethodName                 = "/Scailo.SalesQuotationsService/DownloadItemsTemplateAsCSV"
	SalesQuotationsService_UploadSalesQuotationItems_FullMethodName                  = "/Scailo.SalesQuotationsService/UploadSalesQuotationItems"
	SalesQuotationsService_AddSalesQuotationContact_FullMethodName                   = "/Scailo.SalesQuotationsService/AddSalesQuotationContact"
	SalesQuotationsService_ApproveSalesQuotationContact_FullMethodName               = "/Scailo.SalesQuotationsService/ApproveSalesQuotationContact"
	SalesQuotationsService_DeleteSalesQuotationContact_FullMethodName                = "/Scailo.SalesQuotationsService/DeleteSalesQuotationContact"
	SalesQuotationsService_ViewSalesQuotationContactByID_FullMethodName              = "/Scailo.SalesQuotationsService/ViewSalesQuotationContactByID"
	SalesQuotationsService_ViewSalesQuotationContacts_FullMethodName                 = "/Scailo.SalesQuotationsService/ViewSalesQuotationContacts"
	SalesQuotationsService_AddSalesQuotationReference_FullMethodName                 = "/Scailo.SalesQuotationsService/AddSalesQuotationReference"
	SalesQuotationsService_ApproveSalesQuotationReference_FullMethodName             = "/Scailo.SalesQuotationsService/ApproveSalesQuotationReference"
	SalesQuotationsService_DeleteSalesQuotationReference_FullMethodName              = "/Scailo.SalesQuotationsService/DeleteSalesQuotationReference"
	SalesQuotationsService_ViewSalesQuotationReferenceByID_FullMethodName            = "/Scailo.SalesQuotationsService/ViewSalesQuotationReferenceByID"
	SalesQuotationsService_ViewSalesQuotationReferences_FullMethodName               = "/Scailo.SalesQuotationsService/ViewSalesQuotationReferences"
	SalesQuotationsService_ViewByID_FullMethodName                                   = "/Scailo.SalesQuotationsService/ViewByID"
	SalesQuotationsService_ViewByUUID_FullMethodName                                 = "/Scailo.SalesQuotationsService/ViewByUUID"
	SalesQuotationsService_ViewByReferenceID_FullMethodName                          = "/Scailo.SalesQuotationsService/ViewByReferenceID"
	SalesQuotationsService_ViewEssentialByID_FullMethodName                          = "/Scailo.SalesQuotationsService/ViewEssentialByID"
	SalesQuotationsService_ViewEssentialByUUID_FullMethodName                        = "/Scailo.SalesQuotationsService/ViewEssentialByUUID"
	SalesQuotationsService_ViewFromIDs_FullMethodName                                = "/Scailo.SalesQuotationsService/ViewFromIDs"
	SalesQuotationsService_ViewAll_FullMethodName                                    = "/Scailo.SalesQuotationsService/ViewAll"
	SalesQuotationsService_ViewAllForEntityUUID_FullMethodName                       = "/Scailo.SalesQuotationsService/ViewAllForEntityUUID"
	SalesQuotationsService_ViewWithPagination_FullMethodName                         = "/Scailo.SalesQuotationsService/ViewWithPagination"
	SalesQuotationsService_ViewAmendments_FullMethodName                             = "/Scailo.SalesQuotationsService/ViewAmendments"
	SalesQuotationsService_ViewProspectiveFamilies_FullMethodName                    = "/Scailo.SalesQuotationsService/ViewProspectiveFamilies"
	SalesQuotationsService_FilterProspectiveFamilies_FullMethodName                  = "/Scailo.SalesQuotationsService/FilterProspectiveFamilies"
	SalesQuotationsService_ViewProspectiveSalesQuotationItem_FullMethodName          = "/Scailo.SalesQuotationsService/ViewProspectiveSalesQuotationItem"
	SalesQuotationsService_ViewAssociatedSalesOrdersIDs_FullMethodName               = "/Scailo.SalesQuotationsService/ViewAssociatedSalesOrdersIDs"
	SalesQuotationsService_IsDownloadable_FullMethodName                             = "/Scailo.SalesQuotationsService/IsDownloadable"
	SalesQuotationsService_DownloadByUUID_FullMethodName                             = "/Scailo.SalesQuotationsService/DownloadByUUID"
	SalesQuotationsService_SearchAll_FullMethodName                                  = "/Scailo.SalesQuotationsService/SearchAll"
	SalesQuotationsService_Filter_FullMethodName                                     = "/Scailo.SalesQuotationsService/Filter"
	SalesQuotationsService_CountInStatus_FullMethodName                              = "/Scailo.SalesQuotationsService/CountInStatus"
	SalesQuotationsService_Count_FullMethodName                                      = "/Scailo.SalesQuotationsService/Count"
	SalesQuotationsService_DownloadAsCSV_FullMethodName                              = "/Scailo.SalesQuotationsService/DownloadAsCSV"
)

// SalesQuotationsServiceClient is the client API for SalesQuotationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each sales quotation
type SalesQuotationsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *SalesQuotationsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *SalesQuotationsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *SalesQuotationsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *SalesQuotationsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the sales quotation
	Autofill(ctx context.Context, in *SalesQuotationsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Amend the sales quotation and send for revision
	Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add multiple items to a sales quotation
	AddMultipleSalesQuotationItems(ctx context.Context, in *SalesQuotationsServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a sales quotation
	AddSalesQuotationItem(ctx context.Context, in *SalesQuotationsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Modify an item in a sales quotation
	ModifySalesQuotationItem(ctx context.Context, in *SalesQuotationsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Approve an item in a sales quotation
	ApproveSalesQuotationItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a sales quotation
	DeleteSalesQuotationItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a sales quotation
	ReorderSalesQuotationItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Sales Quotation Item by ID
	ViewSalesQuotationItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotationItem, error)
	// View Sales Quotation Item's price after factoring in the discount
	ViewSalesQuotationItemPrice(ctx context.Context, in *SalesQuotationItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PriceResponse, error)
	// View approved sales quotation items for given sales quotation ID
	ViewApprovedSalesQuotationItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesQuotationItemsList, error)
	// View unapproved sales quotation items for given sales quotation ID
	ViewUnapprovedSalesQuotationItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesQuotationItemsList, error)
	// View the history of the sales quotation item
	ViewSalesQuotationItemHistory(ctx context.Context, in *SalesQuotationItemHistoryRequest, opts ...grpc.CallOption) (*SalesQuotationItemsList, error)
	// View approved sales quotation items for given sales quotation ID with pagination
	ViewPaginatedApprovedSalesQuotationItems(ctx context.Context, in *SalesQuotationItemsSearchRequest, opts ...grpc.CallOption) (*SalesQuotationsServicePaginatedItemsResponse, error)
	// View unapproved sales quotation items for given sales quotation ID with pagination
	ViewPaginatedUnapprovedSalesQuotationItems(ctx context.Context, in *SalesQuotationItemsSearchRequest, opts ...grpc.CallOption) (*SalesQuotationsServicePaginatedItemsResponse, error)
	// Search through sales quotation items with pagination
	SearchItemsWithPagination(ctx context.Context, in *SalesQuotationItemsSearchRequest, opts ...grpc.CallOption) (*SalesQuotationsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadSalesQuotationItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a contact
	AddSalesQuotationContact(ctx context.Context, in *SalesQuotationsServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a contact
	ApproveSalesQuotationContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a contact
	DeleteSalesQuotationContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a contact for the given ID
	ViewSalesQuotationContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotationContact, error)
	// View all contacts for given sales quotation UUID
	ViewSalesQuotationContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesQuotationContactsList, error)
	// Add a reference
	AddSalesQuotationReference(ctx context.Context, in *SalesQuotationsServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a reference
	ApproveSalesQuotationReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a reference
	DeleteSalesQuotationReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a reference for the given ID
	ViewSalesQuotationReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotationReference, error)
	// View all references for given sales quotation ID
	ViewSalesQuotationReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotationReferencesList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotation, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesQuotation, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SalesQuotation, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotation, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesQuotation, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalesQuotationsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalesQuotationsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesQuotationsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *SalesQuotationsServicePaginationReq, opts ...grpc.CallOption) (*SalesQuotationsServicePaginationResponse, error)
	// View all the amendments made
	ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error)
	// View prospective families for the given sales quotation
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective sales quotation item info for the given family ID and sales quotation ID
	ViewProspectiveSalesQuotationItem(ctx context.Context, in *SalesQuotationItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalesQuotationsServiceItemCreateRequest, error)
	// Other view operations
	// View all sales orders IDs that are associated with the given sales quotation ID
	ViewAssociatedSalesOrdersIDs(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download sales quotation with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *SalesQuotationsServiceSearchAllReq, opts ...grpc.CallOption) (*SalesQuotationsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *SalesQuotationsServiceFilterReq, opts ...grpc.CallOption) (*SalesQuotationsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *SalesQuotationsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *SalesQuotationsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type salesQuotationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesQuotationsServiceClient(cc grpc.ClientConnInterface) SalesQuotationsServiceClient {
	return &salesQuotationsServiceClient{cc}
}

func (c *salesQuotationsServiceClient) Create(ctx context.Context, in *SalesQuotationsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Draft(ctx context.Context, in *SalesQuotationsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) DraftUpdate(ctx context.Context, in *SalesQuotationsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) RevisionUpdate(ctx context.Context, in *SalesQuotationsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Autofill(ctx context.Context, in *SalesQuotationsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, SalesQuotationsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) AddMultipleSalesQuotationItems(ctx context.Context, in *SalesQuotationsServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_AddMultipleSalesQuotationItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) AddSalesQuotationItem(ctx context.Context, in *SalesQuotationsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_AddSalesQuotationItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ModifySalesQuotationItem(ctx context.Context, in *SalesQuotationsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ModifySalesQuotationItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ApproveSalesQuotationItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ApproveSalesQuotationItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) DeleteSalesQuotationItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_DeleteSalesQuotationItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ReorderSalesQuotationItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ReorderSalesQuotationItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewSalesQuotationItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotationItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationItem)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewSalesQuotationItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewSalesQuotationItemPrice(ctx context.Context, in *SalesQuotationItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewSalesQuotationItemPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewApprovedSalesQuotationItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesQuotationItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationItemsList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewApprovedSalesQuotationItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewUnapprovedSalesQuotationItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesQuotationItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationItemsList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewUnapprovedSalesQuotationItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewSalesQuotationItemHistory(ctx context.Context, in *SalesQuotationItemHistoryRequest, opts ...grpc.CallOption) (*SalesQuotationItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationItemsList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewSalesQuotationItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewPaginatedApprovedSalesQuotationItems(ctx context.Context, in *SalesQuotationItemsSearchRequest, opts ...grpc.CallOption) (*SalesQuotationsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewPaginatedApprovedSalesQuotationItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewPaginatedUnapprovedSalesQuotationItems(ctx context.Context, in *SalesQuotationItemsSearchRequest, opts ...grpc.CallOption) (*SalesQuotationsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewPaginatedUnapprovedSalesQuotationItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) SearchItemsWithPagination(ctx context.Context, in *SalesQuotationItemsSearchRequest, opts ...grpc.CallOption) (*SalesQuotationsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesQuotationsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesQuotationsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) UploadSalesQuotationItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_UploadSalesQuotationItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) AddSalesQuotationContact(ctx context.Context, in *SalesQuotationsServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_AddSalesQuotationContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ApproveSalesQuotationContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ApproveSalesQuotationContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) DeleteSalesQuotationContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_DeleteSalesQuotationContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewSalesQuotationContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotationContact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationContact)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewSalesQuotationContactByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewSalesQuotationContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesQuotationContactsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationContactsList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewSalesQuotationContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) AddSalesQuotationReference(ctx context.Context, in *SalesQuotationsServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_AddSalesQuotationReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ApproveSalesQuotationReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ApproveSalesQuotationReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) DeleteSalesQuotationReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_DeleteSalesQuotationReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewSalesQuotationReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotationReference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationReference)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewSalesQuotationReferenceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewSalesQuotationReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotationReferencesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationReferencesList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewSalesQuotationReferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotation)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesQuotation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotation)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SalesQuotation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotation)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesQuotation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotation)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesQuotation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotation)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalesQuotationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationsList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalesQuotationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationsList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesQuotationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationsList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewWithPagination(ctx context.Context, in *SalesQuotationsServicePaginationReq, opts ...grpc.CallOption) (*SalesQuotationsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationsServicePaginationResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendmentLogsList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewProspectiveSalesQuotationItem(ctx context.Context, in *SalesQuotationItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalesQuotationsServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationsServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewProspectiveSalesQuotationItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) ViewAssociatedSalesOrdersIDs(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_ViewAssociatedSalesOrdersIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesQuotationsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) SearchAll(ctx context.Context, in *SalesQuotationsServiceSearchAllReq, opts ...grpc.CallOption) (*SalesQuotationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationsList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Filter(ctx context.Context, in *SalesQuotationsServiceFilterReq, opts ...grpc.CallOption) (*SalesQuotationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesQuotationsList)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) Count(ctx context.Context, in *SalesQuotationsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalesQuotationsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesQuotationsServiceClient) DownloadAsCSV(ctx context.Context, in *SalesQuotationsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesQuotationsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesQuotationsService
