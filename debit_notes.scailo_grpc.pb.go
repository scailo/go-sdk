// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: debit_notes.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DebitNotesService_Create_FullMethodName                                = "/Scailo.DebitNotesService/Create"
	DebitNotesService_Draft_FullMethodName                                 = "/Scailo.DebitNotesService/Draft"
	DebitNotesService_DraftUpdate_FullMethodName                           = "/Scailo.DebitNotesService/DraftUpdate"
	DebitNotesService_SendForVerification_FullMethodName                   = "/Scailo.DebitNotesService/SendForVerification"
	DebitNotesService_Verify_FullMethodName                                = "/Scailo.DebitNotesService/Verify"
	DebitNotesService_Approve_FullMethodName                               = "/Scailo.DebitNotesService/Approve"
	DebitNotesService_SendForRevision_FullMethodName                       = "/Scailo.DebitNotesService/SendForRevision"
	DebitNotesService_RevisionUpdate_FullMethodName                        = "/Scailo.DebitNotesService/RevisionUpdate"
	DebitNotesService_Halt_FullMethodName                                  = "/Scailo.DebitNotesService/Halt"
	DebitNotesService_Discard_FullMethodName                               = "/Scailo.DebitNotesService/Discard"
	DebitNotesService_Restore_FullMethodName                               = "/Scailo.DebitNotesService/Restore"
	DebitNotesService_Complete_FullMethodName                              = "/Scailo.DebitNotesService/Complete"
	DebitNotesService_Repeat_FullMethodName                                = "/Scailo.DebitNotesService/Repeat"
	DebitNotesService_Reopen_FullMethodName                                = "/Scailo.DebitNotesService/Reopen"
	DebitNotesService_CommentAdd_FullMethodName                            = "/Scailo.DebitNotesService/CommentAdd"
	DebitNotesService_SendEmail_FullMethodName                             = "/Scailo.DebitNotesService/SendEmail"
	DebitNotesService_Autofill_FullMethodName                              = "/Scailo.DebitNotesService/Autofill"
	DebitNotesService_CreateMagicLink_FullMethodName                       = "/Scailo.DebitNotesService/CreateMagicLink"
	DebitNotesService_AddMultipleDebitNoteItems_FullMethodName             = "/Scailo.DebitNotesService/AddMultipleDebitNoteItems"
	DebitNotesService_AddDebitNoteItem_FullMethodName                      = "/Scailo.DebitNotesService/AddDebitNoteItem"
	DebitNotesService_ModifyDebitNoteItem_FullMethodName                   = "/Scailo.DebitNotesService/ModifyDebitNoteItem"
	DebitNotesService_ApproveDebitNoteItem_FullMethodName                  = "/Scailo.DebitNotesService/ApproveDebitNoteItem"
	DebitNotesService_DeleteDebitNoteItem_FullMethodName                   = "/Scailo.DebitNotesService/DeleteDebitNoteItem"
	DebitNotesService_ReorderDebitNoteItems_FullMethodName                 = "/Scailo.DebitNotesService/ReorderDebitNoteItems"
	DebitNotesService_ViewDebitNoteItemByID_FullMethodName                 = "/Scailo.DebitNotesService/ViewDebitNoteItemByID"
	DebitNotesService_ViewApprovedDebitNoteItems_FullMethodName            = "/Scailo.DebitNotesService/ViewApprovedDebitNoteItems"
	DebitNotesService_ViewUnapprovedDebitNoteItems_FullMethodName          = "/Scailo.DebitNotesService/ViewUnapprovedDebitNoteItems"
	DebitNotesService_ViewDebitNoteItemHistory_FullMethodName              = "/Scailo.DebitNotesService/ViewDebitNoteItemHistory"
	DebitNotesService_ViewPaginatedApprovedDebitNoteItems_FullMethodName   = "/Scailo.DebitNotesService/ViewPaginatedApprovedDebitNoteItems"
	DebitNotesService_ViewPaginatedUnapprovedDebitNoteItems_FullMethodName = "/Scailo.DebitNotesService/ViewPaginatedUnapprovedDebitNoteItems"
	DebitNotesService_SearchItemsWithPagination_FullMethodName             = "/Scailo.DebitNotesService/SearchItemsWithPagination"
	DebitNotesService_DownloadItemsAsCSV_FullMethodName                    = "/Scailo.DebitNotesService/DownloadItemsAsCSV"
	DebitNotesService_DownloadItemsTemplateAsCSV_FullMethodName            = "/Scailo.DebitNotesService/DownloadItemsTemplateAsCSV"
	DebitNotesService_UploadDebitNoteItems_FullMethodName                  = "/Scailo.DebitNotesService/UploadDebitNoteItems"
	DebitNotesService_AddDebitNoteReference_FullMethodName                 = "/Scailo.DebitNotesService/AddDebitNoteReference"
	DebitNotesService_ApproveDebitNoteReference_FullMethodName             = "/Scailo.DebitNotesService/ApproveDebitNoteReference"
	DebitNotesService_DeleteDebitNoteReference_FullMethodName              = "/Scailo.DebitNotesService/DeleteDebitNoteReference"
	DebitNotesService_ViewDebitNoteReferenceByID_FullMethodName            = "/Scailo.DebitNotesService/ViewDebitNoteReferenceByID"
	DebitNotesService_ViewDebitNoteReferences_FullMethodName               = "/Scailo.DebitNotesService/ViewDebitNoteReferences"
	DebitNotesService_ViewByID_FullMethodName                              = "/Scailo.DebitNotesService/ViewByID"
	DebitNotesService_ViewByUUID_FullMethodName                            = "/Scailo.DebitNotesService/ViewByUUID"
	DebitNotesService_ViewByReferenceID_FullMethodName                     = "/Scailo.DebitNotesService/ViewByReferenceID"
	DebitNotesService_ViewEssentialByID_FullMethodName                     = "/Scailo.DebitNotesService/ViewEssentialByID"
	DebitNotesService_ViewEssentialByUUID_FullMethodName                   = "/Scailo.DebitNotesService/ViewEssentialByUUID"
	DebitNotesService_ViewFromIDs_FullMethodName                           = "/Scailo.DebitNotesService/ViewFromIDs"
	DebitNotesService_ViewAncillaryParametersByUUID_FullMethodName         = "/Scailo.DebitNotesService/ViewAncillaryParametersByUUID"
	DebitNotesService_ViewAll_FullMethodName                               = "/Scailo.DebitNotesService/ViewAll"
	DebitNotesService_ViewAllForEntityUUID_FullMethodName                  = "/Scailo.DebitNotesService/ViewAllForEntityUUID"
	DebitNotesService_ViewWithPagination_FullMethodName                    = "/Scailo.DebitNotesService/ViewWithPagination"
	DebitNotesService_ViewProspectiveFamilies_FullMethodName               = "/Scailo.DebitNotesService/ViewProspectiveFamilies"
	DebitNotesService_FilterProspectiveFamilies_FullMethodName             = "/Scailo.DebitNotesService/FilterProspectiveFamilies"
	DebitNotesService_ViewProspectiveDebitNoteItem_FullMethodName          = "/Scailo.DebitNotesService/ViewProspectiveDebitNoteItem"
	DebitNotesService_ViewReturnedStatistics_FullMethodName                = "/Scailo.DebitNotesService/ViewReturnedStatistics"
	DebitNotesService_IsDownloadable_FullMethodName                        = "/Scailo.DebitNotesService/IsDownloadable"
	DebitNotesService_DownloadByUUID_FullMethodName                        = "/Scailo.DebitNotesService/DownloadByUUID"
	DebitNotesService_ViewAddedFamilyQuantityForSource_FullMethodName      = "/Scailo.DebitNotesService/ViewAddedFamilyQuantityForSource"
	DebitNotesService_SearchAll_FullMethodName                             = "/Scailo.DebitNotesService/SearchAll"
	DebitNotesService_Filter_FullMethodName                                = "/Scailo.DebitNotesService/Filter"
	DebitNotesService_CountInStatus_FullMethodName                         = "/Scailo.DebitNotesService/CountInStatus"
	DebitNotesService_Count_FullMethodName                                 = "/Scailo.DebitNotesService/Count"
	DebitNotesService_AccruedValue_FullMethodName                          = "/Scailo.DebitNotesService/AccruedValue"
	DebitNotesService_DownloadAsCSV_FullMethodName                         = "/Scailo.DebitNotesService/DownloadAsCSV"
)

// DebitNotesServiceClient is the client API for DebitNotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each debit note
type DebitNotesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *DebitNotesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *DebitNotesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *DebitNotesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *DebitNotesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the debit note
	Autofill(ctx context.Context, in *DebitNotesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add multiple items to a debit note
	AddMultipleDebitNoteItems(ctx context.Context, in *DebitNotesServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a debit note
	AddDebitNoteItem(ctx context.Context, in *DebitNotesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a debit note
	ModifyDebitNoteItem(ctx context.Context, in *DebitNotesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a debit note
	ApproveDebitNoteItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a debit note
	DeleteDebitNoteItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a debit note
	ReorderDebitNoteItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Debit Note Item by ID
	ViewDebitNoteItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*DebitNoteItem, error)
	// View approved debit note items for given debit note ID
	ViewApprovedDebitNoteItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*DebitNoteItemsList, error)
	// View unapproved debit note items for given debit note ID
	ViewUnapprovedDebitNoteItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*DebitNoteItemsList, error)
	// View the history of the debit note item
	ViewDebitNoteItemHistory(ctx context.Context, in *DebitNoteItemHistoryRequest, opts ...grpc.CallOption) (*DebitNoteItemsList, error)
	// View approved debit note items for given debit note ID with pagination
	ViewPaginatedApprovedDebitNoteItems(ctx context.Context, in *DebitNoteItemsSearchRequest, opts ...grpc.CallOption) (*DebitNotesServicePaginatedItemsResponse, error)
	// View unapproved debit note items for given debit note ID with pagination
	ViewPaginatedUnapprovedDebitNoteItems(ctx context.Context, in *DebitNoteItemsSearchRequest, opts ...grpc.CallOption) (*DebitNotesServicePaginatedItemsResponse, error)
	// Search through debit note items with pagination
	SearchItemsWithPagination(ctx context.Context, in *DebitNoteItemsSearchRequest, opts ...grpc.CallOption) (*DebitNotesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadDebitNoteItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a reference
	AddDebitNoteReference(ctx context.Context, in *DebitNotesServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a reference
	ApproveDebitNoteReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a reference
	DeleteDebitNoteReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a reference for the given ID
	ViewDebitNoteReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*DebitNoteReference, error)
	// View all references for given debit note ID
	ViewDebitNoteReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*DebitNoteReferencesList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*DebitNote, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DebitNote, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*DebitNote, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*DebitNote, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DebitNote, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*DebitNotesList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DebitNoteAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*DebitNotesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DebitNotesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *DebitNotesServicePaginationReq, opts ...grpc.CallOption) (*DebitNotesServicePaginationResponse, error)
	// View prospective families for the given debit note
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective debit note item info for the given family ID and debit note ID
	ViewProspectiveDebitNoteItem(ctx context.Context, in *DebitNoteItemProspectiveInfoRequest, opts ...grpc.CallOption) (*DebitNotesServiceItemCreateRequest, error)
	// View returned (purchase return) statistics of the debit note
	ViewReturnedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DebitNoteReturnStatisticsList, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download debit note with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View already added quantities
	ViewAddedFamilyQuantityForSource(ctx context.Context, in *DebitNotesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *DebitNotesServiceSearchAllReq, opts ...grpc.CallOption) (*DebitNotesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *DebitNotesServiceFilterReq, opts ...grpc.CallOption) (*DebitNotesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *DebitNotesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// Returns the sum of the total value of all the records that match the given criteria
	AccruedValue(ctx context.Context, in *DebitNotesServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *DebitNotesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type debitNotesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebitNotesServiceClient(cc grpc.ClientConnInterface) DebitNotesServiceClient {
	return &debitNotesServiceClient{cc}
}

func (c *debitNotesServiceClient) Create(ctx context.Context, in *DebitNotesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Draft(ctx context.Context, in *DebitNotesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) DraftUpdate(ctx context.Context, in *DebitNotesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) RevisionUpdate(ctx context.Context, in *DebitNotesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Autofill(ctx context.Context, in *DebitNotesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, DebitNotesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) AddMultipleDebitNoteItems(ctx context.Context, in *DebitNotesServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_AddMultipleDebitNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) AddDebitNoteItem(ctx context.Context, in *DebitNotesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_AddDebitNoteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ModifyDebitNoteItem(ctx context.Context, in *DebitNotesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_ModifyDebitNoteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ApproveDebitNoteItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_ApproveDebitNoteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) DeleteDebitNoteItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_DeleteDebitNoteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ReorderDebitNoteItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_ReorderDebitNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewDebitNoteItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*DebitNoteItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNoteItem)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewDebitNoteItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewApprovedDebitNoteItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*DebitNoteItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNoteItemsList)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewApprovedDebitNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewUnapprovedDebitNoteItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*DebitNoteItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNoteItemsList)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewUnapprovedDebitNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewDebitNoteItemHistory(ctx context.Context, in *DebitNoteItemHistoryRequest, opts ...grpc.CallOption) (*DebitNoteItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNoteItemsList)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewDebitNoteItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewPaginatedApprovedDebitNoteItems(ctx context.Context, in *DebitNoteItemsSearchRequest, opts ...grpc.CallOption) (*DebitNotesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNotesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewPaginatedApprovedDebitNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewPaginatedUnapprovedDebitNoteItems(ctx context.Context, in *DebitNoteItemsSearchRequest, opts ...grpc.CallOption) (*DebitNotesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNotesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewPaginatedUnapprovedDebitNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) SearchItemsWithPagination(ctx context.Context, in *DebitNoteItemsSearchRequest, opts ...grpc.CallOption) (*DebitNotesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNotesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, DebitNotesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, DebitNotesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) UploadDebitNoteItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, DebitNotesService_UploadDebitNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) AddDebitNoteReference(ctx context.Context, in *DebitNotesServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_AddDebitNoteReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ApproveDebitNoteReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_ApproveDebitNoteReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) DeleteDebitNoteReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_DeleteDebitNoteReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewDebitNoteReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*DebitNoteReference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNoteReference)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewDebitNoteReferenceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewDebitNoteReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*DebitNoteReferencesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNoteReferencesList)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewDebitNoteReferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*DebitNote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNote)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DebitNote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNote)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*DebitNote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNote)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*DebitNote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNote)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DebitNote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNote)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*DebitNotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNotesList)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DebitNoteAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNoteAncillaryParameters)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*DebitNotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNotesList)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DebitNotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNotesList)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewWithPagination(ctx context.Context, in *DebitNotesServicePaginationReq, opts ...grpc.CallOption) (*DebitNotesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNotesServicePaginationResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, DebitNotesService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewProspectiveDebitNoteItem(ctx context.Context, in *DebitNoteItemProspectiveInfoRequest, opts ...grpc.CallOption) (*DebitNotesServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNotesServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewProspectiveDebitNoteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewReturnedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DebitNoteReturnStatisticsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNoteReturnStatisticsList)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewReturnedStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, DebitNotesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) ViewAddedFamilyQuantityForSource(ctx context.Context, in *DebitNotesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DualQuantitiesResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_ViewAddedFamilyQuantityForSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) SearchAll(ctx context.Context, in *DebitNotesServiceSearchAllReq, opts ...grpc.CallOption) (*DebitNotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNotesList)
	err := c.cc.Invoke(ctx, DebitNotesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Filter(ctx context.Context, in *DebitNotesServiceFilterReq, opts ...grpc.CallOption) (*DebitNotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebitNotesList)
	err := c.cc.Invoke(ctx, DebitNotesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) Count(ctx context.Context, in *DebitNotesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) AccruedValue(ctx context.Context, in *DebitNotesServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, DebitNotesService_AccruedValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debitNotesServiceClient) DownloadAsCSV(ctx context.Context, in *DebitNotesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, DebitNotesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebitNotesService
