// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sales_enquiries.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SalesEnquiriesService_Create_FullMethodName                                   = "/Scailo.SalesEnquiriesService/Create"
	SalesEnquiriesService_Draft_FullMethodName                                    = "/Scailo.SalesEnquiriesService/Draft"
	SalesEnquiriesService_DraftUpdate_FullMethodName                              = "/Scailo.SalesEnquiriesService/DraftUpdate"
	SalesEnquiriesService_SendForVerification_FullMethodName                      = "/Scailo.SalesEnquiriesService/SendForVerification"
	SalesEnquiriesService_Verify_FullMethodName                                   = "/Scailo.SalesEnquiriesService/Verify"
	SalesEnquiriesService_Approve_FullMethodName                                  = "/Scailo.SalesEnquiriesService/Approve"
	SalesEnquiriesService_SendForRevision_FullMethodName                          = "/Scailo.SalesEnquiriesService/SendForRevision"
	SalesEnquiriesService_RevisionUpdate_FullMethodName                           = "/Scailo.SalesEnquiriesService/RevisionUpdate"
	SalesEnquiriesService_Halt_FullMethodName                                     = "/Scailo.SalesEnquiriesService/Halt"
	SalesEnquiriesService_Discard_FullMethodName                                  = "/Scailo.SalesEnquiriesService/Discard"
	SalesEnquiriesService_Restore_FullMethodName                                  = "/Scailo.SalesEnquiriesService/Restore"
	SalesEnquiriesService_Complete_FullMethodName                                 = "/Scailo.SalesEnquiriesService/Complete"
	SalesEnquiriesService_Repeat_FullMethodName                                   = "/Scailo.SalesEnquiriesService/Repeat"
	SalesEnquiriesService_Reopen_FullMethodName                                   = "/Scailo.SalesEnquiriesService/Reopen"
	SalesEnquiriesService_CommentAdd_FullMethodName                               = "/Scailo.SalesEnquiriesService/CommentAdd"
	SalesEnquiriesService_SendEmail_FullMethodName                                = "/Scailo.SalesEnquiriesService/SendEmail"
	SalesEnquiriesService_Amend_FullMethodName                                    = "/Scailo.SalesEnquiriesService/Amend"
	SalesEnquiriesService_CreateMagicLink_FullMethodName                          = "/Scailo.SalesEnquiriesService/CreateMagicLink"
	SalesEnquiriesService_AddSalesEnquiryItem_FullMethodName                      = "/Scailo.SalesEnquiriesService/AddSalesEnquiryItem"
	SalesEnquiriesService_ModifySalesEnquiryItem_FullMethodName                   = "/Scailo.SalesEnquiriesService/ModifySalesEnquiryItem"
	SalesEnquiriesService_ApproveSalesEnquiryItem_FullMethodName                  = "/Scailo.SalesEnquiriesService/ApproveSalesEnquiryItem"
	SalesEnquiriesService_DeleteSalesEnquiryItem_FullMethodName                   = "/Scailo.SalesEnquiriesService/DeleteSalesEnquiryItem"
	SalesEnquiriesService_ReorderSalesEnquiryItems_FullMethodName                 = "/Scailo.SalesEnquiriesService/ReorderSalesEnquiryItems"
	SalesEnquiriesService_ViewSalesEnquiryItemByID_FullMethodName                 = "/Scailo.SalesEnquiriesService/ViewSalesEnquiryItemByID"
	SalesEnquiriesService_ViewApprovedSalesEnquiryItems_FullMethodName            = "/Scailo.SalesEnquiriesService/ViewApprovedSalesEnquiryItems"
	SalesEnquiriesService_ViewUnapprovedSalesEnquiryItems_FullMethodName          = "/Scailo.SalesEnquiriesService/ViewUnapprovedSalesEnquiryItems"
	SalesEnquiriesService_ViewSalesEnquiryItemHistory_FullMethodName              = "/Scailo.SalesEnquiriesService/ViewSalesEnquiryItemHistory"
	SalesEnquiriesService_ViewPaginatedApprovedSalesEnquiryItems_FullMethodName   = "/Scailo.SalesEnquiriesService/ViewPaginatedApprovedSalesEnquiryItems"
	SalesEnquiriesService_ViewPaginatedUnapprovedSalesEnquiryItems_FullMethodName = "/Scailo.SalesEnquiriesService/ViewPaginatedUnapprovedSalesEnquiryItems"
	SalesEnquiriesService_SearchItemsWithPagination_FullMethodName                = "/Scailo.SalesEnquiriesService/SearchItemsWithPagination"
	SalesEnquiriesService_DownloadItemsAsCSV_FullMethodName                       = "/Scailo.SalesEnquiriesService/DownloadItemsAsCSV"
	SalesEnquiriesService_DownloadItemsTemplateAsCSV_FullMethodName               = "/Scailo.SalesEnquiriesService/DownloadItemsTemplateAsCSV"
	SalesEnquiriesService_UploadSalesEnquiryItems_FullMethodName                  = "/Scailo.SalesEnquiriesService/UploadSalesEnquiryItems"
	SalesEnquiriesService_AddSalesEnquiryContact_FullMethodName                   = "/Scailo.SalesEnquiriesService/AddSalesEnquiryContact"
	SalesEnquiriesService_ApproveSalesEnquiryContact_FullMethodName               = "/Scailo.SalesEnquiriesService/ApproveSalesEnquiryContact"
	SalesEnquiriesService_DeleteSalesEnquiryContact_FullMethodName                = "/Scailo.SalesEnquiriesService/DeleteSalesEnquiryContact"
	SalesEnquiriesService_ViewSalesEnquiryContactByID_FullMethodName              = "/Scailo.SalesEnquiriesService/ViewSalesEnquiryContactByID"
	SalesEnquiriesService_ViewSalesEnquiryContacts_FullMethodName                 = "/Scailo.SalesEnquiriesService/ViewSalesEnquiryContacts"
	SalesEnquiriesService_ViewByID_FullMethodName                                 = "/Scailo.SalesEnquiriesService/ViewByID"
	SalesEnquiriesService_ViewByUUID_FullMethodName                               = "/Scailo.SalesEnquiriesService/ViewByUUID"
	SalesEnquiriesService_ViewByReferenceID_FullMethodName                        = "/Scailo.SalesEnquiriesService/ViewByReferenceID"
	SalesEnquiriesService_ViewEssentialByID_FullMethodName                        = "/Scailo.SalesEnquiriesService/ViewEssentialByID"
	SalesEnquiriesService_ViewEssentialByUUID_FullMethodName                      = "/Scailo.SalesEnquiriesService/ViewEssentialByUUID"
	SalesEnquiriesService_ViewFromIDs_FullMethodName                              = "/Scailo.SalesEnquiriesService/ViewFromIDs"
	SalesEnquiriesService_ViewAncillaryParametersByUUID_FullMethodName            = "/Scailo.SalesEnquiriesService/ViewAncillaryParametersByUUID"
	SalesEnquiriesService_ViewAll_FullMethodName                                  = "/Scailo.SalesEnquiriesService/ViewAll"
	SalesEnquiriesService_ViewAllForEntityUUID_FullMethodName                     = "/Scailo.SalesEnquiriesService/ViewAllForEntityUUID"
	SalesEnquiriesService_ViewWithPagination_FullMethodName                       = "/Scailo.SalesEnquiriesService/ViewWithPagination"
	SalesEnquiriesService_ViewAmendments_FullMethodName                           = "/Scailo.SalesEnquiriesService/ViewAmendments"
	SalesEnquiriesService_ViewAssociatedSalesOrdersIDs_FullMethodName             = "/Scailo.SalesEnquiriesService/ViewAssociatedSalesOrdersIDs"
	SalesEnquiriesService_IsDownloadable_FullMethodName                           = "/Scailo.SalesEnquiriesService/IsDownloadable"
	SalesEnquiriesService_DownloadByUUID_FullMethodName                           = "/Scailo.SalesEnquiriesService/DownloadByUUID"
	SalesEnquiriesService_SearchAll_FullMethodName                                = "/Scailo.SalesEnquiriesService/SearchAll"
	SalesEnquiriesService_Filter_FullMethodName                                   = "/Scailo.SalesEnquiriesService/Filter"
	SalesEnquiriesService_CountInStatus_FullMethodName                            = "/Scailo.SalesEnquiriesService/CountInStatus"
	SalesEnquiriesService_Count_FullMethodName                                    = "/Scailo.SalesEnquiriesService/Count"
	SalesEnquiriesService_DownloadAsCSV_FullMethodName                            = "/Scailo.SalesEnquiriesService/DownloadAsCSV"
)

// SalesEnquiriesServiceClient is the client API for SalesEnquiriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each sales enquiry
type SalesEnquiriesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *SalesEnquiriesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *SalesEnquiriesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *SalesEnquiriesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *SalesEnquiriesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Amend the sales enquiry and send for revision
	Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add an item to a sales enquiry
	AddSalesEnquiryItem(ctx context.Context, in *SalesEnquiriesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a sales enquiry
	ModifySalesEnquiryItem(ctx context.Context, in *SalesEnquiriesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a sales enquiry
	ApproveSalesEnquiryItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a sales enquiry
	DeleteSalesEnquiryItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a sales enquiry
	ReorderSalesEnquiryItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Sales Enquiry Item by ID
	ViewSalesEnquiryItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesEnquiryItem, error)
	// View approved sales enquiry items for given sales enquiry ID
	ViewApprovedSalesEnquiryItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesEnquiriesItemsList, error)
	// View unapproved sales enquiry items for given sales enquiry ID
	ViewUnapprovedSalesEnquiryItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesEnquiriesItemsList, error)
	// View the history of the sales enquiry item
	ViewSalesEnquiryItemHistory(ctx context.Context, in *SalesEnquiryItemHistoryRequest, opts ...grpc.CallOption) (*SalesEnquiriesItemsList, error)
	// View approved sales enquiry items for given sales enquiry ID with pagination
	ViewPaginatedApprovedSalesEnquiryItems(ctx context.Context, in *SalesEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*SalesEnquiriesServicePaginatedItemsResponse, error)
	// View unapproved sales enquiry items for given sales enquiry ID with pagination
	ViewPaginatedUnapprovedSalesEnquiryItems(ctx context.Context, in *SalesEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*SalesEnquiriesServicePaginatedItemsResponse, error)
	// Search through sales enquiry items with pagination
	SearchItemsWithPagination(ctx context.Context, in *SalesEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*SalesEnquiriesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadSalesEnquiryItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a contact
	AddSalesEnquiryContact(ctx context.Context, in *SalesEnquiriesServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a contact
	ApproveSalesEnquiryContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a contact
	DeleteSalesEnquiryContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a contact for the given ID
	ViewSalesEnquiryContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesEnquiryContact, error)
	// View all contacts for given sales enquiry UUID
	ViewSalesEnquiryContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesEnquiryContactsList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesEnquiry, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesEnquiry, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SalesEnquiry, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesEnquiry, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesEnquiry, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalesEnquiriesList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesEnquiryAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalesEnquiriesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesEnquiriesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *SalesEnquiriesServicePaginationReq, opts ...grpc.CallOption) (*SalesEnquiriesServicePaginationResponse, error)
	// View all the amendments made
	ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error)
	// View all sales orders IDs that are associated with the given sales enquiry ID
	ViewAssociatedSalesOrdersIDs(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download sales enquiry with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *SalesEnquiriesServiceSearchAllReq, opts ...grpc.CallOption) (*SalesEnquiriesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *SalesEnquiriesServiceFilterReq, opts ...grpc.CallOption) (*SalesEnquiriesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *SalesEnquiriesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *SalesEnquiriesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type salesEnquiriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesEnquiriesServiceClient(cc grpc.ClientConnInterface) SalesEnquiriesServiceClient {
	return &salesEnquiriesServiceClient{cc}
}

func (c *salesEnquiriesServiceClient) Create(ctx context.Context, in *SalesEnquiriesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Draft(ctx context.Context, in *SalesEnquiriesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) DraftUpdate(ctx context.Context, in *SalesEnquiriesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) RevisionUpdate(ctx context.Context, in *SalesEnquiriesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) AddSalesEnquiryItem(ctx context.Context, in *SalesEnquiriesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_AddSalesEnquiryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ModifySalesEnquiryItem(ctx context.Context, in *SalesEnquiriesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ModifySalesEnquiryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ApproveSalesEnquiryItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ApproveSalesEnquiryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) DeleteSalesEnquiryItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_DeleteSalesEnquiryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ReorderSalesEnquiryItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ReorderSalesEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewSalesEnquiryItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesEnquiryItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiryItem)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewSalesEnquiryItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewApprovedSalesEnquiryItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesEnquiriesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesItemsList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewApprovedSalesEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewUnapprovedSalesEnquiryItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesEnquiriesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesItemsList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewUnapprovedSalesEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewSalesEnquiryItemHistory(ctx context.Context, in *SalesEnquiryItemHistoryRequest, opts ...grpc.CallOption) (*SalesEnquiriesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesItemsList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewSalesEnquiryItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewPaginatedApprovedSalesEnquiryItems(ctx context.Context, in *SalesEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*SalesEnquiriesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewPaginatedApprovedSalesEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewPaginatedUnapprovedSalesEnquiryItems(ctx context.Context, in *SalesEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*SalesEnquiriesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewPaginatedUnapprovedSalesEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) SearchItemsWithPagination(ctx context.Context, in *SalesEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*SalesEnquiriesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) UploadSalesEnquiryItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_UploadSalesEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) AddSalesEnquiryContact(ctx context.Context, in *SalesEnquiriesServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_AddSalesEnquiryContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ApproveSalesEnquiryContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ApproveSalesEnquiryContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) DeleteSalesEnquiryContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_DeleteSalesEnquiryContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewSalesEnquiryContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesEnquiryContact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiryContact)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewSalesEnquiryContactByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewSalesEnquiryContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesEnquiryContactsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiryContactsList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewSalesEnquiryContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesEnquiry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiry)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesEnquiry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiry)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SalesEnquiry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiry)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesEnquiry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiry)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesEnquiry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiry)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalesEnquiriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesEnquiryAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiryAncillaryParameters)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalesEnquiriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesEnquiriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewWithPagination(ctx context.Context, in *SalesEnquiriesServicePaginationReq, opts ...grpc.CallOption) (*SalesEnquiriesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesServicePaginationResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendmentLogsList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) ViewAssociatedSalesOrdersIDs(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_ViewAssociatedSalesOrdersIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) SearchAll(ctx context.Context, in *SalesEnquiriesServiceSearchAllReq, opts ...grpc.CallOption) (*SalesEnquiriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Filter(ctx context.Context, in *SalesEnquiriesServiceFilterReq, opts ...grpc.CallOption) (*SalesEnquiriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesEnquiriesList)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) Count(ctx context.Context, in *SalesEnquiriesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesEnquiriesServiceClient) DownloadAsCSV(ctx context.Context, in *SalesEnquiriesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesEnquiriesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesEnquiriesService
