// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: goals.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoalsService_Create_FullMethodName                           = "/Scailo.GoalsService/Create"
	GoalsService_Draft_FullMethodName                            = "/Scailo.GoalsService/Draft"
	GoalsService_DraftUpdate_FullMethodName                      = "/Scailo.GoalsService/DraftUpdate"
	GoalsService_SendForVerification_FullMethodName              = "/Scailo.GoalsService/SendForVerification"
	GoalsService_Verify_FullMethodName                           = "/Scailo.GoalsService/Verify"
	GoalsService_Approve_FullMethodName                          = "/Scailo.GoalsService/Approve"
	GoalsService_SendForRevision_FullMethodName                  = "/Scailo.GoalsService/SendForRevision"
	GoalsService_RevisionUpdate_FullMethodName                   = "/Scailo.GoalsService/RevisionUpdate"
	GoalsService_Halt_FullMethodName                             = "/Scailo.GoalsService/Halt"
	GoalsService_Discard_FullMethodName                          = "/Scailo.GoalsService/Discard"
	GoalsService_Restore_FullMethodName                          = "/Scailo.GoalsService/Restore"
	GoalsService_Complete_FullMethodName                         = "/Scailo.GoalsService/Complete"
	GoalsService_Repeat_FullMethodName                           = "/Scailo.GoalsService/Repeat"
	GoalsService_Reopen_FullMethodName                           = "/Scailo.GoalsService/Reopen"
	GoalsService_CommentAdd_FullMethodName                       = "/Scailo.GoalsService/CommentAdd"
	GoalsService_Clone_FullMethodName                            = "/Scailo.GoalsService/Clone"
	GoalsService_AddGoalItem_FullMethodName                      = "/Scailo.GoalsService/AddGoalItem"
	GoalsService_ModifyGoalItem_FullMethodName                   = "/Scailo.GoalsService/ModifyGoalItem"
	GoalsService_ApproveGoalItem_FullMethodName                  = "/Scailo.GoalsService/ApproveGoalItem"
	GoalsService_DeleteGoalItem_FullMethodName                   = "/Scailo.GoalsService/DeleteGoalItem"
	GoalsService_ReorderGoalItems_FullMethodName                 = "/Scailo.GoalsService/ReorderGoalItems"
	GoalsService_ViewGoalItemByID_FullMethodName                 = "/Scailo.GoalsService/ViewGoalItemByID"
	GoalsService_ViewApprovedGoalItems_FullMethodName            = "/Scailo.GoalsService/ViewApprovedGoalItems"
	GoalsService_ViewUnapprovedGoalItems_FullMethodName          = "/Scailo.GoalsService/ViewUnapprovedGoalItems"
	GoalsService_ViewGoalItemHistory_FullMethodName              = "/Scailo.GoalsService/ViewGoalItemHistory"
	GoalsService_ViewPaginatedApprovedGoalItems_FullMethodName   = "/Scailo.GoalsService/ViewPaginatedApprovedGoalItems"
	GoalsService_ViewPaginatedUnapprovedGoalItems_FullMethodName = "/Scailo.GoalsService/ViewPaginatedUnapprovedGoalItems"
	GoalsService_SearchItemsWithPagination_FullMethodName        = "/Scailo.GoalsService/SearchItemsWithPagination"
	GoalsService_DownloadItemsAsCSV_FullMethodName               = "/Scailo.GoalsService/DownloadItemsAsCSV"
	GoalsService_DownloadItemsTemplateAsCSV_FullMethodName       = "/Scailo.GoalsService/DownloadItemsTemplateAsCSV"
	GoalsService_UploadGoalItems_FullMethodName                  = "/Scailo.GoalsService/UploadGoalItems"
	GoalsService_ViewByID_FullMethodName                         = "/Scailo.GoalsService/ViewByID"
	GoalsService_ViewByUUID_FullMethodName                       = "/Scailo.GoalsService/ViewByUUID"
	GoalsService_ViewByReferenceID_FullMethodName                = "/Scailo.GoalsService/ViewByReferenceID"
	GoalsService_ViewEssentialByID_FullMethodName                = "/Scailo.GoalsService/ViewEssentialByID"
	GoalsService_ViewEssentialByUUID_FullMethodName              = "/Scailo.GoalsService/ViewEssentialByUUID"
	GoalsService_ViewFromIDs_FullMethodName                      = "/Scailo.GoalsService/ViewFromIDs"
	GoalsService_ViewAll_FullMethodName                          = "/Scailo.GoalsService/ViewAll"
	GoalsService_ViewAllForEntityUUID_FullMethodName             = "/Scailo.GoalsService/ViewAllForEntityUUID"
	GoalsService_ViewWithPagination_FullMethodName               = "/Scailo.GoalsService/ViewWithPagination"
	GoalsService_SearchAll_FullMethodName                        = "/Scailo.GoalsService/SearchAll"
	GoalsService_Filter_FullMethodName                           = "/Scailo.GoalsService/Filter"
	GoalsService_CountInStatus_FullMethodName                    = "/Scailo.GoalsService/CountInStatus"
	GoalsService_Count_FullMethodName                            = "/Scailo.GoalsService/Count"
	GoalsService_DownloadAsCSV_FullMethodName                    = "/Scailo.GoalsService/DownloadAsCSV"
)

// GoalsServiceClient is the client API for GoalsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each goal
type GoalsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *GoalsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *GoalsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *GoalsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *GoalsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Clone goal from an existing goal (denoted by the identifier)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a goal
	AddGoalItem(ctx context.Context, in *GoalsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a goal
	ModifyGoalItem(ctx context.Context, in *GoalsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a goal
	ApproveGoalItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a goal
	DeleteGoalItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a goal
	ReorderGoalItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View goal Item by ID
	ViewGoalItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GoalItem, error)
	// View approved goal items for given goal ID
	ViewApprovedGoalItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*GoalsItemsList, error)
	// View unapproved goal items for given goal ID
	ViewUnapprovedGoalItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*GoalsItemsList, error)
	// View the history of the goal item
	ViewGoalItemHistory(ctx context.Context, in *GoalItemHistoryRequest, opts ...grpc.CallOption) (*GoalsItemsList, error)
	// View approved goal items for given goal ID with pagination
	ViewPaginatedApprovedGoalItems(ctx context.Context, in *GoalItemsSearchRequest, opts ...grpc.CallOption) (*GoalsServicePaginatedItemsResponse, error)
	// View unapproved goal items for given goal ID with pagination
	ViewPaginatedUnapprovedGoalItems(ctx context.Context, in *GoalItemsSearchRequest, opts ...grpc.CallOption) (*GoalsServicePaginatedItemsResponse, error)
	// Search through goal items with pagination
	SearchItemsWithPagination(ctx context.Context, in *GoalItemsSearchRequest, opts ...grpc.CallOption) (*GoalsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadGoalItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Goal, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Goal, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Goal, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Goal, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Goal, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*GoalsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*GoalsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GoalsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *GoalsServicePaginationReq, opts ...grpc.CallOption) (*GoalsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *GoalsServiceSearchAllReq, opts ...grpc.CallOption) (*GoalsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *GoalsServiceFilterReq, opts ...grpc.CallOption) (*GoalsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *GoalsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *GoalsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type goalsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoalsServiceClient(cc grpc.ClientConnInterface) GoalsServiceClient {
	return &goalsServiceClient{cc}
}

func (c *goalsServiceClient) Create(ctx context.Context, in *GoalsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Draft(ctx context.Context, in *GoalsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) DraftUpdate(ctx context.Context, in *GoalsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) RevisionUpdate(ctx context.Context, in *GoalsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) AddGoalItem(ctx context.Context, in *GoalsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_AddGoalItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ModifyGoalItem(ctx context.Context, in *GoalsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_ModifyGoalItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ApproveGoalItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_ApproveGoalItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) DeleteGoalItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_DeleteGoalItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ReorderGoalItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoalsService_ReorderGoalItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewGoalItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GoalItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalItem)
	err := c.cc.Invoke(ctx, GoalsService_ViewGoalItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewApprovedGoalItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*GoalsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsItemsList)
	err := c.cc.Invoke(ctx, GoalsService_ViewApprovedGoalItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewUnapprovedGoalItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*GoalsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsItemsList)
	err := c.cc.Invoke(ctx, GoalsService_ViewUnapprovedGoalItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewGoalItemHistory(ctx context.Context, in *GoalItemHistoryRequest, opts ...grpc.CallOption) (*GoalsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsItemsList)
	err := c.cc.Invoke(ctx, GoalsService_ViewGoalItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewPaginatedApprovedGoalItems(ctx context.Context, in *GoalItemsSearchRequest, opts ...grpc.CallOption) (*GoalsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, GoalsService_ViewPaginatedApprovedGoalItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewPaginatedUnapprovedGoalItems(ctx context.Context, in *GoalItemsSearchRequest, opts ...grpc.CallOption) (*GoalsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, GoalsService_ViewPaginatedUnapprovedGoalItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) SearchItemsWithPagination(ctx context.Context, in *GoalItemsSearchRequest, opts ...grpc.CallOption) (*GoalsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, GoalsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, GoalsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, GoalsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) UploadGoalItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, GoalsService_UploadGoalItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Goal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Goal)
	err := c.cc.Invoke(ctx, GoalsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Goal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Goal)
	err := c.cc.Invoke(ctx, GoalsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Goal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Goal)
	err := c.cc.Invoke(ctx, GoalsService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Goal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Goal)
	err := c.cc.Invoke(ctx, GoalsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Goal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Goal)
	err := c.cc.Invoke(ctx, GoalsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*GoalsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsList)
	err := c.cc.Invoke(ctx, GoalsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*GoalsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsList)
	err := c.cc.Invoke(ctx, GoalsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GoalsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsList)
	err := c.cc.Invoke(ctx, GoalsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) ViewWithPagination(ctx context.Context, in *GoalsServicePaginationReq, opts ...grpc.CallOption) (*GoalsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsServicePaginationResponse)
	err := c.cc.Invoke(ctx, GoalsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) SearchAll(ctx context.Context, in *GoalsServiceSearchAllReq, opts ...grpc.CallOption) (*GoalsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsList)
	err := c.cc.Invoke(ctx, GoalsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Filter(ctx context.Context, in *GoalsServiceFilterReq, opts ...grpc.CallOption) (*GoalsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalsList)
	err := c.cc.Invoke(ctx, GoalsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, GoalsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) Count(ctx context.Context, in *GoalsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, GoalsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalsServiceClient) DownloadAsCSV(ctx context.Context, in *GoalsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, GoalsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoalsService
