// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: users.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UsersService_RegisterMobileDevice_FullMethodName        = "/Scailo.UsersService/RegisterMobileDevice"
	UsersService_Create_FullMethodName                      = "/Scailo.UsersService/Create"
	UsersService_Draft_FullMethodName                       = "/Scailo.UsersService/Draft"
	UsersService_DraftUpdate_FullMethodName                 = "/Scailo.UsersService/DraftUpdate"
	UsersService_SendForVerification_FullMethodName         = "/Scailo.UsersService/SendForVerification"
	UsersService_Verify_FullMethodName                      = "/Scailo.UsersService/Verify"
	UsersService_Approve_FullMethodName                     = "/Scailo.UsersService/Approve"
	UsersService_SendForRevision_FullMethodName             = "/Scailo.UsersService/SendForRevision"
	UsersService_RevisionUpdate_FullMethodName              = "/Scailo.UsersService/RevisionUpdate"
	UsersService_Halt_FullMethodName                        = "/Scailo.UsersService/Halt"
	UsersService_Discard_FullMethodName                     = "/Scailo.UsersService/Discard"
	UsersService_Restore_FullMethodName                     = "/Scailo.UsersService/Restore"
	UsersService_CommentAdd_FullMethodName                  = "/Scailo.UsersService/CommentAdd"
	UsersService_CreateMagicLinkForSignature_FullMethodName = "/Scailo.UsersService/CreateMagicLinkForSignature"
	UsersService_UpdatePassword_FullMethodName              = "/Scailo.UsersService/UpdatePassword"
	UsersService_UpdateOwnPassword_FullMethodName           = "/Scailo.UsersService/UpdateOwnPassword"
	UsersService_UpdateProfilePicture_FullMethodName        = "/Scailo.UsersService/UpdateProfilePicture"
	UsersService_UpdateSignature_FullMethodName             = "/Scailo.UsersService/UpdateSignature"
	UsersService_MFAEnable_FullMethodName                   = "/Scailo.UsersService/MFAEnable"
	UsersService_MFAReset_FullMethodName                    = "/Scailo.UsersService/MFAReset"
	UsersService_ViewByID_FullMethodName                    = "/Scailo.UsersService/ViewByID"
	UsersService_ViewByUUID_FullMethodName                  = "/Scailo.UsersService/ViewByUUID"
	UsersService_ViewEssentialByID_FullMethodName           = "/Scailo.UsersService/ViewEssentialByID"
	UsersService_ViewEssentialByUUID_FullMethodName         = "/Scailo.UsersService/ViewEssentialByUUID"
	UsersService_ViewByUsername_FullMethodName              = "/Scailo.UsersService/ViewByUsername"
	UsersService_ViewByCode_FullMethodName                  = "/Scailo.UsersService/ViewByCode"
	UsersService_ViewAll_FullMethodName                     = "/Scailo.UsersService/ViewAll"
	UsersService_ViewAllForEntityUUID_FullMethodName        = "/Scailo.UsersService/ViewAllForEntityUUID"
	UsersService_ViewWithPagination_FullMethodName          = "/Scailo.UsersService/ViewWithPagination"
	UsersService_ViewFromIDs_FullMethodName                 = "/Scailo.UsersService/ViewFromIDs"
	UsersService_ViewFromUUIDs_FullMethodName               = "/Scailo.UsersService/ViewFromUUIDs"
	UsersService_ViewFromUsernames_FullMethodName           = "/Scailo.UsersService/ViewFromUsernames"
	UsersService_ViewSelf_FullMethodName                    = "/Scailo.UsersService/ViewSelf"
	UsersService_ViewBirthdaysOn_FullMethodName             = "/Scailo.UsersService/ViewBirthdaysOn"
	UsersService_ViewSignature_FullMethodName               = "/Scailo.UsersService/ViewSignature"
	UsersService_ViewProfilePicture_FullMethodName          = "/Scailo.UsersService/ViewProfilePicture"
	UsersService_ViewThumbnailPicture_FullMethodName        = "/Scailo.UsersService/ViewThumbnailPicture"
	UsersService_ViewVCard_FullMethodName                   = "/Scailo.UsersService/ViewVCard"
	UsersService_ViewQRImage_FullMethodName                 = "/Scailo.UsersService/ViewQRImage"
	UsersService_ViewQRString_FullMethodName                = "/Scailo.UsersService/ViewQRString"
	UsersService_IdentifyCroppedFace_FullMethodName         = "/Scailo.UsersService/IdentifyCroppedFace"
	UsersService_IdentifyFullFace_FullMethodName            = "/Scailo.UsersService/IdentifyFullFace"
	UsersService_SearchAll_FullMethodName                   = "/Scailo.UsersService/SearchAll"
	UsersService_Filter_FullMethodName                      = "/Scailo.UsersService/Filter"
	UsersService_CountInStatus_FullMethodName               = "/Scailo.UsersService/CountInStatus"
	UsersService_Count_FullMethodName                       = "/Scailo.UsersService/Count"
	UsersService_DownloadAsCSV_FullMethodName               = "/Scailo.UsersService/DownloadAsCSV"
	UsersService_ImportFromCSV_FullMethodName               = "/Scailo.UsersService/ImportFromCSV"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each user
type UsersServiceClient interface {
	// Register user's mobile device for push notifications. Returns the ID of the user device record
	RegisterMobileDevice(ctx context.Context, in *UsersServiceRegisterMobileDeviceRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and send for verification
	Create(ctx context.Context, in *UsersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *UsersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *UsersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *UsersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link that allows user to upload their signature
	CreateMagicLinkForSignature(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Update user's password by another user (such as an administrator)
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update user's own password
	UpdateOwnPassword(ctx context.Context, in *UpdateOwnPasswordReq, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update the user's profile picture
	UpdateProfilePicture(ctx context.Context, in *UploadPictureReq, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update the user's signature
	UpdateSignature(ctx context.Context, in *UploadPictureReq, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Enable MFA for user
	MFAEnable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// Reset MFA for user
	MFAReset(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID (returns the entire information about the user, including the logs)
	ViewByID(ctx context.Context, in *IdentifierZeroable, opts ...grpc.CallOption) (*User, error)
	// View by UUID (logs aren't returned)
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*User, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*User, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*User, error)
	// View by username (logs aren't returned)
	ViewByUsername(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*User, error)
	// View by user's code (logs aren't returned)
	ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*User, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*UsersList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*UsersList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *UsersServicePaginationReq, opts ...grpc.CallOption) (*UsersServicePaginationResponse, error)
	// View all users with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*UsersList, error)
	// View all users with the given UUIDs
	ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*UsersList, error)
	// View all users with the given usernames
	ViewFromUsernames(ctx context.Context, in *StringsList, opts ...grpc.CallOption) (*UsersList, error)
	// View self user (the profile of the logged in user)
	ViewSelf(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error)
	// View all users with birthdays on the given date
	ViewBirthdaysOn(ctx context.Context, in *MonthAndDayFilter, opts ...grpc.CallOption) (*UsersList, error)
	// View user's signature
	ViewSignature(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Base64String, error)
	// View user's profile picture
	ViewProfilePicture(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View user's thumbnail picture
	ViewThumbnailPicture(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View user's VCard
	ViewVCard(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View user's QR Code as image
	ViewQRImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View user's QR Code as string
	ViewQRString(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StringResponse, error)
	// View user info on the basis of the provided image. The image should consist of only the user's face. Will return an error if the image has not been recognized.
	IdentifyCroppedFace(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*User, error)
	// View user info on the basis of the provided image. The image should consist of just the user (might be a full sized photo). The face will be cropped. Will return an error if the image has not been recognized.
	IdentifyFullFace(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*User, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *UsersServiceSearchAllReq, opts ...grpc.CallOption) (*UsersList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *UsersServiceFilterReq, opts ...grpc.CallOption) (*UsersList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *UsersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *UsersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) RegisterMobileDevice(ctx context.Context, in *UsersServiceRegisterMobileDeviceRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_RegisterMobileDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Create(ctx context.Context, in *UsersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Draft(ctx context.Context, in *UsersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DraftUpdate(ctx context.Context, in *UsersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) RevisionUpdate(ctx context.Context, in *UsersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CreateMagicLinkForSignature(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, UsersService_CreateMagicLinkForSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateOwnPassword(ctx context.Context, in *UpdateOwnPasswordReq, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateOwnPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateProfilePicture(ctx context.Context, in *UploadPictureReq, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateProfilePicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateSignature(ctx context.Context, in *UploadPictureReq, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) MFAEnable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, UsersService_MFAEnable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) MFAReset(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UsersService_MFAReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewByID(ctx context.Context, in *IdentifierZeroable, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewByUsername(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_ViewByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_ViewByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*UsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersList)
	err := c.cc.Invoke(ctx, UsersService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*UsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersList)
	err := c.cc.Invoke(ctx, UsersService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewWithPagination(ctx context.Context, in *UsersServicePaginationReq, opts ...grpc.CallOption) (*UsersServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersServicePaginationResponse)
	err := c.cc.Invoke(ctx, UsersService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*UsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersList)
	err := c.cc.Invoke(ctx, UsersService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*UsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersList)
	err := c.cc.Invoke(ctx, UsersService_ViewFromUUIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewFromUsernames(ctx context.Context, in *StringsList, opts ...grpc.CallOption) (*UsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersList)
	err := c.cc.Invoke(ctx, UsersService_ViewFromUsernames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewSelf(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_ViewSelf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewBirthdaysOn(ctx context.Context, in *MonthAndDayFilter, opts ...grpc.CallOption) (*UsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersList)
	err := c.cc.Invoke(ctx, UsersService_ViewBirthdaysOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewSignature(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Base64String, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Base64String)
	err := c.cc.Invoke(ctx, UsersService_ViewSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewProfilePicture(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, UsersService_ViewProfilePicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewThumbnailPicture(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, UsersService_ViewThumbnailPicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewVCard(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, UsersService_ViewVCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewQRImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, UsersService_ViewQRImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ViewQRString(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, UsersService_ViewQRString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) IdentifyCroppedFace(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_IdentifyCroppedFace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) IdentifyFullFace(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UsersService_IdentifyFullFace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SearchAll(ctx context.Context, in *UsersServiceSearchAllReq, opts ...grpc.CallOption) (*UsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersList)
	err := c.cc.Invoke(ctx, UsersService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Filter(ctx context.Context, in *UsersServiceFilterReq, opts ...grpc.CallOption) (*UsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersList)
	err := c.cc.Invoke(ctx, UsersService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, UsersService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Count(ctx context.Context, in *UsersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, UsersService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DownloadAsCSV(ctx context.Context, in *UsersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, UsersService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, UsersService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersService
