// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: general_streams.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeneralStreamsService_Create_FullMethodName                                  = "/Scailo.GeneralStreamsService/Create"
	GeneralStreamsService_Update_FullMethodName                                  = "/Scailo.GeneralStreamsService/Update"
	GeneralStreamsService_Cancel_FullMethodName                                  = "/Scailo.GeneralStreamsService/Cancel"
	GeneralStreamsService_Complete_FullMethodName                                = "/Scailo.GeneralStreamsService/Complete"
	GeneralStreamsService_Reopen_FullMethodName                                  = "/Scailo.GeneralStreamsService/Reopen"
	GeneralStreamsService_Repeat_FullMethodName                                  = "/Scailo.GeneralStreamsService/Repeat"
	GeneralStreamsService_CommentAdd_FullMethodName                              = "/Scailo.GeneralStreamsService/CommentAdd"
	GeneralStreamsService_AddMessage_FullMethodName                              = "/Scailo.GeneralStreamsService/AddMessage"
	GeneralStreamsService_SaveMessageForLater_FullMethodName                     = "/Scailo.GeneralStreamsService/SaveMessageForLater"
	GeneralStreamsService_DeleteMessage_FullMethodName                           = "/Scailo.GeneralStreamsService/DeleteMessage"
	GeneralStreamsService_ViewMessageByUUID_FullMethodName                       = "/Scailo.GeneralStreamsService/ViewMessageByUUID"
	GeneralStreamsService_ViewMessages_FullMethodName                            = "/Scailo.GeneralStreamsService/ViewMessages"
	GeneralStreamsService_ViewPaginatedMessages_FullMethodName                   = "/Scailo.GeneralStreamsService/ViewPaginatedMessages"
	GeneralStreamsService_SearchMessagesWithPagination_FullMethodName            = "/Scailo.GeneralStreamsService/SearchMessagesWithPagination"
	GeneralStreamsService_ViewMessageReceipts_FullMethodName                     = "/Scailo.GeneralStreamsService/ViewMessageReceipts"
	GeneralStreamsService_AddInternalSubscriber_FullMethodName                   = "/Scailo.GeneralStreamsService/AddInternalSubscriber"
	GeneralStreamsService_DeleteInternalSubscriber_FullMethodName                = "/Scailo.GeneralStreamsService/DeleteInternalSubscriber"
	GeneralStreamsService_ViewInternalSubscriberByID_FullMethodName              = "/Scailo.GeneralStreamsService/ViewInternalSubscriberByID"
	GeneralStreamsService_ViewInternalSubscribers_FullMethodName                 = "/Scailo.GeneralStreamsService/ViewInternalSubscribers"
	GeneralStreamsService_ImportInternalSubscribersFromTeam_FullMethodName       = "/Scailo.GeneralStreamsService/ImportInternalSubscribersFromTeam"
	GeneralStreamsService_ImportInternalSubscribersFromDepartment_FullMethodName = "/Scailo.GeneralStreamsService/ImportInternalSubscribersFromDepartment"
	GeneralStreamsService_ViewByID_FullMethodName                                = "/Scailo.GeneralStreamsService/ViewByID"
	GeneralStreamsService_ViewByUUID_FullMethodName                              = "/Scailo.GeneralStreamsService/ViewByUUID"
	GeneralStreamsService_ViewEssentialByID_FullMethodName                       = "/Scailo.GeneralStreamsService/ViewEssentialByID"
	GeneralStreamsService_ViewEssentialByUUID_FullMethodName                     = "/Scailo.GeneralStreamsService/ViewEssentialByUUID"
	GeneralStreamsService_ViewFromIDs_FullMethodName                             = "/Scailo.GeneralStreamsService/ViewFromIDs"
	GeneralStreamsService_ViewAll_FullMethodName                                 = "/Scailo.GeneralStreamsService/ViewAll"
	GeneralStreamsService_ViewAllForEntityUUID_FullMethodName                    = "/Scailo.GeneralStreamsService/ViewAllForEntityUUID"
	GeneralStreamsService_ViewWithPagination_FullMethodName                      = "/Scailo.GeneralStreamsService/ViewWithPagination"
	GeneralStreamsService_SearchAll_FullMethodName                               = "/Scailo.GeneralStreamsService/SearchAll"
	GeneralStreamsService_Filter_FullMethodName                                  = "/Scailo.GeneralStreamsService/Filter"
	GeneralStreamsService_Count_FullMethodName                                   = "/Scailo.GeneralStreamsService/Count"
	GeneralStreamsService_DownloadAsCSV_FullMethodName                           = "/Scailo.GeneralStreamsService/DownloadAsCSV"
)

// GeneralStreamsServiceClient is the client API for GeneralStreamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each general stream
type GeneralStreamsServiceClient interface {
	// Create
	Create(ctx context.Context, in *GeneralStreamsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Update
	Update(ctx context.Context, in *GeneralStreamsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Cancel
	Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Add a message to an general stream
	AddMessage(ctx context.Context, in *GeneralStreamsServiceMessageCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Saves a message for viewing it later
	SaveMessageForLater(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Delete a message in an general stream
	DeleteMessage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// View General Stream Message by UUID
	ViewMessageByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStreamMessage, error)
	// View all messages for given general stream UUID
	ViewMessages(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStreamMessagesList, error)
	// View general stream messages for given general stream ID with pagination
	ViewPaginatedMessages(ctx context.Context, in *GeneralStreamMessagesSearchRequest, opts ...grpc.CallOption) (*GeneralStreamsServicePaginatedMessagesResponse, error)
	// Search through general stream messages with pagination
	SearchMessagesWithPagination(ctx context.Context, in *GeneralStreamMessagesSearchRequest, opts ...grpc.CallOption) (*GeneralStreamsServicePaginatedMessagesResponse, error)
	// View all receipts for the given message UUID
	ViewMessageReceipts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStreamMessageReceiptsList, error)
	// Add an internal subscriber
	AddInternalSubscriber(ctx context.Context, in *GeneralStreamsServiceInternalSubscriberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an internal subscriber
	DeleteInternalSubscriber(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View an internal subscriber for the given ID
	ViewInternalSubscriberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GeneralStreamInternalSubscriber, error)
	// View all internal subscribers for given general stream UUID
	ViewInternalSubscribers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStreamInternalSubscribersList, error)
	// Import users as internal subscribers from team and returns the ID of the general stream
	ImportInternalSubscribersFromTeam(ctx context.Context, in *GeneralStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Import users as internal subscribers from department and returns the ID of the general stream
	ImportInternalSubscribersFromDepartment(ctx context.Context, in *GeneralStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GeneralStream, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStream, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GeneralStream, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStream, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*GeneralStreamsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*GeneralStreamsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStreamsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *GeneralStreamsServicePaginationReq, opts ...grpc.CallOption) (*GeneralStreamsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *GeneralStreamsServiceSearchAllReq, opts ...grpc.CallOption) (*GeneralStreamsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *GeneralStreamsServiceFilterReq, opts ...grpc.CallOption) (*GeneralStreamsList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *GeneralStreamsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request
	DownloadAsCSV(ctx context.Context, in *GeneralStreamsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type generalStreamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralStreamsServiceClient(cc grpc.ClientConnInterface) GeneralStreamsServiceClient {
	return &generalStreamsServiceClient{cc}
}

func (c *generalStreamsServiceClient) Create(ctx context.Context, in *GeneralStreamsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, GeneralStreamsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) Update(ctx context.Context, in *GeneralStreamsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, GeneralStreamsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, GeneralStreamsService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, GeneralStreamsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, GeneralStreamsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, GeneralStreamsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, GeneralStreamsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) AddMessage(ctx context.Context, in *GeneralStreamsServiceMessageCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, GeneralStreamsService_AddMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) SaveMessageForLater(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, GeneralStreamsService_SaveMessageForLater_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) DeleteMessage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, GeneralStreamsService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewMessageByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStreamMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamMessage)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewMessageByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewMessages(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStreamMessagesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamMessagesList)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewPaginatedMessages(ctx context.Context, in *GeneralStreamMessagesSearchRequest, opts ...grpc.CallOption) (*GeneralStreamsServicePaginatedMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamsServicePaginatedMessagesResponse)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewPaginatedMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) SearchMessagesWithPagination(ctx context.Context, in *GeneralStreamMessagesSearchRequest, opts ...grpc.CallOption) (*GeneralStreamsServicePaginatedMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamsServicePaginatedMessagesResponse)
	err := c.cc.Invoke(ctx, GeneralStreamsService_SearchMessagesWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewMessageReceipts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStreamMessageReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamMessageReceiptsList)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewMessageReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) AddInternalSubscriber(ctx context.Context, in *GeneralStreamsServiceInternalSubscriberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GeneralStreamsService_AddInternalSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) DeleteInternalSubscriber(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GeneralStreamsService_DeleteInternalSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewInternalSubscriberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GeneralStreamInternalSubscriber, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamInternalSubscriber)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewInternalSubscriberByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewInternalSubscribers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStreamInternalSubscribersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamInternalSubscribersList)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewInternalSubscribers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ImportInternalSubscribersFromTeam(ctx context.Context, in *GeneralStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ImportInternalSubscribersFromTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ImportInternalSubscribersFromDepartment(ctx context.Context, in *GeneralStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ImportInternalSubscribersFromDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GeneralStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStream)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStream)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GeneralStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStream)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStream)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*GeneralStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamsList)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*GeneralStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamsList)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GeneralStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamsList)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) ViewWithPagination(ctx context.Context, in *GeneralStreamsServicePaginationReq, opts ...grpc.CallOption) (*GeneralStreamsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamsServicePaginationResponse)
	err := c.cc.Invoke(ctx, GeneralStreamsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) SearchAll(ctx context.Context, in *GeneralStreamsServiceSearchAllReq, opts ...grpc.CallOption) (*GeneralStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamsList)
	err := c.cc.Invoke(ctx, GeneralStreamsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) Filter(ctx context.Context, in *GeneralStreamsServiceFilterReq, opts ...grpc.CallOption) (*GeneralStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralStreamsList)
	err := c.cc.Invoke(ctx, GeneralStreamsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) Count(ctx context.Context, in *GeneralStreamsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, GeneralStreamsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalStreamsServiceClient) DownloadAsCSV(ctx context.Context, in *GeneralStreamsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, GeneralStreamsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralStreamsService
