// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sales_orders.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SalesOrdersService_Create_FullMethodName                                 = "/Scailo.SalesOrdersService/Create"
	SalesOrdersService_Draft_FullMethodName                                  = "/Scailo.SalesOrdersService/Draft"
	SalesOrdersService_DraftUpdate_FullMethodName                            = "/Scailo.SalesOrdersService/DraftUpdate"
	SalesOrdersService_SendForVerification_FullMethodName                    = "/Scailo.SalesOrdersService/SendForVerification"
	SalesOrdersService_Verify_FullMethodName                                 = "/Scailo.SalesOrdersService/Verify"
	SalesOrdersService_Approve_FullMethodName                                = "/Scailo.SalesOrdersService/Approve"
	SalesOrdersService_SendForRevision_FullMethodName                        = "/Scailo.SalesOrdersService/SendForRevision"
	SalesOrdersService_RevisionUpdate_FullMethodName                         = "/Scailo.SalesOrdersService/RevisionUpdate"
	SalesOrdersService_Halt_FullMethodName                                   = "/Scailo.SalesOrdersService/Halt"
	SalesOrdersService_Discard_FullMethodName                                = "/Scailo.SalesOrdersService/Discard"
	SalesOrdersService_Restore_FullMethodName                                = "/Scailo.SalesOrdersService/Restore"
	SalesOrdersService_Complete_FullMethodName                               = "/Scailo.SalesOrdersService/Complete"
	SalesOrdersService_Repeat_FullMethodName                                 = "/Scailo.SalesOrdersService/Repeat"
	SalesOrdersService_Reopen_FullMethodName                                 = "/Scailo.SalesOrdersService/Reopen"
	SalesOrdersService_CommentAdd_FullMethodName                             = "/Scailo.SalesOrdersService/CommentAdd"
	SalesOrdersService_SendEmail_FullMethodName                              = "/Scailo.SalesOrdersService/SendEmail"
	SalesOrdersService_Autofill_FullMethodName                               = "/Scailo.SalesOrdersService/Autofill"
	SalesOrdersService_Amend_FullMethodName                                  = "/Scailo.SalesOrdersService/Amend"
	SalesOrdersService_CreateMagicLink_FullMethodName                        = "/Scailo.SalesOrdersService/CreateMagicLink"
	SalesOrdersService_AddMultipleSalesOrderItems_FullMethodName             = "/Scailo.SalesOrdersService/AddMultipleSalesOrderItems"
	SalesOrdersService_AddSalesOrderItem_FullMethodName                      = "/Scailo.SalesOrdersService/AddSalesOrderItem"
	SalesOrdersService_ModifySalesOrderItem_FullMethodName                   = "/Scailo.SalesOrdersService/ModifySalesOrderItem"
	SalesOrdersService_ApproveSalesOrderItem_FullMethodName                  = "/Scailo.SalesOrdersService/ApproveSalesOrderItem"
	SalesOrdersService_DeleteSalesOrderItem_FullMethodName                   = "/Scailo.SalesOrdersService/DeleteSalesOrderItem"
	SalesOrdersService_ReorderSalesOrderItems_FullMethodName                 = "/Scailo.SalesOrdersService/ReorderSalesOrderItems"
	SalesOrdersService_ViewSalesOrderItemByID_FullMethodName                 = "/Scailo.SalesOrdersService/ViewSalesOrderItemByID"
	SalesOrdersService_ViewSalesOrderItemPrice_FullMethodName                = "/Scailo.SalesOrdersService/ViewSalesOrderItemPrice"
	SalesOrdersService_ViewApprovedSalesOrderItems_FullMethodName            = "/Scailo.SalesOrdersService/ViewApprovedSalesOrderItems"
	SalesOrdersService_ViewUnapprovedSalesOrderItems_FullMethodName          = "/Scailo.SalesOrdersService/ViewUnapprovedSalesOrderItems"
	SalesOrdersService_ViewSalesOrderItemHistory_FullMethodName              = "/Scailo.SalesOrdersService/ViewSalesOrderItemHistory"
	SalesOrdersService_ViewPaginatedApprovedSalesOrderItems_FullMethodName   = "/Scailo.SalesOrdersService/ViewPaginatedApprovedSalesOrderItems"
	SalesOrdersService_ViewPaginatedUnapprovedSalesOrderItems_FullMethodName = "/Scailo.SalesOrdersService/ViewPaginatedUnapprovedSalesOrderItems"
	SalesOrdersService_SearchItemsWithPagination_FullMethodName              = "/Scailo.SalesOrdersService/SearchItemsWithPagination"
	SalesOrdersService_DownloadItemsAsCSV_FullMethodName                     = "/Scailo.SalesOrdersService/DownloadItemsAsCSV"
	SalesOrdersService_DownloadItemsTemplateAsCSV_FullMethodName             = "/Scailo.SalesOrdersService/DownloadItemsTemplateAsCSV"
	SalesOrdersService_UploadSalesOrderItems_FullMethodName                  = "/Scailo.SalesOrdersService/UploadSalesOrderItems"
	SalesOrdersService_AddSalesOrderContact_FullMethodName                   = "/Scailo.SalesOrdersService/AddSalesOrderContact"
	SalesOrdersService_ApproveSalesOrderContact_FullMethodName               = "/Scailo.SalesOrdersService/ApproveSalesOrderContact"
	SalesOrdersService_DeleteSalesOrderContact_FullMethodName                = "/Scailo.SalesOrdersService/DeleteSalesOrderContact"
	SalesOrdersService_ViewSalesOrderContactByID_FullMethodName              = "/Scailo.SalesOrdersService/ViewSalesOrderContactByID"
	SalesOrdersService_ViewSalesOrderContacts_FullMethodName                 = "/Scailo.SalesOrdersService/ViewSalesOrderContacts"
	SalesOrdersService_AddSalesOrderReference_FullMethodName                 = "/Scailo.SalesOrdersService/AddSalesOrderReference"
	SalesOrdersService_ApproveSalesOrderReference_FullMethodName             = "/Scailo.SalesOrdersService/ApproveSalesOrderReference"
	SalesOrdersService_DeleteSalesOrderReference_FullMethodName              = "/Scailo.SalesOrdersService/DeleteSalesOrderReference"
	SalesOrdersService_ViewSalesOrderReferenceByID_FullMethodName            = "/Scailo.SalesOrdersService/ViewSalesOrderReferenceByID"
	SalesOrdersService_ViewSalesOrderReferences_FullMethodName               = "/Scailo.SalesOrdersService/ViewSalesOrderReferences"
	SalesOrdersService_ViewByID_FullMethodName                               = "/Scailo.SalesOrdersService/ViewByID"
	SalesOrdersService_ViewByUUID_FullMethodName                             = "/Scailo.SalesOrdersService/ViewByUUID"
	SalesOrdersService_ViewByReferenceID_FullMethodName                      = "/Scailo.SalesOrdersService/ViewByReferenceID"
	SalesOrdersService_ViewEssentialByID_FullMethodName                      = "/Scailo.SalesOrdersService/ViewEssentialByID"
	SalesOrdersService_ViewEssentialByUUID_FullMethodName                    = "/Scailo.SalesOrdersService/ViewEssentialByUUID"
	SalesOrdersService_ViewFromIDs_FullMethodName                            = "/Scailo.SalesOrdersService/ViewFromIDs"
	SalesOrdersService_ViewAncillaryParametersByUUID_FullMethodName          = "/Scailo.SalesOrdersService/ViewAncillaryParametersByUUID"
	SalesOrdersService_ViewAll_FullMethodName                                = "/Scailo.SalesOrdersService/ViewAll"
	SalesOrdersService_ViewAllForEntityUUID_FullMethodName                   = "/Scailo.SalesOrdersService/ViewAllForEntityUUID"
	SalesOrdersService_ViewWithPagination_FullMethodName                     = "/Scailo.SalesOrdersService/ViewWithPagination"
	SalesOrdersService_ViewAmendments_FullMethodName                         = "/Scailo.SalesOrdersService/ViewAmendments"
	SalesOrdersService_ViewInventoryStatistics_FullMethodName                = "/Scailo.SalesOrdersService/ViewInventoryStatistics"
	SalesOrdersService_ViewBillingStatistics_FullMethodName                  = "/Scailo.SalesOrdersService/ViewBillingStatistics"
	SalesOrdersService_ViewInventoryMatch_FullMethodName                     = "/Scailo.SalesOrdersService/ViewInventoryMatch"
	SalesOrdersService_ViewPriceMatch_FullMethodName                         = "/Scailo.SalesOrdersService/ViewPriceMatch"
	SalesOrdersService_ViewProspectiveFamilies_FullMethodName                = "/Scailo.SalesOrdersService/ViewProspectiveFamilies"
	SalesOrdersService_FilterProspectiveFamilies_FullMethodName              = "/Scailo.SalesOrdersService/FilterProspectiveFamilies"
	SalesOrdersService_ViewProspectiveSalesOrderItem_FullMethodName          = "/Scailo.SalesOrdersService/ViewProspectiveSalesOrderItem"
	SalesOrdersService_IsDownloadable_FullMethodName                         = "/Scailo.SalesOrdersService/IsDownloadable"
	SalesOrdersService_DownloadByUUID_FullMethodName                         = "/Scailo.SalesOrdersService/DownloadByUUID"
	SalesOrdersService_SearchAll_FullMethodName                              = "/Scailo.SalesOrdersService/SearchAll"
	SalesOrdersService_Filter_FullMethodName                                 = "/Scailo.SalesOrdersService/Filter"
	SalesOrdersService_CountInStatus_FullMethodName                          = "/Scailo.SalesOrdersService/CountInStatus"
	SalesOrdersService_Count_FullMethodName                                  = "/Scailo.SalesOrdersService/Count"
	SalesOrdersService_AccruedValue_FullMethodName                           = "/Scailo.SalesOrdersService/AccruedValue"
	SalesOrdersService_DownloadAsCSV_FullMethodName                          = "/Scailo.SalesOrdersService/DownloadAsCSV"
)

// SalesOrdersServiceClient is the client API for SalesOrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each sales order
type SalesOrdersServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *SalesOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *SalesOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *SalesOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *SalesOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the sales order
	Autofill(ctx context.Context, in *SalesOrdersServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Amend the sales order and send for revision
	Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add multiple items to a sales order
	AddMultipleSalesOrderItems(ctx context.Context, in *SalesOrdersServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a sales order
	AddSalesOrderItem(ctx context.Context, in *SalesOrdersServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Modify an item in a sales order
	ModifySalesOrderItem(ctx context.Context, in *SalesOrdersServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Approve an item in a sales order
	ApproveSalesOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a sales order
	DeleteSalesOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a sales order
	ReorderSalesOrderItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Sales Order Item by ID
	ViewSalesOrderItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrderItem, error)
	// View Sales Order Item's price after factoring in the discount
	ViewSalesOrderItemPrice(ctx context.Context, in *SalesOrderItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PriceResponse, error)
	// View approved sales order items for given sales order ID
	ViewApprovedSalesOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesOrderItemsList, error)
	// View unapproved sales order items for given sales order ID
	ViewUnapprovedSalesOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesOrderItemsList, error)
	// View the history of the sales order item
	ViewSalesOrderItemHistory(ctx context.Context, in *SalesOrderItemHistoryRequest, opts ...grpc.CallOption) (*SalesOrderItemsList, error)
	// View approved sales order items for given sales order ID with pagination
	ViewPaginatedApprovedSalesOrderItems(ctx context.Context, in *SalesOrderItemsSearchRequest, opts ...grpc.CallOption) (*SalesOrdersServicePaginatedItemsResponse, error)
	// View unapproved sales order items for given sales order ID with pagination
	ViewPaginatedUnapprovedSalesOrderItems(ctx context.Context, in *SalesOrderItemsSearchRequest, opts ...grpc.CallOption) (*SalesOrdersServicePaginatedItemsResponse, error)
	// Search through sales order items with pagination
	SearchItemsWithPagination(ctx context.Context, in *SalesOrderItemsSearchRequest, opts ...grpc.CallOption) (*SalesOrdersServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadSalesOrderItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a contact
	AddSalesOrderContact(ctx context.Context, in *SalesOrdersServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a contact
	ApproveSalesOrderContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a contact
	DeleteSalesOrderContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a contact for the given ID
	ViewSalesOrderContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrderContact, error)
	// View all contacts for given sales order UUID
	ViewSalesOrderContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderContactsList, error)
	// Add a reference
	AddSalesOrderReference(ctx context.Context, in *SalesOrdersServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a reference
	ApproveSalesOrderReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a reference
	DeleteSalesOrderReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a reference for the given ID
	ViewSalesOrderReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrderReference, error)
	// View all references for given sales order ID
	ViewSalesOrderReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrderReferencesList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrder, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrder, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SalesOrder, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrder, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrder, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalesOrdersList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalesOrdersList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrdersList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *SalesOrdersServicePaginationReq, opts ...grpc.CallOption) (*SalesOrdersServicePaginationResponse, error)
	// View all the amendments made
	ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error)
	// View Inventory Statistics of Sales Order
	ViewInventoryStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderInventoryStatistics, error)
	// View Billing Statistics of Sales Order
	ViewBillingStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderBillingStatistics, error)
	// View Inventory Match of all the families within a Sales Order
	ViewInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderInventoryMatchList, error)
	// View Price Match of all the families within a Sales Order (between the sales order, and the corresponding sales invoices, and any corresponding credit notes)
	ViewPriceMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderPriceMatchList, error)
	// View prospective families for the given sales order
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective sales order item info for the given family ID and sales order ID
	ViewProspectiveSalesOrderItem(ctx context.Context, in *SalesOrderItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalesOrdersServiceItemCreateRequest, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download sales order with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *SalesOrdersServiceSearchAllReq, opts ...grpc.CallOption) (*SalesOrdersList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *SalesOrdersServiceFilterReq, opts ...grpc.CallOption) (*SalesOrdersList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *SalesOrdersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// Returns the sum of the total value of all the records that match the given criteria
	AccruedValue(ctx context.Context, in *SalesOrdersServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *SalesOrdersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type salesOrdersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesOrdersServiceClient(cc grpc.ClientConnInterface) SalesOrdersServiceClient {
	return &salesOrdersServiceClient{cc}
}

func (c *salesOrdersServiceClient) Create(ctx context.Context, in *SalesOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Draft(ctx context.Context, in *SalesOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) DraftUpdate(ctx context.Context, in *SalesOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) RevisionUpdate(ctx context.Context, in *SalesOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Autofill(ctx context.Context, in *SalesOrdersServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, SalesOrdersService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) AddMultipleSalesOrderItems(ctx context.Context, in *SalesOrdersServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_AddMultipleSalesOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) AddSalesOrderItem(ctx context.Context, in *SalesOrdersServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SalesOrdersService_AddSalesOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ModifySalesOrderItem(ctx context.Context, in *SalesOrdersServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ModifySalesOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ApproveSalesOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_ApproveSalesOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) DeleteSalesOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_DeleteSalesOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ReorderSalesOrderItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_ReorderSalesOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewSalesOrderItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrderItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderItem)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewSalesOrderItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewSalesOrderItemPrice(ctx context.Context, in *SalesOrderItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewSalesOrderItemPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewApprovedSalesOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesOrderItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderItemsList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewApprovedSalesOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewUnapprovedSalesOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesOrderItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderItemsList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewUnapprovedSalesOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewSalesOrderItemHistory(ctx context.Context, in *SalesOrderItemHistoryRequest, opts ...grpc.CallOption) (*SalesOrderItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderItemsList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewSalesOrderItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewPaginatedApprovedSalesOrderItems(ctx context.Context, in *SalesOrderItemsSearchRequest, opts ...grpc.CallOption) (*SalesOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewPaginatedApprovedSalesOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewPaginatedUnapprovedSalesOrderItems(ctx context.Context, in *SalesOrderItemsSearchRequest, opts ...grpc.CallOption) (*SalesOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewPaginatedUnapprovedSalesOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) SearchItemsWithPagination(ctx context.Context, in *SalesOrderItemsSearchRequest, opts ...grpc.CallOption) (*SalesOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesOrdersService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesOrdersService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) UploadSalesOrderItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SalesOrdersService_UploadSalesOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) AddSalesOrderContact(ctx context.Context, in *SalesOrdersServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_AddSalesOrderContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ApproveSalesOrderContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_ApproveSalesOrderContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) DeleteSalesOrderContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_DeleteSalesOrderContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewSalesOrderContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrderContact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderContact)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewSalesOrderContactByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewSalesOrderContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderContactsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderContactsList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewSalesOrderContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) AddSalesOrderReference(ctx context.Context, in *SalesOrdersServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_AddSalesOrderReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ApproveSalesOrderReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_ApproveSalesOrderReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) DeleteSalesOrderReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_DeleteSalesOrderReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewSalesOrderReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrderReference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderReference)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewSalesOrderReferenceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewSalesOrderReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrderReferencesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderReferencesList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewSalesOrderReferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrder)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrder)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SalesOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrder)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrder)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrder)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalesOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrdersList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderAncillaryParameters)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalesOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrdersList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrdersList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewWithPagination(ctx context.Context, in *SalesOrdersServicePaginationReq, opts ...grpc.CallOption) (*SalesOrdersServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrdersServicePaginationResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendmentLogsList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewInventoryStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderInventoryStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderInventoryStatistics)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewInventoryStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewBillingStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderBillingStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderBillingStatistics)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewBillingStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderInventoryMatchList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderInventoryMatchList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewInventoryMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewPriceMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesOrderPriceMatchList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrderPriceMatchList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewPriceMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, SalesOrdersService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) ViewProspectiveSalesOrderItem(ctx context.Context, in *SalesOrderItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalesOrdersServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrdersServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, SalesOrdersService_ViewProspectiveSalesOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesOrdersService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) SearchAll(ctx context.Context, in *SalesOrdersServiceSearchAllReq, opts ...grpc.CallOption) (*SalesOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrdersList)
	err := c.cc.Invoke(ctx, SalesOrdersService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Filter(ctx context.Context, in *SalesOrdersServiceFilterReq, opts ...grpc.CallOption) (*SalesOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesOrdersList)
	err := c.cc.Invoke(ctx, SalesOrdersService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) Count(ctx context.Context, in *SalesOrdersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) AccruedValue(ctx context.Context, in *SalesOrdersServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, SalesOrdersService_AccruedValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesOrdersServiceClient) DownloadAsCSV(ctx context.Context, in *SalesOrdersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesOrdersService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesOrdersService
