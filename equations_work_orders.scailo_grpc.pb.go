// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: equations_work_orders.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EquationsWorkOrdersService_Create_FullMethodName                                        = "/Scailo.EquationsWorkOrdersService/Create"
	EquationsWorkOrdersService_Draft_FullMethodName                                         = "/Scailo.EquationsWorkOrdersService/Draft"
	EquationsWorkOrdersService_DraftUpdate_FullMethodName                                   = "/Scailo.EquationsWorkOrdersService/DraftUpdate"
	EquationsWorkOrdersService_SendForVerification_FullMethodName                           = "/Scailo.EquationsWorkOrdersService/SendForVerification"
	EquationsWorkOrdersService_Verify_FullMethodName                                        = "/Scailo.EquationsWorkOrdersService/Verify"
	EquationsWorkOrdersService_Approve_FullMethodName                                       = "/Scailo.EquationsWorkOrdersService/Approve"
	EquationsWorkOrdersService_SendForRevision_FullMethodName                               = "/Scailo.EquationsWorkOrdersService/SendForRevision"
	EquationsWorkOrdersService_RevisionUpdate_FullMethodName                                = "/Scailo.EquationsWorkOrdersService/RevisionUpdate"
	EquationsWorkOrdersService_Halt_FullMethodName                                          = "/Scailo.EquationsWorkOrdersService/Halt"
	EquationsWorkOrdersService_Discard_FullMethodName                                       = "/Scailo.EquationsWorkOrdersService/Discard"
	EquationsWorkOrdersService_Restore_FullMethodName                                       = "/Scailo.EquationsWorkOrdersService/Restore"
	EquationsWorkOrdersService_Complete_FullMethodName                                      = "/Scailo.EquationsWorkOrdersService/Complete"
	EquationsWorkOrdersService_Repeat_FullMethodName                                        = "/Scailo.EquationsWorkOrdersService/Repeat"
	EquationsWorkOrdersService_Reopen_FullMethodName                                        = "/Scailo.EquationsWorkOrdersService/Reopen"
	EquationsWorkOrdersService_CommentAdd_FullMethodName                                    = "/Scailo.EquationsWorkOrdersService/CommentAdd"
	EquationsWorkOrdersService_CreateMagicLink_FullMethodName                               = "/Scailo.EquationsWorkOrdersService/CreateMagicLink"
	EquationsWorkOrdersService_Amend_FullMethodName                                         = "/Scailo.EquationsWorkOrdersService/Amend"
	EquationsWorkOrdersService_Clone_FullMethodName                                         = "/Scailo.EquationsWorkOrdersService/Clone"
	EquationsWorkOrdersService_AddEquationWorkOrderItem_FullMethodName                      = "/Scailo.EquationsWorkOrdersService/AddEquationWorkOrderItem"
	EquationsWorkOrdersService_ModifyEquationWorkOrderItem_FullMethodName                   = "/Scailo.EquationsWorkOrdersService/ModifyEquationWorkOrderItem"
	EquationsWorkOrdersService_ApproveEquationWorkOrderItem_FullMethodName                  = "/Scailo.EquationsWorkOrdersService/ApproveEquationWorkOrderItem"
	EquationsWorkOrdersService_DeleteEquationWorkOrderItem_FullMethodName                   = "/Scailo.EquationsWorkOrdersService/DeleteEquationWorkOrderItem"
	EquationsWorkOrdersService_ReorderEquationWorkOrderItems_FullMethodName                 = "/Scailo.EquationsWorkOrdersService/ReorderEquationWorkOrderItems"
	EquationsWorkOrdersService_ViewEquationWorkOrderItemByID_FullMethodName                 = "/Scailo.EquationsWorkOrdersService/ViewEquationWorkOrderItemByID"
	EquationsWorkOrdersService_ViewApprovedEquationWorkOrderItems_FullMethodName            = "/Scailo.EquationsWorkOrdersService/ViewApprovedEquationWorkOrderItems"
	EquationsWorkOrdersService_ViewUnapprovedEquationWorkOrderItems_FullMethodName          = "/Scailo.EquationsWorkOrdersService/ViewUnapprovedEquationWorkOrderItems"
	EquationsWorkOrdersService_ViewEquationWorkOrderItemHistory_FullMethodName              = "/Scailo.EquationsWorkOrdersService/ViewEquationWorkOrderItemHistory"
	EquationsWorkOrdersService_ViewPaginatedApprovedEquationWorkOrderItems_FullMethodName   = "/Scailo.EquationsWorkOrdersService/ViewPaginatedApprovedEquationWorkOrderItems"
	EquationsWorkOrdersService_ViewPaginatedUnapprovedEquationWorkOrderItems_FullMethodName = "/Scailo.EquationsWorkOrdersService/ViewPaginatedUnapprovedEquationWorkOrderItems"
	EquationsWorkOrdersService_SearchItemsWithPagination_FullMethodName                     = "/Scailo.EquationsWorkOrdersService/SearchItemsWithPagination"
	EquationsWorkOrdersService_DownloadItemsAsCSV_FullMethodName                            = "/Scailo.EquationsWorkOrdersService/DownloadItemsAsCSV"
	EquationsWorkOrdersService_DownloadItemsTemplateAsCSV_FullMethodName                    = "/Scailo.EquationsWorkOrdersService/DownloadItemsTemplateAsCSV"
	EquationsWorkOrdersService_DownloadTreeAsCSV_FullMethodName                             = "/Scailo.EquationsWorkOrdersService/DownloadTreeAsCSV"
	EquationsWorkOrdersService_UploadEquationWorkOrderItems_FullMethodName                  = "/Scailo.EquationsWorkOrdersService/UploadEquationWorkOrderItems"
	EquationsWorkOrdersService_ViewByID_FullMethodName                                      = "/Scailo.EquationsWorkOrdersService/ViewByID"
	EquationsWorkOrdersService_ViewByUUID_FullMethodName                                    = "/Scailo.EquationsWorkOrdersService/ViewByUUID"
	EquationsWorkOrdersService_ViewByName_FullMethodName                                    = "/Scailo.EquationsWorkOrdersService/ViewByName"
	EquationsWorkOrdersService_ViewEssentialByID_FullMethodName                             = "/Scailo.EquationsWorkOrdersService/ViewEssentialByID"
	EquationsWorkOrdersService_ViewEssentialByUUID_FullMethodName                           = "/Scailo.EquationsWorkOrdersService/ViewEssentialByUUID"
	EquationsWorkOrdersService_ViewFromIDs_FullMethodName                                   = "/Scailo.EquationsWorkOrdersService/ViewFromIDs"
	EquationsWorkOrdersService_ViewAll_FullMethodName                                       = "/Scailo.EquationsWorkOrdersService/ViewAll"
	EquationsWorkOrdersService_ViewAllForEntityUUID_FullMethodName                          = "/Scailo.EquationsWorkOrdersService/ViewAllForEntityUUID"
	EquationsWorkOrdersService_ViewWithPagination_FullMethodName                            = "/Scailo.EquationsWorkOrdersService/ViewWithPagination"
	EquationsWorkOrdersService_ViewForWorkOrderID_FullMethodName                            = "/Scailo.EquationsWorkOrdersService/ViewForWorkOrderID"
	EquationsWorkOrdersService_ViewAmendments_FullMethodName                                = "/Scailo.EquationsWorkOrdersService/ViewAmendments"
	EquationsWorkOrdersService_IsDownloadable_FullMethodName                                = "/Scailo.EquationsWorkOrdersService/IsDownloadable"
	EquationsWorkOrdersService_DownloadByUUID_FullMethodName                                = "/Scailo.EquationsWorkOrdersService/DownloadByUUID"
	EquationsWorkOrdersService_SearchAll_FullMethodName                                     = "/Scailo.EquationsWorkOrdersService/SearchAll"
	EquationsWorkOrdersService_Filter_FullMethodName                                        = "/Scailo.EquationsWorkOrdersService/Filter"
	EquationsWorkOrdersService_CountInStatus_FullMethodName                                 = "/Scailo.EquationsWorkOrdersService/CountInStatus"
	EquationsWorkOrdersService_Count_FullMethodName                                         = "/Scailo.EquationsWorkOrdersService/Count"
	EquationsWorkOrdersService_DownloadAsCSV_FullMethodName                                 = "/Scailo.EquationsWorkOrdersService/DownloadAsCSV"
	EquationsWorkOrdersService_ImportFromCSV_FullMethodName                                 = "/Scailo.EquationsWorkOrdersService/ImportFromCSV"
)

// EquationsWorkOrdersServiceClient is the client API for EquationsWorkOrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each equation work order
type EquationsWorkOrdersServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *EquationsWorkOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *EquationsWorkOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *EquationsWorkOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *EquationsWorkOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	// rpc SendEmail (IdentifierWithEmailAttributes) returns (IdentifierResponse);
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Amend the equation work order and send for revision
	Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Clone equation from an existing equation (denoted by the identifier)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a equation work order
	AddEquationWorkOrderItem(ctx context.Context, in *EquationsWorkOrdersServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a equation work order
	ModifyEquationWorkOrderItem(ctx context.Context, in *EquationsWorkOrdersServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a equation work order
	ApproveEquationWorkOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a equation work order
	DeleteEquationWorkOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a equation work order
	ReorderEquationWorkOrderItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Equation Work Order Item by ID
	ViewEquationWorkOrderItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationWorkOrderItem, error)
	// View approved equation work order items for given equation work order ID
	ViewApprovedEquationWorkOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsWorkOrdersItemsList, error)
	// View unapproved equation work order items for given equation work order ID
	ViewUnapprovedEquationWorkOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsWorkOrdersItemsList, error)
	// View the history of the equation work order item
	ViewEquationWorkOrderItemHistory(ctx context.Context, in *EquationWorkOrderItemHistoryRequest, opts ...grpc.CallOption) (*EquationsWorkOrdersItemsList, error)
	// View approved equation work order items for given equation work order ID with pagination
	ViewPaginatedApprovedEquationWorkOrderItems(ctx context.Context, in *EquationWorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*EquationsWorkOrdersServicePaginatedItemsResponse, error)
	// View unapproved equation work order items for given equation work order ID with pagination
	ViewPaginatedUnapprovedEquationWorkOrderItems(ctx context.Context, in *EquationWorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*EquationsWorkOrdersServicePaginatedItemsResponse, error)
	// Search through equation work order items with pagination
	SearchItemsWithPagination(ctx context.Context, in *EquationWorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*EquationsWorkOrdersServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV file with the entire dependency tree. Useful for identifying quantities necessary from all the dependencies.
	DownloadTreeAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadEquationWorkOrderItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationWorkOrder, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationWorkOrder, error)
	// View by Name (returns the latest record in case of duplicates)
	ViewByName(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*EquationWorkOrder, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationWorkOrder, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationWorkOrder, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*EquationsWorkOrdersList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*EquationsWorkOrdersList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationsWorkOrdersList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *EquationsWorkOrdersServicePaginationReq, opts ...grpc.CallOption) (*EquationsWorkOrdersServicePaginationResponse, error)
	// View the latest equation for a work order (denoted by the given identifier)
	ViewForWorkOrderID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationWorkOrder, error)
	// View all the amendments made
	ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download equation with the given IdentifierUUID
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *EquationsWorkOrdersServiceSearchAllReq, opts ...grpc.CallOption) (*EquationsWorkOrdersList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *EquationsWorkOrdersServiceFilterReq, opts ...grpc.CallOption) (*EquationsWorkOrdersList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *EquationsWorkOrdersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *EquationsWorkOrdersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type equationsWorkOrdersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquationsWorkOrdersServiceClient(cc grpc.ClientConnInterface) EquationsWorkOrdersServiceClient {
	return &equationsWorkOrdersServiceClient{cc}
}

func (c *equationsWorkOrdersServiceClient) Create(ctx context.Context, in *EquationsWorkOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Draft(ctx context.Context, in *EquationsWorkOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) DraftUpdate(ctx context.Context, in *EquationsWorkOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) RevisionUpdate(ctx context.Context, in *EquationsWorkOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) AddEquationWorkOrderItem(ctx context.Context, in *EquationsWorkOrdersServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_AddEquationWorkOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ModifyEquationWorkOrderItem(ctx context.Context, in *EquationsWorkOrdersServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ModifyEquationWorkOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ApproveEquationWorkOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ApproveEquationWorkOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) DeleteEquationWorkOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_DeleteEquationWorkOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ReorderEquationWorkOrderItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ReorderEquationWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewEquationWorkOrderItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationWorkOrderItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationWorkOrderItem)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewEquationWorkOrderItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewApprovedEquationWorkOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsWorkOrdersItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersItemsList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewApprovedEquationWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewUnapprovedEquationWorkOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsWorkOrdersItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersItemsList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewUnapprovedEquationWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewEquationWorkOrderItemHistory(ctx context.Context, in *EquationWorkOrderItemHistoryRequest, opts ...grpc.CallOption) (*EquationsWorkOrdersItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersItemsList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewEquationWorkOrderItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewPaginatedApprovedEquationWorkOrderItems(ctx context.Context, in *EquationWorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*EquationsWorkOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewPaginatedApprovedEquationWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewPaginatedUnapprovedEquationWorkOrderItems(ctx context.Context, in *EquationWorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*EquationsWorkOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewPaginatedUnapprovedEquationWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) SearchItemsWithPagination(ctx context.Context, in *EquationWorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*EquationsWorkOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) DownloadTreeAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_DownloadTreeAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) UploadEquationWorkOrderItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_UploadEquationWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationWorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationWorkOrder)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationWorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationWorkOrder)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewByName(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*EquationWorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationWorkOrder)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationWorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationWorkOrder)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationWorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationWorkOrder)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*EquationsWorkOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*EquationsWorkOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationsWorkOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewWithPagination(ctx context.Context, in *EquationsWorkOrdersServicePaginationReq, opts ...grpc.CallOption) (*EquationsWorkOrdersServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersServicePaginationResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewForWorkOrderID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationWorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationWorkOrder)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewForWorkOrderID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendmentLogsList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ViewAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) SearchAll(ctx context.Context, in *EquationsWorkOrdersServiceSearchAllReq, opts ...grpc.CallOption) (*EquationsWorkOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Filter(ctx context.Context, in *EquationsWorkOrdersServiceFilterReq, opts ...grpc.CallOption) (*EquationsWorkOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsWorkOrdersList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) Count(ctx context.Context, in *EquationsWorkOrdersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) DownloadAsCSV(ctx context.Context, in *EquationsWorkOrdersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsWorkOrdersServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, EquationsWorkOrdersService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquationsWorkOrdersService
