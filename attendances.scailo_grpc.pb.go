// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: attendances.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AttendancesService_Create_FullMethodName                    = "/Scailo.AttendancesService/Create"
	AttendancesService_Draft_FullMethodName                     = "/Scailo.AttendancesService/Draft"
	AttendancesService_DraftUpdate_FullMethodName               = "/Scailo.AttendancesService/DraftUpdate"
	AttendancesService_SendForVerification_FullMethodName       = "/Scailo.AttendancesService/SendForVerification"
	AttendancesService_Verify_FullMethodName                    = "/Scailo.AttendancesService/Verify"
	AttendancesService_Approve_FullMethodName                   = "/Scailo.AttendancesService/Approve"
	AttendancesService_SendForRevision_FullMethodName           = "/Scailo.AttendancesService/SendForRevision"
	AttendancesService_RevisionUpdate_FullMethodName            = "/Scailo.AttendancesService/RevisionUpdate"
	AttendancesService_Halt_FullMethodName                      = "/Scailo.AttendancesService/Halt"
	AttendancesService_Discard_FullMethodName                   = "/Scailo.AttendancesService/Discard"
	AttendancesService_Restore_FullMethodName                   = "/Scailo.AttendancesService/Restore"
	AttendancesService_Complete_FullMethodName                  = "/Scailo.AttendancesService/Complete"
	AttendancesService_Repeat_FullMethodName                    = "/Scailo.AttendancesService/Repeat"
	AttendancesService_CommentAdd_FullMethodName                = "/Scailo.AttendancesService/CommentAdd"
	AttendancesService_CreateMagicLink_FullMethodName           = "/Scailo.AttendancesService/CreateMagicLink"
	AttendancesService_RecordImageEntry_FullMethodName          = "/Scailo.AttendancesService/RecordImageEntry"
	AttendancesService_RecordImageExit_FullMethodName           = "/Scailo.AttendancesService/RecordImageExit"
	AttendancesService_ViewByID_FullMethodName                  = "/Scailo.AttendancesService/ViewByID"
	AttendancesService_ViewByUUID_FullMethodName                = "/Scailo.AttendancesService/ViewByUUID"
	AttendancesService_ViewEssentialByID_FullMethodName         = "/Scailo.AttendancesService/ViewEssentialByID"
	AttendancesService_ViewEssentialByUUID_FullMethodName       = "/Scailo.AttendancesService/ViewEssentialByUUID"
	AttendancesService_ViewFromIDs_FullMethodName               = "/Scailo.AttendancesService/ViewFromIDs"
	AttendancesService_ViewAll_FullMethodName                   = "/Scailo.AttendancesService/ViewAll"
	AttendancesService_ViewAllForEntityUUID_FullMethodName      = "/Scailo.AttendancesService/ViewAllForEntityUUID"
	AttendancesService_ViewWithPagination_FullMethodName        = "/Scailo.AttendancesService/ViewWithPagination"
	AttendancesService_ViewEntryImage_FullMethodName            = "/Scailo.AttendancesService/ViewEntryImage"
	AttendancesService_ConfirmEntryImage_FullMethodName         = "/Scailo.AttendancesService/ConfirmEntryImage"
	AttendancesService_ViewExitImage_FullMethodName             = "/Scailo.AttendancesService/ViewExitImage"
	AttendancesService_ConfirmExitImage_FullMethodName          = "/Scailo.AttendancesService/ConfirmExitImage"
	AttendancesService_ViewEntryGPSCoordinates_FullMethodName   = "/Scailo.AttendancesService/ViewEntryGPSCoordinates"
	AttendancesService_ViewExitGPSCoordinates_FullMethodName    = "/Scailo.AttendancesService/ViewExitGPSCoordinates"
	AttendancesService_ViewEntryGPSStaticImage_FullMethodName   = "/Scailo.AttendancesService/ViewEntryGPSStaticImage"
	AttendancesService_ViewExitGPSStaticImage_FullMethodName    = "/Scailo.AttendancesService/ViewExitGPSStaticImage"
	AttendancesService_ViewOpenAttendanceForUser_FullMethodName = "/Scailo.AttendancesService/ViewOpenAttendanceForUser"
	AttendancesService_SearchAll_FullMethodName                 = "/Scailo.AttendancesService/SearchAll"
	AttendancesService_Filter_FullMethodName                    = "/Scailo.AttendancesService/Filter"
	AttendancesService_EmployeeHasOpenAttendance_FullMethodName = "/Scailo.AttendancesService/EmployeeHasOpenAttendance"
	AttendancesService_CountInStatus_FullMethodName             = "/Scailo.AttendancesService/CountInStatus"
	AttendancesService_Count_FullMethodName                     = "/Scailo.AttendancesService/Count"
	AttendancesService_DownloadAsCSV_FullMethodName             = "/Scailo.AttendancesService/DownloadAsCSV"
)

// AttendancesServiceClient is the client API for AttendancesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each attendance
type AttendancesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *AttendancesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *AttendancesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *AttendancesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *AttendancesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	// rpc SendEmail (Identifier) returns (IdentifierResponse);
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Store entry time
	RecordImageEntry(ctx context.Context, in *AttendancesServiceImageEntryRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Store exit time
	RecordImageExit(ctx context.Context, in *AttendancesServiceImageExitRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Attendance, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Attendance, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Attendance, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Attendance, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*AttendancesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*AttendancesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*AttendancesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *AttendancesServicePaginationReq, opts ...grpc.CallOption) (*AttendancesServicePaginationResponse, error)
	// View entry image for attendance UUID
	ViewEntryImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// Confirm that the entry image of the given attendance UUID belongs to the user
	ConfirmEntryImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// View exit image for attendance UUID
	ViewExitImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// Confirm that the exit image of the given attendance UUID belongs to the user
	ConfirmExitImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// View entry GPS coordinates for attendance UUID
	ViewEntryGPSCoordinates(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GPSCoordinatesResponse, error)
	// View exit GPS coordinates for attendance UUID
	ViewExitGPSCoordinates(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GPSCoordinatesResponse, error)
	// View entry GPS static image from Google Maps
	ViewEntryGPSStaticImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View exit GPS static image from Google Maps
	ViewExitGPSStaticImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View the open attendance for a user (with the given identifier), if available. Returns an empty instance if no attendance is available
	ViewOpenAttendanceForUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Attendance, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *AttendancesServiceSearchAllReq, opts ...grpc.CallOption) (*AttendancesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *AttendancesServiceFilterReq, opts ...grpc.CallOption) (*AttendancesList, error)
	// Checks if a user (with the given identifier) has an open attendance (attendance with only entry and no exit)
	EmployeeHasOpenAttendance(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *AttendancesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *AttendancesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type attendancesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendancesServiceClient(cc grpc.ClientConnInterface) AttendancesServiceClient {
	return &attendancesServiceClient{cc}
}

func (c *attendancesServiceClient) Create(ctx context.Context, in *AttendancesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) Draft(ctx context.Context, in *AttendancesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) DraftUpdate(ctx context.Context, in *AttendancesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) RevisionUpdate(ctx context.Context, in *AttendancesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, AttendancesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) RecordImageEntry(ctx context.Context, in *AttendancesServiceImageEntryRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_RecordImageEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) RecordImageExit(ctx context.Context, in *AttendancesServiceImageExitRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesService_RecordImageExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Attendance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attendance)
	err := c.cc.Invoke(ctx, AttendancesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Attendance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attendance)
	err := c.cc.Invoke(ctx, AttendancesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Attendance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attendance)
	err := c.cc.Invoke(ctx, AttendancesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Attendance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attendance)
	err := c.cc.Invoke(ctx, AttendancesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*AttendancesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesList)
	err := c.cc.Invoke(ctx, AttendancesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*AttendancesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesList)
	err := c.cc.Invoke(ctx, AttendancesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*AttendancesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesList)
	err := c.cc.Invoke(ctx, AttendancesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewWithPagination(ctx context.Context, in *AttendancesServicePaginationReq, opts ...grpc.CallOption) (*AttendancesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesServicePaginationResponse)
	err := c.cc.Invoke(ctx, AttendancesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewEntryImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, AttendancesService_ViewEntryImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ConfirmEntryImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, AttendancesService_ConfirmEntryImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewExitImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, AttendancesService_ViewExitImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ConfirmExitImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, AttendancesService_ConfirmExitImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewEntryGPSCoordinates(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GPSCoordinatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPSCoordinatesResponse)
	err := c.cc.Invoke(ctx, AttendancesService_ViewEntryGPSCoordinates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewExitGPSCoordinates(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GPSCoordinatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPSCoordinatesResponse)
	err := c.cc.Invoke(ctx, AttendancesService_ViewExitGPSCoordinates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewEntryGPSStaticImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, AttendancesService_ViewEntryGPSStaticImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewExitGPSStaticImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, AttendancesService_ViewExitGPSStaticImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) ViewOpenAttendanceForUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Attendance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Attendance)
	err := c.cc.Invoke(ctx, AttendancesService_ViewOpenAttendanceForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) SearchAll(ctx context.Context, in *AttendancesServiceSearchAllReq, opts ...grpc.CallOption) (*AttendancesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesList)
	err := c.cc.Invoke(ctx, AttendancesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) Filter(ctx context.Context, in *AttendancesServiceFilterReq, opts ...grpc.CallOption) (*AttendancesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesList)
	err := c.cc.Invoke(ctx, AttendancesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) EmployeeHasOpenAttendance(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, AttendancesService_EmployeeHasOpenAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, AttendancesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) Count(ctx context.Context, in *AttendancesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, AttendancesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesServiceClient) DownloadAsCSV(ctx context.Context, in *AttendancesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, AttendancesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendancesService
