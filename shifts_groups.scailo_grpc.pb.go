// addShiftGroupShift
// modifyShiftGroupShift
// reorderShiftGroupShifts
// deleteShiftGroupShift
// approveShiftGroupShift

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: shifts_groups.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShiftsGroupsService_Create_FullMethodName                         = "/Scailo.ShiftsGroupsService/Create"
	ShiftsGroupsService_Draft_FullMethodName                          = "/Scailo.ShiftsGroupsService/Draft"
	ShiftsGroupsService_DraftUpdate_FullMethodName                    = "/Scailo.ShiftsGroupsService/DraftUpdate"
	ShiftsGroupsService_SendForVerification_FullMethodName            = "/Scailo.ShiftsGroupsService/SendForVerification"
	ShiftsGroupsService_Verify_FullMethodName                         = "/Scailo.ShiftsGroupsService/Verify"
	ShiftsGroupsService_Approve_FullMethodName                        = "/Scailo.ShiftsGroupsService/Approve"
	ShiftsGroupsService_SendForRevision_FullMethodName                = "/Scailo.ShiftsGroupsService/SendForRevision"
	ShiftsGroupsService_RevisionUpdate_FullMethodName                 = "/Scailo.ShiftsGroupsService/RevisionUpdate"
	ShiftsGroupsService_Halt_FullMethodName                           = "/Scailo.ShiftsGroupsService/Halt"
	ShiftsGroupsService_Discard_FullMethodName                        = "/Scailo.ShiftsGroupsService/Discard"
	ShiftsGroupsService_Restore_FullMethodName                        = "/Scailo.ShiftsGroupsService/Restore"
	ShiftsGroupsService_Complete_FullMethodName                       = "/Scailo.ShiftsGroupsService/Complete"
	ShiftsGroupsService_Repeat_FullMethodName                         = "/Scailo.ShiftsGroupsService/Repeat"
	ShiftsGroupsService_CommentAdd_FullMethodName                     = "/Scailo.ShiftsGroupsService/CommentAdd"
	ShiftsGroupsService_AddShiftGroupShift_FullMethodName             = "/Scailo.ShiftsGroupsService/AddShiftGroupShift"
	ShiftsGroupsService_ModifyShiftGroupShift_FullMethodName          = "/Scailo.ShiftsGroupsService/ModifyShiftGroupShift"
	ShiftsGroupsService_ApproveShiftGroupShift_FullMethodName         = "/Scailo.ShiftsGroupsService/ApproveShiftGroupShift"
	ShiftsGroupsService_DeleteShiftGroupShift_FullMethodName          = "/Scailo.ShiftsGroupsService/DeleteShiftGroupShift"
	ShiftsGroupsService_ReorderShiftGroupShifts_FullMethodName        = "/Scailo.ShiftsGroupsService/ReorderShiftGroupShifts"
	ShiftsGroupsService_ViewShiftGroupShiftByID_FullMethodName        = "/Scailo.ShiftsGroupsService/ViewShiftGroupShiftByID"
	ShiftsGroupsService_ViewApprovedShiftGroupShifts_FullMethodName   = "/Scailo.ShiftsGroupsService/ViewApprovedShiftGroupShifts"
	ShiftsGroupsService_ViewUnapprovedShiftGroupShifts_FullMethodName = "/Scailo.ShiftsGroupsService/ViewUnapprovedShiftGroupShifts"
	ShiftsGroupsService_ViewShiftGroupShiftsHistory_FullMethodName    = "/Scailo.ShiftsGroupsService/ViewShiftGroupShiftsHistory"
	ShiftsGroupsService_ViewByID_FullMethodName                       = "/Scailo.ShiftsGroupsService/ViewByID"
	ShiftsGroupsService_ViewByUUID_FullMethodName                     = "/Scailo.ShiftsGroupsService/ViewByUUID"
	ShiftsGroupsService_ViewEssentialByID_FullMethodName              = "/Scailo.ShiftsGroupsService/ViewEssentialByID"
	ShiftsGroupsService_ViewEssentialByUUID_FullMethodName            = "/Scailo.ShiftsGroupsService/ViewEssentialByUUID"
	ShiftsGroupsService_ViewFromIDs_FullMethodName                    = "/Scailo.ShiftsGroupsService/ViewFromIDs"
	ShiftsGroupsService_ViewAll_FullMethodName                        = "/Scailo.ShiftsGroupsService/ViewAll"
	ShiftsGroupsService_ViewAllForEntityUUID_FullMethodName           = "/Scailo.ShiftsGroupsService/ViewAllForEntityUUID"
	ShiftsGroupsService_ViewWithPagination_FullMethodName             = "/Scailo.ShiftsGroupsService/ViewWithPagination"
	ShiftsGroupsService_SearchAll_FullMethodName                      = "/Scailo.ShiftsGroupsService/SearchAll"
	ShiftsGroupsService_Filter_FullMethodName                         = "/Scailo.ShiftsGroupsService/Filter"
	ShiftsGroupsService_CountInStatus_FullMethodName                  = "/Scailo.ShiftsGroupsService/CountInStatus"
	ShiftsGroupsService_Count_FullMethodName                          = "/Scailo.ShiftsGroupsService/Count"
	ShiftsGroupsService_DownloadAsCSV_FullMethodName                  = "/Scailo.ShiftsGroupsService/DownloadAsCSV"
	ShiftsGroupsService_ImportFromCSV_FullMethodName                  = "/Scailo.ShiftsGroupsService/ImportFromCSV"
)

// ShiftsGroupsServiceClient is the client API for ShiftsGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each shift group
type ShiftsGroupsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ShiftsGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ShiftsGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ShiftsGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ShiftsGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a shift to a shift group
	AddShiftGroupShift(ctx context.Context, in *ShiftsGroupsServiceShiftGroupCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify a shift in a shift group
	ModifyShiftGroupShift(ctx context.Context, in *ShiftsGroupsServiceShiftGroupUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a shift in a shift group
	ApproveShiftGroupShift(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a shift in a shift group
	DeleteShiftGroupShift(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder shifts in a shift group
	ReorderShiftGroupShifts(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Shift Group Shift by ID
	ViewShiftGroupShiftByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ShiftGroupShift, error)
	// View approved shift group shifts for given shift group ID
	ViewApprovedShiftGroupShifts(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ShiftsGroupsShiftsList, error)
	// View unapproved shift group shifts for given shift group ID
	ViewUnapprovedShiftGroupShifts(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ShiftsGroupsShiftsList, error)
	// View the history of the shift group shift
	ViewShiftGroupShiftsHistory(ctx context.Context, in *ShiftsGroupsShiftsHistoryRequest, opts ...grpc.CallOption) (*ShiftsGroupsShiftsList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ShiftGroup, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ShiftGroup, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ShiftGroup, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ShiftGroup, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ShiftsGroupsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ShiftsGroupsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ShiftsGroupsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ShiftsGroupsServicePaginationReq, opts ...grpc.CallOption) (*ShiftsGroupsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ShiftsGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*ShiftsGroupsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ShiftsGroupsServiceFilterReq, opts ...grpc.CallOption) (*ShiftsGroupsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ShiftsGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ShiftsGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type shiftsGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShiftsGroupsServiceClient(cc grpc.ClientConnInterface) ShiftsGroupsServiceClient {
	return &shiftsGroupsServiceClient{cc}
}

func (c *shiftsGroupsServiceClient) Create(ctx context.Context, in *ShiftsGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) Draft(ctx context.Context, in *ShiftsGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) DraftUpdate(ctx context.Context, in *ShiftsGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) RevisionUpdate(ctx context.Context, in *ShiftsGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) AddShiftGroupShift(ctx context.Context, in *ShiftsGroupsServiceShiftGroupCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_AddShiftGroupShift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ModifyShiftGroupShift(ctx context.Context, in *ShiftsGroupsServiceShiftGroupUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ModifyShiftGroupShift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ApproveShiftGroupShift(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ApproveShiftGroupShift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) DeleteShiftGroupShift(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_DeleteShiftGroupShift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ReorderShiftGroupShifts(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ReorderShiftGroupShifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewShiftGroupShiftByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ShiftGroupShift, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftGroupShift)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewShiftGroupShiftByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewApprovedShiftGroupShifts(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ShiftsGroupsShiftsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsGroupsShiftsList)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewApprovedShiftGroupShifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewUnapprovedShiftGroupShifts(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ShiftsGroupsShiftsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsGroupsShiftsList)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewUnapprovedShiftGroupShifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewShiftGroupShiftsHistory(ctx context.Context, in *ShiftsGroupsShiftsHistoryRequest, opts ...grpc.CallOption) (*ShiftsGroupsShiftsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsGroupsShiftsList)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewShiftGroupShiftsHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ShiftGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftGroup)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ShiftGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftGroup)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ShiftGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftGroup)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ShiftGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftGroup)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ShiftsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsGroupsList)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ShiftsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsGroupsList)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ShiftsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsGroupsList)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ViewWithPagination(ctx context.Context, in *ShiftsGroupsServicePaginationReq, opts ...grpc.CallOption) (*ShiftsGroupsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsGroupsServicePaginationResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) SearchAll(ctx context.Context, in *ShiftsGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*ShiftsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsGroupsList)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) Filter(ctx context.Context, in *ShiftsGroupsServiceFilterReq, opts ...grpc.CallOption) (*ShiftsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsGroupsList)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) Count(ctx context.Context, in *ShiftsGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) DownloadAsCSV(ctx context.Context, in *ShiftsGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsGroupsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, ShiftsGroupsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShiftsGroupsService
