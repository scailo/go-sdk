// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: units_of_materials.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UnitsOfMaterialsService_Create_FullMethodName               = "/Scailo.UnitsOfMaterialsService/Create"
	UnitsOfMaterialsService_Draft_FullMethodName                = "/Scailo.UnitsOfMaterialsService/Draft"
	UnitsOfMaterialsService_DraftUpdate_FullMethodName          = "/Scailo.UnitsOfMaterialsService/DraftUpdate"
	UnitsOfMaterialsService_SendForVerification_FullMethodName  = "/Scailo.UnitsOfMaterialsService/SendForVerification"
	UnitsOfMaterialsService_Verify_FullMethodName               = "/Scailo.UnitsOfMaterialsService/Verify"
	UnitsOfMaterialsService_Approve_FullMethodName              = "/Scailo.UnitsOfMaterialsService/Approve"
	UnitsOfMaterialsService_SendForRevision_FullMethodName      = "/Scailo.UnitsOfMaterialsService/SendForRevision"
	UnitsOfMaterialsService_RevisionUpdate_FullMethodName       = "/Scailo.UnitsOfMaterialsService/RevisionUpdate"
	UnitsOfMaterialsService_Halt_FullMethodName                 = "/Scailo.UnitsOfMaterialsService/Halt"
	UnitsOfMaterialsService_Discard_FullMethodName              = "/Scailo.UnitsOfMaterialsService/Discard"
	UnitsOfMaterialsService_Restore_FullMethodName              = "/Scailo.UnitsOfMaterialsService/Restore"
	UnitsOfMaterialsService_CommentAdd_FullMethodName           = "/Scailo.UnitsOfMaterialsService/CommentAdd"
	UnitsOfMaterialsService_ViewByID_FullMethodName             = "/Scailo.UnitsOfMaterialsService/ViewByID"
	UnitsOfMaterialsService_ViewByUUID_FullMethodName           = "/Scailo.UnitsOfMaterialsService/ViewByUUID"
	UnitsOfMaterialsService_ViewEssentialByID_FullMethodName    = "/Scailo.UnitsOfMaterialsService/ViewEssentialByID"
	UnitsOfMaterialsService_ViewEssentialByUUID_FullMethodName  = "/Scailo.UnitsOfMaterialsService/ViewEssentialByUUID"
	UnitsOfMaterialsService_ViewFromIDs_FullMethodName          = "/Scailo.UnitsOfMaterialsService/ViewFromIDs"
	UnitsOfMaterialsService_ViewAll_FullMethodName              = "/Scailo.UnitsOfMaterialsService/ViewAll"
	UnitsOfMaterialsService_ViewAllForEntityUUID_FullMethodName = "/Scailo.UnitsOfMaterialsService/ViewAllForEntityUUID"
	UnitsOfMaterialsService_ViewWithPagination_FullMethodName   = "/Scailo.UnitsOfMaterialsService/ViewWithPagination"
	UnitsOfMaterialsService_ViewForFamilyIDs_FullMethodName     = "/Scailo.UnitsOfMaterialsService/ViewForFamilyIDs"
	UnitsOfMaterialsService_SearchAll_FullMethodName            = "/Scailo.UnitsOfMaterialsService/SearchAll"
	UnitsOfMaterialsService_Filter_FullMethodName               = "/Scailo.UnitsOfMaterialsService/Filter"
	UnitsOfMaterialsService_CountInStatus_FullMethodName        = "/Scailo.UnitsOfMaterialsService/CountInStatus"
	UnitsOfMaterialsService_Count_FullMethodName                = "/Scailo.UnitsOfMaterialsService/Count"
	UnitsOfMaterialsService_DownloadAsCSV_FullMethodName        = "/Scailo.UnitsOfMaterialsService/DownloadAsCSV"
	UnitsOfMaterialsService_ImportFromCSV_FullMethodName        = "/Scailo.UnitsOfMaterialsService/ImportFromCSV"
)

// UnitsOfMaterialsServiceClient is the client API for UnitsOfMaterialsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each unit of material
type UnitsOfMaterialsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *UnitsOfMaterialsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *UnitsOfMaterialsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *UnitsOfMaterialsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *UnitsOfMaterialsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*UnitOfMaterial, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*UnitOfMaterial, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*UnitOfMaterial, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*UnitOfMaterial, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *UnitsOfMaterialsServicePaginationReq, opts ...grpc.CallOption) (*UnitsOfMaterialsServicePaginationResponse, error)
	// View the primary units of materials for the given family IDs list
	ViewForFamilyIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *UnitsOfMaterialsServiceSearchAllReq, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *UnitsOfMaterialsServiceFilterReq, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *UnitsOfMaterialsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *UnitsOfMaterialsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type unitsOfMaterialsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnitsOfMaterialsServiceClient(cc grpc.ClientConnInterface) UnitsOfMaterialsServiceClient {
	return &unitsOfMaterialsServiceClient{cc}
}

func (c *unitsOfMaterialsServiceClient) Create(ctx context.Context, in *UnitsOfMaterialsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) Draft(ctx context.Context, in *UnitsOfMaterialsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) DraftUpdate(ctx context.Context, in *UnitsOfMaterialsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) RevisionUpdate(ctx context.Context, in *UnitsOfMaterialsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*UnitOfMaterial, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitOfMaterial)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*UnitOfMaterial, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitOfMaterial)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*UnitOfMaterial, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitOfMaterial)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*UnitOfMaterial, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitOfMaterial)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitsOfMaterialsList)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitsOfMaterialsList)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitsOfMaterialsList)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) ViewWithPagination(ctx context.Context, in *UnitsOfMaterialsServicePaginationReq, opts ...grpc.CallOption) (*UnitsOfMaterialsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitsOfMaterialsServicePaginationResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) ViewForFamilyIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitsOfMaterialsList)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_ViewForFamilyIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) SearchAll(ctx context.Context, in *UnitsOfMaterialsServiceSearchAllReq, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitsOfMaterialsList)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) Filter(ctx context.Context, in *UnitsOfMaterialsServiceFilterReq, opts ...grpc.CallOption) (*UnitsOfMaterialsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitsOfMaterialsList)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) Count(ctx context.Context, in *UnitsOfMaterialsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) DownloadAsCSV(ctx context.Context, in *UnitsOfMaterialsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitsOfMaterialsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, UnitsOfMaterialsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnitsOfMaterialsService
