// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: shifts.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShiftsService_Create_FullMethodName               = "/Scailo.ShiftsService/Create"
	ShiftsService_Draft_FullMethodName                = "/Scailo.ShiftsService/Draft"
	ShiftsService_DraftUpdate_FullMethodName          = "/Scailo.ShiftsService/DraftUpdate"
	ShiftsService_SendForVerification_FullMethodName  = "/Scailo.ShiftsService/SendForVerification"
	ShiftsService_Verify_FullMethodName               = "/Scailo.ShiftsService/Verify"
	ShiftsService_Approve_FullMethodName              = "/Scailo.ShiftsService/Approve"
	ShiftsService_SendForRevision_FullMethodName      = "/Scailo.ShiftsService/SendForRevision"
	ShiftsService_RevisionUpdate_FullMethodName       = "/Scailo.ShiftsService/RevisionUpdate"
	ShiftsService_Halt_FullMethodName                 = "/Scailo.ShiftsService/Halt"
	ShiftsService_Discard_FullMethodName              = "/Scailo.ShiftsService/Discard"
	ShiftsService_Restore_FullMethodName              = "/Scailo.ShiftsService/Restore"
	ShiftsService_Complete_FullMethodName             = "/Scailo.ShiftsService/Complete"
	ShiftsService_Repeat_FullMethodName               = "/Scailo.ShiftsService/Repeat"
	ShiftsService_CommentAdd_FullMethodName           = "/Scailo.ShiftsService/CommentAdd"
	ShiftsService_ViewByID_FullMethodName             = "/Scailo.ShiftsService/ViewByID"
	ShiftsService_ViewByUUID_FullMethodName           = "/Scailo.ShiftsService/ViewByUUID"
	ShiftsService_ViewEssentialByID_FullMethodName    = "/Scailo.ShiftsService/ViewEssentialByID"
	ShiftsService_ViewEssentialByUUID_FullMethodName  = "/Scailo.ShiftsService/ViewEssentialByUUID"
	ShiftsService_ViewFromIDs_FullMethodName          = "/Scailo.ShiftsService/ViewFromIDs"
	ShiftsService_ViewAll_FullMethodName              = "/Scailo.ShiftsService/ViewAll"
	ShiftsService_ViewAllForEntityUUID_FullMethodName = "/Scailo.ShiftsService/ViewAllForEntityUUID"
	ShiftsService_ViewWithPagination_FullMethodName   = "/Scailo.ShiftsService/ViewWithPagination"
	ShiftsService_SearchAll_FullMethodName            = "/Scailo.ShiftsService/SearchAll"
	ShiftsService_Filter_FullMethodName               = "/Scailo.ShiftsService/Filter"
	ShiftsService_CountInStatus_FullMethodName        = "/Scailo.ShiftsService/CountInStatus"
	ShiftsService_Count_FullMethodName                = "/Scailo.ShiftsService/Count"
	ShiftsService_DownloadAsCSV_FullMethodName        = "/Scailo.ShiftsService/DownloadAsCSV"
	ShiftsService_ImportFromCSV_FullMethodName        = "/Scailo.ShiftsService/ImportFromCSV"
)

// ShiftsServiceClient is the client API for ShiftsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each shift
type ShiftsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ShiftsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ShiftsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ShiftsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ShiftsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Shift, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Shift, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Shift, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Shift, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ShiftsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ShiftsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ShiftsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ShiftsServicePaginationReq, opts ...grpc.CallOption) (*ShiftsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ShiftsServiceSearchAllReq, opts ...grpc.CallOption) (*ShiftsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ShiftsServiceFilterReq, opts ...grpc.CallOption) (*ShiftsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ShiftsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ShiftsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type shiftsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShiftsServiceClient(cc grpc.ClientConnInterface) ShiftsServiceClient {
	return &shiftsServiceClient{cc}
}

func (c *shiftsServiceClient) Create(ctx context.Context, in *ShiftsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) Draft(ctx context.Context, in *ShiftsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) DraftUpdate(ctx context.Context, in *ShiftsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) RevisionUpdate(ctx context.Context, in *ShiftsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ShiftsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Shift, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Shift)
	err := c.cc.Invoke(ctx, ShiftsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Shift, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Shift)
	err := c.cc.Invoke(ctx, ShiftsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Shift, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Shift)
	err := c.cc.Invoke(ctx, ShiftsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Shift, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Shift)
	err := c.cc.Invoke(ctx, ShiftsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ShiftsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsList)
	err := c.cc.Invoke(ctx, ShiftsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ShiftsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsList)
	err := c.cc.Invoke(ctx, ShiftsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ShiftsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsList)
	err := c.cc.Invoke(ctx, ShiftsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) ViewWithPagination(ctx context.Context, in *ShiftsServicePaginationReq, opts ...grpc.CallOption) (*ShiftsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsServicePaginationResponse)
	err := c.cc.Invoke(ctx, ShiftsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) SearchAll(ctx context.Context, in *ShiftsServiceSearchAllReq, opts ...grpc.CallOption) (*ShiftsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsList)
	err := c.cc.Invoke(ctx, ShiftsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) Filter(ctx context.Context, in *ShiftsServiceFilterReq, opts ...grpc.CallOption) (*ShiftsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftsList)
	err := c.cc.Invoke(ctx, ShiftsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ShiftsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) Count(ctx context.Context, in *ShiftsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ShiftsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) DownloadAsCSV(ctx context.Context, in *ShiftsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ShiftsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, ShiftsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShiftsService
