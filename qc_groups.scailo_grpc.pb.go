// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qc_groups.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QCGroupsService_Create_FullMethodName                              = "/Scailo.QCGroupsService/Create"
	QCGroupsService_Draft_FullMethodName                               = "/Scailo.QCGroupsService/Draft"
	QCGroupsService_DraftUpdate_FullMethodName                         = "/Scailo.QCGroupsService/DraftUpdate"
	QCGroupsService_SendForVerification_FullMethodName                 = "/Scailo.QCGroupsService/SendForVerification"
	QCGroupsService_Verify_FullMethodName                              = "/Scailo.QCGroupsService/Verify"
	QCGroupsService_Approve_FullMethodName                             = "/Scailo.QCGroupsService/Approve"
	QCGroupsService_SendForRevision_FullMethodName                     = "/Scailo.QCGroupsService/SendForRevision"
	QCGroupsService_RevisionUpdate_FullMethodName                      = "/Scailo.QCGroupsService/RevisionUpdate"
	QCGroupsService_Halt_FullMethodName                                = "/Scailo.QCGroupsService/Halt"
	QCGroupsService_Discard_FullMethodName                             = "/Scailo.QCGroupsService/Discard"
	QCGroupsService_Restore_FullMethodName                             = "/Scailo.QCGroupsService/Restore"
	QCGroupsService_Complete_FullMethodName                            = "/Scailo.QCGroupsService/Complete"
	QCGroupsService_Repeat_FullMethodName                              = "/Scailo.QCGroupsService/Repeat"
	QCGroupsService_Reopen_FullMethodName                              = "/Scailo.QCGroupsService/Reopen"
	QCGroupsService_CommentAdd_FullMethodName                          = "/Scailo.QCGroupsService/CommentAdd"
	QCGroupsService_Clone_FullMethodName                               = "/Scailo.QCGroupsService/Clone"
	QCGroupsService_AddQCGroupItem_FullMethodName                      = "/Scailo.QCGroupsService/AddQCGroupItem"
	QCGroupsService_ModifyQCGroupItem_FullMethodName                   = "/Scailo.QCGroupsService/ModifyQCGroupItem"
	QCGroupsService_ApproveQCGroupItem_FullMethodName                  = "/Scailo.QCGroupsService/ApproveQCGroupItem"
	QCGroupsService_DeleteQCGroupItem_FullMethodName                   = "/Scailo.QCGroupsService/DeleteQCGroupItem"
	QCGroupsService_ReorderQCGroupItems_FullMethodName                 = "/Scailo.QCGroupsService/ReorderQCGroupItems"
	QCGroupsService_ViewQCGroupItemByID_FullMethodName                 = "/Scailo.QCGroupsService/ViewQCGroupItemByID"
	QCGroupsService_ViewApprovedQCGroupItems_FullMethodName            = "/Scailo.QCGroupsService/ViewApprovedQCGroupItems"
	QCGroupsService_ViewUnapprovedQCGroupItems_FullMethodName          = "/Scailo.QCGroupsService/ViewUnapprovedQCGroupItems"
	QCGroupsService_ViewQCGroupItemHistory_FullMethodName              = "/Scailo.QCGroupsService/ViewQCGroupItemHistory"
	QCGroupsService_ViewPaginatedApprovedQCGroupItems_FullMethodName   = "/Scailo.QCGroupsService/ViewPaginatedApprovedQCGroupItems"
	QCGroupsService_ViewPaginatedUnapprovedQCGroupItems_FullMethodName = "/Scailo.QCGroupsService/ViewPaginatedUnapprovedQCGroupItems"
	QCGroupsService_SearchItemsWithPagination_FullMethodName           = "/Scailo.QCGroupsService/SearchItemsWithPagination"
	QCGroupsService_DownloadItemsAsCSV_FullMethodName                  = "/Scailo.QCGroupsService/DownloadItemsAsCSV"
	QCGroupsService_DownloadItemsTemplateAsCSV_FullMethodName          = "/Scailo.QCGroupsService/DownloadItemsTemplateAsCSV"
	QCGroupsService_UploadQCGroupItems_FullMethodName                  = "/Scailo.QCGroupsService/UploadQCGroupItems"
	QCGroupsService_ViewByID_FullMethodName                            = "/Scailo.QCGroupsService/ViewByID"
	QCGroupsService_ViewByUUID_FullMethodName                          = "/Scailo.QCGroupsService/ViewByUUID"
	QCGroupsService_ViewByCode_FullMethodName                          = "/Scailo.QCGroupsService/ViewByCode"
	QCGroupsService_ViewEssentialByID_FullMethodName                   = "/Scailo.QCGroupsService/ViewEssentialByID"
	QCGroupsService_ViewEssentialByUUID_FullMethodName                 = "/Scailo.QCGroupsService/ViewEssentialByUUID"
	QCGroupsService_ViewFromIDs_FullMethodName                         = "/Scailo.QCGroupsService/ViewFromIDs"
	QCGroupsService_ViewAll_FullMethodName                             = "/Scailo.QCGroupsService/ViewAll"
	QCGroupsService_ViewAllForEntityUUID_FullMethodName                = "/Scailo.QCGroupsService/ViewAllForEntityUUID"
	QCGroupsService_ViewWithPagination_FullMethodName                  = "/Scailo.QCGroupsService/ViewWithPagination"
	QCGroupsService_SearchAll_FullMethodName                           = "/Scailo.QCGroupsService/SearchAll"
	QCGroupsService_Filter_FullMethodName                              = "/Scailo.QCGroupsService/Filter"
	QCGroupsService_CountInStatus_FullMethodName                       = "/Scailo.QCGroupsService/CountInStatus"
	QCGroupsService_Count_FullMethodName                               = "/Scailo.QCGroupsService/Count"
	QCGroupsService_DownloadAsCSV_FullMethodName                       = "/Scailo.QCGroupsService/DownloadAsCSV"
	QCGroupsService_ImportFromCSV_FullMethodName                       = "/Scailo.QCGroupsService/ImportFromCSV"
)

// QCGroupsServiceClient is the client API for QCGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each qc group
type QCGroupsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *QCGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *QCGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *QCGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *QCGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Clone qc group from an existing qc group (denoted by the identifier)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a param to a qc group
	AddQCGroupItem(ctx context.Context, in *QCGroupsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify a param in a qc group
	ModifyQCGroupItem(ctx context.Context, in *QCGroupsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a param in a qc group
	ApproveQCGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a param in a qc group
	DeleteQCGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder params in a qc group
	ReorderQCGroupItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View QC Group Item by ID
	ViewQCGroupItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCGroupItem, error)
	// View approved qc group params for given qc group ID
	ViewApprovedQCGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QCGroupsItemsList, error)
	// View unapproved qc group params for given qc group ID
	ViewUnapprovedQCGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QCGroupsItemsList, error)
	// View the history of the qc group item
	ViewQCGroupItemHistory(ctx context.Context, in *QCGroupItemHistoryRequest, opts ...grpc.CallOption) (*QCGroupsItemsList, error)
	// View approved qc group items for given qc group ID with pagination
	ViewPaginatedApprovedQCGroupItems(ctx context.Context, in *QCGroupItemsSearchRequest, opts ...grpc.CallOption) (*QCGroupsServicePaginatedItemsResponse, error)
	// View unapproved qc group items for given qc group ID with pagination
	ViewPaginatedUnapprovedQCGroupItems(ctx context.Context, in *QCGroupItemsSearchRequest, opts ...grpc.CallOption) (*QCGroupsServicePaginatedItemsResponse, error)
	// Search through qc group items with pagination
	SearchItemsWithPagination(ctx context.Context, in *QCGroupItemsSearchRequest, opts ...grpc.CallOption) (*QCGroupsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadQCGroupItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCGroup, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCGroup, error)
	// View by Code (returns the latest record in case of duplicates)
	ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*QCGroup, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCGroup, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCGroup, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*QCGroupsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*QCGroupsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCGroupsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *QCGroupsServicePaginationReq, opts ...grpc.CallOption) (*QCGroupsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *QCGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*QCGroupsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *QCGroupsServiceFilterReq, opts ...grpc.CallOption) (*QCGroupsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *QCGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *QCGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type qCGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQCGroupsServiceClient(cc grpc.ClientConnInterface) QCGroupsServiceClient {
	return &qCGroupsServiceClient{cc}
}

func (c *qCGroupsServiceClient) Create(ctx context.Context, in *QCGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Draft(ctx context.Context, in *QCGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) DraftUpdate(ctx context.Context, in *QCGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) RevisionUpdate(ctx context.Context, in *QCGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) AddQCGroupItem(ctx context.Context, in *QCGroupsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_AddQCGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ModifyQCGroupItem(ctx context.Context, in *QCGroupsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_ModifyQCGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ApproveQCGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_ApproveQCGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) DeleteQCGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_DeleteQCGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ReorderQCGroupItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_ReorderQCGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewQCGroupItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCGroupItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupItem)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewQCGroupItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewApprovedQCGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QCGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsItemsList)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewApprovedQCGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewUnapprovedQCGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QCGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsItemsList)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewUnapprovedQCGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewQCGroupItemHistory(ctx context.Context, in *QCGroupItemHistoryRequest, opts ...grpc.CallOption) (*QCGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsItemsList)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewQCGroupItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewPaginatedApprovedQCGroupItems(ctx context.Context, in *QCGroupItemsSearchRequest, opts ...grpc.CallOption) (*QCGroupsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewPaginatedApprovedQCGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewPaginatedUnapprovedQCGroupItems(ctx context.Context, in *QCGroupItemsSearchRequest, opts ...grpc.CallOption) (*QCGroupsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewPaginatedUnapprovedQCGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) SearchItemsWithPagination(ctx context.Context, in *QCGroupItemsSearchRequest, opts ...grpc.CallOption) (*QCGroupsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QCGroupsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QCGroupsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) UploadQCGroupItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, QCGroupsService_UploadQCGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroup)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroup)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*QCGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroup)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroup)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroup)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*QCGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsList)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*QCGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsList)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsList)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ViewWithPagination(ctx context.Context, in *QCGroupsServicePaginationReq, opts ...grpc.CallOption) (*QCGroupsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsServicePaginationResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) SearchAll(ctx context.Context, in *QCGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*QCGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsList)
	err := c.cc.Invoke(ctx, QCGroupsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Filter(ctx context.Context, in *QCGroupsServiceFilterReq, opts ...grpc.CallOption) (*QCGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCGroupsList)
	err := c.cc.Invoke(ctx, QCGroupsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) Count(ctx context.Context, in *QCGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, QCGroupsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) DownloadAsCSV(ctx context.Context, in *QCGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QCGroupsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCGroupsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, QCGroupsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QCGroupsService
