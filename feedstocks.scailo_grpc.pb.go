// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: feedstocks.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeedstocksService_Create_FullMethodName                    = "/Scailo.FeedstocksService/Create"
	FeedstocksService_SendToStore_FullMethodName               = "/Scailo.FeedstocksService/SendToStore"
	FeedstocksService_Update_FullMethodName                    = "/Scailo.FeedstocksService/Update"
	FeedstocksService_SendForRework_FullMethodName             = "/Scailo.FeedstocksService/SendForRework"
	FeedstocksService_SendForQC_FullMethodName                 = "/Scailo.FeedstocksService/SendForQC"
	FeedstocksService_SplitLot_FullMethodName                  = "/Scailo.FeedstocksService/SplitLot"
	FeedstocksService_Partition_FullMethodName                 = "/Scailo.FeedstocksService/Partition"
	FeedstocksService_Consume_FullMethodName                   = "/Scailo.FeedstocksService/Consume"
	FeedstocksService_Reject_FullMethodName                    = "/Scailo.FeedstocksService/Reject"
	FeedstocksService_Scrap_FullMethodName                     = "/Scailo.FeedstocksService/Scrap"
	FeedstocksService_ReturnMaterial_FullMethodName            = "/Scailo.FeedstocksService/ReturnMaterial"
	FeedstocksService_Discard_FullMethodName                   = "/Scailo.FeedstocksService/Discard"
	FeedstocksService_CommentAdd_FullMethodName                = "/Scailo.FeedstocksService/CommentAdd"
	FeedstocksService_CreateMagicLink_FullMethodName           = "/Scailo.FeedstocksService/CreateMagicLink"
	FeedstocksService_ViewByID_FullMethodName                  = "/Scailo.FeedstocksService/ViewByID"
	FeedstocksService_ViewByUUID_FullMethodName                = "/Scailo.FeedstocksService/ViewByUUID"
	FeedstocksService_ViewEssentialByID_FullMethodName         = "/Scailo.FeedstocksService/ViewEssentialByID"
	FeedstocksService_ViewEssentialByUUID_FullMethodName       = "/Scailo.FeedstocksService/ViewEssentialByUUID"
	FeedstocksService_ViewFromIDs_FullMethodName               = "/Scailo.FeedstocksService/ViewFromIDs"
	FeedstocksService_ViewFromUUIDs_FullMethodName             = "/Scailo.FeedstocksService/ViewFromUUIDs"
	FeedstocksService_ViewAll_FullMethodName                   = "/Scailo.FeedstocksService/ViewAll"
	FeedstocksService_ViewWithPagination_FullMethodName        = "/Scailo.FeedstocksService/ViewWithPagination"
	FeedstocksService_DownloadQCReportByID_FullMethodName      = "/Scailo.FeedstocksService/DownloadQCReportByID"
	FeedstocksService_DownloadQCReportByUUID_FullMethodName    = "/Scailo.FeedstocksService/DownloadQCReportByUUID"
	FeedstocksService_DownloadLabelByID_FullMethodName         = "/Scailo.FeedstocksService/DownloadLabelByID"
	FeedstocksService_DownloadLabelByUUID_FullMethodName       = "/Scailo.FeedstocksService/DownloadLabelByUUID"
	FeedstocksService_ViewInventoryInteractions_FullMethodName = "/Scailo.FeedstocksService/ViewInventoryInteractions"
	FeedstocksService_SearchAll_FullMethodName                 = "/Scailo.FeedstocksService/SearchAll"
	FeedstocksService_Filter_FullMethodName                    = "/Scailo.FeedstocksService/Filter"
	FeedstocksService_Count_FullMethodName                     = "/Scailo.FeedstocksService/Count"
	FeedstocksService_DownloadAsCSV_FullMethodName             = "/Scailo.FeedstocksService/DownloadAsCSV"
	FeedstocksService_DownloadImportTemplate_FullMethodName    = "/Scailo.FeedstocksService/DownloadImportTemplate"
	FeedstocksService_ImportFromCSV_FullMethodName             = "/Scailo.FeedstocksService/ImportFromCSV"
)

// FeedstocksServiceClient is the client API for FeedstocksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each feedstock
type FeedstocksServiceClient interface {
	// Create (and Send for QC)
	Create(ctx context.Context, in *FeedstocksServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send to Store
	SendToStore(ctx context.Context, in *FeedstocksServiceSendToStoreRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update
	Update(ctx context.Context, in *FeedstocksServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for Rework
	SendForRework(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for QC
	SendForQC(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Split into unit quantities
	SplitLot(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a partition from the parent lot (and returns the identifier of the new partition)
	Partition(ctx context.Context, in *InventoryPartitionRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Consume
	Consume(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reject
	Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Scrap
	Scrap(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Return
	ReturnMaterial(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Feedstock, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Feedstock, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Feedstock, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Feedstock, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*FeedstocksList, error)
	// View all records with the given UUIDs
	ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*FeedstocksList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*FeedstocksList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *FeedstocksServicePaginationReq, opts ...grpc.CallOption) (*FeedstocksServicePaginationResponse, error)
	// Download QC Report with the given Identifier
	DownloadQCReportByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error)
	// Download QC Report with the given IdentifierUUID (can be used to allow public downloads)
	DownloadQCReportByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download Label for the given Identifier
	DownloadLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error)
	// Download Label for the given IdentifierUUID (can be used to allow public downloads)
	DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all inventory interactions for feedstock with the given IdentifierUUID
	ViewInventoryInteractions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InventoryInteractionsList, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *FeedstocksServiceSearchAllReq, opts ...grpc.CallOption) (*FeedstocksList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *FeedstocksServiceFilterReq, opts ...grpc.CallOption) (*FeedstocksList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *FeedstocksServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request
	DownloadAsCSV(ctx context.Context, in *FeedstocksServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload records
	DownloadImportTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file. Imports records as initial stock
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type feedstocksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedstocksServiceClient(cc grpc.ClientConnInterface) FeedstocksServiceClient {
	return &feedstocksServiceClient{cc}
}

func (c *feedstocksServiceClient) Create(ctx context.Context, in *FeedstocksServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) SendToStore(ctx context.Context, in *FeedstocksServiceSendToStoreRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_SendToStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) Update(ctx context.Context, in *FeedstocksServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) SendForRework(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_SendForRework_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) SendForQC(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_SendForQC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) SplitLot(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_SplitLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) Partition(ctx context.Context, in *InventoryPartitionRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_Partition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) Consume(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_Consume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_Reject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) Scrap(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_Scrap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ReturnMaterial(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_ReturnMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, FeedstocksService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Feedstock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Feedstock)
	err := c.cc.Invoke(ctx, FeedstocksService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Feedstock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Feedstock)
	err := c.cc.Invoke(ctx, FeedstocksService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Feedstock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Feedstock)
	err := c.cc.Invoke(ctx, FeedstocksService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Feedstock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Feedstock)
	err := c.cc.Invoke(ctx, FeedstocksService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*FeedstocksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedstocksList)
	err := c.cc.Invoke(ctx, FeedstocksService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*FeedstocksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedstocksList)
	err := c.cc.Invoke(ctx, FeedstocksService_ViewFromUUIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*FeedstocksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedstocksList)
	err := c.cc.Invoke(ctx, FeedstocksService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ViewWithPagination(ctx context.Context, in *FeedstocksServicePaginationReq, opts ...grpc.CallOption) (*FeedstocksServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedstocksServicePaginationResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) DownloadQCReportByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, FeedstocksService_DownloadQCReportByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) DownloadQCReportByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, FeedstocksService_DownloadQCReportByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) DownloadLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, FeedstocksService_DownloadLabelByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, FeedstocksService_DownloadLabelByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ViewInventoryInteractions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InventoryInteractionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryInteractionsList)
	err := c.cc.Invoke(ctx, FeedstocksService_ViewInventoryInteractions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) SearchAll(ctx context.Context, in *FeedstocksServiceSearchAllReq, opts ...grpc.CallOption) (*FeedstocksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedstocksList)
	err := c.cc.Invoke(ctx, FeedstocksService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) Filter(ctx context.Context, in *FeedstocksServiceFilterReq, opts ...grpc.CallOption) (*FeedstocksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedstocksList)
	err := c.cc.Invoke(ctx, FeedstocksService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) Count(ctx context.Context, in *FeedstocksServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, FeedstocksService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) DownloadAsCSV(ctx context.Context, in *FeedstocksServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, FeedstocksService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) DownloadImportTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, FeedstocksService_DownloadImportTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedstocksServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, FeedstocksService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedstocksService
