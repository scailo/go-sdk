// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: activities_tags.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActivitiesTagsService_Create_FullMethodName               = "/Scailo.ActivitiesTagsService/Create"
	ActivitiesTagsService_Draft_FullMethodName                = "/Scailo.ActivitiesTagsService/Draft"
	ActivitiesTagsService_DraftUpdate_FullMethodName          = "/Scailo.ActivitiesTagsService/DraftUpdate"
	ActivitiesTagsService_SendForVerification_FullMethodName  = "/Scailo.ActivitiesTagsService/SendForVerification"
	ActivitiesTagsService_Verify_FullMethodName               = "/Scailo.ActivitiesTagsService/Verify"
	ActivitiesTagsService_Approve_FullMethodName              = "/Scailo.ActivitiesTagsService/Approve"
	ActivitiesTagsService_SendForRevision_FullMethodName      = "/Scailo.ActivitiesTagsService/SendForRevision"
	ActivitiesTagsService_RevisionUpdate_FullMethodName       = "/Scailo.ActivitiesTagsService/RevisionUpdate"
	ActivitiesTagsService_Halt_FullMethodName                 = "/Scailo.ActivitiesTagsService/Halt"
	ActivitiesTagsService_Discard_FullMethodName              = "/Scailo.ActivitiesTagsService/Discard"
	ActivitiesTagsService_Restore_FullMethodName              = "/Scailo.ActivitiesTagsService/Restore"
	ActivitiesTagsService_CommentAdd_FullMethodName           = "/Scailo.ActivitiesTagsService/CommentAdd"
	ActivitiesTagsService_ViewByID_FullMethodName             = "/Scailo.ActivitiesTagsService/ViewByID"
	ActivitiesTagsService_ViewByUUID_FullMethodName           = "/Scailo.ActivitiesTagsService/ViewByUUID"
	ActivitiesTagsService_ViewEssentialByID_FullMethodName    = "/Scailo.ActivitiesTagsService/ViewEssentialByID"
	ActivitiesTagsService_ViewEssentialByUUID_FullMethodName  = "/Scailo.ActivitiesTagsService/ViewEssentialByUUID"
	ActivitiesTagsService_ViewFromIDs_FullMethodName          = "/Scailo.ActivitiesTagsService/ViewFromIDs"
	ActivitiesTagsService_ViewAll_FullMethodName              = "/Scailo.ActivitiesTagsService/ViewAll"
	ActivitiesTagsService_ViewAllForEntityUUID_FullMethodName = "/Scailo.ActivitiesTagsService/ViewAllForEntityUUID"
	ActivitiesTagsService_ViewWithPagination_FullMethodName   = "/Scailo.ActivitiesTagsService/ViewWithPagination"
	ActivitiesTagsService_SearchAll_FullMethodName            = "/Scailo.ActivitiesTagsService/SearchAll"
	ActivitiesTagsService_Filter_FullMethodName               = "/Scailo.ActivitiesTagsService/Filter"
	ActivitiesTagsService_CountInStatus_FullMethodName        = "/Scailo.ActivitiesTagsService/CountInStatus"
	ActivitiesTagsService_Count_FullMethodName                = "/Scailo.ActivitiesTagsService/Count"
	ActivitiesTagsService_DownloadAsCSV_FullMethodName        = "/Scailo.ActivitiesTagsService/DownloadAsCSV"
	ActivitiesTagsService_ImportFromCSV_FullMethodName        = "/Scailo.ActivitiesTagsService/ImportFromCSV"
)

// ActivitiesTagsServiceClient is the client API for ActivitiesTagsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each activity tag
type ActivitiesTagsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ActivitiesTagsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ActivitiesTagsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ActivitiesTagsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ActivitiesTagsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityTag, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityTag, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityTag, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityTag, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ActivitiesTagsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ActivitiesTagsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivitiesTagsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ActivitiesTagsServicePaginationReq, opts ...grpc.CallOption) (*ActivitiesTagsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ActivitiesTagsServiceSearchAllReq, opts ...grpc.CallOption) (*ActivitiesTagsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ActivitiesTagsServiceFilterReq, opts ...grpc.CallOption) (*ActivitiesTagsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ActivitiesTagsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ActivitiesTagsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type activitiesTagsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivitiesTagsServiceClient(cc grpc.ClientConnInterface) ActivitiesTagsServiceClient {
	return &activitiesTagsServiceClient{cc}
}

func (c *activitiesTagsServiceClient) Create(ctx context.Context, in *ActivitiesTagsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) Draft(ctx context.Context, in *ActivitiesTagsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) DraftUpdate(ctx context.Context, in *ActivitiesTagsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) RevisionUpdate(ctx context.Context, in *ActivitiesTagsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityTag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityTag)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityTag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityTag)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityTag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityTag)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityTag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityTag)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ActivitiesTagsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesTagsList)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ActivitiesTagsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesTagsList)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivitiesTagsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesTagsList)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) ViewWithPagination(ctx context.Context, in *ActivitiesTagsServicePaginationReq, opts ...grpc.CallOption) (*ActivitiesTagsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesTagsServicePaginationResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) SearchAll(ctx context.Context, in *ActivitiesTagsServiceSearchAllReq, opts ...grpc.CallOption) (*ActivitiesTagsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesTagsList)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) Filter(ctx context.Context, in *ActivitiesTagsServiceFilterReq, opts ...grpc.CallOption) (*ActivitiesTagsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesTagsList)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) Count(ctx context.Context, in *ActivitiesTagsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) DownloadAsCSV(ctx context.Context, in *ActivitiesTagsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesTagsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, ActivitiesTagsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivitiesTagsService
