// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: salaries.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SalariesService_Create_FullMethodName                                 = "/Scailo.SalariesService/Create"
	SalariesService_Draft_FullMethodName                                  = "/Scailo.SalariesService/Draft"
	SalariesService_DraftUpdate_FullMethodName                            = "/Scailo.SalariesService/DraftUpdate"
	SalariesService_SendForVerification_FullMethodName                    = "/Scailo.SalariesService/SendForVerification"
	SalariesService_Verify_FullMethodName                                 = "/Scailo.SalariesService/Verify"
	SalariesService_Approve_FullMethodName                                = "/Scailo.SalariesService/Approve"
	SalariesService_SendForRevision_FullMethodName                        = "/Scailo.SalariesService/SendForRevision"
	SalariesService_RevisionUpdate_FullMethodName                         = "/Scailo.SalariesService/RevisionUpdate"
	SalariesService_Halt_FullMethodName                                   = "/Scailo.SalariesService/Halt"
	SalariesService_Discard_FullMethodName                                = "/Scailo.SalariesService/Discard"
	SalariesService_Restore_FullMethodName                                = "/Scailo.SalariesService/Restore"
	SalariesService_Complete_FullMethodName                               = "/Scailo.SalariesService/Complete"
	SalariesService_Repeat_FullMethodName                                 = "/Scailo.SalariesService/Repeat"
	SalariesService_Reopen_FullMethodName                                 = "/Scailo.SalariesService/Reopen"
	SalariesService_CommentAdd_FullMethodName                             = "/Scailo.SalariesService/CommentAdd"
	SalariesService_SendEmail_FullMethodName                              = "/Scailo.SalariesService/SendEmail"
	SalariesService_Autofill_FullMethodName                               = "/Scailo.SalariesService/Autofill"
	SalariesService_AddSalaryAdditionItem_FullMethodName                  = "/Scailo.SalariesService/AddSalaryAdditionItem"
	SalariesService_ModifySalaryAdditionItem_FullMethodName               = "/Scailo.SalariesService/ModifySalaryAdditionItem"
	SalariesService_ApproveSalaryAdditionItem_FullMethodName              = "/Scailo.SalariesService/ApproveSalaryAdditionItem"
	SalariesService_DeleteSalaryAdditionItem_FullMethodName               = "/Scailo.SalariesService/DeleteSalaryAdditionItem"
	SalariesService_ReorderSalaryAdditionItems_FullMethodName             = "/Scailo.SalariesService/ReorderSalaryAdditionItems"
	SalariesService_ViewSalaryAdditionItemByID_FullMethodName             = "/Scailo.SalariesService/ViewSalaryAdditionItemByID"
	SalariesService_ViewApprovedSalaryAdditionItems_FullMethodName        = "/Scailo.SalariesService/ViewApprovedSalaryAdditionItems"
	SalariesService_ViewUnapprovedSalaryAdditionItems_FullMethodName      = "/Scailo.SalariesService/ViewUnapprovedSalaryAdditionItems"
	SalariesService_ViewSalaryAdditionItemHistory_FullMethodName          = "/Scailo.SalariesService/ViewSalaryAdditionItemHistory"
	SalariesService_ViewProspectiveSalaryAdditionItem_FullMethodName      = "/Scailo.SalariesService/ViewProspectiveSalaryAdditionItem"
	SalariesService_AddSalaryDeductionItem_FullMethodName                 = "/Scailo.SalariesService/AddSalaryDeductionItem"
	SalariesService_ModifySalaryDeductionItem_FullMethodName              = "/Scailo.SalariesService/ModifySalaryDeductionItem"
	SalariesService_ApproveSalaryDeductionItem_FullMethodName             = "/Scailo.SalariesService/ApproveSalaryDeductionItem"
	SalariesService_DeleteSalaryDeductionItem_FullMethodName              = "/Scailo.SalariesService/DeleteSalaryDeductionItem"
	SalariesService_ReorderSalaryDeductionItems_FullMethodName            = "/Scailo.SalariesService/ReorderSalaryDeductionItems"
	SalariesService_ViewSalaryDeductionItemByID_FullMethodName            = "/Scailo.SalariesService/ViewSalaryDeductionItemByID"
	SalariesService_ViewApprovedSalaryDeductionItems_FullMethodName       = "/Scailo.SalariesService/ViewApprovedSalaryDeductionItems"
	SalariesService_ViewUnapprovedSalaryDeductionItems_FullMethodName     = "/Scailo.SalariesService/ViewUnapprovedSalaryDeductionItems"
	SalariesService_ViewSalaryDeductionItemHistory_FullMethodName         = "/Scailo.SalariesService/ViewSalaryDeductionItemHistory"
	SalariesService_ViewProspectiveSalaryDeductionItem_FullMethodName     = "/Scailo.SalariesService/ViewProspectiveSalaryDeductionItem"
	SalariesService_AddSalaryReimbursementItem_FullMethodName             = "/Scailo.SalariesService/AddSalaryReimbursementItem"
	SalariesService_ModifySalaryReimbursementItem_FullMethodName          = "/Scailo.SalariesService/ModifySalaryReimbursementItem"
	SalariesService_ApproveSalaryReimbursementItem_FullMethodName         = "/Scailo.SalariesService/ApproveSalaryReimbursementItem"
	SalariesService_DeleteSalaryReimbursementItem_FullMethodName          = "/Scailo.SalariesService/DeleteSalaryReimbursementItem"
	SalariesService_ReorderSalaryReimbursementItems_FullMethodName        = "/Scailo.SalariesService/ReorderSalaryReimbursementItems"
	SalariesService_ViewSalaryReimbursementItemByID_FullMethodName        = "/Scailo.SalariesService/ViewSalaryReimbursementItemByID"
	SalariesService_ViewApprovedSalaryReimbursementItems_FullMethodName   = "/Scailo.SalariesService/ViewApprovedSalaryReimbursementItems"
	SalariesService_ViewUnapprovedSalaryReimbursementItems_FullMethodName = "/Scailo.SalariesService/ViewUnapprovedSalaryReimbursementItems"
	SalariesService_ViewSalaryReimbursementItemHistory_FullMethodName     = "/Scailo.SalariesService/ViewSalaryReimbursementItemHistory"
	SalariesService_ViewProspectiveSalaryReimbursementItem_FullMethodName = "/Scailo.SalariesService/ViewProspectiveSalaryReimbursementItem"
	SalariesService_ViewByID_FullMethodName                               = "/Scailo.SalariesService/ViewByID"
	SalariesService_ViewByUUID_FullMethodName                             = "/Scailo.SalariesService/ViewByUUID"
	SalariesService_ViewEssentialByID_FullMethodName                      = "/Scailo.SalariesService/ViewEssentialByID"
	SalariesService_ViewEssentialByUUID_FullMethodName                    = "/Scailo.SalariesService/ViewEssentialByUUID"
	SalariesService_ViewFromIDs_FullMethodName                            = "/Scailo.SalariesService/ViewFromIDs"
	SalariesService_ViewAll_FullMethodName                                = "/Scailo.SalariesService/ViewAll"
	SalariesService_ViewAllForEntityUUID_FullMethodName                   = "/Scailo.SalariesService/ViewAllForEntityUUID"
	SalariesService_ViewWithPagination_FullMethodName                     = "/Scailo.SalariesService/ViewWithPagination"
	SalariesService_SearchAll_FullMethodName                              = "/Scailo.SalariesService/SearchAll"
	SalariesService_Filter_FullMethodName                                 = "/Scailo.SalariesService/Filter"
	SalariesService_CountInStatus_FullMethodName                          = "/Scailo.SalariesService/CountInStatus"
	SalariesService_Count_FullMethodName                                  = "/Scailo.SalariesService/Count"
	SalariesService_DownloadAsCSV_FullMethodName                          = "/Scailo.SalariesService/DownloadAsCSV"
)

// SalariesServiceClient is the client API for SalariesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each salary
type SalariesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *SalariesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *SalariesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *SalariesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *SalariesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the salary
	Autofill(ctx context.Context, in *SalariesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an addition item to a salary
	AddSalaryAdditionItem(ctx context.Context, in *SalariesServiceAdditionItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an addition item in a salary
	ModifySalaryAdditionItem(ctx context.Context, in *SalariesServiceAdditionItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an addition item in a salary
	ApproveSalaryAdditionItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an addition item in a salary
	DeleteSalaryAdditionItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder addition items in a salary
	ReorderSalaryAdditionItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Salary Addition Item by ID
	ViewSalaryAdditionItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalaryAdditionItem, error)
	// View approved salary addition items for given salary ID
	ViewApprovedSalaryAdditionItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesAdditionItemsList, error)
	// View unapproved salary addition items for given salary ID
	ViewUnapprovedSalaryAdditionItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesAdditionItemsList, error)
	// View the history of the salary addition item
	ViewSalaryAdditionItemHistory(ctx context.Context, in *SalaryAdditionItemHistoryRequest, opts ...grpc.CallOption) (*SalariesAdditionItemsList, error)
	// View prospective addition item info
	ViewProspectiveSalaryAdditionItem(ctx context.Context, in *SalaryAdditionItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalariesServiceAdditionItemCreateRequest, error)
	// Add an deduction item to a salary
	AddSalaryDeductionItem(ctx context.Context, in *SalariesServiceDeductionItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an deduction item in a salary
	ModifySalaryDeductionItem(ctx context.Context, in *SalariesServiceDeductionItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an deduction item in a salary
	ApproveSalaryDeductionItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an deduction item in a salary
	DeleteSalaryDeductionItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder deduction items in a salary
	ReorderSalaryDeductionItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Salary Deduction Item by ID
	ViewSalaryDeductionItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalaryDeductionItem, error)
	// View approved salary deduction items for given salary ID
	ViewApprovedSalaryDeductionItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesDeductionItemsList, error)
	// View unapproved salary deduction items for given salary ID
	ViewUnapprovedSalaryDeductionItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesDeductionItemsList, error)
	// View the history of the salary deduction item
	ViewSalaryDeductionItemHistory(ctx context.Context, in *SalaryDeductionItemHistoryRequest, opts ...grpc.CallOption) (*SalariesDeductionItemsList, error)
	// View prospective deduction item info
	ViewProspectiveSalaryDeductionItem(ctx context.Context, in *SalaryDeductionItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalariesServiceDeductionItemCreateRequest, error)
	// Add an reimbursement item to a salary
	AddSalaryReimbursementItem(ctx context.Context, in *SalariesServiceReimbursementItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an reimbursement item in a salary
	ModifySalaryReimbursementItem(ctx context.Context, in *SalariesServiceReimbursementItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an reimbursement item in a salary
	ApproveSalaryReimbursementItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an reimbursement item in a salary
	DeleteSalaryReimbursementItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder reimbursement items in a salary
	ReorderSalaryReimbursementItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Salary Reimbursement Item by ID
	ViewSalaryReimbursementItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalaryReimbursementItem, error)
	// View approved salary reimbursement items for given salary ID
	ViewApprovedSalaryReimbursementItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesReimbursementItemsList, error)
	// View unapproved salary reimbursement items for given salary ID
	ViewUnapprovedSalaryReimbursementItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesReimbursementItemsList, error)
	// View the history of the salary reimbursement item
	ViewSalaryReimbursementItemHistory(ctx context.Context, in *SalaryReimbursementItemHistoryRequest, opts ...grpc.CallOption) (*SalariesReimbursementItemsList, error)
	// View prospective reimbursement item info
	ViewProspectiveSalaryReimbursementItem(ctx context.Context, in *SalaryReimbursementItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalariesServiceReimbursementItemCreateRequest, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Salary, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Salary, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Salary, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Salary, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalariesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalariesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalariesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *SalariesServicePaginationReq, opts ...grpc.CallOption) (*SalariesServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *SalariesServiceSearchAllReq, opts ...grpc.CallOption) (*SalariesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *SalariesServiceFilterReq, opts ...grpc.CallOption) (*SalariesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *SalariesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *SalariesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type salariesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalariesServiceClient(cc grpc.ClientConnInterface) SalariesServiceClient {
	return &salariesServiceClient{cc}
}

func (c *salariesServiceClient) Create(ctx context.Context, in *SalariesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Draft(ctx context.Context, in *SalariesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) DraftUpdate(ctx context.Context, in *SalariesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) RevisionUpdate(ctx context.Context, in *SalariesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Autofill(ctx context.Context, in *SalariesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) AddSalaryAdditionItem(ctx context.Context, in *SalariesServiceAdditionItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_AddSalaryAdditionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ModifySalaryAdditionItem(ctx context.Context, in *SalariesServiceAdditionItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_ModifySalaryAdditionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ApproveSalaryAdditionItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_ApproveSalaryAdditionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) DeleteSalaryAdditionItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_DeleteSalaryAdditionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ReorderSalaryAdditionItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_ReorderSalaryAdditionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewSalaryAdditionItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalaryAdditionItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalaryAdditionItem)
	err := c.cc.Invoke(ctx, SalariesService_ViewSalaryAdditionItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewApprovedSalaryAdditionItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesAdditionItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesAdditionItemsList)
	err := c.cc.Invoke(ctx, SalariesService_ViewApprovedSalaryAdditionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewUnapprovedSalaryAdditionItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesAdditionItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesAdditionItemsList)
	err := c.cc.Invoke(ctx, SalariesService_ViewUnapprovedSalaryAdditionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewSalaryAdditionItemHistory(ctx context.Context, in *SalaryAdditionItemHistoryRequest, opts ...grpc.CallOption) (*SalariesAdditionItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesAdditionItemsList)
	err := c.cc.Invoke(ctx, SalariesService_ViewSalaryAdditionItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewProspectiveSalaryAdditionItem(ctx context.Context, in *SalaryAdditionItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalariesServiceAdditionItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesServiceAdditionItemCreateRequest)
	err := c.cc.Invoke(ctx, SalariesService_ViewProspectiveSalaryAdditionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) AddSalaryDeductionItem(ctx context.Context, in *SalariesServiceDeductionItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_AddSalaryDeductionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ModifySalaryDeductionItem(ctx context.Context, in *SalariesServiceDeductionItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_ModifySalaryDeductionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ApproveSalaryDeductionItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_ApproveSalaryDeductionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) DeleteSalaryDeductionItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_DeleteSalaryDeductionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ReorderSalaryDeductionItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_ReorderSalaryDeductionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewSalaryDeductionItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalaryDeductionItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalaryDeductionItem)
	err := c.cc.Invoke(ctx, SalariesService_ViewSalaryDeductionItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewApprovedSalaryDeductionItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesDeductionItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesDeductionItemsList)
	err := c.cc.Invoke(ctx, SalariesService_ViewApprovedSalaryDeductionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewUnapprovedSalaryDeductionItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesDeductionItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesDeductionItemsList)
	err := c.cc.Invoke(ctx, SalariesService_ViewUnapprovedSalaryDeductionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewSalaryDeductionItemHistory(ctx context.Context, in *SalaryDeductionItemHistoryRequest, opts ...grpc.CallOption) (*SalariesDeductionItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesDeductionItemsList)
	err := c.cc.Invoke(ctx, SalariesService_ViewSalaryDeductionItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewProspectiveSalaryDeductionItem(ctx context.Context, in *SalaryDeductionItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalariesServiceDeductionItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesServiceDeductionItemCreateRequest)
	err := c.cc.Invoke(ctx, SalariesService_ViewProspectiveSalaryDeductionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) AddSalaryReimbursementItem(ctx context.Context, in *SalariesServiceReimbursementItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_AddSalaryReimbursementItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ModifySalaryReimbursementItem(ctx context.Context, in *SalariesServiceReimbursementItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_ModifySalaryReimbursementItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ApproveSalaryReimbursementItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_ApproveSalaryReimbursementItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) DeleteSalaryReimbursementItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_DeleteSalaryReimbursementItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ReorderSalaryReimbursementItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalariesService_ReorderSalaryReimbursementItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewSalaryReimbursementItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalaryReimbursementItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalaryReimbursementItem)
	err := c.cc.Invoke(ctx, SalariesService_ViewSalaryReimbursementItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewApprovedSalaryReimbursementItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesReimbursementItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesReimbursementItemsList)
	err := c.cc.Invoke(ctx, SalariesService_ViewApprovedSalaryReimbursementItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewUnapprovedSalaryReimbursementItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalariesReimbursementItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesReimbursementItemsList)
	err := c.cc.Invoke(ctx, SalariesService_ViewUnapprovedSalaryReimbursementItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewSalaryReimbursementItemHistory(ctx context.Context, in *SalaryReimbursementItemHistoryRequest, opts ...grpc.CallOption) (*SalariesReimbursementItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesReimbursementItemsList)
	err := c.cc.Invoke(ctx, SalariesService_ViewSalaryReimbursementItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewProspectiveSalaryReimbursementItem(ctx context.Context, in *SalaryReimbursementItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalariesServiceReimbursementItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesServiceReimbursementItemCreateRequest)
	err := c.cc.Invoke(ctx, SalariesService_ViewProspectiveSalaryReimbursementItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Salary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Salary)
	err := c.cc.Invoke(ctx, SalariesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Salary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Salary)
	err := c.cc.Invoke(ctx, SalariesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Salary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Salary)
	err := c.cc.Invoke(ctx, SalariesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Salary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Salary)
	err := c.cc.Invoke(ctx, SalariesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalariesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesList)
	err := c.cc.Invoke(ctx, SalariesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalariesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesList)
	err := c.cc.Invoke(ctx, SalariesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalariesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesList)
	err := c.cc.Invoke(ctx, SalariesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) ViewWithPagination(ctx context.Context, in *SalariesServicePaginationReq, opts ...grpc.CallOption) (*SalariesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesServicePaginationResponse)
	err := c.cc.Invoke(ctx, SalariesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) SearchAll(ctx context.Context, in *SalariesServiceSearchAllReq, opts ...grpc.CallOption) (*SalariesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesList)
	err := c.cc.Invoke(ctx, SalariesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Filter(ctx context.Context, in *SalariesServiceFilterReq, opts ...grpc.CallOption) (*SalariesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalariesList)
	err := c.cc.Invoke(ctx, SalariesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalariesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) Count(ctx context.Context, in *SalariesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalariesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salariesServiceClient) DownloadAsCSV(ctx context.Context, in *SalariesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalariesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalariesService
