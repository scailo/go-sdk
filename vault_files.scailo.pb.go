// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: vault_files.scailo.proto

package sdk

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the parameters necessary to initiate a vault file
type VaultFileInitiateFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,2,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The name of the file
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The file type
	Type string `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// The UUID of the folder that the file is present in
	FolderUuid    string `protobuf:"bytes,13,opt,name=folder_uuid,json=folderUuid,proto3" json:"folder_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultFileInitiateFileRequest) Reset() {
	*x = VaultFileInitiateFileRequest{}
	mi := &file_vault_files_scailo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFileInitiateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFileInitiateFileRequest) ProtoMessage() {}

func (x *VaultFileInitiateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFileInitiateFileRequest.ProtoReflect.Descriptor instead.
func (*VaultFileInitiateFileRequest) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{0}
}

func (x *VaultFileInitiateFileRequest) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *VaultFileInitiateFileRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *VaultFileInitiateFileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultFileInitiateFileRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VaultFileInitiateFileRequest) GetFolderUuid() string {
	if x != nil {
		return x.FolderUuid
	}
	return ""
}

// Describes the payload in the response to a file initiate request
type VaultFileInitiateFileResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID of the file
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The max size of the chunk (in bytes) for uploading a file
	ChunkSize     uint64 `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultFileInitiateFileResponse) Reset() {
	*x = VaultFileInitiateFileResponse{}
	mi := &file_vault_files_scailo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFileInitiateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFileInitiateFileResponse) ProtoMessage() {}

func (x *VaultFileInitiateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFileInitiateFileResponse.ProtoReflect.Descriptor instead.
func (*VaultFileInitiateFileResponse) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{1}
}

func (x *VaultFileInitiateFileResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VaultFileInitiateFileResponse) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

// Describes the parameters necessary to rename a vault file
type VaultFileRenameFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID of the file
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The new name of the file
	Name          string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultFileRenameFileRequest) Reset() {
	*x = VaultFileRenameFileRequest{}
	mi := &file_vault_files_scailo_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFileRenameFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFileRenameFileRequest) ProtoMessage() {}

func (x *VaultFileRenameFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFileRenameFileRequest.ProtoReflect.Descriptor instead.
func (*VaultFileRenameFileRequest) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{2}
}

func (x *VaultFileRenameFileRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VaultFileRenameFileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Describes the parameters necessary to move a vault file
type VaultFileMoveFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID of the file
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The UUID of the destination folder that the file needs to be moved into
	DestinationFolderUuid string `protobuf:"bytes,13,opt,name=destination_folder_uuid,json=destinationFolderUuid,proto3" json:"destination_folder_uuid,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *VaultFileMoveFileRequest) Reset() {
	*x = VaultFileMoveFileRequest{}
	mi := &file_vault_files_scailo_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFileMoveFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFileMoveFileRequest) ProtoMessage() {}

func (x *VaultFileMoveFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFileMoveFileRequest.ProtoReflect.Descriptor instead.
func (*VaultFileMoveFileRequest) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{3}
}

func (x *VaultFileMoveFileRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VaultFileMoveFileRequest) GetDestinationFolderUuid() string {
	if x != nil {
		return x.DestinationFolderUuid
	}
	return ""
}

// Describes the parameters of a vault file
type VaultFile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores the metadata of this user
	Metadata *EmployeeMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The timestamp of when the file upload was completed
	CompletedAt uint64 `protobuf:"varint,6,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// The name of the file
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The file type
	Type string `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// Stores if the file has been made persistent
	IsPersistent bool `protobuf:"varint,12,opt,name=is_persistent,json=isPersistent,proto3" json:"is_persistent,omitempty"`
	// The ID of the folder that the file lives in
	FolderId uint64 `protobuf:"varint,13,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The path of the file
	PathTree string `protobuf:"bytes,14,opt,name=path_tree,json=pathTree,proto3" json:"path_tree,omitempty"`
	// The size of the file in bytes
	Size uint64 `protobuf:"varint,20,opt,name=size,proto3" json:"size,omitempty"`
	// The list of permissions
	Permissions []*VaultPermission `protobuf:"bytes,30,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// The UUID of the folder that the file is present in
	FolderUuid    string `protobuf:"bytes,50,opt,name=folder_uuid,json=folderUuid,proto3" json:"folder_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultFile) Reset() {
	*x = VaultFile{}
	mi := &file_vault_files_scailo_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFile) ProtoMessage() {}

func (x *VaultFile) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFile.ProtoReflect.Descriptor instead.
func (*VaultFile) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{4}
}

func (x *VaultFile) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *VaultFile) GetMetadata() *EmployeeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VaultFile) GetCompletedAt() uint64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *VaultFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VaultFile) GetIsPersistent() bool {
	if x != nil {
		return x.IsPersistent
	}
	return false
}

func (x *VaultFile) GetFolderId() uint64 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *VaultFile) GetPathTree() string {
	if x != nil {
		return x.PathTree
	}
	return ""
}

func (x *VaultFile) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VaultFile) GetPermissions() []*VaultPermission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *VaultFile) GetFolderUuid() string {
	if x != nil {
		return x.FolderUuid
	}
	return ""
}

// Describes the message consisting of the list of vault files
type VaultFilesList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of files
	List          []*VaultFile `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultFilesList) Reset() {
	*x = VaultFilesList{}
	mi := &file_vault_files_scailo_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFilesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFilesList) ProtoMessage() {}

func (x *VaultFilesList) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFilesList.ProtoReflect.Descriptor instead.
func (*VaultFilesList) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{5}
}

func (x *VaultFilesList) GetList() []*VaultFile {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes the parameres of a version of each file
type VaultFileVersion struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores the metadata of this user
	Metadata *EmployeeMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The timestamp of when the file version upload was completed
	CompletedAt uint64 `protobuf:"varint,6,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// Stores the ID of the file that the version belongs to
	VaultFileId uint64 `protobuf:"varint,10,opt,name=vault_file_id,json=vaultFileId,proto3" json:"vault_file_id,omitempty"`
	// The name of the file
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// The file type
	Type string `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// The size of the file version in bytes
	Size          uint64 `protobuf:"varint,20,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultFileVersion) Reset() {
	*x = VaultFileVersion{}
	mi := &file_vault_files_scailo_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFileVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFileVersion) ProtoMessage() {}

func (x *VaultFileVersion) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFileVersion.ProtoReflect.Descriptor instead.
func (*VaultFileVersion) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{6}
}

func (x *VaultFileVersion) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *VaultFileVersion) GetMetadata() *EmployeeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VaultFileVersion) GetCompletedAt() uint64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *VaultFileVersion) GetVaultFileId() uint64 {
	if x != nil {
		return x.VaultFileId
	}
	return 0
}

func (x *VaultFileVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultFileVersion) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VaultFileVersion) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Describes the message consisting of the list of vault file versions
type VaultFileVersionsList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of versions of the file
	List          []*VaultFileVersion `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultFileVersionsList) Reset() {
	*x = VaultFileVersionsList{}
	mi := &file_vault_files_scailo_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFileVersionsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFileVersionsList) ProtoMessage() {}

func (x *VaultFileVersionsList) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFileVersionsList.ProtoReflect.Descriptor instead.
func (*VaultFileVersionsList) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{7}
}

func (x *VaultFileVersionsList) GetList() []*VaultFileVersion {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes the parameters necessary to add a chunk to a file
type VaultFileAddChunkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID of the file
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Stores the sequence ID of this chunk
	SequenceId uint64 `protobuf:"varint,11,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// Stores the content of the chunk
	Chunk         []byte `protobuf:"bytes,12,opt,name=chunk,proto3" json:"chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultFileAddChunkRequest) Reset() {
	*x = VaultFileAddChunkRequest{}
	mi := &file_vault_files_scailo_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFileAddChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFileAddChunkRequest) ProtoMessage() {}

func (x *VaultFileAddChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFileAddChunkRequest.ProtoReflect.Descriptor instead.
func (*VaultFileAddChunkRequest) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{8}
}

func (x *VaultFileAddChunkRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VaultFileAddChunkRequest) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *VaultFileAddChunkRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// Describes the parameters of each chunk of a file version
type VaultFileVersionChunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores the metadata of this user
	Metadata *EmployeeMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Stores the ID of the file version to which this chunk belongs
	VaultFileVersionId uint64 `protobuf:"varint,10,opt,name=vault_file_version_id,json=vaultFileVersionId,proto3" json:"vault_file_version_id,omitempty"`
	// Stores the sequence ID of this chunk
	SequenceId uint64 `protobuf:"varint,11,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// Stores the content of the chunk
	Chunk []byte `protobuf:"bytes,12,opt,name=chunk,proto3" json:"chunk,omitempty"`
	// Stores the checksum of the chunk
	Checksum      string `protobuf:"bytes,13,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VaultFileVersionChunk) Reset() {
	*x = VaultFileVersionChunk{}
	mi := &file_vault_files_scailo_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFileVersionChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFileVersionChunk) ProtoMessage() {}

func (x *VaultFileVersionChunk) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFileVersionChunk.ProtoReflect.Descriptor instead.
func (*VaultFileVersionChunk) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{9}
}

func (x *VaultFileVersionChunk) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *VaultFileVersionChunk) GetMetadata() *EmployeeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VaultFileVersionChunk) GetVaultFileVersionId() uint64 {
	if x != nil {
		return x.VaultFileVersionId
	}
	return 0
}

func (x *VaultFileVersionChunk) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *VaultFileVersionChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *VaultFileVersionChunk) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// Stores the request to unzip a zipped file
type VaultFileUnzipRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID of the file that needs to be unzipped
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Stores if the file needs to be deleted after unzipping
	DeleteAfterUnzip bool `protobuf:"varint,2,opt,name=delete_after_unzip,json=deleteAfterUnzip,proto3" json:"delete_after_unzip,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VaultFileUnzipRequest) Reset() {
	*x = VaultFileUnzipRequest{}
	mi := &file_vault_files_scailo_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VaultFileUnzipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultFileUnzipRequest) ProtoMessage() {}

func (x *VaultFileUnzipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vault_files_scailo_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultFileUnzipRequest.ProtoReflect.Descriptor instead.
func (*VaultFileUnzipRequest) Descriptor() ([]byte, []int) {
	return file_vault_files_scailo_proto_rawDescGZIP(), []int{10}
}

func (x *VaultFileUnzipRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VaultFileUnzipRequest) GetDeleteAfterUnzip() bool {
	if x != nil {
		return x.DeleteAfterUnzip
	}
	return false
}

var File_vault_files_scailo_proto protoreflect.FileDescriptor

const file_vault_files_scailo_proto_rawDesc = "" +
	"\n" +
	"\x18vault_files.scailo.proto\x12\x06Scailo\x1a\x11base.scailo.proto\x1a\x1bbuf/validate/validate.proto\x1a\x1avault_commons.scailo.proto\"\xc7\x01\n" +
	"\x1cVaultFileInitiateFileRequest\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x12!\n" +
	"\fuser_comment\x18\x02 \x01(\tR\vuserComment\x12\x1b\n" +
	"\x04name\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12\x1b\n" +
	"\x04type\x18\v \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04type\x12)\n" +
	"\vfolder_uuid\x18\r \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\n" +
	"folderUuid\"\\\n" +
	"\x1dVaultFileInitiateFileResponse\x12\x1c\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x04uuid\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x02 \x01(\x04R\tchunkSize\"W\n" +
	"\x1aVaultFileRenameFileRequest\x12\x1c\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x04uuid\x12\x1b\n" +
	"\x04name\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\"z\n" +
	"\x18VaultFileMoveFileRequest\x12\x1c\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x04uuid\x12@\n" +
	"\x17destination_folder_uuid\x18\r \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x15destinationFolderUuid\"\xfc\x02\n" +
	"\tVaultFile\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x124\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.Scailo.EmployeeMetadataR\bmetadata\x12!\n" +
	"\fcompleted_at\x18\x06 \x01(\x04R\vcompletedAt\x12\x12\n" +
	"\x04name\x18\n" +
	" \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\v \x01(\tR\x04type\x12#\n" +
	"\ris_persistent\x18\f \x01(\bR\fisPersistent\x12\x1b\n" +
	"\tfolder_id\x18\r \x01(\x04R\bfolderId\x12\x1b\n" +
	"\tpath_tree\x18\x0e \x01(\tR\bpathTree\x12\x12\n" +
	"\x04size\x18\x14 \x01(\x04R\x04size\x129\n" +
	"\vpermissions\x18\x1e \x03(\v2\x17.Scailo.VaultPermissionR\vpermissions\x12\x1f\n" +
	"\vfolder_uuid\x182 \x01(\tR\n" +
	"folderUuid\"7\n" +
	"\x0eVaultFilesList\x12%\n" +
	"\x04list\x18\x01 \x03(\v2\x11.Scailo.VaultFileR\x04list\"\xec\x01\n" +
	"\x10VaultFileVersion\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x124\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.Scailo.EmployeeMetadataR\bmetadata\x12!\n" +
	"\fcompleted_at\x18\x06 \x01(\x04R\vcompletedAt\x12\"\n" +
	"\rvault_file_id\x18\n" +
	" \x01(\x04R\vvaultFileId\x12\x12\n" +
	"\x04name\x18\v \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\f \x01(\tR\x04type\x12\x12\n" +
	"\x04size\x18\x14 \x01(\x04R\x04size\"E\n" +
	"\x15VaultFileVersionsList\x12,\n" +
	"\x04list\x18\x01 \x03(\v2\x18.Scailo.VaultFileVersionR\x04list\"\x81\x01\n" +
	"\x18VaultFileAddChunkRequest\x12\x1c\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x04uuid\x12(\n" +
	"\vsequence_id\x18\v \x01(\x04B\a\xbaH\x042\x02 \x00R\n" +
	"sequenceId\x12\x1d\n" +
	"\x05chunk\x18\f \x01(\fB\a\xbaH\x04z\x02\x10\x01R\x05chunk\"\xf4\x01\n" +
	"\x15VaultFileVersionChunk\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x124\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.Scailo.EmployeeMetadataR\bmetadata\x121\n" +
	"\x15vault_file_version_id\x18\n" +
	" \x01(\x04R\x12vaultFileVersionId\x12\x1f\n" +
	"\vsequence_id\x18\v \x01(\x04R\n" +
	"sequenceId\x12\x14\n" +
	"\x05chunk\x18\f \x01(\fR\x05chunk\x12\x1a\n" +
	"\bchecksum\x18\r \x01(\tR\bchecksum\"c\n" +
	"\x15VaultFileUnzipRequest\x12\x1c\n" +
	"\x04uuid\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x04uuid\x12,\n" +
	"\x12delete_after_unzip\x18\x02 \x01(\bR\x10deleteAfterUnzipBg\n" +
	"\n" +
	"com.ScailoB\x15VaultFilesScailoProtoP\x01Z\n" +
	"Scailo/sdk\xa2\x02\x03SXX\xaa\x02\x06Scailo\xca\x02\x06Scailo\xe2\x02\x12Scailo\\GPBMetadata\xea\x02\x06Scailob\x06proto3"

var (
	file_vault_files_scailo_proto_rawDescOnce sync.Once
	file_vault_files_scailo_proto_rawDescData []byte
)

func file_vault_files_scailo_proto_rawDescGZIP() []byte {
	file_vault_files_scailo_proto_rawDescOnce.Do(func() {
		file_vault_files_scailo_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vault_files_scailo_proto_rawDesc), len(file_vault_files_scailo_proto_rawDesc)))
	})
	return file_vault_files_scailo_proto_rawDescData
}

var file_vault_files_scailo_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_vault_files_scailo_proto_goTypes = []any{
	(*VaultFileInitiateFileRequest)(nil),  // 0: Scailo.VaultFileInitiateFileRequest
	(*VaultFileInitiateFileResponse)(nil), // 1: Scailo.VaultFileInitiateFileResponse
	(*VaultFileRenameFileRequest)(nil),    // 2: Scailo.VaultFileRenameFileRequest
	(*VaultFileMoveFileRequest)(nil),      // 3: Scailo.VaultFileMoveFileRequest
	(*VaultFile)(nil),                     // 4: Scailo.VaultFile
	(*VaultFilesList)(nil),                // 5: Scailo.VaultFilesList
	(*VaultFileVersion)(nil),              // 6: Scailo.VaultFileVersion
	(*VaultFileVersionsList)(nil),         // 7: Scailo.VaultFileVersionsList
	(*VaultFileAddChunkRequest)(nil),      // 8: Scailo.VaultFileAddChunkRequest
	(*VaultFileVersionChunk)(nil),         // 9: Scailo.VaultFileVersionChunk
	(*VaultFileUnzipRequest)(nil),         // 10: Scailo.VaultFileUnzipRequest
	(*EmployeeMetadata)(nil),              // 11: Scailo.EmployeeMetadata
	(*VaultPermission)(nil),               // 12: Scailo.VaultPermission
}
var file_vault_files_scailo_proto_depIdxs = []int32{
	11, // 0: Scailo.VaultFile.metadata:type_name -> Scailo.EmployeeMetadata
	12, // 1: Scailo.VaultFile.permissions:type_name -> Scailo.VaultPermission
	4,  // 2: Scailo.VaultFilesList.list:type_name -> Scailo.VaultFile
	11, // 3: Scailo.VaultFileVersion.metadata:type_name -> Scailo.EmployeeMetadata
	6,  // 4: Scailo.VaultFileVersionsList.list:type_name -> Scailo.VaultFileVersion
	11, // 5: Scailo.VaultFileVersionChunk.metadata:type_name -> Scailo.EmployeeMetadata
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_vault_files_scailo_proto_init() }
func file_vault_files_scailo_proto_init() {
	if File_vault_files_scailo_proto != nil {
		return
	}
	file_base_scailo_proto_init()
	file_vault_commons_scailo_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vault_files_scailo_proto_rawDesc), len(file_vault_files_scailo_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vault_files_scailo_proto_goTypes,
		DependencyIndexes: file_vault_files_scailo_proto_depIdxs,
		MessageInfos:      file_vault_files_scailo_proto_msgTypes,
	}.Build()
	File_vault_files_scailo_proto = out.File
	file_vault_files_scailo_proto_goTypes = nil
	file_vault_files_scailo_proto_depIdxs = nil
}
