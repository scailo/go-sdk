// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: vendor_invoices.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VendorInvoicesService_Create_FullMethodName                                    = "/Scailo.VendorInvoicesService/Create"
	VendorInvoicesService_Draft_FullMethodName                                     = "/Scailo.VendorInvoicesService/Draft"
	VendorInvoicesService_DraftUpdate_FullMethodName                               = "/Scailo.VendorInvoicesService/DraftUpdate"
	VendorInvoicesService_SendForVerification_FullMethodName                       = "/Scailo.VendorInvoicesService/SendForVerification"
	VendorInvoicesService_Verify_FullMethodName                                    = "/Scailo.VendorInvoicesService/Verify"
	VendorInvoicesService_Approve_FullMethodName                                   = "/Scailo.VendorInvoicesService/Approve"
	VendorInvoicesService_SendForRevision_FullMethodName                           = "/Scailo.VendorInvoicesService/SendForRevision"
	VendorInvoicesService_RevisionUpdate_FullMethodName                            = "/Scailo.VendorInvoicesService/RevisionUpdate"
	VendorInvoicesService_Halt_FullMethodName                                      = "/Scailo.VendorInvoicesService/Halt"
	VendorInvoicesService_Discard_FullMethodName                                   = "/Scailo.VendorInvoicesService/Discard"
	VendorInvoicesService_Restore_FullMethodName                                   = "/Scailo.VendorInvoicesService/Restore"
	VendorInvoicesService_Complete_FullMethodName                                  = "/Scailo.VendorInvoicesService/Complete"
	VendorInvoicesService_Repeat_FullMethodName                                    = "/Scailo.VendorInvoicesService/Repeat"
	VendorInvoicesService_Reopen_FullMethodName                                    = "/Scailo.VendorInvoicesService/Reopen"
	VendorInvoicesService_CommentAdd_FullMethodName                                = "/Scailo.VendorInvoicesService/CommentAdd"
	VendorInvoicesService_SendEmail_FullMethodName                                 = "/Scailo.VendorInvoicesService/SendEmail"
	VendorInvoicesService_Autofill_FullMethodName                                  = "/Scailo.VendorInvoicesService/Autofill"
	VendorInvoicesService_IsAdmittedToStore_FullMethodName                         = "/Scailo.VendorInvoicesService/IsAdmittedToStore"
	VendorInvoicesService_CreateMagicLink_FullMethodName                           = "/Scailo.VendorInvoicesService/CreateMagicLink"
	VendorInvoicesService_AddMultipleVendorInvoiceItems_FullMethodName             = "/Scailo.VendorInvoicesService/AddMultipleVendorInvoiceItems"
	VendorInvoicesService_AddVendorInvoiceItem_FullMethodName                      = "/Scailo.VendorInvoicesService/AddVendorInvoiceItem"
	VendorInvoicesService_ModifyVendorInvoiceItem_FullMethodName                   = "/Scailo.VendorInvoicesService/ModifyVendorInvoiceItem"
	VendorInvoicesService_ApproveVendorInvoiceItem_FullMethodName                  = "/Scailo.VendorInvoicesService/ApproveVendorInvoiceItem"
	VendorInvoicesService_DeleteVendorInvoiceItem_FullMethodName                   = "/Scailo.VendorInvoicesService/DeleteVendorInvoiceItem"
	VendorInvoicesService_ReorderVendorInvoiceItems_FullMethodName                 = "/Scailo.VendorInvoicesService/ReorderVendorInvoiceItems"
	VendorInvoicesService_ViewVendorInvoiceItemByID_FullMethodName                 = "/Scailo.VendorInvoicesService/ViewVendorInvoiceItemByID"
	VendorInvoicesService_ViewApprovedVendorInvoiceItems_FullMethodName            = "/Scailo.VendorInvoicesService/ViewApprovedVendorInvoiceItems"
	VendorInvoicesService_ViewUnapprovedVendorInvoiceItems_FullMethodName          = "/Scailo.VendorInvoicesService/ViewUnapprovedVendorInvoiceItems"
	VendorInvoicesService_ViewVendorInvoiceItemHistory_FullMethodName              = "/Scailo.VendorInvoicesService/ViewVendorInvoiceItemHistory"
	VendorInvoicesService_ViewPaginatedApprovedVendorInvoiceItems_FullMethodName   = "/Scailo.VendorInvoicesService/ViewPaginatedApprovedVendorInvoiceItems"
	VendorInvoicesService_ViewPaginatedUnapprovedVendorInvoiceItems_FullMethodName = "/Scailo.VendorInvoicesService/ViewPaginatedUnapprovedVendorInvoiceItems"
	VendorInvoicesService_SearchItemsWithPagination_FullMethodName                 = "/Scailo.VendorInvoicesService/SearchItemsWithPagination"
	VendorInvoicesService_DownloadItemsAsCSV_FullMethodName                        = "/Scailo.VendorInvoicesService/DownloadItemsAsCSV"
	VendorInvoicesService_DownloadItemsTemplateAsCSV_FullMethodName                = "/Scailo.VendorInvoicesService/DownloadItemsTemplateAsCSV"
	VendorInvoicesService_UploadVendorInvoiceItems_FullMethodName                  = "/Scailo.VendorInvoicesService/UploadVendorInvoiceItems"
	VendorInvoicesService_AddVendorInvoiceReference_FullMethodName                 = "/Scailo.VendorInvoicesService/AddVendorInvoiceReference"
	VendorInvoicesService_ApproveVendorInvoiceReference_FullMethodName             = "/Scailo.VendorInvoicesService/ApproveVendorInvoiceReference"
	VendorInvoicesService_DeleteVendorInvoiceReference_FullMethodName              = "/Scailo.VendorInvoicesService/DeleteVendorInvoiceReference"
	VendorInvoicesService_ViewVendorInvoiceReferenceByID_FullMethodName            = "/Scailo.VendorInvoicesService/ViewVendorInvoiceReferenceByID"
	VendorInvoicesService_ViewVendorInvoiceReferences_FullMethodName               = "/Scailo.VendorInvoicesService/ViewVendorInvoiceReferences"
	VendorInvoicesService_ViewByID_FullMethodName                                  = "/Scailo.VendorInvoicesService/ViewByID"
	VendorInvoicesService_ViewByUUID_FullMethodName                                = "/Scailo.VendorInvoicesService/ViewByUUID"
	VendorInvoicesService_ViewByReferenceID_FullMethodName                         = "/Scailo.VendorInvoicesService/ViewByReferenceID"
	VendorInvoicesService_ViewEssentialByID_FullMethodName                         = "/Scailo.VendorInvoicesService/ViewEssentialByID"
	VendorInvoicesService_ViewEssentialByUUID_FullMethodName                       = "/Scailo.VendorInvoicesService/ViewEssentialByUUID"
	VendorInvoicesService_ViewFromIDs_FullMethodName                               = "/Scailo.VendorInvoicesService/ViewFromIDs"
	VendorInvoicesService_ViewAncillaryParametersByUUID_FullMethodName             = "/Scailo.VendorInvoicesService/ViewAncillaryParametersByUUID"
	VendorInvoicesService_ViewAll_FullMethodName                                   = "/Scailo.VendorInvoicesService/ViewAll"
	VendorInvoicesService_ViewAllForEntityUUID_FullMethodName                      = "/Scailo.VendorInvoicesService/ViewAllForEntityUUID"
	VendorInvoicesService_ViewWithPagination_FullMethodName                        = "/Scailo.VendorInvoicesService/ViewWithPagination"
	VendorInvoicesService_ViewProspectiveFamilies_FullMethodName                   = "/Scailo.VendorInvoicesService/ViewProspectiveFamilies"
	VendorInvoicesService_FilterProspectiveFamilies_FullMethodName                 = "/Scailo.VendorInvoicesService/FilterProspectiveFamilies"
	VendorInvoicesService_ViewProspectiveVendorInvoiceItem_FullMethodName          = "/Scailo.VendorInvoicesService/ViewProspectiveVendorInvoiceItem"
	VendorInvoicesService_ViewReceiptStatistics_FullMethodName                     = "/Scailo.VendorInvoicesService/ViewReceiptStatistics"
	VendorInvoicesService_ViewAddedFamilyQuantityForSource_FullMethodName          = "/Scailo.VendorInvoicesService/ViewAddedFamilyQuantityForSource"
	VendorInvoicesService_IsDownloadable_FullMethodName                            = "/Scailo.VendorInvoicesService/IsDownloadable"
	VendorInvoicesService_DownloadByUUID_FullMethodName                            = "/Scailo.VendorInvoicesService/DownloadByUUID"
	VendorInvoicesService_SearchAll_FullMethodName                                 = "/Scailo.VendorInvoicesService/SearchAll"
	VendorInvoicesService_Filter_FullMethodName                                    = "/Scailo.VendorInvoicesService/Filter"
	VendorInvoicesService_CountInStatus_FullMethodName                             = "/Scailo.VendorInvoicesService/CountInStatus"
	VendorInvoicesService_Count_FullMethodName                                     = "/Scailo.VendorInvoicesService/Count"
	VendorInvoicesService_AccruedValue_FullMethodName                              = "/Scailo.VendorInvoicesService/AccruedValue"
	VendorInvoicesService_DownloadAsCSV_FullMethodName                             = "/Scailo.VendorInvoicesService/DownloadAsCSV"
)

// VendorInvoicesServiceClient is the client API for VendorInvoicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each vendor invoice
type VendorInvoicesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *VendorInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *VendorInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *VendorInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *VendorInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the vendor invoice
	Autofill(ctx context.Context, in *VendorInvoicesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if all the material has been admitted to store
	IsAdmittedToStore(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add multiple items to a vendor invoice
	AddMultipleVendorInvoiceItems(ctx context.Context, in *VendorInvoicesServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a vendor invoice
	AddVendorInvoiceItem(ctx context.Context, in *VendorInvoicesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a vendor invoice
	ModifyVendorInvoiceItem(ctx context.Context, in *VendorInvoicesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a vendor invoice
	ApproveVendorInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a vendor invoice
	DeleteVendorInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a vendor invoice
	ReorderVendorInvoiceItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Vendor Invoice Item by ID
	ViewVendorInvoiceItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorInvoiceItem, error)
	// View approved vendor invoice items for given vendor invoice ID
	ViewApprovedVendorInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*VendorInvoiceItemsList, error)
	// View unapproved vendor invoice items for given vendor invoice ID
	ViewUnapprovedVendorInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*VendorInvoiceItemsList, error)
	// View the history of the vendor invoice item
	ViewVendorInvoiceItemHistory(ctx context.Context, in *VendorInvoiceItemHistoryRequest, opts ...grpc.CallOption) (*VendorInvoiceItemsList, error)
	// View approved vendor invoice items for given vendor invoice ID with pagination
	ViewPaginatedApprovedVendorInvoiceItems(ctx context.Context, in *VendorInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*VendorInvoicesServicePaginatedItemsResponse, error)
	// View unapproved vendor invoice items for given vendor invoice ID with pagination
	ViewPaginatedUnapprovedVendorInvoiceItems(ctx context.Context, in *VendorInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*VendorInvoicesServicePaginatedItemsResponse, error)
	// Search through vendor invoice items with pagination
	SearchItemsWithPagination(ctx context.Context, in *VendorInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*VendorInvoicesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadVendorInvoiceItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a reference
	AddVendorInvoiceReference(ctx context.Context, in *VendorInvoicesServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a reference
	ApproveVendorInvoiceReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a reference
	DeleteVendorInvoiceReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a reference for the given ID
	ViewVendorInvoiceReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorInvoiceReference, error)
	// View all references for given vendor invoice ID
	ViewVendorInvoiceReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorInvoiceReferencesList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorInvoice, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorInvoice, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*VendorInvoice, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorInvoice, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorInvoice, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*VendorInvoicesList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorInvoiceAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*VendorInvoicesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorInvoicesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *VendorInvoicesServicePaginationReq, opts ...grpc.CallOption) (*VendorInvoicesServicePaginationResponse, error)
	// View prospective families for the given vendor invoice
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective vendor invoice item info for the given family ID and vendor invoice ID
	ViewProspectiveVendorInvoiceItem(ctx context.Context, in *VendorInvoiceItemProspectiveInfoRequest, opts ...grpc.CallOption) (*VendorInvoicesServiceItemCreateRequest, error)
	// View receipt (goods receipt) statistics of the vendor invoice
	ViewReceiptStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorInvoiceReceiptStatisticsList, error)
	// View already added quantities
	ViewAddedFamilyQuantityForSource(ctx context.Context, in *VendorInvoicesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download vendor invoice with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *VendorInvoicesServiceSearchAllReq, opts ...grpc.CallOption) (*VendorInvoicesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *VendorInvoicesServiceFilterReq, opts ...grpc.CallOption) (*VendorInvoicesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *VendorInvoicesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// Returns the sum of the total value of all the records that match the given criteria
	AccruedValue(ctx context.Context, in *VendorInvoicesServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *VendorInvoicesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type vendorInvoicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorInvoicesServiceClient(cc grpc.ClientConnInterface) VendorInvoicesServiceClient {
	return &vendorInvoicesServiceClient{cc}
}

func (c *vendorInvoicesServiceClient) Create(ctx context.Context, in *VendorInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Draft(ctx context.Context, in *VendorInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) DraftUpdate(ctx context.Context, in *VendorInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) RevisionUpdate(ctx context.Context, in *VendorInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Autofill(ctx context.Context, in *VendorInvoicesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) IsAdmittedToStore(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_IsAdmittedToStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, VendorInvoicesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) AddMultipleVendorInvoiceItems(ctx context.Context, in *VendorInvoicesServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_AddMultipleVendorInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) AddVendorInvoiceItem(ctx context.Context, in *VendorInvoicesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_AddVendorInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ModifyVendorInvoiceItem(ctx context.Context, in *VendorInvoicesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ModifyVendorInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ApproveVendorInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ApproveVendorInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) DeleteVendorInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_DeleteVendorInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ReorderVendorInvoiceItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ReorderVendorInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewVendorInvoiceItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorInvoiceItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoiceItem)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewVendorInvoiceItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewApprovedVendorInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*VendorInvoiceItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoiceItemsList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewApprovedVendorInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewUnapprovedVendorInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*VendorInvoiceItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoiceItemsList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewUnapprovedVendorInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewVendorInvoiceItemHistory(ctx context.Context, in *VendorInvoiceItemHistoryRequest, opts ...grpc.CallOption) (*VendorInvoiceItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoiceItemsList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewVendorInvoiceItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewPaginatedApprovedVendorInvoiceItems(ctx context.Context, in *VendorInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*VendorInvoicesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoicesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewPaginatedApprovedVendorInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewPaginatedUnapprovedVendorInvoiceItems(ctx context.Context, in *VendorInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*VendorInvoicesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoicesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewPaginatedUnapprovedVendorInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) SearchItemsWithPagination(ctx context.Context, in *VendorInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*VendorInvoicesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoicesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, VendorInvoicesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, VendorInvoicesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) UploadVendorInvoiceItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_UploadVendorInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) AddVendorInvoiceReference(ctx context.Context, in *VendorInvoicesServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_AddVendorInvoiceReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ApproveVendorInvoiceReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ApproveVendorInvoiceReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) DeleteVendorInvoiceReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_DeleteVendorInvoiceReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewVendorInvoiceReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorInvoiceReference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoiceReference)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewVendorInvoiceReferenceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewVendorInvoiceReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorInvoiceReferencesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoiceReferencesList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewVendorInvoiceReferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoice)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoice)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*VendorInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoice)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoice)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoice)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*VendorInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoicesList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorInvoiceAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoiceAncillaryParameters)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*VendorInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoicesList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoicesList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewWithPagination(ctx context.Context, in *VendorInvoicesServicePaginationReq, opts ...grpc.CallOption) (*VendorInvoicesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoicesServicePaginationResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewProspectiveVendorInvoiceItem(ctx context.Context, in *VendorInvoiceItemProspectiveInfoRequest, opts ...grpc.CallOption) (*VendorInvoicesServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoicesServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewProspectiveVendorInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewReceiptStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorInvoiceReceiptStatisticsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoiceReceiptStatisticsList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewReceiptStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) ViewAddedFamilyQuantityForSource(ctx context.Context, in *VendorInvoicesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DualQuantitiesResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_ViewAddedFamilyQuantityForSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, VendorInvoicesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) SearchAll(ctx context.Context, in *VendorInvoicesServiceSearchAllReq, opts ...grpc.CallOption) (*VendorInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoicesList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Filter(ctx context.Context, in *VendorInvoicesServiceFilterReq, opts ...grpc.CallOption) (*VendorInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorInvoicesList)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) Count(ctx context.Context, in *VendorInvoicesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) AccruedValue(ctx context.Context, in *VendorInvoicesServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, VendorInvoicesService_AccruedValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorInvoicesServiceClient) DownloadAsCSV(ctx context.Context, in *VendorInvoicesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, VendorInvoicesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorInvoicesService
