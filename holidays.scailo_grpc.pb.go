// addHolidayShiftGroup
// modifyHolidayShiftGroup
// reorderHolidayShiftsGroups
// deleteHolidayShiftGroup
// approveHolidayShiftGroup

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: holidays.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HolidaysService_Create_FullMethodName                            = "/Scailo.HolidaysService/Create"
	HolidaysService_Draft_FullMethodName                             = "/Scailo.HolidaysService/Draft"
	HolidaysService_DraftUpdate_FullMethodName                       = "/Scailo.HolidaysService/DraftUpdate"
	HolidaysService_SendForVerification_FullMethodName               = "/Scailo.HolidaysService/SendForVerification"
	HolidaysService_Verify_FullMethodName                            = "/Scailo.HolidaysService/Verify"
	HolidaysService_Approve_FullMethodName                           = "/Scailo.HolidaysService/Approve"
	HolidaysService_SendForRevision_FullMethodName                   = "/Scailo.HolidaysService/SendForRevision"
	HolidaysService_RevisionUpdate_FullMethodName                    = "/Scailo.HolidaysService/RevisionUpdate"
	HolidaysService_Halt_FullMethodName                              = "/Scailo.HolidaysService/Halt"
	HolidaysService_Discard_FullMethodName                           = "/Scailo.HolidaysService/Discard"
	HolidaysService_Restore_FullMethodName                           = "/Scailo.HolidaysService/Restore"
	HolidaysService_Complete_FullMethodName                          = "/Scailo.HolidaysService/Complete"
	HolidaysService_Repeat_FullMethodName                            = "/Scailo.HolidaysService/Repeat"
	HolidaysService_CommentAdd_FullMethodName                        = "/Scailo.HolidaysService/CommentAdd"
	HolidaysService_AddHolidayShiftGroup_FullMethodName              = "/Scailo.HolidaysService/AddHolidayShiftGroup"
	HolidaysService_ModifyHolidayShiftGroup_FullMethodName           = "/Scailo.HolidaysService/ModifyHolidayShiftGroup"
	HolidaysService_ApproveHolidayShiftGroup_FullMethodName          = "/Scailo.HolidaysService/ApproveHolidayShiftGroup"
	HolidaysService_DeleteHolidayShiftGroup_FullMethodName           = "/Scailo.HolidaysService/DeleteHolidayShiftGroup"
	HolidaysService_ReorderHolidayShiftsGroups_FullMethodName        = "/Scailo.HolidaysService/ReorderHolidayShiftsGroups"
	HolidaysService_ViewHolidayShiftGroupByID_FullMethodName         = "/Scailo.HolidaysService/ViewHolidayShiftGroupByID"
	HolidaysService_ViewApprovedHolidayShiftsGroups_FullMethodName   = "/Scailo.HolidaysService/ViewApprovedHolidayShiftsGroups"
	HolidaysService_ViewUnapprovedHolidayShiftsGroups_FullMethodName = "/Scailo.HolidaysService/ViewUnapprovedHolidayShiftsGroups"
	HolidaysService_ViewHolidayShiftsGroupsHistory_FullMethodName    = "/Scailo.HolidaysService/ViewHolidayShiftsGroupsHistory"
	HolidaysService_ViewByID_FullMethodName                          = "/Scailo.HolidaysService/ViewByID"
	HolidaysService_ViewByUUID_FullMethodName                        = "/Scailo.HolidaysService/ViewByUUID"
	HolidaysService_ViewEssentialByID_FullMethodName                 = "/Scailo.HolidaysService/ViewEssentialByID"
	HolidaysService_ViewEssentialByUUID_FullMethodName               = "/Scailo.HolidaysService/ViewEssentialByUUID"
	HolidaysService_ViewFromIDs_FullMethodName                       = "/Scailo.HolidaysService/ViewFromIDs"
	HolidaysService_ViewAll_FullMethodName                           = "/Scailo.HolidaysService/ViewAll"
	HolidaysService_ViewAllForEntityUUID_FullMethodName              = "/Scailo.HolidaysService/ViewAllForEntityUUID"
	HolidaysService_ViewWithPagination_FullMethodName                = "/Scailo.HolidaysService/ViewWithPagination"
	HolidaysService_ViewHolidaysOn_FullMethodName                    = "/Scailo.HolidaysService/ViewHolidaysOn"
	HolidaysService_SearchAll_FullMethodName                         = "/Scailo.HolidaysService/SearchAll"
	HolidaysService_Filter_FullMethodName                            = "/Scailo.HolidaysService/Filter"
	HolidaysService_CountInStatus_FullMethodName                     = "/Scailo.HolidaysService/CountInStatus"
	HolidaysService_Count_FullMethodName                             = "/Scailo.HolidaysService/Count"
	HolidaysService_DownloadAsCSV_FullMethodName                     = "/Scailo.HolidaysService/DownloadAsCSV"
	HolidaysService_ImportFromCSV_FullMethodName                     = "/Scailo.HolidaysService/ImportFromCSV"
)

// HolidaysServiceClient is the client API for HolidaysService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each shift group
type HolidaysServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *HolidaysServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *HolidaysServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *HolidaysServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *HolidaysServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a shift to a shift group
	AddHolidayShiftGroup(ctx context.Context, in *HolidaysServiceShiftGroupCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify a shift in a shift group
	ModifyHolidayShiftGroup(ctx context.Context, in *HolidaysServiceShiftGroupUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a shift in a shift group
	ApproveHolidayShiftGroup(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a shift in a shift group
	DeleteHolidayShiftGroup(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder shifts in a shift group
	ReorderHolidayShiftsGroups(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Holiday Shift Group by ID
	ViewHolidayShiftGroupByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*HolidayShiftGroup, error)
	// View approved holiday shift groups for given shift group ID
	ViewApprovedHolidayShiftsGroups(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*HolidaysShiftsGroupsList, error)
	// View unapproved holiday shift groups for given shift group ID
	ViewUnapprovedHolidayShiftsGroups(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*HolidaysShiftsGroupsList, error)
	// View the history of the shift group shift
	ViewHolidayShiftsGroupsHistory(ctx context.Context, in *HolidaysShiftsGroupsHistoryRequest, opts ...grpc.CallOption) (*HolidaysShiftsGroupsList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Holiday, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Holiday, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Holiday, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Holiday, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*HolidaysList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*HolidaysList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*HolidaysList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *HolidaysServicePaginationReq, opts ...grpc.CallOption) (*HolidaysServicePaginationResponse, error)
	// View all the holidays on the given timestamp
	ViewHolidaysOn(ctx context.Context, in *HolidaysServiceViewHolidaysOnTimestampRequest, opts ...grpc.CallOption) (*HolidaysList, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *HolidaysServiceSearchAllReq, opts ...grpc.CallOption) (*HolidaysList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *HolidaysServiceFilterReq, opts ...grpc.CallOption) (*HolidaysList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *HolidaysServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *HolidaysServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type holidaysServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHolidaysServiceClient(cc grpc.ClientConnInterface) HolidaysServiceClient {
	return &holidaysServiceClient{cc}
}

func (c *holidaysServiceClient) Create(ctx context.Context, in *HolidaysServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) Draft(ctx context.Context, in *HolidaysServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) DraftUpdate(ctx context.Context, in *HolidaysServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) RevisionUpdate(ctx context.Context, in *HolidaysServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) AddHolidayShiftGroup(ctx context.Context, in *HolidaysServiceShiftGroupCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_AddHolidayShiftGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ModifyHolidayShiftGroup(ctx context.Context, in *HolidaysServiceShiftGroupUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_ModifyHolidayShiftGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ApproveHolidayShiftGroup(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_ApproveHolidayShiftGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) DeleteHolidayShiftGroup(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_DeleteHolidayShiftGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ReorderHolidayShiftsGroups(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, HolidaysService_ReorderHolidayShiftsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewHolidayShiftGroupByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*HolidayShiftGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidayShiftGroup)
	err := c.cc.Invoke(ctx, HolidaysService_ViewHolidayShiftGroupByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewApprovedHolidayShiftsGroups(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*HolidaysShiftsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidaysShiftsGroupsList)
	err := c.cc.Invoke(ctx, HolidaysService_ViewApprovedHolidayShiftsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewUnapprovedHolidayShiftsGroups(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*HolidaysShiftsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidaysShiftsGroupsList)
	err := c.cc.Invoke(ctx, HolidaysService_ViewUnapprovedHolidayShiftsGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewHolidayShiftsGroupsHistory(ctx context.Context, in *HolidaysShiftsGroupsHistoryRequest, opts ...grpc.CallOption) (*HolidaysShiftsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidaysShiftsGroupsList)
	err := c.cc.Invoke(ctx, HolidaysService_ViewHolidayShiftsGroupsHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Holiday, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Holiday)
	err := c.cc.Invoke(ctx, HolidaysService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Holiday, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Holiday)
	err := c.cc.Invoke(ctx, HolidaysService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Holiday, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Holiday)
	err := c.cc.Invoke(ctx, HolidaysService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Holiday, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Holiday)
	err := c.cc.Invoke(ctx, HolidaysService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*HolidaysList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidaysList)
	err := c.cc.Invoke(ctx, HolidaysService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*HolidaysList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidaysList)
	err := c.cc.Invoke(ctx, HolidaysService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*HolidaysList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidaysList)
	err := c.cc.Invoke(ctx, HolidaysService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewWithPagination(ctx context.Context, in *HolidaysServicePaginationReq, opts ...grpc.CallOption) (*HolidaysServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidaysServicePaginationResponse)
	err := c.cc.Invoke(ctx, HolidaysService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ViewHolidaysOn(ctx context.Context, in *HolidaysServiceViewHolidaysOnTimestampRequest, opts ...grpc.CallOption) (*HolidaysList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidaysList)
	err := c.cc.Invoke(ctx, HolidaysService_ViewHolidaysOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) SearchAll(ctx context.Context, in *HolidaysServiceSearchAllReq, opts ...grpc.CallOption) (*HolidaysList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidaysList)
	err := c.cc.Invoke(ctx, HolidaysService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) Filter(ctx context.Context, in *HolidaysServiceFilterReq, opts ...grpc.CallOption) (*HolidaysList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HolidaysList)
	err := c.cc.Invoke(ctx, HolidaysService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, HolidaysService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) Count(ctx context.Context, in *HolidaysServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, HolidaysService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) DownloadAsCSV(ctx context.Context, in *HolidaysServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, HolidaysService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holidaysServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, HolidaysService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HolidaysService
