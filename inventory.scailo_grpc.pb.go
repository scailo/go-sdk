// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: inventory.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_ViewByHash_FullMethodName                                 = "/Scailo.InventoryService/ViewByHash"
	InventoryService_ViewByShortURL_FullMethodName                             = "/Scailo.InventoryService/ViewByShortURL"
	InventoryService_ViewIssuable_FullMethodName                               = "/Scailo.InventoryService/ViewIssuable"
	InventoryService_ViewIssuedForGoodsDispatch_FullMethodName                 = "/Scailo.InventoryService/ViewIssuedForGoodsDispatch"
	InventoryService_ViewIssuedForOutwardJobFreeIssueMaterial_FullMethodName   = "/Scailo.InventoryService/ViewIssuedForOutwardJobFreeIssueMaterial"
	InventoryService_ViewAdmittedFromGoodsReceipt_FullMethodName               = "/Scailo.InventoryService/ViewAdmittedFromGoodsReceipt"
	InventoryService_ViewAdmittedFromInwardJobFreeIssueMaterial_FullMethodName = "/Scailo.InventoryService/ViewAdmittedFromInwardJobFreeIssueMaterial"
	InventoryService_ViewAdmittedFromProductionPlan_FullMethodName             = "/Scailo.InventoryService/ViewAdmittedFromProductionPlan"
	InventoryService_ViewReturnableForPurchaseOrder_FullMethodName             = "/Scailo.InventoryService/ViewReturnableForPurchaseOrder"
	InventoryService_ViewReturnableForInwardJob_FullMethodName                 = "/Scailo.InventoryService/ViewReturnableForInwardJob"
	InventoryService_ViewReturnableForStockIssuance_FullMethodName             = "/Scailo.InventoryService/ViewReturnableForStockIssuance"
	InventoryService_ViewReturnableForSalesOrder_FullMethodName                = "/Scailo.InventoryService/ViewReturnableForSalesOrder"
	InventoryService_ViewReturnableForOutwardJob_FullMethodName                = "/Scailo.InventoryService/ViewReturnableForOutwardJob"
	InventoryService_ViewQuantityRemaining_FullMethodName                      = "/Scailo.InventoryService/ViewQuantityRemaining"
	InventoryService_CountWorkInProgress_FullMethodName                        = "/Scailo.InventoryService/CountWorkInProgress"
	InventoryService_CountIndented_FullMethodName                              = "/Scailo.InventoryService/CountIndented"
	InventoryService_CountOrdered_FullMethodName                               = "/Scailo.InventoryService/CountOrdered"
	InventoryService_ViewBaseDemandQuantity_FullMethodName                     = "/Scailo.InventoryService/ViewBaseDemandQuantity"
	InventoryService_ViewAdjustedDemandQuantity_FullMethodName                 = "/Scailo.InventoryService/ViewAdjustedDemandQuantity"
	InventoryService_ViewRequiredQuantity_FullMethodName                       = "/Scailo.InventoryService/ViewRequiredQuantity"
	InventoryService_ViewConsolidatedStatistics_FullMethodName                 = "/Scailo.InventoryService/ViewConsolidatedStatistics"
	InventoryService_ViewInStorage_FullMethodName                              = "/Scailo.InventoryService/ViewInStorage"
	InventoryService_ViewWorkInProgressStatistics_FullMethodName               = "/Scailo.InventoryService/ViewWorkInProgressStatistics"
	InventoryService_ViewIndentedStatistics_FullMethodName                     = "/Scailo.InventoryService/ViewIndentedStatistics"
	InventoryService_ViewOrderedStatistics_FullMethodName                      = "/Scailo.InventoryService/ViewOrderedStatistics"
	InventoryService_ViewDetailedDemand_FullMethodName                         = "/Scailo.InventoryService/ViewDetailedDemand"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on inventory
type InventoryServiceClient interface {
	// View inventory item by hash
	ViewByHash(ctx context.Context, in *InventoryHashSearchReq, opts ...grpc.CallOption) (*GenericInventory, error)
	// View inventory item by short URL
	ViewByShortURL(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*GenericInventory, error)
	// View issuable inventory
	ViewIssuable(ctx context.Context, in *IssuableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// View issued inventory for a Goods Dispatch represented by the Identifier
	ViewIssuedForGoodsDispatch(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// View issued inventory for an Outward Job Free Issue Material represented by the Identifier
	ViewIssuedForOutwardJobFreeIssueMaterial(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// View admitted inventory from a Goods Receipt represented by the Identifier
	ViewAdmittedFromGoodsReceipt(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// View admitted inventory from an Inward Job Free Issue Material represented by the Identifier
	ViewAdmittedFromInwardJobFreeIssueMaterial(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// View admitted inventory from a Production Plan represented by the Identifier
	ViewAdmittedFromProductionPlan(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// Deprecated: Do not use.
	// View inventory that is returnable from a purchase order
	ViewReturnableForPurchaseOrder(ctx context.Context, in *ReturnableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// Deprecated: Do not use.
	// View inventory that is returnable from an inward job
	ViewReturnableForInwardJob(ctx context.Context, in *ReturnableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// Deprecated: Do not use.
	// View inventory that is returnable from a stock issuance
	ViewReturnableForStockIssuance(ctx context.Context, in *ReturnableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// Deprecated: Do not use.
	// View inventory that is returnable from a sales order
	ViewReturnableForSalesOrder(ctx context.Context, in *ReturnableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// Deprecated: Do not use.
	// View inventory that is returnable from an outward job
	ViewReturnableForOutwardJob(ctx context.Context, in *ReturnableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// View quantity remaining of the family in the given status
	ViewQuantityRemaining(ctx context.Context, in *InventoryServiceFamilyQuantityReq, opts ...grpc.CallOption) (*QuantityResponse, error)
	// Quantity of inventory items of the family with the given Identifier that are being manufactured
	CountWorkInProgress(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error)
	// Quantity of inventory items of the family with the given Identifier that have been indented
	CountIndented(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error)
	// Quantity of inventory items of the family with the given Identifier that have been ordered
	CountOrdered(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error)
	// View base demand quantity of the family with the given Identifier
	ViewBaseDemandQuantity(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error)
	// View adjusted demand quantity of the family with the given Identifier
	ViewAdjustedDemandQuantity(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error)
	// View required quantity of the family with the given Identifier
	ViewRequiredQuantity(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error)
	// View consolidated inventory statistics
	ViewConsolidatedStatistics(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ConsolidatedInventoryStatistics, error)
	// View inventory placed in storage represented by the Identifier
	ViewInStorage(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// View the work in progress statistics of the family with the given Identifier
	ViewWorkInProgressStatistics(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InventoryWorkInProgressStatistics, error)
	// View the indented statistics of the family with the given Identifier
	ViewIndentedStatistics(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InventoryIndentedStatistics, error)
	// View the ordered statistics of the fammily with the given Identifier
	ViewOrderedStatistics(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InventoryOrderedStatistics, error)
	// View the detailed demand of the family with the given Identifier
	ViewDetailedDemand(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InventoryDetailedDemand, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) ViewByHash(ctx context.Context, in *InventoryHashSearchReq, opts ...grpc.CallOption) (*GenericInventory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventory)
	err := c.cc.Invoke(ctx, InventoryService_ViewByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewByShortURL(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*GenericInventory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventory)
	err := c.cc.Invoke(ctx, InventoryService_ViewByShortURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewIssuable(ctx context.Context, in *IssuableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewIssuable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewIssuedForGoodsDispatch(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewIssuedForGoodsDispatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewIssuedForOutwardJobFreeIssueMaterial(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewIssuedForOutwardJobFreeIssueMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewAdmittedFromGoodsReceipt(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewAdmittedFromGoodsReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewAdmittedFromInwardJobFreeIssueMaterial(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewAdmittedFromInwardJobFreeIssueMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewAdmittedFromProductionPlan(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewAdmittedFromProductionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *inventoryServiceClient) ViewReturnableForPurchaseOrder(ctx context.Context, in *ReturnableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewReturnableForPurchaseOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *inventoryServiceClient) ViewReturnableForInwardJob(ctx context.Context, in *ReturnableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewReturnableForInwardJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *inventoryServiceClient) ViewReturnableForStockIssuance(ctx context.Context, in *ReturnableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewReturnableForStockIssuance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *inventoryServiceClient) ViewReturnableForSalesOrder(ctx context.Context, in *ReturnableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewReturnableForSalesOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *inventoryServiceClient) ViewReturnableForOutwardJob(ctx context.Context, in *ReturnableInventorySearchReq, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewReturnableForOutwardJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewQuantityRemaining(ctx context.Context, in *InventoryServiceFamilyQuantityReq, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, InventoryService_ViewQuantityRemaining_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CountWorkInProgress(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, InventoryService_CountWorkInProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CountIndented(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, InventoryService_CountIndented_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CountOrdered(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, InventoryService_CountOrdered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewBaseDemandQuantity(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, InventoryService_ViewBaseDemandQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewAdjustedDemandQuantity(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, InventoryService_ViewAdjustedDemandQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewRequiredQuantity(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, InventoryService_ViewRequiredQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewConsolidatedStatistics(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ConsolidatedInventoryStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsolidatedInventoryStatistics)
	err := c.cc.Invoke(ctx, InventoryService_ViewConsolidatedStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewInStorage(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, InventoryService_ViewInStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewWorkInProgressStatistics(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InventoryWorkInProgressStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryWorkInProgressStatistics)
	err := c.cc.Invoke(ctx, InventoryService_ViewWorkInProgressStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewIndentedStatistics(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InventoryIndentedStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryIndentedStatistics)
	err := c.cc.Invoke(ctx, InventoryService_ViewIndentedStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewOrderedStatistics(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InventoryOrderedStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryOrderedStatistics)
	err := c.cc.Invoke(ctx, InventoryService_ViewOrderedStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ViewDetailedDemand(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InventoryDetailedDemand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryDetailedDemand)
	err := c.cc.Invoke(ctx, InventoryService_ViewDetailedDemand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryService
