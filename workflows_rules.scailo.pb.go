// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: workflows_rules.scailo.proto

package sdk

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Stores all the possible service names for which a workflow rule can be created
type WORKFLOW_RULE_SERVICE_NAME int32

const (
	// Used only for filters
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ANY_UNSPECIFIED WORKFLOW_RULE_SERVICE_NAME = 0
	// Apply the rule for absences service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ABSENCES WORKFLOW_RULE_SERVICE_NAME = 10
	// Apply the rule for action codes service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ACTIONS_CODES WORKFLOW_RULE_SERVICE_NAME = 20
	// Apply the rule for activities groups service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_GROUPS WORKFLOW_RULE_SERVICE_NAME = 30
	// Apply the rule for activities statuses service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_STATUSES WORKFLOW_RULE_SERVICE_NAME = 40
	// Apply the rule for activities tags service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_TAGS WORKFLOW_RULE_SERVICE_NAME = 50
	// Apply the rule for activities service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES WORKFLOW_RULE_SERVICE_NAME = 60
	// Apply the rule for announcements service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ANNOUNCEMENTS WORKFLOW_RULE_SERVICE_NAME = 70
	// Apply the rule for asset indents service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ASSET_INDENTS WORKFLOW_RULE_SERVICE_NAME = 80
	// Apply the rule for associates service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ASSOCIATES WORKFLOW_RULE_SERVICE_NAME = 90
	// Apply the rule for attendances amendments service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ATTENDANCES_AMENDMENTS WORKFLOW_RULE_SERVICE_NAME = 100
	// Apply the rules for attendances service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ATTENDANCES WORKFLOW_RULE_SERVICE_NAME = 110
	// Apply the rule for bank accounts service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_BANK_ACCOUNTS WORKFLOW_RULE_SERVICE_NAME = 200
	// Apply the rule for clients service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_CLIENTS WORKFLOW_RULE_SERVICE_NAME = 300
	// Apply the rule for components service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_COMPONENTS WORKFLOW_RULE_SERVICE_NAME = 310
	// Apply the rule for credit notes service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_CREDIT_NOTES WORKFLOW_RULE_SERVICE_NAME = 320
	// Apply the rule for currencies service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_CURRENCIES WORKFLOW_RULE_SERVICE_NAME = 330
	// Apply the rule for debit notes service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_DEBIT_NOTES WORKFLOW_RULE_SERVICE_NAME = 4000
	// Apply the rule for departments service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_DEPARTMENTS WORKFLOW_RULE_SERVICE_NAME = 410
	// Apply the rule for equations families service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_FAMILIES WORKFLOW_RULE_SERVICE_NAME = 500
	// Apply the rule for equations replaceables service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_REPLACEABLES WORKFLOW_RULE_SERVICE_NAME = 510
	// Apply the rule for equations sales bundles service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_SALES_BUNDLES WORKFLOW_RULE_SERVICE_NAME = 520
	// Apply the rule for equations work orders service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_WORK_ORDERS WORKFLOW_RULE_SERVICE_NAME = 530
	// Apply the rule for equipments service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_EQUIPMENTS WORKFLOW_RULE_SERVICE_NAME = 540
	// Apply the rule for expenses service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_EXPENSES WORKFLOW_RULE_SERVICE_NAME = 550
	// Apply the rule for families service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_FAMILIES WORKFLOW_RULE_SERVICE_NAME = 600
	// Apply the rule for feedstocks service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_FEEDSTOCKS WORKFLOW_RULE_SERVICE_NAME = 610
	// Apply the rule for goals service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_GOALS WORKFLOW_RULE_SERVICE_NAME = 700
	// Apply the rule for goods dispatches service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_GOODS_DISPATCHES WORKFLOW_RULE_SERVICE_NAME = 710
	// Apply the rule for goods receipts service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_GOODS_RECEIPTS WORKFLOW_RULE_SERVICE_NAME = 720
	// Apply the rule for holidays service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_HOLIDAYS WORKFLOW_RULE_SERVICE_NAME = 800
	// Apply the rule for infrastructures service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_INFRASTRUCTURES WORKFLOW_RULE_SERVICE_NAME = 900
	// Apply the rule for inventory service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_INVENTORY WORKFLOW_RULE_SERVICE_NAME = 910
	// Apply the rule for inward jobs free issue materials returns service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS_FREE_ISSUE_MATERIALS_RETURNS WORKFLOW_RULE_SERVICE_NAME = 1000
	// Apply the rule for inward jobs free issue materials service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS_FREE_ISSUE_MATERIALS WORKFLOW_RULE_SERVICE_NAME = 1010
	// Apply the rule for inward jobs service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS WORKFLOW_RULE_SERVICE_NAME = 1020
	// Apply the rule for leaves adjustments service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_LEAVES_ADJUSTMENTS WORKFLOW_RULE_SERVICE_NAME = 1100
	// Apply the rule for leaves requests service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_LEAVES_REQUESTS WORKFLOW_RULE_SERVICE_NAME = 1110
	// Apply the rule for meetings service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_MEETINGS WORKFLOW_RULE_SERVICE_NAME = 1200
	// Apply the rule for merchandises service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_MERCHANDISES WORKFLOW_RULE_SERVICE_NAME = 1210
	// Apply the rule for notes service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_NOTES WORKFLOW_RULE_SERVICE_NAME = 1300
	// Apply the rule for on duties service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ON_DUTIES WORKFLOW_RULE_SERVICE_NAME = 1400
	// Apply the rule for outward jobs free issue materials returns service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS_FREE_ISSUE_MATERIALS_RETURNS WORKFLOW_RULE_SERVICE_NAME = 1410
	// Apply the rule for outward jobs free issue materials service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS_FREE_ISSUE_MATERIALS WORKFLOW_RULE_SERVICE_NAME = 1420
	// Apply the rule for outward jobs service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS WORKFLOW_RULE_SERVICE_NAME = 1430
	// Apply the rule for overtimes service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_OVERTIMES WORKFLOW_RULE_SERVICE_NAME = 1440
	// Apply the rule for production indents service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_PRODUCTION_INDENTS WORKFLOW_RULE_SERVICE_NAME = 1500
	// Apply the rule for production plans service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_PRODUCTION_PLANS WORKFLOW_RULE_SERVICE_NAME = 1510
	// Apply the rule for products service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_PRODUCTS WORKFLOW_RULE_SERVICE_NAME = 1520
	// Apply the rule for projects service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_PROJECTS WORKFLOW_RULE_SERVICE_NAME = 1530
	// Apply the rule for purchases enquiries service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_PURCHASES_ENQUIRIES WORKFLOW_RULE_SERVICE_NAME = 1540
	// Apply the rule for purchases indents service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_PURCHASES_INDENTS WORKFLOW_RULE_SERVICE_NAME = 1550
	// Apply the rule for purchases orders service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_PURCHASES_ORDERS WORKFLOW_RULE_SERVICE_NAME = 1560
	// Apply the rule for supply offers service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_SUPPLY_OFFERS WORKFLOW_RULE_SERVICE_NAME = 1565
	// Apply the rule for purchases payments service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_PURCHASES_PAYMENTS WORKFLOW_RULE_SERVICE_NAME = 1570
	// Apply the rule for purchases returns service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_PURCHASES_RETURNS WORKFLOW_RULE_SERVICE_NAME = 1580
	// Apply the rule for qc groups service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_QC_GROUPS WORKFLOW_RULE_SERVICE_NAME = 1600
	// Apply the rule for qc samples service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_QC_SAMPLES WORKFLOW_RULE_SERVICE_NAME = 1610
	// Apply the rule for quotations requests service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_QUOTATIONS_REQUESTS WORKFLOW_RULE_SERVICE_NAME = 1620
	// Apply the rule for quotations responses service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_QUOTATIONS_RESPONSES WORKFLOW_RULE_SERVICE_NAME = 1630
	// Apply the rule for replaceable indents service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_REPLACEABLE_INDENTS WORKFLOW_RULE_SERVICE_NAME = 1700
	// Apply the rule for roles service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ROLES WORKFLOW_RULE_SERVICE_NAME = 1710
	// Apply the rule for salaries service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_SALARIES WORKFLOW_RULE_SERVICE_NAME = 1800
	// Apply the rule for sales enquiries service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_SALES_ENQUIRIES WORKFLOW_RULE_SERVICE_NAME = 1810
	// Apply the rule for sales invoices service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_SALES_INVOICES WORKFLOW_RULE_SERVICE_NAME = 1820
	// Apply the rule for proforma invoices service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_PROFORMA_INVOICES WORKFLOW_RULE_SERVICE_NAME = 1825
	// Apply the rule for sales orders service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_SALES_ORDERS WORKFLOW_RULE_SERVICE_NAME = 1830
	// Apply the rule for sales quotations service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_SALES_QUOTATIONS WORKFLOW_RULE_SERVICE_NAME = 1840
	// Apply the rule for sales receipts service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_SALES_RECEIPTS WORKFLOW_RULE_SERVICE_NAME = 1850
	// Apply the rule for sales returns service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_SALES_RETURNS WORKFLOW_RULE_SERVICE_NAME = 1860
	// Apply the rule for stock audits service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_STOCK_AUDITS WORKFLOW_RULE_SERVICE_NAME = 1870
	// Apply the rule for stock issuances service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_STOCK_ISSUANCES WORKFLOW_RULE_SERVICE_NAME = 1880
	// Apply the rule for stock returns service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_STOCK_RETURNS WORKFLOW_RULE_SERVICE_NAME = 1890
	// Apply the rule for users service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_USERS WORKFLOW_RULE_SERVICE_NAME = 1900
	// Apply the rule for vendor invoices service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_VENDOR_INVOICES WORKFLOW_RULE_SERVICE_NAME = 2000
	// Apply the rule for vendors service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_VENDORS WORKFLOW_RULE_SERVICE_NAME = 2010
	// Apply the rule for visitations service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_VISITATIONS WORKFLOW_RULE_SERVICE_NAME = 2020
	// Apply the rule for work orders service
	WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_WORK_ORDERS WORKFLOW_RULE_SERVICE_NAME = 2100
)

// Enum value maps for WORKFLOW_RULE_SERVICE_NAME.
var (
	WORKFLOW_RULE_SERVICE_NAME_name = map[int32]string{
		0:    "WORKFLOW_RULE_SERVICE_NAME_ANY_UNSPECIFIED",
		10:   "WORKFLOW_RULE_SERVICE_NAME_ABSENCES",
		20:   "WORKFLOW_RULE_SERVICE_NAME_ACTIONS_CODES",
		30:   "WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_GROUPS",
		40:   "WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_STATUSES",
		50:   "WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_TAGS",
		60:   "WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES",
		70:   "WORKFLOW_RULE_SERVICE_NAME_ANNOUNCEMENTS",
		80:   "WORKFLOW_RULE_SERVICE_NAME_ASSET_INDENTS",
		90:   "WORKFLOW_RULE_SERVICE_NAME_ASSOCIATES",
		100:  "WORKFLOW_RULE_SERVICE_NAME_ATTENDANCES_AMENDMENTS",
		110:  "WORKFLOW_RULE_SERVICE_NAME_ATTENDANCES",
		200:  "WORKFLOW_RULE_SERVICE_NAME_BANK_ACCOUNTS",
		300:  "WORKFLOW_RULE_SERVICE_NAME_CLIENTS",
		310:  "WORKFLOW_RULE_SERVICE_NAME_COMPONENTS",
		320:  "WORKFLOW_RULE_SERVICE_NAME_CREDIT_NOTES",
		330:  "WORKFLOW_RULE_SERVICE_NAME_CURRENCIES",
		4000: "WORKFLOW_RULE_SERVICE_NAME_DEBIT_NOTES",
		410:  "WORKFLOW_RULE_SERVICE_NAME_DEPARTMENTS",
		500:  "WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_FAMILIES",
		510:  "WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_REPLACEABLES",
		520:  "WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_SALES_BUNDLES",
		530:  "WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_WORK_ORDERS",
		540:  "WORKFLOW_RULE_SERVICE_NAME_EQUIPMENTS",
		550:  "WORKFLOW_RULE_SERVICE_NAME_EXPENSES",
		600:  "WORKFLOW_RULE_SERVICE_NAME_FAMILIES",
		610:  "WORKFLOW_RULE_SERVICE_NAME_FEEDSTOCKS",
		700:  "WORKFLOW_RULE_SERVICE_NAME_GOALS",
		710:  "WORKFLOW_RULE_SERVICE_NAME_GOODS_DISPATCHES",
		720:  "WORKFLOW_RULE_SERVICE_NAME_GOODS_RECEIPTS",
		800:  "WORKFLOW_RULE_SERVICE_NAME_HOLIDAYS",
		900:  "WORKFLOW_RULE_SERVICE_NAME_INFRASTRUCTURES",
		910:  "WORKFLOW_RULE_SERVICE_NAME_INVENTORY",
		1000: "WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS_FREE_ISSUE_MATERIALS_RETURNS",
		1010: "WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS_FREE_ISSUE_MATERIALS",
		1020: "WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS",
		1100: "WORKFLOW_RULE_SERVICE_NAME_LEAVES_ADJUSTMENTS",
		1110: "WORKFLOW_RULE_SERVICE_NAME_LEAVES_REQUESTS",
		1200: "WORKFLOW_RULE_SERVICE_NAME_MEETINGS",
		1210: "WORKFLOW_RULE_SERVICE_NAME_MERCHANDISES",
		1300: "WORKFLOW_RULE_SERVICE_NAME_NOTES",
		1400: "WORKFLOW_RULE_SERVICE_NAME_ON_DUTIES",
		1410: "WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS_FREE_ISSUE_MATERIALS_RETURNS",
		1420: "WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS_FREE_ISSUE_MATERIALS",
		1430: "WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS",
		1440: "WORKFLOW_RULE_SERVICE_NAME_OVERTIMES",
		1500: "WORKFLOW_RULE_SERVICE_NAME_PRODUCTION_INDENTS",
		1510: "WORKFLOW_RULE_SERVICE_NAME_PRODUCTION_PLANS",
		1520: "WORKFLOW_RULE_SERVICE_NAME_PRODUCTS",
		1530: "WORKFLOW_RULE_SERVICE_NAME_PROJECTS",
		1540: "WORKFLOW_RULE_SERVICE_NAME_PURCHASES_ENQUIRIES",
		1550: "WORKFLOW_RULE_SERVICE_NAME_PURCHASES_INDENTS",
		1560: "WORKFLOW_RULE_SERVICE_NAME_PURCHASES_ORDERS",
		1565: "WORKFLOW_RULE_SERVICE_NAME_SUPPLY_OFFERS",
		1570: "WORKFLOW_RULE_SERVICE_NAME_PURCHASES_PAYMENTS",
		1580: "WORKFLOW_RULE_SERVICE_NAME_PURCHASES_RETURNS",
		1600: "WORKFLOW_RULE_SERVICE_NAME_QC_GROUPS",
		1610: "WORKFLOW_RULE_SERVICE_NAME_QC_SAMPLES",
		1620: "WORKFLOW_RULE_SERVICE_NAME_QUOTATIONS_REQUESTS",
		1630: "WORKFLOW_RULE_SERVICE_NAME_QUOTATIONS_RESPONSES",
		1700: "WORKFLOW_RULE_SERVICE_NAME_REPLACEABLE_INDENTS",
		1710: "WORKFLOW_RULE_SERVICE_NAME_ROLES",
		1800: "WORKFLOW_RULE_SERVICE_NAME_SALARIES",
		1810: "WORKFLOW_RULE_SERVICE_NAME_SALES_ENQUIRIES",
		1820: "WORKFLOW_RULE_SERVICE_NAME_SALES_INVOICES",
		1825: "WORKFLOW_RULE_SERVICE_NAME_PROFORMA_INVOICES",
		1830: "WORKFLOW_RULE_SERVICE_NAME_SALES_ORDERS",
		1840: "WORKFLOW_RULE_SERVICE_NAME_SALES_QUOTATIONS",
		1850: "WORKFLOW_RULE_SERVICE_NAME_SALES_RECEIPTS",
		1860: "WORKFLOW_RULE_SERVICE_NAME_SALES_RETURNS",
		1870: "WORKFLOW_RULE_SERVICE_NAME_STOCK_AUDITS",
		1880: "WORKFLOW_RULE_SERVICE_NAME_STOCK_ISSUANCES",
		1890: "WORKFLOW_RULE_SERVICE_NAME_STOCK_RETURNS",
		1900: "WORKFLOW_RULE_SERVICE_NAME_USERS",
		2000: "WORKFLOW_RULE_SERVICE_NAME_VENDOR_INVOICES",
		2010: "WORKFLOW_RULE_SERVICE_NAME_VENDORS",
		2020: "WORKFLOW_RULE_SERVICE_NAME_VISITATIONS",
		2100: "WORKFLOW_RULE_SERVICE_NAME_WORK_ORDERS",
	}
	WORKFLOW_RULE_SERVICE_NAME_value = map[string]int32{
		"WORKFLOW_RULE_SERVICE_NAME_ANY_UNSPECIFIED":                           0,
		"WORKFLOW_RULE_SERVICE_NAME_ABSENCES":                                  10,
		"WORKFLOW_RULE_SERVICE_NAME_ACTIONS_CODES":                             20,
		"WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_GROUPS":                         30,
		"WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_STATUSES":                       40,
		"WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_TAGS":                           50,
		"WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES":                                60,
		"WORKFLOW_RULE_SERVICE_NAME_ANNOUNCEMENTS":                             70,
		"WORKFLOW_RULE_SERVICE_NAME_ASSET_INDENTS":                             80,
		"WORKFLOW_RULE_SERVICE_NAME_ASSOCIATES":                                90,
		"WORKFLOW_RULE_SERVICE_NAME_ATTENDANCES_AMENDMENTS":                    100,
		"WORKFLOW_RULE_SERVICE_NAME_ATTENDANCES":                               110,
		"WORKFLOW_RULE_SERVICE_NAME_BANK_ACCOUNTS":                             200,
		"WORKFLOW_RULE_SERVICE_NAME_CLIENTS":                                   300,
		"WORKFLOW_RULE_SERVICE_NAME_COMPONENTS":                                310,
		"WORKFLOW_RULE_SERVICE_NAME_CREDIT_NOTES":                              320,
		"WORKFLOW_RULE_SERVICE_NAME_CURRENCIES":                                330,
		"WORKFLOW_RULE_SERVICE_NAME_DEBIT_NOTES":                               4000,
		"WORKFLOW_RULE_SERVICE_NAME_DEPARTMENTS":                               410,
		"WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_FAMILIES":                        500,
		"WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_REPLACEABLES":                    510,
		"WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_SALES_BUNDLES":                   520,
		"WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_WORK_ORDERS":                     530,
		"WORKFLOW_RULE_SERVICE_NAME_EQUIPMENTS":                                540,
		"WORKFLOW_RULE_SERVICE_NAME_EXPENSES":                                  550,
		"WORKFLOW_RULE_SERVICE_NAME_FAMILIES":                                  600,
		"WORKFLOW_RULE_SERVICE_NAME_FEEDSTOCKS":                                610,
		"WORKFLOW_RULE_SERVICE_NAME_GOALS":                                     700,
		"WORKFLOW_RULE_SERVICE_NAME_GOODS_DISPATCHES":                          710,
		"WORKFLOW_RULE_SERVICE_NAME_GOODS_RECEIPTS":                            720,
		"WORKFLOW_RULE_SERVICE_NAME_HOLIDAYS":                                  800,
		"WORKFLOW_RULE_SERVICE_NAME_INFRASTRUCTURES":                           900,
		"WORKFLOW_RULE_SERVICE_NAME_INVENTORY":                                 910,
		"WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS_FREE_ISSUE_MATERIALS_RETURNS":  1000,
		"WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS_FREE_ISSUE_MATERIALS":          1010,
		"WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS":                               1020,
		"WORKFLOW_RULE_SERVICE_NAME_LEAVES_ADJUSTMENTS":                        1100,
		"WORKFLOW_RULE_SERVICE_NAME_LEAVES_REQUESTS":                           1110,
		"WORKFLOW_RULE_SERVICE_NAME_MEETINGS":                                  1200,
		"WORKFLOW_RULE_SERVICE_NAME_MERCHANDISES":                              1210,
		"WORKFLOW_RULE_SERVICE_NAME_NOTES":                                     1300,
		"WORKFLOW_RULE_SERVICE_NAME_ON_DUTIES":                                 1400,
		"WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS_FREE_ISSUE_MATERIALS_RETURNS": 1410,
		"WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS_FREE_ISSUE_MATERIALS":         1420,
		"WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS":                              1430,
		"WORKFLOW_RULE_SERVICE_NAME_OVERTIMES":                                 1440,
		"WORKFLOW_RULE_SERVICE_NAME_PRODUCTION_INDENTS":                        1500,
		"WORKFLOW_RULE_SERVICE_NAME_PRODUCTION_PLANS":                          1510,
		"WORKFLOW_RULE_SERVICE_NAME_PRODUCTS":                                  1520,
		"WORKFLOW_RULE_SERVICE_NAME_PROJECTS":                                  1530,
		"WORKFLOW_RULE_SERVICE_NAME_PURCHASES_ENQUIRIES":                       1540,
		"WORKFLOW_RULE_SERVICE_NAME_PURCHASES_INDENTS":                         1550,
		"WORKFLOW_RULE_SERVICE_NAME_PURCHASES_ORDERS":                          1560,
		"WORKFLOW_RULE_SERVICE_NAME_SUPPLY_OFFERS":                             1565,
		"WORKFLOW_RULE_SERVICE_NAME_PURCHASES_PAYMENTS":                        1570,
		"WORKFLOW_RULE_SERVICE_NAME_PURCHASES_RETURNS":                         1580,
		"WORKFLOW_RULE_SERVICE_NAME_QC_GROUPS":                                 1600,
		"WORKFLOW_RULE_SERVICE_NAME_QC_SAMPLES":                                1610,
		"WORKFLOW_RULE_SERVICE_NAME_QUOTATIONS_REQUESTS":                       1620,
		"WORKFLOW_RULE_SERVICE_NAME_QUOTATIONS_RESPONSES":                      1630,
		"WORKFLOW_RULE_SERVICE_NAME_REPLACEABLE_INDENTS":                       1700,
		"WORKFLOW_RULE_SERVICE_NAME_ROLES":                                     1710,
		"WORKFLOW_RULE_SERVICE_NAME_SALARIES":                                  1800,
		"WORKFLOW_RULE_SERVICE_NAME_SALES_ENQUIRIES":                           1810,
		"WORKFLOW_RULE_SERVICE_NAME_SALES_INVOICES":                            1820,
		"WORKFLOW_RULE_SERVICE_NAME_PROFORMA_INVOICES":                         1825,
		"WORKFLOW_RULE_SERVICE_NAME_SALES_ORDERS":                              1830,
		"WORKFLOW_RULE_SERVICE_NAME_SALES_QUOTATIONS":                          1840,
		"WORKFLOW_RULE_SERVICE_NAME_SALES_RECEIPTS":                            1850,
		"WORKFLOW_RULE_SERVICE_NAME_SALES_RETURNS":                             1860,
		"WORKFLOW_RULE_SERVICE_NAME_STOCK_AUDITS":                              1870,
		"WORKFLOW_RULE_SERVICE_NAME_STOCK_ISSUANCES":                           1880,
		"WORKFLOW_RULE_SERVICE_NAME_STOCK_RETURNS":                             1890,
		"WORKFLOW_RULE_SERVICE_NAME_USERS":                                     1900,
		"WORKFLOW_RULE_SERVICE_NAME_VENDOR_INVOICES":                           2000,
		"WORKFLOW_RULE_SERVICE_NAME_VENDORS":                                   2010,
		"WORKFLOW_RULE_SERVICE_NAME_VISITATIONS":                               2020,
		"WORKFLOW_RULE_SERVICE_NAME_WORK_ORDERS":                               2100,
	}
)

func (x WORKFLOW_RULE_SERVICE_NAME) Enum() *WORKFLOW_RULE_SERVICE_NAME {
	p := new(WORKFLOW_RULE_SERVICE_NAME)
	*p = x
	return p
}

func (x WORKFLOW_RULE_SERVICE_NAME) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WORKFLOW_RULE_SERVICE_NAME) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_rules_scailo_proto_enumTypes[0].Descriptor()
}

func (WORKFLOW_RULE_SERVICE_NAME) Type() protoreflect.EnumType {
	return &file_workflows_rules_scailo_proto_enumTypes[0]
}

func (x WORKFLOW_RULE_SERVICE_NAME) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WORKFLOW_RULE_SERVICE_NAME.Descriptor instead.
func (WORKFLOW_RULE_SERVICE_NAME) EnumDescriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{0}
}

// Stores all the possible moments for which a workflow rule can be created
type WORKFLOW_RULE_MOMENT int32

const (
	// Used only for filters
	WORKFLOW_RULE_MOMENT_WORKFLOW_RULE_MOMENT_ANY_UNSPECIFIED WORKFLOW_RULE_MOMENT = 0
	// Run the rule at the beginning of the transaction
	WORKFLOW_RULE_MOMENT_WORKFLOW_RULE_MOMENT_BEGIN WORKFLOW_RULE_MOMENT = 1
	// Run the rule at the end of the transaction
	WORKFLOW_RULE_MOMENT_WORKFLOW_RULE_MOMENT_END WORKFLOW_RULE_MOMENT = 2
)

// Enum value maps for WORKFLOW_RULE_MOMENT.
var (
	WORKFLOW_RULE_MOMENT_name = map[int32]string{
		0: "WORKFLOW_RULE_MOMENT_ANY_UNSPECIFIED",
		1: "WORKFLOW_RULE_MOMENT_BEGIN",
		2: "WORKFLOW_RULE_MOMENT_END",
	}
	WORKFLOW_RULE_MOMENT_value = map[string]int32{
		"WORKFLOW_RULE_MOMENT_ANY_UNSPECIFIED": 0,
		"WORKFLOW_RULE_MOMENT_BEGIN":           1,
		"WORKFLOW_RULE_MOMENT_END":             2,
	}
)

func (x WORKFLOW_RULE_MOMENT) Enum() *WORKFLOW_RULE_MOMENT {
	p := new(WORKFLOW_RULE_MOMENT)
	*p = x
	return p
}

func (x WORKFLOW_RULE_MOMENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WORKFLOW_RULE_MOMENT) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_rules_scailo_proto_enumTypes[1].Descriptor()
}

func (WORKFLOW_RULE_MOMENT) Type() protoreflect.EnumType {
	return &file_workflows_rules_scailo_proto_enumTypes[1]
}

func (x WORKFLOW_RULE_MOMENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WORKFLOW_RULE_MOMENT.Descriptor instead.
func (WORKFLOW_RULE_MOMENT) EnumDescriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{1}
}

// Stores all the possible values for when the rule should be triggered. Possible values are Success and Failure.
type WORKFLOW_RULE_EXECUTE_ON int32

const (
	// Used only for filters
	WORKFLOW_RULE_EXECUTE_ON_WORKFLOW_RULE_EXECUTE_ON_ANY_UNSPECIFIED WORKFLOW_RULE_EXECUTE_ON = 0
	// Execute the rule when the transaction is successful
	WORKFLOW_RULE_EXECUTE_ON_WORKFLOW_RULE_EXECUTE_ON_SUCCESS WORKFLOW_RULE_EXECUTE_ON = 1
	// Execute the rule when the transaction fails
	WORKFLOW_RULE_EXECUTE_ON_WORKFLOW_RULE_EXECUTE_ON_FAILURE WORKFLOW_RULE_EXECUTE_ON = 2
)

// Enum value maps for WORKFLOW_RULE_EXECUTE_ON.
var (
	WORKFLOW_RULE_EXECUTE_ON_name = map[int32]string{
		0: "WORKFLOW_RULE_EXECUTE_ON_ANY_UNSPECIFIED",
		1: "WORKFLOW_RULE_EXECUTE_ON_SUCCESS",
		2: "WORKFLOW_RULE_EXECUTE_ON_FAILURE",
	}
	WORKFLOW_RULE_EXECUTE_ON_value = map[string]int32{
		"WORKFLOW_RULE_EXECUTE_ON_ANY_UNSPECIFIED": 0,
		"WORKFLOW_RULE_EXECUTE_ON_SUCCESS":         1,
		"WORKFLOW_RULE_EXECUTE_ON_FAILURE":         2,
	}
)

func (x WORKFLOW_RULE_EXECUTE_ON) Enum() *WORKFLOW_RULE_EXECUTE_ON {
	p := new(WORKFLOW_RULE_EXECUTE_ON)
	*p = x
	return p
}

func (x WORKFLOW_RULE_EXECUTE_ON) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WORKFLOW_RULE_EXECUTE_ON) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_rules_scailo_proto_enumTypes[2].Descriptor()
}

func (WORKFLOW_RULE_EXECUTE_ON) Type() protoreflect.EnumType {
	return &file_workflows_rules_scailo_proto_enumTypes[2]
}

func (x WORKFLOW_RULE_EXECUTE_ON) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WORKFLOW_RULE_EXECUTE_ON.Descriptor instead.
func (WORKFLOW_RULE_EXECUTE_ON) EnumDescriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{2}
}

// Describes the available sort keys
type WORKFLOW_RULE_SORT_KEY int32

const (
	// Fetch ordered results by id
	WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_ID_UNSPECIFIED WORKFLOW_RULE_SORT_KEY = 0
	// Fetch ordered results by the creation timestamp
	WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_CREATED_AT WORKFLOW_RULE_SORT_KEY = 1
	// Fetch ordered results by the modified timestamp
	WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_MODIFIED_AT WORKFLOW_RULE_SORT_KEY = 2
	// Fetch ordered results by the approved on timestamp
	WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_APPROVED_ON WORKFLOW_RULE_SORT_KEY = 3
	// Fetch ordered results by the approved by field
	WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_APPROVED_BY WORKFLOW_RULE_SORT_KEY = 4
	// Fetch ordered results by the approver's role ID
	WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_APPROVER_ROLE_ID WORKFLOW_RULE_SORT_KEY = 5
	// Fetch ordered results by the approver's completed on timestamp
	WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_COMPLETED_ON WORKFLOW_RULE_SORT_KEY = 6
	// Fetch ordered results by the name
	WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_NAME WORKFLOW_RULE_SORT_KEY = 10
	// Fetch ordered results by the service name
	WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_SERVICE_NAME WORKFLOW_RULE_SORT_KEY = 11
)

// Enum value maps for WORKFLOW_RULE_SORT_KEY.
var (
	WORKFLOW_RULE_SORT_KEY_name = map[int32]string{
		0:  "WORKFLOW_RULE_SORT_KEY_ID_UNSPECIFIED",
		1:  "WORKFLOW_RULE_SORT_KEY_CREATED_AT",
		2:  "WORKFLOW_RULE_SORT_KEY_MODIFIED_AT",
		3:  "WORKFLOW_RULE_SORT_KEY_APPROVED_ON",
		4:  "WORKFLOW_RULE_SORT_KEY_APPROVED_BY",
		5:  "WORKFLOW_RULE_SORT_KEY_APPROVER_ROLE_ID",
		6:  "WORKFLOW_RULE_SORT_KEY_COMPLETED_ON",
		10: "WORKFLOW_RULE_SORT_KEY_NAME",
		11: "WORKFLOW_RULE_SORT_KEY_SERVICE_NAME",
	}
	WORKFLOW_RULE_SORT_KEY_value = map[string]int32{
		"WORKFLOW_RULE_SORT_KEY_ID_UNSPECIFIED":   0,
		"WORKFLOW_RULE_SORT_KEY_CREATED_AT":       1,
		"WORKFLOW_RULE_SORT_KEY_MODIFIED_AT":      2,
		"WORKFLOW_RULE_SORT_KEY_APPROVED_ON":      3,
		"WORKFLOW_RULE_SORT_KEY_APPROVED_BY":      4,
		"WORKFLOW_RULE_SORT_KEY_APPROVER_ROLE_ID": 5,
		"WORKFLOW_RULE_SORT_KEY_COMPLETED_ON":     6,
		"WORKFLOW_RULE_SORT_KEY_NAME":             10,
		"WORKFLOW_RULE_SORT_KEY_SERVICE_NAME":     11,
	}
)

func (x WORKFLOW_RULE_SORT_KEY) Enum() *WORKFLOW_RULE_SORT_KEY {
	p := new(WORKFLOW_RULE_SORT_KEY)
	*p = x
	return p
}

func (x WORKFLOW_RULE_SORT_KEY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WORKFLOW_RULE_SORT_KEY) Descriptor() protoreflect.EnumDescriptor {
	return file_workflows_rules_scailo_proto_enumTypes[3].Descriptor()
}

func (WORKFLOW_RULE_SORT_KEY) Type() protoreflect.EnumType {
	return &file_workflows_rules_scailo_proto_enumTypes[3]
}

func (x WORKFLOW_RULE_SORT_KEY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WORKFLOW_RULE_SORT_KEY.Descriptor instead.
func (WORKFLOW_RULE_SORT_KEY) EnumDescriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{3}
}

// Describes the parameters necessary to create a record
type WorkflowsRulesServiceCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,2,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The associated vault folder ID
	VaultFolderId uint64 `protobuf:"varint,9,opt,name=vault_folder_id,json=vaultFolderId,proto3" json:"vault_folder_id,omitempty"`
	// The name of the workflow rule
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of the user who is to be notified when this rule is triggered. The notification will most likely be in the form of an email.
	NotifyUserId uint64 `protobuf:"varint,12,opt,name=notify_user_id,json=notifyUserId,proto3" json:"notify_user_id,omitempty"`
	// The description of the workflow rule
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// The name of the service for which this rule is applicable for
	ServiceName WORKFLOW_RULE_SERVICE_NAME `protobuf:"varint,20,opt,name=service_name,json=serviceName,proto3,enum=Scailo.WORKFLOW_RULE_SERVICE_NAME" json:"service_name,omitempty"`
	// Stores the status of the record. The rule is triggered when the status is reached.
	RecordStatus STANDARD_LIFECYCLE_STATUS `protobuf:"varint,21,opt,name=record_status,json=recordStatus,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"record_status,omitempty"`
	// Stores the moment at which the rule should be triggered
	Moment WORKFLOW_RULE_MOMENT `protobuf:"varint,22,opt,name=moment,proto3,enum=Scailo.WORKFLOW_RULE_MOMENT" json:"moment,omitempty"`
	// Stores the value for when the rule should be triggered
	ExecuteOn WORKFLOW_RULE_EXECUTE_ON `protobuf:"varint,23,opt,name=execute_on,json=executeOn,proto3,enum=Scailo.WORKFLOW_RULE_EXECUTE_ON" json:"execute_on,omitempty"`
	// Stores any additional static payload that is provided by the user and needs to be relayed in the rule
	UserPayload   []byte `protobuf:"bytes,40,opt,name=user_payload,json=userPayload,proto3" json:"user_payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowsRulesServiceCreateRequest) Reset() {
	*x = WorkflowsRulesServiceCreateRequest{}
	mi := &file_workflows_rules_scailo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowsRulesServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowsRulesServiceCreateRequest) ProtoMessage() {}

func (x *WorkflowsRulesServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_rules_scailo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowsRulesServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*WorkflowsRulesServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{0}
}

func (x *WorkflowsRulesServiceCreateRequest) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *WorkflowsRulesServiceCreateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *WorkflowsRulesServiceCreateRequest) GetVaultFolderId() uint64 {
	if x != nil {
		return x.VaultFolderId
	}
	return 0
}

func (x *WorkflowsRulesServiceCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowsRulesServiceCreateRequest) GetNotifyUserId() uint64 {
	if x != nil {
		return x.NotifyUserId
	}
	return 0
}

func (x *WorkflowsRulesServiceCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkflowsRulesServiceCreateRequest) GetServiceName() WORKFLOW_RULE_SERVICE_NAME {
	if x != nil {
		return x.ServiceName
	}
	return WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceCreateRequest) GetRecordStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.RecordStatus
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceCreateRequest) GetMoment() WORKFLOW_RULE_MOMENT {
	if x != nil {
		return x.Moment
	}
	return WORKFLOW_RULE_MOMENT_WORKFLOW_RULE_MOMENT_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceCreateRequest) GetExecuteOn() WORKFLOW_RULE_EXECUTE_ON {
	if x != nil {
		return x.ExecuteOn
	}
	return WORKFLOW_RULE_EXECUTE_ON_WORKFLOW_RULE_EXECUTE_ON_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceCreateRequest) GetUserPayload() []byte {
	if x != nil {
		return x.UserPayload
	}
	return nil
}

// Describes the parameters necessary to update a record
type WorkflowsRulesServiceUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,1,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The ID of the record that needs to be updated
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
	NotifyUsers bool `protobuf:"varint,3,opt,name=notify_users,json=notifyUsers,proto3" json:"notify_users,omitempty"`
	// The associated vault folder ID
	VaultFolderId uint64 `protobuf:"varint,9,opt,name=vault_folder_id,json=vaultFolderId,proto3" json:"vault_folder_id,omitempty"`
	// The name of the workflow rule
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of the user who is to be notified when this rule is triggered. The notification will most likely be in the form of an email.
	NotifyUserId uint64 `protobuf:"varint,12,opt,name=notify_user_id,json=notifyUserId,proto3" json:"notify_user_id,omitempty"`
	// The description of the workflow rule
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// The name of the service for which this rule is applicable for
	ServiceName WORKFLOW_RULE_SERVICE_NAME `protobuf:"varint,20,opt,name=service_name,json=serviceName,proto3,enum=Scailo.WORKFLOW_RULE_SERVICE_NAME" json:"service_name,omitempty"`
	// Stores the status of the record. The rule is triggered when the status is reached.
	RecordStatus STANDARD_LIFECYCLE_STATUS `protobuf:"varint,21,opt,name=record_status,json=recordStatus,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"record_status,omitempty"`
	// Stores the moment at which the rule should be triggered
	Moment WORKFLOW_RULE_MOMENT `protobuf:"varint,22,opt,name=moment,proto3,enum=Scailo.WORKFLOW_RULE_MOMENT" json:"moment,omitempty"`
	// Stores the value for when the rule should be triggered
	ExecuteOn WORKFLOW_RULE_EXECUTE_ON `protobuf:"varint,23,opt,name=execute_on,json=executeOn,proto3,enum=Scailo.WORKFLOW_RULE_EXECUTE_ON" json:"execute_on,omitempty"`
	// Stores any additional static payload that is provided by the user and needs to be relayed in the rule
	UserPayload   []byte `protobuf:"bytes,40,opt,name=user_payload,json=userPayload,proto3" json:"user_payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowsRulesServiceUpdateRequest) Reset() {
	*x = WorkflowsRulesServiceUpdateRequest{}
	mi := &file_workflows_rules_scailo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowsRulesServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowsRulesServiceUpdateRequest) ProtoMessage() {}

func (x *WorkflowsRulesServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_rules_scailo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowsRulesServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*WorkflowsRulesServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{1}
}

func (x *WorkflowsRulesServiceUpdateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *WorkflowsRulesServiceUpdateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkflowsRulesServiceUpdateRequest) GetNotifyUsers() bool {
	if x != nil {
		return x.NotifyUsers
	}
	return false
}

func (x *WorkflowsRulesServiceUpdateRequest) GetVaultFolderId() uint64 {
	if x != nil {
		return x.VaultFolderId
	}
	return 0
}

func (x *WorkflowsRulesServiceUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowsRulesServiceUpdateRequest) GetNotifyUserId() uint64 {
	if x != nil {
		return x.NotifyUserId
	}
	return 0
}

func (x *WorkflowsRulesServiceUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkflowsRulesServiceUpdateRequest) GetServiceName() WORKFLOW_RULE_SERVICE_NAME {
	if x != nil {
		return x.ServiceName
	}
	return WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceUpdateRequest) GetRecordStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.RecordStatus
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceUpdateRequest) GetMoment() WORKFLOW_RULE_MOMENT {
	if x != nil {
		return x.Moment
	}
	return WORKFLOW_RULE_MOMENT_WORKFLOW_RULE_MOMENT_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceUpdateRequest) GetExecuteOn() WORKFLOW_RULE_EXECUTE_ON {
	if x != nil {
		return x.ExecuteOn
	}
	return WORKFLOW_RULE_EXECUTE_ON_WORKFLOW_RULE_EXECUTE_ON_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceUpdateRequest) GetUserPayload() []byte {
	if x != nil {
		return x.UserPayload
	}
	return nil
}

// Describes the parameters that are part of a standard response
type WorkflowRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores the metadata of this workflow rule
	Metadata *EmployeeMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Stores the approval metadata
	ApprovalMetadata *ApprovalMetadata `protobuf:"bytes,3,opt,name=approval_metadata,json=approvalMetadata,proto3" json:"approval_metadata,omitempty"`
	// The status of this workflow rule
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,4,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// Stores the logs of every operation performed on this workflow rule
	Logs []*LogbookLogConciseSLC `protobuf:"bytes,5,rep,name=logs,proto3" json:"logs,omitempty"`
	// The timestamp of when this workflow rule was marked as completed
	CompletedOn uint64 `protobuf:"varint,6,opt,name=completed_on,json=completedOn,proto3" json:"completed_on,omitempty"`
	// The associated vault folder ID
	VaultFolderId uint64 `protobuf:"varint,9,opt,name=vault_folder_id,json=vaultFolderId,proto3" json:"vault_folder_id,omitempty"`
	// The name of the workflow rule
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The unique autogenerated code of the workflow rule
	Code string `protobuf:"bytes,11,opt,name=code,proto3" json:"code,omitempty"`
	// The ID of the user who is to be notified when this rule is triggered. The notification will most likely be in the form of an email.
	NotifyUserId uint64 `protobuf:"varint,12,opt,name=notify_user_id,json=notifyUserId,proto3" json:"notify_user_id,omitempty"`
	// The description of the workflow rule
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// The name of the service for which this rule is applicable for
	ServiceName WORKFLOW_RULE_SERVICE_NAME `protobuf:"varint,20,opt,name=service_name,json=serviceName,proto3,enum=Scailo.WORKFLOW_RULE_SERVICE_NAME" json:"service_name,omitempty"`
	// Stores the status of the record. The rule is triggered when the status is reached.
	RecordStatus STANDARD_LIFECYCLE_STATUS `protobuf:"varint,21,opt,name=record_status,json=recordStatus,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"record_status,omitempty"`
	// Stores the moment at which the rule should be triggered
	Moment WORKFLOW_RULE_MOMENT `protobuf:"varint,22,opt,name=moment,proto3,enum=Scailo.WORKFLOW_RULE_MOMENT" json:"moment,omitempty"`
	// Stores the value for when the rule should be triggered
	ExecuteOn WORKFLOW_RULE_EXECUTE_ON `protobuf:"varint,23,opt,name=execute_on,json=executeOn,proto3,enum=Scailo.WORKFLOW_RULE_EXECUTE_ON" json:"execute_on,omitempty"`
	// Stores any additional static payload that is provided by the user and needs to be relayed in the rule
	UserPayload   []byte `protobuf:"bytes,40,opt,name=user_payload,json=userPayload,proto3" json:"user_payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowRule) Reset() {
	*x = WorkflowRule{}
	mi := &file_workflows_rules_scailo_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRule) ProtoMessage() {}

func (x *WorkflowRule) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_rules_scailo_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRule.ProtoReflect.Descriptor instead.
func (*WorkflowRule) Descriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowRule) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *WorkflowRule) GetMetadata() *EmployeeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WorkflowRule) GetApprovalMetadata() *ApprovalMetadata {
	if x != nil {
		return x.ApprovalMetadata
	}
	return nil
}

func (x *WorkflowRule) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *WorkflowRule) GetLogs() []*LogbookLogConciseSLC {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *WorkflowRule) GetCompletedOn() uint64 {
	if x != nil {
		return x.CompletedOn
	}
	return 0
}

func (x *WorkflowRule) GetVaultFolderId() uint64 {
	if x != nil {
		return x.VaultFolderId
	}
	return 0
}

func (x *WorkflowRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowRule) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WorkflowRule) GetNotifyUserId() uint64 {
	if x != nil {
		return x.NotifyUserId
	}
	return 0
}

func (x *WorkflowRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkflowRule) GetServiceName() WORKFLOW_RULE_SERVICE_NAME {
	if x != nil {
		return x.ServiceName
	}
	return WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ANY_UNSPECIFIED
}

func (x *WorkflowRule) GetRecordStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.RecordStatus
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *WorkflowRule) GetMoment() WORKFLOW_RULE_MOMENT {
	if x != nil {
		return x.Moment
	}
	return WORKFLOW_RULE_MOMENT_WORKFLOW_RULE_MOMENT_ANY_UNSPECIFIED
}

func (x *WorkflowRule) GetExecuteOn() WORKFLOW_RULE_EXECUTE_ON {
	if x != nil {
		return x.ExecuteOn
	}
	return WORKFLOW_RULE_EXECUTE_ON_WORKFLOW_RULE_EXECUTE_ON_ANY_UNSPECIFIED
}

func (x *WorkflowRule) GetUserPayload() []byte {
	if x != nil {
		return x.UserPayload
	}
	return nil
}

// Describes the message consisting of the list of workflows rules
type WorkflowsRulesList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of records
	List          []*WorkflowRule `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowsRulesList) Reset() {
	*x = WorkflowsRulesList{}
	mi := &file_workflows_rules_scailo_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowsRulesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowsRulesList) ProtoMessage() {}

func (x *WorkflowsRulesList) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_rules_scailo_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowsRulesList.ProtoReflect.Descriptor instead.
func (*WorkflowsRulesList) Descriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{3}
}

func (x *WorkflowsRulesList) GetList() []*WorkflowRule {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes a pagination request to retrieve records
type WorkflowsRulesServicePaginationReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey WORKFLOW_RULE_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.WORKFLOW_RULE_SORT_KEY" json:"sort_key,omitempty"`
	// The status of this workflow rule
	Status        STANDARD_LIFECYCLE_STATUS `protobuf:"varint,6,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowsRulesServicePaginationReq) Reset() {
	*x = WorkflowsRulesServicePaginationReq{}
	mi := &file_workflows_rules_scailo_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowsRulesServicePaginationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowsRulesServicePaginationReq) ProtoMessage() {}

func (x *WorkflowsRulesServicePaginationReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_rules_scailo_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowsRulesServicePaginationReq.ProtoReflect.Descriptor instead.
func (*WorkflowsRulesServicePaginationReq) Descriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{4}
}

func (x *WorkflowsRulesServicePaginationReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServicePaginationReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WorkflowsRulesServicePaginationReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WorkflowsRulesServicePaginationReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *WorkflowsRulesServicePaginationReq) GetSortKey() WORKFLOW_RULE_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_ID_UNSPECIFIED
}

func (x *WorkflowsRulesServicePaginationReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

// Describes the response to a pagination request
type WorkflowsRulesServicePaginationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of records in this payload
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The total number of records that are available
	Total uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// The list of records
	Payload       []*WorkflowRule `protobuf:"bytes,4,rep,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowsRulesServicePaginationResponse) Reset() {
	*x = WorkflowsRulesServicePaginationResponse{}
	mi := &file_workflows_rules_scailo_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowsRulesServicePaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowsRulesServicePaginationResponse) ProtoMessage() {}

func (x *WorkflowsRulesServicePaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_rules_scailo_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowsRulesServicePaginationResponse.ProtoReflect.Descriptor instead.
func (*WorkflowsRulesServicePaginationResponse) Descriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{5}
}

func (x *WorkflowsRulesServicePaginationResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WorkflowsRulesServicePaginationResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WorkflowsRulesServicePaginationResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *WorkflowsRulesServicePaginationResponse) GetPayload() []*WorkflowRule {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Describes the base request payload of a filter search
type WorkflowsRulesServiceFilterReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey WORKFLOW_RULE_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.WORKFLOW_RULE_SORT_KEY" json:"sort_key,omitempty"`
	// The minimum timestamp that needs to be considered to filter by creation
	CreationTimestampStart uint64 `protobuf:"varint,101,opt,name=creation_timestamp_start,json=creationTimestampStart,proto3" json:"creation_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by creation
	CreationTimestampEnd uint64 `protobuf:"varint,102,opt,name=creation_timestamp_end,json=creationTimestampEnd,proto3" json:"creation_timestamp_end,omitempty"`
	// The minimum timestamp that needs to be considered to filter by modification
	ModificationTimestampStart uint64 `protobuf:"varint,103,opt,name=modification_timestamp_start,json=modificationTimestampStart,proto3" json:"modification_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by modification
	ModificationTimestampEnd uint64 `protobuf:"varint,104,opt,name=modification_timestamp_end,json=modificationTimestampEnd,proto3" json:"modification_timestamp_end,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,8,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// The status of this workflow rule
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// The start range of approved timestamp
	ApprovedOnStart uint64 `protobuf:"varint,11,opt,name=approved_on_start,json=approvedOnStart,proto3" json:"approved_on_start,omitempty"`
	// The end range of approved timestamp
	ApprovedOnEnd uint64 `protobuf:"varint,12,opt,name=approved_on_end,json=approvedOnEnd,proto3" json:"approved_on_end,omitempty"`
	// The ID of the approver
	ApprovedByUserId uint64 `protobuf:"varint,13,opt,name=approved_by_user_id,json=approvedByUserId,proto3" json:"approved_by_user_id,omitempty"`
	// The role ID of the approver
	ApproverRoleId uint64 `protobuf:"varint,14,opt,name=approver_role_id,json=approverRoleId,proto3" json:"approver_role_id,omitempty"`
	// The start range of completed timestamp
	CompletedOnStart uint64 `protobuf:"varint,15,opt,name=completed_on_start,json=completedOnStart,proto3" json:"completed_on_start,omitempty"`
	// The end range of completed timestamp
	CompletedOnEnd uint64 `protobuf:"varint,16,opt,name=completed_on_end,json=completedOnEnd,proto3" json:"completed_on_end,omitempty"`
	// The name of the workflow rule
	Name string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// The code of the workflow rule
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The ID of the user who is being notified
	NotifyUserId uint64 `protobuf:"varint,22,opt,name=notify_user_id,json=notifyUserId,proto3" json:"notify_user_id,omitempty"`
	// The name of the service for which this rule is applicable for
	ServiceName WORKFLOW_RULE_SERVICE_NAME `protobuf:"varint,30,opt,name=service_name,json=serviceName,proto3,enum=Scailo.WORKFLOW_RULE_SERVICE_NAME" json:"service_name,omitempty"`
	// Stores the status of the record. The rule is triggered when the status is reached.
	RecordStatus STANDARD_LIFECYCLE_STATUS `protobuf:"varint,31,opt,name=record_status,json=recordStatus,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"record_status,omitempty"`
	// Stores the moment at which the rule should be triggered
	Moment WORKFLOW_RULE_MOMENT `protobuf:"varint,32,opt,name=moment,proto3,enum=Scailo.WORKFLOW_RULE_MOMENT" json:"moment,omitempty"`
	// Stores the value for when the rule should be triggered
	ExecuteOn     WORKFLOW_RULE_EXECUTE_ON `protobuf:"varint,33,opt,name=execute_on,json=executeOn,proto3,enum=Scailo.WORKFLOW_RULE_EXECUTE_ON" json:"execute_on,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowsRulesServiceFilterReq) Reset() {
	*x = WorkflowsRulesServiceFilterReq{}
	mi := &file_workflows_rules_scailo_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowsRulesServiceFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowsRulesServiceFilterReq) ProtoMessage() {}

func (x *WorkflowsRulesServiceFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_rules_scailo_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowsRulesServiceFilterReq.ProtoReflect.Descriptor instead.
func (*WorkflowsRulesServiceFilterReq) Descriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{6}
}

func (x *WorkflowsRulesServiceFilterReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceFilterReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *WorkflowsRulesServiceFilterReq) GetSortKey() WORKFLOW_RULE_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_ID_UNSPECIFIED
}

func (x *WorkflowsRulesServiceFilterReq) GetCreationTimestampStart() uint64 {
	if x != nil {
		return x.CreationTimestampStart
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetCreationTimestampEnd() uint64 {
	if x != nil {
		return x.CreationTimestampEnd
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetModificationTimestampStart() uint64 {
	if x != nil {
		return x.ModificationTimestampStart
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetModificationTimestampEnd() uint64 {
	if x != nil {
		return x.ModificationTimestampEnd
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *WorkflowsRulesServiceFilterReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceFilterReq) GetApprovedOnStart() uint64 {
	if x != nil {
		return x.ApprovedOnStart
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetApprovedOnEnd() uint64 {
	if x != nil {
		return x.ApprovedOnEnd
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetApprovedByUserId() uint64 {
	if x != nil {
		return x.ApprovedByUserId
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetApproverRoleId() uint64 {
	if x != nil {
		return x.ApproverRoleId
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetCompletedOnStart() uint64 {
	if x != nil {
		return x.CompletedOnStart
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetCompletedOnEnd() uint64 {
	if x != nil {
		return x.CompletedOnEnd
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowsRulesServiceFilterReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WorkflowsRulesServiceFilterReq) GetNotifyUserId() uint64 {
	if x != nil {
		return x.NotifyUserId
	}
	return 0
}

func (x *WorkflowsRulesServiceFilterReq) GetServiceName() WORKFLOW_RULE_SERVICE_NAME {
	if x != nil {
		return x.ServiceName
	}
	return WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceFilterReq) GetRecordStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.RecordStatus
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceFilterReq) GetMoment() WORKFLOW_RULE_MOMENT {
	if x != nil {
		return x.Moment
	}
	return WORKFLOW_RULE_MOMENT_WORKFLOW_RULE_MOMENT_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceFilterReq) GetExecuteOn() WORKFLOW_RULE_EXECUTE_ON {
	if x != nil {
		return x.ExecuteOn
	}
	return WORKFLOW_RULE_EXECUTE_ON_WORKFLOW_RULE_EXECUTE_ON_ANY_UNSPECIFIED
}

// Describes the base request payload of a count search
type WorkflowsRulesServiceCountReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The minimum timestamp that needs to be considered to filter by creation
	CreationTimestampStart uint64 `protobuf:"varint,101,opt,name=creation_timestamp_start,json=creationTimestampStart,proto3" json:"creation_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by creation
	CreationTimestampEnd uint64 `protobuf:"varint,102,opt,name=creation_timestamp_end,json=creationTimestampEnd,proto3" json:"creation_timestamp_end,omitempty"`
	// The minimum timestamp that needs to be considered to filter by modification
	ModificationTimestampStart uint64 `protobuf:"varint,103,opt,name=modification_timestamp_start,json=modificationTimestampStart,proto3" json:"modification_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by modification
	ModificationTimestampEnd uint64 `protobuf:"varint,104,opt,name=modification_timestamp_end,json=modificationTimestampEnd,proto3" json:"modification_timestamp_end,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,8,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// The status of this workflow rule
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// The start range of approved timestamp
	ApprovedOnStart uint64 `protobuf:"varint,11,opt,name=approved_on_start,json=approvedOnStart,proto3" json:"approved_on_start,omitempty"`
	// The end range of approved timestamp
	ApprovedOnEnd uint64 `protobuf:"varint,12,opt,name=approved_on_end,json=approvedOnEnd,proto3" json:"approved_on_end,omitempty"`
	// The ID of the approver
	ApprovedByUserId uint64 `protobuf:"varint,13,opt,name=approved_by_user_id,json=approvedByUserId,proto3" json:"approved_by_user_id,omitempty"`
	// The role ID of the approver
	ApproverRoleId uint64 `protobuf:"varint,14,opt,name=approver_role_id,json=approverRoleId,proto3" json:"approver_role_id,omitempty"`
	// The start range of completed timestamp
	CompletedOnStart uint64 `protobuf:"varint,15,opt,name=completed_on_start,json=completedOnStart,proto3" json:"completed_on_start,omitempty"`
	// The end range of completed timestamp
	CompletedOnEnd uint64 `protobuf:"varint,16,opt,name=completed_on_end,json=completedOnEnd,proto3" json:"completed_on_end,omitempty"`
	// The name of the workflow rule
	Name string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// The code of the workflow rule
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The ID of the user who is being notified
	NotifyUserId uint64 `protobuf:"varint,22,opt,name=notify_user_id,json=notifyUserId,proto3" json:"notify_user_id,omitempty"`
	// The name of the service for which this rule is applicable for
	ServiceName WORKFLOW_RULE_SERVICE_NAME `protobuf:"varint,30,opt,name=service_name,json=serviceName,proto3,enum=Scailo.WORKFLOW_RULE_SERVICE_NAME" json:"service_name,omitempty"`
	// Stores the status of the record. The rule is triggered when the status is reached.
	RecordStatus STANDARD_LIFECYCLE_STATUS `protobuf:"varint,31,opt,name=record_status,json=recordStatus,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"record_status,omitempty"`
	// Stores the moment at which the rule should be triggered
	Moment WORKFLOW_RULE_MOMENT `protobuf:"varint,32,opt,name=moment,proto3,enum=Scailo.WORKFLOW_RULE_MOMENT" json:"moment,omitempty"`
	// Stores the value for when the rule should be triggered
	ExecuteOn     WORKFLOW_RULE_EXECUTE_ON `protobuf:"varint,33,opt,name=execute_on,json=executeOn,proto3,enum=Scailo.WORKFLOW_RULE_EXECUTE_ON" json:"execute_on,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowsRulesServiceCountReq) Reset() {
	*x = WorkflowsRulesServiceCountReq{}
	mi := &file_workflows_rules_scailo_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowsRulesServiceCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowsRulesServiceCountReq) ProtoMessage() {}

func (x *WorkflowsRulesServiceCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_rules_scailo_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowsRulesServiceCountReq.ProtoReflect.Descriptor instead.
func (*WorkflowsRulesServiceCountReq) Descriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{7}
}

func (x *WorkflowsRulesServiceCountReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceCountReq) GetCreationTimestampStart() uint64 {
	if x != nil {
		return x.CreationTimestampStart
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetCreationTimestampEnd() uint64 {
	if x != nil {
		return x.CreationTimestampEnd
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetModificationTimestampStart() uint64 {
	if x != nil {
		return x.ModificationTimestampStart
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetModificationTimestampEnd() uint64 {
	if x != nil {
		return x.ModificationTimestampEnd
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *WorkflowsRulesServiceCountReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceCountReq) GetApprovedOnStart() uint64 {
	if x != nil {
		return x.ApprovedOnStart
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetApprovedOnEnd() uint64 {
	if x != nil {
		return x.ApprovedOnEnd
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetApprovedByUserId() uint64 {
	if x != nil {
		return x.ApprovedByUserId
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetApproverRoleId() uint64 {
	if x != nil {
		return x.ApproverRoleId
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetCompletedOnStart() uint64 {
	if x != nil {
		return x.CompletedOnStart
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetCompletedOnEnd() uint64 {
	if x != nil {
		return x.CompletedOnEnd
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowsRulesServiceCountReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WorkflowsRulesServiceCountReq) GetNotifyUserId() uint64 {
	if x != nil {
		return x.NotifyUserId
	}
	return 0
}

func (x *WorkflowsRulesServiceCountReq) GetServiceName() WORKFLOW_RULE_SERVICE_NAME {
	if x != nil {
		return x.ServiceName
	}
	return WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceCountReq) GetRecordStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.RecordStatus
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceCountReq) GetMoment() WORKFLOW_RULE_MOMENT {
	if x != nil {
		return x.Moment
	}
	return WORKFLOW_RULE_MOMENT_WORKFLOW_RULE_MOMENT_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceCountReq) GetExecuteOn() WORKFLOW_RULE_EXECUTE_ON {
	if x != nil {
		return x.ExecuteOn
	}
	return WORKFLOW_RULE_EXECUTE_ON_WORKFLOW_RULE_EXECUTE_ON_ANY_UNSPECIFIED
}

// Describes the request payload for performing a generic search operation on records
type WorkflowsRulesServiceSearchAllReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey WORKFLOW_RULE_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.WORKFLOW_RULE_SORT_KEY" json:"sort_key,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,6,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Limit the search space to the given status
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// Describes the key with which the search operation needs to be performed
	SearchKey     string `protobuf:"bytes,11,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowsRulesServiceSearchAllReq) Reset() {
	*x = WorkflowsRulesServiceSearchAllReq{}
	mi := &file_workflows_rules_scailo_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowsRulesServiceSearchAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowsRulesServiceSearchAllReq) ProtoMessage() {}

func (x *WorkflowsRulesServiceSearchAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_rules_scailo_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowsRulesServiceSearchAllReq.ProtoReflect.Descriptor instead.
func (*WorkflowsRulesServiceSearchAllReq) Descriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{8}
}

func (x *WorkflowsRulesServiceSearchAllReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceSearchAllReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WorkflowsRulesServiceSearchAllReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WorkflowsRulesServiceSearchAllReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *WorkflowsRulesServiceSearchAllReq) GetSortKey() WORKFLOW_RULE_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return WORKFLOW_RULE_SORT_KEY_WORKFLOW_RULE_SORT_KEY_ID_UNSPECIFIED
}

func (x *WorkflowsRulesServiceSearchAllReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *WorkflowsRulesServiceSearchAllReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *WorkflowsRulesServiceSearchAllReq) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

// Describes the request payload that is sent to Redis whenever an event occurs
type WorkflowEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the trigger that could be used to update the status of the trigger
	EventId uint64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The code of the workflow rule
	RuleCode string `protobuf:"bytes,2,opt,name=rule_code,json=ruleCode,proto3" json:"rule_code,omitempty"`
	// The name of the service for which this rule is applicable for
	ServiceName WORKFLOW_RULE_SERVICE_NAME `protobuf:"varint,10,opt,name=service_name,json=serviceName,proto3,enum=Scailo.WORKFLOW_RULE_SERVICE_NAME" json:"service_name,omitempty"`
	// The status of the transaction
	TransactionStatus WORKFLOW_RULE_EXECUTE_ON `protobuf:"varint,20,opt,name=transaction_status,json=transactionStatus,proto3,enum=Scailo.WORKFLOW_RULE_EXECUTE_ON" json:"transaction_status,omitempty"`
	// The payload of the transaction that just took place (could be sales order, etc.)
	TransactionPayload []byte `protobuf:"bytes,30,opt,name=transaction_payload,json=transactionPayload,proto3" json:"transaction_payload,omitempty"`
	// The configured static user payload of the workflow rule
	UserPayload []byte `protobuf:"bytes,40,opt,name=user_payload,json=userPayload,proto3" json:"user_payload,omitempty"`
	// The username of the user who triggered the workflow
	Username      string `protobuf:"bytes,50,opt,name=username,proto3" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowEvent) Reset() {
	*x = WorkflowEvent{}
	mi := &file_workflows_rules_scailo_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowEvent) ProtoMessage() {}

func (x *WorkflowEvent) ProtoReflect() protoreflect.Message {
	mi := &file_workflows_rules_scailo_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowEvent.ProtoReflect.Descriptor instead.
func (*WorkflowEvent) Descriptor() ([]byte, []int) {
	return file_workflows_rules_scailo_proto_rawDescGZIP(), []int{9}
}

func (x *WorkflowEvent) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *WorkflowEvent) GetRuleCode() string {
	if x != nil {
		return x.RuleCode
	}
	return ""
}

func (x *WorkflowEvent) GetServiceName() WORKFLOW_RULE_SERVICE_NAME {
	if x != nil {
		return x.ServiceName
	}
	return WORKFLOW_RULE_SERVICE_NAME_WORKFLOW_RULE_SERVICE_NAME_ANY_UNSPECIFIED
}

func (x *WorkflowEvent) GetTransactionStatus() WORKFLOW_RULE_EXECUTE_ON {
	if x != nil {
		return x.TransactionStatus
	}
	return WORKFLOW_RULE_EXECUTE_ON_WORKFLOW_RULE_EXECUTE_ON_ANY_UNSPECIFIED
}

func (x *WorkflowEvent) GetTransactionPayload() []byte {
	if x != nil {
		return x.TransactionPayload
	}
	return nil
}

func (x *WorkflowEvent) GetUserPayload() []byte {
	if x != nil {
		return x.UserPayload
	}
	return nil
}

func (x *WorkflowEvent) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

var File_workflows_rules_scailo_proto protoreflect.FileDescriptor

const file_workflows_rules_scailo_proto_rawDesc = "" +
	"\n" +
	"\x1cworkflows_rules.scailo.proto\x12\x06Scailo\x1a\x11base.scailo.proto\x1a\x1bbuf/validate/validate.proto\"\xb9\x04\n" +
	"\"WorkflowsRulesServiceCreateRequest\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x12!\n" +
	"\fuser_comment\x18\x02 \x01(\tR\vuserComment\x12/\n" +
	"\x0fvault_folder_id\x18\t \x01(\x04B\a\xbaH\x042\x02(\x00R\rvaultFolderId\x12\x1b\n" +
	"\x04name\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12-\n" +
	"\x0enotify_user_id\x18\f \x01(\x04B\a\xbaH\x042\x02(\x00R\fnotifyUserId\x12)\n" +
	"\vdescription\x18\r \x01(\tB\a\xbaH\x04r\x02\x10\x01R\vdescription\x12E\n" +
	"\fservice_name\x18\x14 \x01(\x0e2\".Scailo.WORKFLOW_RULE_SERVICE_NAMER\vserviceName\x12F\n" +
	"\rrecord_status\x18\x15 \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\frecordStatus\x124\n" +
	"\x06moment\x18\x16 \x01(\x0e2\x1c.Scailo.WORKFLOW_RULE_MOMENTR\x06moment\x12?\n" +
	"\n" +
	"execute_on\x18\x17 \x01(\x0e2 .Scailo.WORKFLOW_RULE_EXECUTE_ONR\texecuteOn\x12!\n" +
	"\fuser_payload\x18( \x01(\fR\vuserPayload\"\xd4\x04\n" +
	"\"WorkflowsRulesServiceUpdateRequest\x12!\n" +
	"\fuser_comment\x18\x01 \x01(\tR\vuserComment\x12\x17\n" +
	"\x02id\x18\x02 \x01(\x04B\a\xbaH\x042\x02 \x00R\x02id\x12!\n" +
	"\fnotify_users\x18\x03 \x01(\bR\vnotifyUsers\x12/\n" +
	"\x0fvault_folder_id\x18\t \x01(\x04B\a\xbaH\x042\x02(\x00R\rvaultFolderId\x12\x1b\n" +
	"\x04name\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12-\n" +
	"\x0enotify_user_id\x18\f \x01(\x04B\a\xbaH\x042\x02(\x00R\fnotifyUserId\x12)\n" +
	"\vdescription\x18\r \x01(\tB\a\xbaH\x04r\x02\x10\x01R\vdescription\x12E\n" +
	"\fservice_name\x18\x14 \x01(\x0e2\".Scailo.WORKFLOW_RULE_SERVICE_NAMER\vserviceName\x12F\n" +
	"\rrecord_status\x18\x15 \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\frecordStatus\x124\n" +
	"\x06moment\x18\x16 \x01(\x0e2\x1c.Scailo.WORKFLOW_RULE_MOMENTR\x06moment\x12?\n" +
	"\n" +
	"execute_on\x18\x17 \x01(\x0e2 .Scailo.WORKFLOW_RULE_EXECUTE_ONR\texecuteOn\x12!\n" +
	"\fuser_payload\x18( \x01(\fR\vuserPayload\"\xfd\x05\n" +
	"\fWorkflowRule\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x124\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.Scailo.EmployeeMetadataR\bmetadata\x12E\n" +
	"\x11approval_metadata\x18\x03 \x01(\v2\x18.Scailo.ApprovalMetadataR\x10approvalMetadata\x129\n" +
	"\x06status\x18\x04 \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x120\n" +
	"\x04logs\x18\x05 \x03(\v2\x1c.Scailo.LogbookLogConciseSLCR\x04logs\x12!\n" +
	"\fcompleted_on\x18\x06 \x01(\x04R\vcompletedOn\x12&\n" +
	"\x0fvault_folder_id\x18\t \x01(\x04R\rvaultFolderId\x12\x12\n" +
	"\x04name\x18\n" +
	" \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\v \x01(\tR\x04code\x12$\n" +
	"\x0enotify_user_id\x18\f \x01(\x04R\fnotifyUserId\x12 \n" +
	"\vdescription\x18\r \x01(\tR\vdescription\x12E\n" +
	"\fservice_name\x18\x14 \x01(\x0e2\".Scailo.WORKFLOW_RULE_SERVICE_NAMER\vserviceName\x12F\n" +
	"\rrecord_status\x18\x15 \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\frecordStatus\x124\n" +
	"\x06moment\x18\x16 \x01(\x0e2\x1c.Scailo.WORKFLOW_RULE_MOMENTR\x06moment\x12?\n" +
	"\n" +
	"execute_on\x18\x17 \x01(\x0e2 .Scailo.WORKFLOW_RULE_EXECUTE_ONR\texecuteOn\x12!\n" +
	"\fuser_payload\x18( \x01(\fR\vuserPayload\">\n" +
	"\x12WorkflowsRulesList\x12(\n" +
	"\x04list\x18\x01 \x03(\v2\x14.Scailo.WorkflowRuleR\x04list\"\xbf\x02\n" +
	"\"WorkflowsRulesServicePaginationReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12\x1d\n" +
	"\x05count\x18\x02 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x129\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1e.Scailo.WORKFLOW_RULE_SORT_KEYR\asortKey\x129\n" +
	"\x06status\x18\x06 \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\"\x9d\x01\n" +
	"'WorkflowsRulesServicePaginationResponse\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x04R\x05count\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x04R\x06offset\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x04R\x05total\x12.\n" +
	"\apayload\x18\x04 \x03(\v2\x14.Scailo.WorkflowRuleR\apayload\"\xae\t\n" +
	"\x1eWorkflowsRulesServiceFilterReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12&\n" +
	"\x05count\x18\x02 \x01(\x03B\x10\xbaH\r\"\v(\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x129\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1e.Scailo.WORKFLOW_RULE_SORT_KEYR\asortKey\x128\n" +
	"\x18creation_timestamp_start\x18e \x01(\x04R\x16creationTimestampStart\x124\n" +
	"\x16creation_timestamp_end\x18f \x01(\x04R\x14creationTimestampEnd\x12@\n" +
	"\x1cmodification_timestamp_start\x18g \x01(\x04R\x1amodificationTimestampStart\x12<\n" +
	"\x1amodification_timestamp_end\x18h \x01(\x04R\x18modificationTimestampEnd\x12\x1f\n" +
	"\ventity_uuid\x18\b \x01(\tR\n" +
	"entityUuid\x129\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x12*\n" +
	"\x11approved_on_start\x18\v \x01(\x04R\x0fapprovedOnStart\x12&\n" +
	"\x0fapproved_on_end\x18\f \x01(\x04R\rapprovedOnEnd\x12-\n" +
	"\x13approved_by_user_id\x18\r \x01(\x04R\x10approvedByUserId\x12(\n" +
	"\x10approver_role_id\x18\x0e \x01(\x04R\x0eapproverRoleId\x12,\n" +
	"\x12completed_on_start\x18\x0f \x01(\x04R\x10completedOnStart\x12(\n" +
	"\x10completed_on_end\x18\x10 \x01(\x04R\x0ecompletedOnEnd\x12\x12\n" +
	"\x04name\x18\x14 \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\x15 \x01(\tR\x04code\x12$\n" +
	"\x0enotify_user_id\x18\x16 \x01(\x04R\fnotifyUserId\x12E\n" +
	"\fservice_name\x18\x1e \x01(\x0e2\".Scailo.WORKFLOW_RULE_SERVICE_NAMER\vserviceName\x12F\n" +
	"\rrecord_status\x18\x1f \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\frecordStatus\x124\n" +
	"\x06moment\x18  \x01(\x0e2\x1c.Scailo.WORKFLOW_RULE_MOMENTR\x06moment\x12?\n" +
	"\n" +
	"execute_on\x18! \x01(\x0e2 .Scailo.WORKFLOW_RULE_EXECUTE_ONR\texecuteOn\"\xf6\a\n" +
	"\x1dWorkflowsRulesServiceCountReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x128\n" +
	"\x18creation_timestamp_start\x18e \x01(\x04R\x16creationTimestampStart\x124\n" +
	"\x16creation_timestamp_end\x18f \x01(\x04R\x14creationTimestampEnd\x12@\n" +
	"\x1cmodification_timestamp_start\x18g \x01(\x04R\x1amodificationTimestampStart\x12<\n" +
	"\x1amodification_timestamp_end\x18h \x01(\x04R\x18modificationTimestampEnd\x12\x1f\n" +
	"\ventity_uuid\x18\b \x01(\tR\n" +
	"entityUuid\x129\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x12*\n" +
	"\x11approved_on_start\x18\v \x01(\x04R\x0fapprovedOnStart\x12&\n" +
	"\x0fapproved_on_end\x18\f \x01(\x04R\rapprovedOnEnd\x12-\n" +
	"\x13approved_by_user_id\x18\r \x01(\x04R\x10approvedByUserId\x12(\n" +
	"\x10approver_role_id\x18\x0e \x01(\x04R\x0eapproverRoleId\x12,\n" +
	"\x12completed_on_start\x18\x0f \x01(\x04R\x10completedOnStart\x12(\n" +
	"\x10completed_on_end\x18\x10 \x01(\x04R\x0ecompletedOnEnd\x12\x12\n" +
	"\x04name\x18\x14 \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\x15 \x01(\tR\x04code\x12$\n" +
	"\x0enotify_user_id\x18\x16 \x01(\x04R\fnotifyUserId\x12E\n" +
	"\fservice_name\x18\x1e \x01(\x0e2\".Scailo.WORKFLOW_RULE_SERVICE_NAMER\vserviceName\x12F\n" +
	"\rrecord_status\x18\x1f \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\frecordStatus\x124\n" +
	"\x06moment\x18  \x01(\x0e2\x1c.Scailo.WORKFLOW_RULE_MOMENTR\x06moment\x12?\n" +
	"\n" +
	"execute_on\x18! \x01(\x0e2 .Scailo.WORKFLOW_RULE_EXECUTE_ONR\texecuteOn\"\x87\x03\n" +
	"!WorkflowsRulesServiceSearchAllReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12&\n" +
	"\x05count\x18\x02 \x01(\x03B\x10\xbaH\r\"\v(\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x129\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1e.Scailo.WORKFLOW_RULE_SORT_KEYR\asortKey\x12\x1f\n" +
	"\ventity_uuid\x18\x06 \x01(\tR\n" +
	"entityUuid\x129\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x12\x1d\n" +
	"\n" +
	"search_key\x18\v \x01(\tR\tsearchKey\"\xcf\x02\n" +
	"\rWorkflowEvent\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\x04R\aeventId\x12\x1b\n" +
	"\trule_code\x18\x02 \x01(\tR\bruleCode\x12E\n" +
	"\fservice_name\x18\n" +
	" \x01(\x0e2\".Scailo.WORKFLOW_RULE_SERVICE_NAMER\vserviceName\x12O\n" +
	"\x12transaction_status\x18\x14 \x01(\x0e2 .Scailo.WORKFLOW_RULE_EXECUTE_ONR\x11transactionStatus\x12/\n" +
	"\x13transaction_payload\x18\x1e \x01(\fR\x12transactionPayload\x12!\n" +
	"\fuser_payload\x18( \x01(\fR\vuserPayload\x12\x1a\n" +
	"\busername\x182 \x01(\tR\busername*\xba\x1d\n" +
	"\x1aWORKFLOW_RULE_SERVICE_NAME\x12.\n" +
	"*WORKFLOW_RULE_SERVICE_NAME_ANY_UNSPECIFIED\x10\x00\x12'\n" +
	"#WORKFLOW_RULE_SERVICE_NAME_ABSENCES\x10\n" +
	"\x12,\n" +
	"(WORKFLOW_RULE_SERVICE_NAME_ACTIONS_CODES\x10\x14\x120\n" +
	",WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_GROUPS\x10\x1e\x122\n" +
	".WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_STATUSES\x10(\x12.\n" +
	"*WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES_TAGS\x102\x12)\n" +
	"%WORKFLOW_RULE_SERVICE_NAME_ACTIVITIES\x10<\x12,\n" +
	"(WORKFLOW_RULE_SERVICE_NAME_ANNOUNCEMENTS\x10F\x12,\n" +
	"(WORKFLOW_RULE_SERVICE_NAME_ASSET_INDENTS\x10P\x12)\n" +
	"%WORKFLOW_RULE_SERVICE_NAME_ASSOCIATES\x10Z\x125\n" +
	"1WORKFLOW_RULE_SERVICE_NAME_ATTENDANCES_AMENDMENTS\x10d\x12*\n" +
	"&WORKFLOW_RULE_SERVICE_NAME_ATTENDANCES\x10n\x12-\n" +
	"(WORKFLOW_RULE_SERVICE_NAME_BANK_ACCOUNTS\x10\xc8\x01\x12'\n" +
	"\"WORKFLOW_RULE_SERVICE_NAME_CLIENTS\x10\xac\x02\x12*\n" +
	"%WORKFLOW_RULE_SERVICE_NAME_COMPONENTS\x10\xb6\x02\x12,\n" +
	"'WORKFLOW_RULE_SERVICE_NAME_CREDIT_NOTES\x10\xc0\x02\x12*\n" +
	"%WORKFLOW_RULE_SERVICE_NAME_CURRENCIES\x10\xca\x02\x12+\n" +
	"&WORKFLOW_RULE_SERVICE_NAME_DEBIT_NOTES\x10\xa0\x1f\x12+\n" +
	"&WORKFLOW_RULE_SERVICE_NAME_DEPARTMENTS\x10\x9a\x03\x122\n" +
	"-WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_FAMILIES\x10\xf4\x03\x126\n" +
	"1WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_REPLACEABLES\x10\xfe\x03\x127\n" +
	"2WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_SALES_BUNDLES\x10\x88\x04\x125\n" +
	"0WORKFLOW_RULE_SERVICE_NAME_EQUATIONS_WORK_ORDERS\x10\x92\x04\x12*\n" +
	"%WORKFLOW_RULE_SERVICE_NAME_EQUIPMENTS\x10\x9c\x04\x12(\n" +
	"#WORKFLOW_RULE_SERVICE_NAME_EXPENSES\x10\xa6\x04\x12(\n" +
	"#WORKFLOW_RULE_SERVICE_NAME_FAMILIES\x10\xd8\x04\x12*\n" +
	"%WORKFLOW_RULE_SERVICE_NAME_FEEDSTOCKS\x10\xe2\x04\x12%\n" +
	" WORKFLOW_RULE_SERVICE_NAME_GOALS\x10\xbc\x05\x120\n" +
	"+WORKFLOW_RULE_SERVICE_NAME_GOODS_DISPATCHES\x10\xc6\x05\x12.\n" +
	")WORKFLOW_RULE_SERVICE_NAME_GOODS_RECEIPTS\x10\xd0\x05\x12(\n" +
	"#WORKFLOW_RULE_SERVICE_NAME_HOLIDAYS\x10\xa0\x06\x12/\n" +
	"*WORKFLOW_RULE_SERVICE_NAME_INFRASTRUCTURES\x10\x84\a\x12)\n" +
	"$WORKFLOW_RULE_SERVICE_NAME_INVENTORY\x10\x8e\a\x12H\n" +
	"CWORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS_FREE_ISSUE_MATERIALS_RETURNS\x10\xe8\a\x12@\n" +
	";WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS_FREE_ISSUE_MATERIALS\x10\xf2\a\x12+\n" +
	"&WORKFLOW_RULE_SERVICE_NAME_INWARD_JOBS\x10\xfc\a\x122\n" +
	"-WORKFLOW_RULE_SERVICE_NAME_LEAVES_ADJUSTMENTS\x10\xcc\b\x12/\n" +
	"*WORKFLOW_RULE_SERVICE_NAME_LEAVES_REQUESTS\x10\xd6\b\x12(\n" +
	"#WORKFLOW_RULE_SERVICE_NAME_MEETINGS\x10\xb0\t\x12,\n" +
	"'WORKFLOW_RULE_SERVICE_NAME_MERCHANDISES\x10\xba\t\x12%\n" +
	" WORKFLOW_RULE_SERVICE_NAME_NOTES\x10\x94\n" +
	"\x12)\n" +
	"$WORKFLOW_RULE_SERVICE_NAME_ON_DUTIES\x10\xf8\n" +
	"\x12I\n" +
	"DWORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS_FREE_ISSUE_MATERIALS_RETURNS\x10\x82\v\x12A\n" +
	"<WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS_FREE_ISSUE_MATERIALS\x10\x8c\v\x12,\n" +
	"'WORKFLOW_RULE_SERVICE_NAME_OUTWARD_JOBS\x10\x96\v\x12)\n" +
	"$WORKFLOW_RULE_SERVICE_NAME_OVERTIMES\x10\xa0\v\x122\n" +
	"-WORKFLOW_RULE_SERVICE_NAME_PRODUCTION_INDENTS\x10\xdc\v\x120\n" +
	"+WORKFLOW_RULE_SERVICE_NAME_PRODUCTION_PLANS\x10\xe6\v\x12(\n" +
	"#WORKFLOW_RULE_SERVICE_NAME_PRODUCTS\x10\xf0\v\x12(\n" +
	"#WORKFLOW_RULE_SERVICE_NAME_PROJECTS\x10\xfa\v\x123\n" +
	".WORKFLOW_RULE_SERVICE_NAME_PURCHASES_ENQUIRIES\x10\x84\f\x121\n" +
	",WORKFLOW_RULE_SERVICE_NAME_PURCHASES_INDENTS\x10\x8e\f\x120\n" +
	"+WORKFLOW_RULE_SERVICE_NAME_PURCHASES_ORDERS\x10\x98\f\x12-\n" +
	"(WORKFLOW_RULE_SERVICE_NAME_SUPPLY_OFFERS\x10\x9d\f\x122\n" +
	"-WORKFLOW_RULE_SERVICE_NAME_PURCHASES_PAYMENTS\x10\xa2\f\x121\n" +
	",WORKFLOW_RULE_SERVICE_NAME_PURCHASES_RETURNS\x10\xac\f\x12)\n" +
	"$WORKFLOW_RULE_SERVICE_NAME_QC_GROUPS\x10\xc0\f\x12*\n" +
	"%WORKFLOW_RULE_SERVICE_NAME_QC_SAMPLES\x10\xca\f\x123\n" +
	".WORKFLOW_RULE_SERVICE_NAME_QUOTATIONS_REQUESTS\x10\xd4\f\x124\n" +
	"/WORKFLOW_RULE_SERVICE_NAME_QUOTATIONS_RESPONSES\x10\xde\f\x123\n" +
	".WORKFLOW_RULE_SERVICE_NAME_REPLACEABLE_INDENTS\x10\xa4\r\x12%\n" +
	" WORKFLOW_RULE_SERVICE_NAME_ROLES\x10\xae\r\x12(\n" +
	"#WORKFLOW_RULE_SERVICE_NAME_SALARIES\x10\x88\x0e\x12/\n" +
	"*WORKFLOW_RULE_SERVICE_NAME_SALES_ENQUIRIES\x10\x92\x0e\x12.\n" +
	")WORKFLOW_RULE_SERVICE_NAME_SALES_INVOICES\x10\x9c\x0e\x121\n" +
	",WORKFLOW_RULE_SERVICE_NAME_PROFORMA_INVOICES\x10\xa1\x0e\x12,\n" +
	"'WORKFLOW_RULE_SERVICE_NAME_SALES_ORDERS\x10\xa6\x0e\x120\n" +
	"+WORKFLOW_RULE_SERVICE_NAME_SALES_QUOTATIONS\x10\xb0\x0e\x12.\n" +
	")WORKFLOW_RULE_SERVICE_NAME_SALES_RECEIPTS\x10\xba\x0e\x12-\n" +
	"(WORKFLOW_RULE_SERVICE_NAME_SALES_RETURNS\x10\xc4\x0e\x12,\n" +
	"'WORKFLOW_RULE_SERVICE_NAME_STOCK_AUDITS\x10\xce\x0e\x12/\n" +
	"*WORKFLOW_RULE_SERVICE_NAME_STOCK_ISSUANCES\x10\xd8\x0e\x12-\n" +
	"(WORKFLOW_RULE_SERVICE_NAME_STOCK_RETURNS\x10\xe2\x0e\x12%\n" +
	" WORKFLOW_RULE_SERVICE_NAME_USERS\x10\xec\x0e\x12/\n" +
	"*WORKFLOW_RULE_SERVICE_NAME_VENDOR_INVOICES\x10\xd0\x0f\x12'\n" +
	"\"WORKFLOW_RULE_SERVICE_NAME_VENDORS\x10\xda\x0f\x12+\n" +
	"&WORKFLOW_RULE_SERVICE_NAME_VISITATIONS\x10\xe4\x0f\x12+\n" +
	"&WORKFLOW_RULE_SERVICE_NAME_WORK_ORDERS\x10\xb4\x10*~\n" +
	"\x14WORKFLOW_RULE_MOMENT\x12(\n" +
	"$WORKFLOW_RULE_MOMENT_ANY_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aWORKFLOW_RULE_MOMENT_BEGIN\x10\x01\x12\x1c\n" +
	"\x18WORKFLOW_RULE_MOMENT_END\x10\x02*\x94\x01\n" +
	"\x18WORKFLOW_RULE_EXECUTE_ON\x12,\n" +
	"(WORKFLOW_RULE_EXECUTE_ON_ANY_UNSPECIFIED\x10\x00\x12$\n" +
	" WORKFLOW_RULE_EXECUTE_ON_SUCCESS\x10\x01\x12$\n" +
	" WORKFLOW_RULE_EXECUTE_ON_FAILURE\x10\x02*\x82\x03\n" +
	"\x16WORKFLOW_RULE_SORT_KEY\x12)\n" +
	"%WORKFLOW_RULE_SORT_KEY_ID_UNSPECIFIED\x10\x00\x12%\n" +
	"!WORKFLOW_RULE_SORT_KEY_CREATED_AT\x10\x01\x12&\n" +
	"\"WORKFLOW_RULE_SORT_KEY_MODIFIED_AT\x10\x02\x12&\n" +
	"\"WORKFLOW_RULE_SORT_KEY_APPROVED_ON\x10\x03\x12&\n" +
	"\"WORKFLOW_RULE_SORT_KEY_APPROVED_BY\x10\x04\x12+\n" +
	"'WORKFLOW_RULE_SORT_KEY_APPROVER_ROLE_ID\x10\x05\x12'\n" +
	"#WORKFLOW_RULE_SORT_KEY_COMPLETED_ON\x10\x06\x12\x1f\n" +
	"\x1bWORKFLOW_RULE_SORT_KEY_NAME\x10\n" +
	"\x12'\n" +
	"#WORKFLOW_RULE_SORT_KEY_SERVICE_NAME\x10\v2\xf7\x0e\n" +
	"\x15WorkflowsRulesService\x12P\n" +
	"\x06Create\x12*.Scailo.WorkflowsRulesServiceCreateRequest\x1a\x1a.Scailo.IdentifierResponse\x12O\n" +
	"\x05Draft\x12*.Scailo.WorkflowsRulesServiceCreateRequest\x1a\x1a.Scailo.IdentifierResponse\x12U\n" +
	"\vDraftUpdate\x12*.Scailo.WorkflowsRulesServiceUpdateRequest\x1a\x1a.Scailo.IdentifierResponse\x12X\n" +
	"\x13SendForVerification\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12K\n" +
	"\x06Verify\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12L\n" +
	"\aApprove\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12T\n" +
	"\x0fSendForRevision\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12X\n" +
	"\x0eRevisionUpdate\x12*.Scailo.WorkflowsRulesServiceUpdateRequest\x1a\x1a.Scailo.IdentifierResponse\x12I\n" +
	"\x04Halt\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12L\n" +
	"\aDiscard\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12L\n" +
	"\aRestore\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12M\n" +
	"\bComplete\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12K\n" +
	"\x06Repeat\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12K\n" +
	"\x06Reopen\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12O\n" +
	"\n" +
	"CommentAdd\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x124\n" +
	"\bViewByID\x12\x12.Scailo.Identifier\x1a\x14.Scailo.WorkflowRule\x12:\n" +
	"\n" +
	"ViewByUUID\x12\x16.Scailo.IdentifierUUID\x1a\x14.Scailo.WorkflowRule\x12;\n" +
	"\aViewAll\x12\x14.Scailo.ActiveStatus\x1a\x1a.Scailo.WorkflowsRulesList\x12J\n" +
	"\x14ViewAllForEntityUUID\x12\x16.Scailo.IdentifierUUID\x1a\x1a.Scailo.WorkflowsRulesList\x12q\n" +
	"\x12ViewWithPagination\x12*.Scailo.WorkflowsRulesServicePaginationReq\x1a/.Scailo.WorkflowsRulesServicePaginationResponse\x12R\n" +
	"\tSearchAll\x12).Scailo.WorkflowsRulesServiceSearchAllReq\x1a\x1a.Scailo.WorkflowsRulesList\x12L\n" +
	"\x06Filter\x12&.Scailo.WorkflowsRulesServiceFilterReq\x1a\x1a.Scailo.WorkflowsRulesList\x12G\n" +
	"\rCountInStatus\x12\x1f.Scailo.CountInSLCStatusRequest\x1a\x15.Scailo.CountResponse\x12E\n" +
	"\x05Count\x12%.Scailo.WorkflowsRulesServiceCountReq\x1a\x15.Scailo.CountResponseBk\n" +
	"\n" +
	"com.ScailoB\x19WorkflowsRulesScailoProtoP\x01Z\n" +
	"Scailo/sdk\xa2\x02\x03SXX\xaa\x02\x06Scailo\xca\x02\x06Scailo\xe2\x02\x12Scailo\\GPBMetadata\xea\x02\x06Scailob\x06proto3"

var (
	file_workflows_rules_scailo_proto_rawDescOnce sync.Once
	file_workflows_rules_scailo_proto_rawDescData []byte
)

func file_workflows_rules_scailo_proto_rawDescGZIP() []byte {
	file_workflows_rules_scailo_proto_rawDescOnce.Do(func() {
		file_workflows_rules_scailo_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_workflows_rules_scailo_proto_rawDesc), len(file_workflows_rules_scailo_proto_rawDesc)))
	})
	return file_workflows_rules_scailo_proto_rawDescData
}

var file_workflows_rules_scailo_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_workflows_rules_scailo_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_workflows_rules_scailo_proto_goTypes = []any{
	(WORKFLOW_RULE_SERVICE_NAME)(0),                 // 0: Scailo.WORKFLOW_RULE_SERVICE_NAME
	(WORKFLOW_RULE_MOMENT)(0),                       // 1: Scailo.WORKFLOW_RULE_MOMENT
	(WORKFLOW_RULE_EXECUTE_ON)(0),                   // 2: Scailo.WORKFLOW_RULE_EXECUTE_ON
	(WORKFLOW_RULE_SORT_KEY)(0),                     // 3: Scailo.WORKFLOW_RULE_SORT_KEY
	(*WorkflowsRulesServiceCreateRequest)(nil),      // 4: Scailo.WorkflowsRulesServiceCreateRequest
	(*WorkflowsRulesServiceUpdateRequest)(nil),      // 5: Scailo.WorkflowsRulesServiceUpdateRequest
	(*WorkflowRule)(nil),                            // 6: Scailo.WorkflowRule
	(*WorkflowsRulesList)(nil),                      // 7: Scailo.WorkflowsRulesList
	(*WorkflowsRulesServicePaginationReq)(nil),      // 8: Scailo.WorkflowsRulesServicePaginationReq
	(*WorkflowsRulesServicePaginationResponse)(nil), // 9: Scailo.WorkflowsRulesServicePaginationResponse
	(*WorkflowsRulesServiceFilterReq)(nil),          // 10: Scailo.WorkflowsRulesServiceFilterReq
	(*WorkflowsRulesServiceCountReq)(nil),           // 11: Scailo.WorkflowsRulesServiceCountReq
	(*WorkflowsRulesServiceSearchAllReq)(nil),       // 12: Scailo.WorkflowsRulesServiceSearchAllReq
	(*WorkflowEvent)(nil),                           // 13: Scailo.WorkflowEvent
	(STANDARD_LIFECYCLE_STATUS)(0),                  // 14: Scailo.STANDARD_LIFECYCLE_STATUS
	(*EmployeeMetadata)(nil),                        // 15: Scailo.EmployeeMetadata
	(*ApprovalMetadata)(nil),                        // 16: Scailo.ApprovalMetadata
	(*LogbookLogConciseSLC)(nil),                    // 17: Scailo.LogbookLogConciseSLC
	(BOOL_FILTER)(0),                                // 18: Scailo.BOOL_FILTER
	(SORT_ORDER)(0),                                 // 19: Scailo.SORT_ORDER
	(*IdentifierUUIDWithUserComment)(nil),           // 20: Scailo.IdentifierUUIDWithUserComment
	(*Identifier)(nil),                              // 21: Scailo.Identifier
	(*IdentifierUUID)(nil),                          // 22: Scailo.IdentifierUUID
	(*ActiveStatus)(nil),                            // 23: Scailo.ActiveStatus
	(*CountInSLCStatusRequest)(nil),                 // 24: Scailo.CountInSLCStatusRequest
	(*IdentifierResponse)(nil),                      // 25: Scailo.IdentifierResponse
	(*CountResponse)(nil),                           // 26: Scailo.CountResponse
}
var file_workflows_rules_scailo_proto_depIdxs = []int32{
	0,  // 0: Scailo.WorkflowsRulesServiceCreateRequest.service_name:type_name -> Scailo.WORKFLOW_RULE_SERVICE_NAME
	14, // 1: Scailo.WorkflowsRulesServiceCreateRequest.record_status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	1,  // 2: Scailo.WorkflowsRulesServiceCreateRequest.moment:type_name -> Scailo.WORKFLOW_RULE_MOMENT
	2,  // 3: Scailo.WorkflowsRulesServiceCreateRequest.execute_on:type_name -> Scailo.WORKFLOW_RULE_EXECUTE_ON
	0,  // 4: Scailo.WorkflowsRulesServiceUpdateRequest.service_name:type_name -> Scailo.WORKFLOW_RULE_SERVICE_NAME
	14, // 5: Scailo.WorkflowsRulesServiceUpdateRequest.record_status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	1,  // 6: Scailo.WorkflowsRulesServiceUpdateRequest.moment:type_name -> Scailo.WORKFLOW_RULE_MOMENT
	2,  // 7: Scailo.WorkflowsRulesServiceUpdateRequest.execute_on:type_name -> Scailo.WORKFLOW_RULE_EXECUTE_ON
	15, // 8: Scailo.WorkflowRule.metadata:type_name -> Scailo.EmployeeMetadata
	16, // 9: Scailo.WorkflowRule.approval_metadata:type_name -> Scailo.ApprovalMetadata
	14, // 10: Scailo.WorkflowRule.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	17, // 11: Scailo.WorkflowRule.logs:type_name -> Scailo.LogbookLogConciseSLC
	0,  // 12: Scailo.WorkflowRule.service_name:type_name -> Scailo.WORKFLOW_RULE_SERVICE_NAME
	14, // 13: Scailo.WorkflowRule.record_status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	1,  // 14: Scailo.WorkflowRule.moment:type_name -> Scailo.WORKFLOW_RULE_MOMENT
	2,  // 15: Scailo.WorkflowRule.execute_on:type_name -> Scailo.WORKFLOW_RULE_EXECUTE_ON
	6,  // 16: Scailo.WorkflowsRulesList.list:type_name -> Scailo.WorkflowRule
	18, // 17: Scailo.WorkflowsRulesServicePaginationReq.is_active:type_name -> Scailo.BOOL_FILTER
	19, // 18: Scailo.WorkflowsRulesServicePaginationReq.sort_order:type_name -> Scailo.SORT_ORDER
	3,  // 19: Scailo.WorkflowsRulesServicePaginationReq.sort_key:type_name -> Scailo.WORKFLOW_RULE_SORT_KEY
	14, // 20: Scailo.WorkflowsRulesServicePaginationReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	6,  // 21: Scailo.WorkflowsRulesServicePaginationResponse.payload:type_name -> Scailo.WorkflowRule
	18, // 22: Scailo.WorkflowsRulesServiceFilterReq.is_active:type_name -> Scailo.BOOL_FILTER
	19, // 23: Scailo.WorkflowsRulesServiceFilterReq.sort_order:type_name -> Scailo.SORT_ORDER
	3,  // 24: Scailo.WorkflowsRulesServiceFilterReq.sort_key:type_name -> Scailo.WORKFLOW_RULE_SORT_KEY
	14, // 25: Scailo.WorkflowsRulesServiceFilterReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	0,  // 26: Scailo.WorkflowsRulesServiceFilterReq.service_name:type_name -> Scailo.WORKFLOW_RULE_SERVICE_NAME
	14, // 27: Scailo.WorkflowsRulesServiceFilterReq.record_status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	1,  // 28: Scailo.WorkflowsRulesServiceFilterReq.moment:type_name -> Scailo.WORKFLOW_RULE_MOMENT
	2,  // 29: Scailo.WorkflowsRulesServiceFilterReq.execute_on:type_name -> Scailo.WORKFLOW_RULE_EXECUTE_ON
	18, // 30: Scailo.WorkflowsRulesServiceCountReq.is_active:type_name -> Scailo.BOOL_FILTER
	14, // 31: Scailo.WorkflowsRulesServiceCountReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	0,  // 32: Scailo.WorkflowsRulesServiceCountReq.service_name:type_name -> Scailo.WORKFLOW_RULE_SERVICE_NAME
	14, // 33: Scailo.WorkflowsRulesServiceCountReq.record_status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	1,  // 34: Scailo.WorkflowsRulesServiceCountReq.moment:type_name -> Scailo.WORKFLOW_RULE_MOMENT
	2,  // 35: Scailo.WorkflowsRulesServiceCountReq.execute_on:type_name -> Scailo.WORKFLOW_RULE_EXECUTE_ON
	18, // 36: Scailo.WorkflowsRulesServiceSearchAllReq.is_active:type_name -> Scailo.BOOL_FILTER
	19, // 37: Scailo.WorkflowsRulesServiceSearchAllReq.sort_order:type_name -> Scailo.SORT_ORDER
	3,  // 38: Scailo.WorkflowsRulesServiceSearchAllReq.sort_key:type_name -> Scailo.WORKFLOW_RULE_SORT_KEY
	14, // 39: Scailo.WorkflowsRulesServiceSearchAllReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	0,  // 40: Scailo.WorkflowEvent.service_name:type_name -> Scailo.WORKFLOW_RULE_SERVICE_NAME
	2,  // 41: Scailo.WorkflowEvent.transaction_status:type_name -> Scailo.WORKFLOW_RULE_EXECUTE_ON
	4,  // 42: Scailo.WorkflowsRulesService.Create:input_type -> Scailo.WorkflowsRulesServiceCreateRequest
	4,  // 43: Scailo.WorkflowsRulesService.Draft:input_type -> Scailo.WorkflowsRulesServiceCreateRequest
	5,  // 44: Scailo.WorkflowsRulesService.DraftUpdate:input_type -> Scailo.WorkflowsRulesServiceUpdateRequest
	20, // 45: Scailo.WorkflowsRulesService.SendForVerification:input_type -> Scailo.IdentifierUUIDWithUserComment
	20, // 46: Scailo.WorkflowsRulesService.Verify:input_type -> Scailo.IdentifierUUIDWithUserComment
	20, // 47: Scailo.WorkflowsRulesService.Approve:input_type -> Scailo.IdentifierUUIDWithUserComment
	20, // 48: Scailo.WorkflowsRulesService.SendForRevision:input_type -> Scailo.IdentifierUUIDWithUserComment
	5,  // 49: Scailo.WorkflowsRulesService.RevisionUpdate:input_type -> Scailo.WorkflowsRulesServiceUpdateRequest
	20, // 50: Scailo.WorkflowsRulesService.Halt:input_type -> Scailo.IdentifierUUIDWithUserComment
	20, // 51: Scailo.WorkflowsRulesService.Discard:input_type -> Scailo.IdentifierUUIDWithUserComment
	20, // 52: Scailo.WorkflowsRulesService.Restore:input_type -> Scailo.IdentifierUUIDWithUserComment
	20, // 53: Scailo.WorkflowsRulesService.Complete:input_type -> Scailo.IdentifierUUIDWithUserComment
	20, // 54: Scailo.WorkflowsRulesService.Repeat:input_type -> Scailo.IdentifierUUIDWithUserComment
	20, // 55: Scailo.WorkflowsRulesService.Reopen:input_type -> Scailo.IdentifierUUIDWithUserComment
	20, // 56: Scailo.WorkflowsRulesService.CommentAdd:input_type -> Scailo.IdentifierUUIDWithUserComment
	21, // 57: Scailo.WorkflowsRulesService.ViewByID:input_type -> Scailo.Identifier
	22, // 58: Scailo.WorkflowsRulesService.ViewByUUID:input_type -> Scailo.IdentifierUUID
	23, // 59: Scailo.WorkflowsRulesService.ViewAll:input_type -> Scailo.ActiveStatus
	22, // 60: Scailo.WorkflowsRulesService.ViewAllForEntityUUID:input_type -> Scailo.IdentifierUUID
	8,  // 61: Scailo.WorkflowsRulesService.ViewWithPagination:input_type -> Scailo.WorkflowsRulesServicePaginationReq
	12, // 62: Scailo.WorkflowsRulesService.SearchAll:input_type -> Scailo.WorkflowsRulesServiceSearchAllReq
	10, // 63: Scailo.WorkflowsRulesService.Filter:input_type -> Scailo.WorkflowsRulesServiceFilterReq
	24, // 64: Scailo.WorkflowsRulesService.CountInStatus:input_type -> Scailo.CountInSLCStatusRequest
	11, // 65: Scailo.WorkflowsRulesService.Count:input_type -> Scailo.WorkflowsRulesServiceCountReq
	25, // 66: Scailo.WorkflowsRulesService.Create:output_type -> Scailo.IdentifierResponse
	25, // 67: Scailo.WorkflowsRulesService.Draft:output_type -> Scailo.IdentifierResponse
	25, // 68: Scailo.WorkflowsRulesService.DraftUpdate:output_type -> Scailo.IdentifierResponse
	25, // 69: Scailo.WorkflowsRulesService.SendForVerification:output_type -> Scailo.IdentifierResponse
	25, // 70: Scailo.WorkflowsRulesService.Verify:output_type -> Scailo.IdentifierResponse
	25, // 71: Scailo.WorkflowsRulesService.Approve:output_type -> Scailo.IdentifierResponse
	25, // 72: Scailo.WorkflowsRulesService.SendForRevision:output_type -> Scailo.IdentifierResponse
	25, // 73: Scailo.WorkflowsRulesService.RevisionUpdate:output_type -> Scailo.IdentifierResponse
	25, // 74: Scailo.WorkflowsRulesService.Halt:output_type -> Scailo.IdentifierResponse
	25, // 75: Scailo.WorkflowsRulesService.Discard:output_type -> Scailo.IdentifierResponse
	25, // 76: Scailo.WorkflowsRulesService.Restore:output_type -> Scailo.IdentifierResponse
	25, // 77: Scailo.WorkflowsRulesService.Complete:output_type -> Scailo.IdentifierResponse
	25, // 78: Scailo.WorkflowsRulesService.Repeat:output_type -> Scailo.IdentifierResponse
	25, // 79: Scailo.WorkflowsRulesService.Reopen:output_type -> Scailo.IdentifierResponse
	25, // 80: Scailo.WorkflowsRulesService.CommentAdd:output_type -> Scailo.IdentifierResponse
	6,  // 81: Scailo.WorkflowsRulesService.ViewByID:output_type -> Scailo.WorkflowRule
	6,  // 82: Scailo.WorkflowsRulesService.ViewByUUID:output_type -> Scailo.WorkflowRule
	7,  // 83: Scailo.WorkflowsRulesService.ViewAll:output_type -> Scailo.WorkflowsRulesList
	7,  // 84: Scailo.WorkflowsRulesService.ViewAllForEntityUUID:output_type -> Scailo.WorkflowsRulesList
	9,  // 85: Scailo.WorkflowsRulesService.ViewWithPagination:output_type -> Scailo.WorkflowsRulesServicePaginationResponse
	7,  // 86: Scailo.WorkflowsRulesService.SearchAll:output_type -> Scailo.WorkflowsRulesList
	7,  // 87: Scailo.WorkflowsRulesService.Filter:output_type -> Scailo.WorkflowsRulesList
	26, // 88: Scailo.WorkflowsRulesService.CountInStatus:output_type -> Scailo.CountResponse
	26, // 89: Scailo.WorkflowsRulesService.Count:output_type -> Scailo.CountResponse
	66, // [66:90] is the sub-list for method output_type
	42, // [42:66] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_workflows_rules_scailo_proto_init() }
func file_workflows_rules_scailo_proto_init() {
	if File_workflows_rules_scailo_proto != nil {
		return
	}
	file_base_scailo_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_workflows_rules_scailo_proto_rawDesc), len(file_workflows_rules_scailo_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflows_rules_scailo_proto_goTypes,
		DependencyIndexes: file_workflows_rules_scailo_proto_depIdxs,
		EnumInfos:         file_workflows_rules_scailo_proto_enumTypes,
		MessageInfos:      file_workflows_rules_scailo_proto_msgTypes,
	}.Build()
	File_workflows_rules_scailo_proto = out.File
	file_workflows_rules_scailo_proto_goTypes = nil
	file_workflows_rules_scailo_proto_depIdxs = nil
}
