// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: replaceable_indents.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReplaceableIndentsService_Create_FullMethodName                                        = "/Scailo.ReplaceableIndentsService/Create"
	ReplaceableIndentsService_Draft_FullMethodName                                         = "/Scailo.ReplaceableIndentsService/Draft"
	ReplaceableIndentsService_DraftUpdate_FullMethodName                                   = "/Scailo.ReplaceableIndentsService/DraftUpdate"
	ReplaceableIndentsService_SendForVerification_FullMethodName                           = "/Scailo.ReplaceableIndentsService/SendForVerification"
	ReplaceableIndentsService_Verify_FullMethodName                                        = "/Scailo.ReplaceableIndentsService/Verify"
	ReplaceableIndentsService_Approve_FullMethodName                                       = "/Scailo.ReplaceableIndentsService/Approve"
	ReplaceableIndentsService_SendForRevision_FullMethodName                               = "/Scailo.ReplaceableIndentsService/SendForRevision"
	ReplaceableIndentsService_RevisionUpdate_FullMethodName                                = "/Scailo.ReplaceableIndentsService/RevisionUpdate"
	ReplaceableIndentsService_Halt_FullMethodName                                          = "/Scailo.ReplaceableIndentsService/Halt"
	ReplaceableIndentsService_Discard_FullMethodName                                       = "/Scailo.ReplaceableIndentsService/Discard"
	ReplaceableIndentsService_Restore_FullMethodName                                       = "/Scailo.ReplaceableIndentsService/Restore"
	ReplaceableIndentsService_Complete_FullMethodName                                      = "/Scailo.ReplaceableIndentsService/Complete"
	ReplaceableIndentsService_Repeat_FullMethodName                                        = "/Scailo.ReplaceableIndentsService/Repeat"
	ReplaceableIndentsService_Reopen_FullMethodName                                        = "/Scailo.ReplaceableIndentsService/Reopen"
	ReplaceableIndentsService_CommentAdd_FullMethodName                                    = "/Scailo.ReplaceableIndentsService/CommentAdd"
	ReplaceableIndentsService_SendEmail_FullMethodName                                     = "/Scailo.ReplaceableIndentsService/SendEmail"
	ReplaceableIndentsService_CreateMagicLink_FullMethodName                               = "/Scailo.ReplaceableIndentsService/CreateMagicLink"
	ReplaceableIndentsService_Autofill_FullMethodName                                      = "/Scailo.ReplaceableIndentsService/Autofill"
	ReplaceableIndentsService_IsCompletable_FullMethodName                                 = "/Scailo.ReplaceableIndentsService/IsCompletable"
	ReplaceableIndentsService_AddReplaceableIndentItem_FullMethodName                      = "/Scailo.ReplaceableIndentsService/AddReplaceableIndentItem"
	ReplaceableIndentsService_ModifyReplaceableIndentItem_FullMethodName                   = "/Scailo.ReplaceableIndentsService/ModifyReplaceableIndentItem"
	ReplaceableIndentsService_ApproveReplaceableIndentItem_FullMethodName                  = "/Scailo.ReplaceableIndentsService/ApproveReplaceableIndentItem"
	ReplaceableIndentsService_DeleteReplaceableIndentItem_FullMethodName                   = "/Scailo.ReplaceableIndentsService/DeleteReplaceableIndentItem"
	ReplaceableIndentsService_ReorderReplaceableIndentItems_FullMethodName                 = "/Scailo.ReplaceableIndentsService/ReorderReplaceableIndentItems"
	ReplaceableIndentsService_ViewReplaceableIndentItemByID_FullMethodName                 = "/Scailo.ReplaceableIndentsService/ViewReplaceableIndentItemByID"
	ReplaceableIndentsService_ViewApprovedReplaceableIndentItems_FullMethodName            = "/Scailo.ReplaceableIndentsService/ViewApprovedReplaceableIndentItems"
	ReplaceableIndentsService_ViewUnapprovedReplaceableIndentItems_FullMethodName          = "/Scailo.ReplaceableIndentsService/ViewUnapprovedReplaceableIndentItems"
	ReplaceableIndentsService_ViewReplaceableIndentItemHistory_FullMethodName              = "/Scailo.ReplaceableIndentsService/ViewReplaceableIndentItemHistory"
	ReplaceableIndentsService_ViewPaginatedApprovedReplaceableIndentItems_FullMethodName   = "/Scailo.ReplaceableIndentsService/ViewPaginatedApprovedReplaceableIndentItems"
	ReplaceableIndentsService_ViewPaginatedUnapprovedReplaceableIndentItems_FullMethodName = "/Scailo.ReplaceableIndentsService/ViewPaginatedUnapprovedReplaceableIndentItems"
	ReplaceableIndentsService_SearchItemsWithPagination_FullMethodName                     = "/Scailo.ReplaceableIndentsService/SearchItemsWithPagination"
	ReplaceableIndentsService_DownloadItemsAsCSV_FullMethodName                            = "/Scailo.ReplaceableIndentsService/DownloadItemsAsCSV"
	ReplaceableIndentsService_DownloadItemsTemplateAsCSV_FullMethodName                    = "/Scailo.ReplaceableIndentsService/DownloadItemsTemplateAsCSV"
	ReplaceableIndentsService_UploadReplaceableIndentItems_FullMethodName                  = "/Scailo.ReplaceableIndentsService/UploadReplaceableIndentItems"
	ReplaceableIndentsService_ViewByID_FullMethodName                                      = "/Scailo.ReplaceableIndentsService/ViewByID"
	ReplaceableIndentsService_ViewByUUID_FullMethodName                                    = "/Scailo.ReplaceableIndentsService/ViewByUUID"
	ReplaceableIndentsService_ViewByReferenceID_FullMethodName                             = "/Scailo.ReplaceableIndentsService/ViewByReferenceID"
	ReplaceableIndentsService_ViewEssentialByID_FullMethodName                             = "/Scailo.ReplaceableIndentsService/ViewEssentialByID"
	ReplaceableIndentsService_ViewEssentialByUUID_FullMethodName                           = "/Scailo.ReplaceableIndentsService/ViewEssentialByUUID"
	ReplaceableIndentsService_ViewFromIDs_FullMethodName                                   = "/Scailo.ReplaceableIndentsService/ViewFromIDs"
	ReplaceableIndentsService_ViewAll_FullMethodName                                       = "/Scailo.ReplaceableIndentsService/ViewAll"
	ReplaceableIndentsService_ViewAllForEntityUUID_FullMethodName                          = "/Scailo.ReplaceableIndentsService/ViewAllForEntityUUID"
	ReplaceableIndentsService_ViewWithPagination_FullMethodName                            = "/Scailo.ReplaceableIndentsService/ViewWithPagination"
	ReplaceableIndentsService_ViewProspectiveFamilies_FullMethodName                       = "/Scailo.ReplaceableIndentsService/ViewProspectiveFamilies"
	ReplaceableIndentsService_FilterProspectiveFamilies_FullMethodName                     = "/Scailo.ReplaceableIndentsService/FilterProspectiveFamilies"
	ReplaceableIndentsService_ViewProspectiveReplaceableIndentItem_FullMethodName          = "/Scailo.ReplaceableIndentsService/ViewProspectiveReplaceableIndentItem"
	ReplaceableIndentsService_IsDownloadable_FullMethodName                                = "/Scailo.ReplaceableIndentsService/IsDownloadable"
	ReplaceableIndentsService_DownloadByUUID_FullMethodName                                = "/Scailo.ReplaceableIndentsService/DownloadByUUID"
	ReplaceableIndentsService_ViewIssuedStatistics_FullMethodName                          = "/Scailo.ReplaceableIndentsService/ViewIssuedStatistics"
	ReplaceableIndentsService_ViewAddedQuantityForFamily_FullMethodName                    = "/Scailo.ReplaceableIndentsService/ViewAddedQuantityForFamily"
	ReplaceableIndentsService_SearchAll_FullMethodName                                     = "/Scailo.ReplaceableIndentsService/SearchAll"
	ReplaceableIndentsService_Filter_FullMethodName                                        = "/Scailo.ReplaceableIndentsService/Filter"
	ReplaceableIndentsService_CountInStatus_FullMethodName                                 = "/Scailo.ReplaceableIndentsService/CountInStatus"
	ReplaceableIndentsService_Count_FullMethodName                                         = "/Scailo.ReplaceableIndentsService/Count"
	ReplaceableIndentsService_DownloadAsCSV_FullMethodName                                 = "/Scailo.ReplaceableIndentsService/DownloadAsCSV"
)

// ReplaceableIndentsServiceClient is the client API for ReplaceableIndentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each replaceable indent
type ReplaceableIndentsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ReplaceableIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ReplaceableIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ReplaceableIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ReplaceableIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Autofill the replaceable indent
	Autofill(ctx context.Context, in *ReplaceableIndentsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Replaceable Indent can be marked as completed
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Add an item to a replaceable indent
	AddReplaceableIndentItem(ctx context.Context, in *ReplaceableIndentsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a replaceable indent
	ModifyReplaceableIndentItem(ctx context.Context, in *ReplaceableIndentsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a replaceable indent
	ApproveReplaceableIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a replaceable indent
	DeleteReplaceableIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a replaceable indent
	ReorderReplaceableIndentItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Replaceable Indent Item by ID
	ViewReplaceableIndentItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ReplaceableIndentItem, error)
	// View approved replaceable indent items for given replaceable indent ID
	ViewApprovedReplaceableIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ReplaceableIndentsItemsList, error)
	// View unapproved replaceable indent items for given replaceable indent ID
	ViewUnapprovedReplaceableIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ReplaceableIndentsItemsList, error)
	// View the history of the replaceable indent item
	ViewReplaceableIndentItemHistory(ctx context.Context, in *ReplaceableIndentItemHistoryRequest, opts ...grpc.CallOption) (*ReplaceableIndentsItemsList, error)
	// View approved replaceable indent items for given replaceable indent ID with pagination
	ViewPaginatedApprovedReplaceableIndentItems(ctx context.Context, in *ReplaceableIndentItemsSearchRequest, opts ...grpc.CallOption) (*ReplaceableIndentsServicePaginatedItemsResponse, error)
	// View unapproved replaceable indent items for given replaceable indent ID with pagination
	ViewPaginatedUnapprovedReplaceableIndentItems(ctx context.Context, in *ReplaceableIndentItemsSearchRequest, opts ...grpc.CallOption) (*ReplaceableIndentsServicePaginatedItemsResponse, error)
	// Search through replaceable indent items with pagination
	SearchItemsWithPagination(ctx context.Context, in *ReplaceableIndentItemsSearchRequest, opts ...grpc.CallOption) (*ReplaceableIndentsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadReplaceableIndentItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ReplaceableIndent, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ReplaceableIndent, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*ReplaceableIndent, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ReplaceableIndent, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ReplaceableIndent, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ReplaceableIndentsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ReplaceableIndentsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ReplaceableIndentsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ReplaceableIndentsServicePaginationReq, opts ...grpc.CallOption) (*ReplaceableIndentsServicePaginationResponse, error)
	// View prospective families for the given replaceable indent
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective replaceable indent item info for the given family ID and replaceable indent ID
	ViewProspectiveReplaceableIndentItem(ctx context.Context, in *ReplaceableIndentItemProspectiveInfoRequest, opts ...grpc.CallOption) (*ReplaceableIndentsServiceItemCreateRequest, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download replaceable indent with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View issued (stock issuance) statistics of the replaceable indent
	ViewIssuedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ReplaceableIndentIssuedStatisticsList, error)
	// View the added quantity for the family with the given request payload
	ViewAddedQuantityForFamily(ctx context.Context, in *ReplaceableIndentItemProspectiveInfoRequest, opts ...grpc.CallOption) (*QuantityResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ReplaceableIndentsServiceSearchAllReq, opts ...grpc.CallOption) (*ReplaceableIndentsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ReplaceableIndentsServiceFilterReq, opts ...grpc.CallOption) (*ReplaceableIndentsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ReplaceableIndentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ReplaceableIndentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type replaceableIndentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplaceableIndentsServiceClient(cc grpc.ClientConnInterface) ReplaceableIndentsServiceClient {
	return &replaceableIndentsServiceClient{cc}
}

func (c *replaceableIndentsServiceClient) Create(ctx context.Context, in *ReplaceableIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Draft(ctx context.Context, in *ReplaceableIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) DraftUpdate(ctx context.Context, in *ReplaceableIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) RevisionUpdate(ctx context.Context, in *ReplaceableIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Autofill(ctx context.Context, in *ReplaceableIndentsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) AddReplaceableIndentItem(ctx context.Context, in *ReplaceableIndentsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_AddReplaceableIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ModifyReplaceableIndentItem(ctx context.Context, in *ReplaceableIndentsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ModifyReplaceableIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ApproveReplaceableIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ApproveReplaceableIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) DeleteReplaceableIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_DeleteReplaceableIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ReorderReplaceableIndentItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ReorderReplaceableIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewReplaceableIndentItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ReplaceableIndentItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentItem)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewReplaceableIndentItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewApprovedReplaceableIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ReplaceableIndentsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsItemsList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewApprovedReplaceableIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewUnapprovedReplaceableIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ReplaceableIndentsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsItemsList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewUnapprovedReplaceableIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewReplaceableIndentItemHistory(ctx context.Context, in *ReplaceableIndentItemHistoryRequest, opts ...grpc.CallOption) (*ReplaceableIndentsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsItemsList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewReplaceableIndentItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewPaginatedApprovedReplaceableIndentItems(ctx context.Context, in *ReplaceableIndentItemsSearchRequest, opts ...grpc.CallOption) (*ReplaceableIndentsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewPaginatedApprovedReplaceableIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewPaginatedUnapprovedReplaceableIndentItems(ctx context.Context, in *ReplaceableIndentItemsSearchRequest, opts ...grpc.CallOption) (*ReplaceableIndentsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewPaginatedUnapprovedReplaceableIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) SearchItemsWithPagination(ctx context.Context, in *ReplaceableIndentItemsSearchRequest, opts ...grpc.CallOption) (*ReplaceableIndentsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) UploadReplaceableIndentItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_UploadReplaceableIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ReplaceableIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndent)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ReplaceableIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndent)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*ReplaceableIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndent)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ReplaceableIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndent)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ReplaceableIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndent)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ReplaceableIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ReplaceableIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ReplaceableIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewWithPagination(ctx context.Context, in *ReplaceableIndentsServicePaginationReq, opts ...grpc.CallOption) (*ReplaceableIndentsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsServicePaginationResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewProspectiveReplaceableIndentItem(ctx context.Context, in *ReplaceableIndentItemProspectiveInfoRequest, opts ...grpc.CallOption) (*ReplaceableIndentsServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewProspectiveReplaceableIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewIssuedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ReplaceableIndentIssuedStatisticsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentIssuedStatisticsList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewIssuedStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) ViewAddedQuantityForFamily(ctx context.Context, in *ReplaceableIndentItemProspectiveInfoRequest, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_ViewAddedQuantityForFamily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) SearchAll(ctx context.Context, in *ReplaceableIndentsServiceSearchAllReq, opts ...grpc.CallOption) (*ReplaceableIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Filter(ctx context.Context, in *ReplaceableIndentsServiceFilterReq, opts ...grpc.CallOption) (*ReplaceableIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceableIndentsList)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) Count(ctx context.Context, in *ReplaceableIndentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replaceableIndentsServiceClient) DownloadAsCSV(ctx context.Context, in *ReplaceableIndentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ReplaceableIndentsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplaceableIndentsService
