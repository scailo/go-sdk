// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: purchases_returns.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PurchasesReturnsService_Create_FullMethodName                                     = "/Scailo.PurchasesReturnsService/Create"
	PurchasesReturnsService_Draft_FullMethodName                                      = "/Scailo.PurchasesReturnsService/Draft"
	PurchasesReturnsService_DraftUpdate_FullMethodName                                = "/Scailo.PurchasesReturnsService/DraftUpdate"
	PurchasesReturnsService_SendForVerification_FullMethodName                        = "/Scailo.PurchasesReturnsService/SendForVerification"
	PurchasesReturnsService_Verify_FullMethodName                                     = "/Scailo.PurchasesReturnsService/Verify"
	PurchasesReturnsService_Approve_FullMethodName                                    = "/Scailo.PurchasesReturnsService/Approve"
	PurchasesReturnsService_SendForRevision_FullMethodName                            = "/Scailo.PurchasesReturnsService/SendForRevision"
	PurchasesReturnsService_RevisionUpdate_FullMethodName                             = "/Scailo.PurchasesReturnsService/RevisionUpdate"
	PurchasesReturnsService_Halt_FullMethodName                                       = "/Scailo.PurchasesReturnsService/Halt"
	PurchasesReturnsService_Discard_FullMethodName                                    = "/Scailo.PurchasesReturnsService/Discard"
	PurchasesReturnsService_Restore_FullMethodName                                    = "/Scailo.PurchasesReturnsService/Restore"
	PurchasesReturnsService_Complete_FullMethodName                                   = "/Scailo.PurchasesReturnsService/Complete"
	PurchasesReturnsService_Repeat_FullMethodName                                     = "/Scailo.PurchasesReturnsService/Repeat"
	PurchasesReturnsService_Reopen_FullMethodName                                     = "/Scailo.PurchasesReturnsService/Reopen"
	PurchasesReturnsService_CommentAdd_FullMethodName                                 = "/Scailo.PurchasesReturnsService/CommentAdd"
	PurchasesReturnsService_SendEmail_FullMethodName                                  = "/Scailo.PurchasesReturnsService/SendEmail"
	PurchasesReturnsService_IsCompletable_FullMethodName                              = "/Scailo.PurchasesReturnsService/IsCompletable"
	PurchasesReturnsService_CreateMagicLink_FullMethodName                            = "/Scailo.PurchasesReturnsService/CreateMagicLink"
	PurchasesReturnsService_AddPurchaseReturnItem_FullMethodName                      = "/Scailo.PurchasesReturnsService/AddPurchaseReturnItem"
	PurchasesReturnsService_ModifyPurchaseReturnItem_FullMethodName                   = "/Scailo.PurchasesReturnsService/ModifyPurchaseReturnItem"
	PurchasesReturnsService_ApprovePurchaseReturnItem_FullMethodName                  = "/Scailo.PurchasesReturnsService/ApprovePurchaseReturnItem"
	PurchasesReturnsService_DeletePurchaseReturnItem_FullMethodName                   = "/Scailo.PurchasesReturnsService/DeletePurchaseReturnItem"
	PurchasesReturnsService_ReorderPurchaseReturnItems_FullMethodName                 = "/Scailo.PurchasesReturnsService/ReorderPurchaseReturnItems"
	PurchasesReturnsService_ViewPurchaseReturnItemByID_FullMethodName                 = "/Scailo.PurchasesReturnsService/ViewPurchaseReturnItemByID"
	PurchasesReturnsService_ViewPurchaseReturnItemByInventoryHash_FullMethodName      = "/Scailo.PurchasesReturnsService/ViewPurchaseReturnItemByInventoryHash"
	PurchasesReturnsService_ViewApprovedPurchaseReturnItems_FullMethodName            = "/Scailo.PurchasesReturnsService/ViewApprovedPurchaseReturnItems"
	PurchasesReturnsService_ViewUnapprovedPurchaseReturnItems_FullMethodName          = "/Scailo.PurchasesReturnsService/ViewUnapprovedPurchaseReturnItems"
	PurchasesReturnsService_ViewPurchaseReturnItemHistory_FullMethodName              = "/Scailo.PurchasesReturnsService/ViewPurchaseReturnItemHistory"
	PurchasesReturnsService_ViewPaginatedApprovedPurchaseReturnItems_FullMethodName   = "/Scailo.PurchasesReturnsService/ViewPaginatedApprovedPurchaseReturnItems"
	PurchasesReturnsService_ViewPaginatedUnapprovedPurchaseReturnItems_FullMethodName = "/Scailo.PurchasesReturnsService/ViewPaginatedUnapprovedPurchaseReturnItems"
	PurchasesReturnsService_SearchItemsWithPagination_FullMethodName                  = "/Scailo.PurchasesReturnsService/SearchItemsWithPagination"
	PurchasesReturnsService_DownloadItemsAsCSV_FullMethodName                         = "/Scailo.PurchasesReturnsService/DownloadItemsAsCSV"
	PurchasesReturnsService_DownloadItemsTemplateAsCSV_FullMethodName                 = "/Scailo.PurchasesReturnsService/DownloadItemsTemplateAsCSV"
	PurchasesReturnsService_ViewByID_FullMethodName                                   = "/Scailo.PurchasesReturnsService/ViewByID"
	PurchasesReturnsService_ViewByUUID_FullMethodName                                 = "/Scailo.PurchasesReturnsService/ViewByUUID"
	PurchasesReturnsService_ViewByReferenceID_FullMethodName                          = "/Scailo.PurchasesReturnsService/ViewByReferenceID"
	PurchasesReturnsService_ViewEssentialByID_FullMethodName                          = "/Scailo.PurchasesReturnsService/ViewEssentialByID"
	PurchasesReturnsService_ViewEssentialByUUID_FullMethodName                        = "/Scailo.PurchasesReturnsService/ViewEssentialByUUID"
	PurchasesReturnsService_ViewFromIDs_FullMethodName                                = "/Scailo.PurchasesReturnsService/ViewFromIDs"
	PurchasesReturnsService_ViewAncillaryParametersByUUID_FullMethodName              = "/Scailo.PurchasesReturnsService/ViewAncillaryParametersByUUID"
	PurchasesReturnsService_ViewAll_FullMethodName                                    = "/Scailo.PurchasesReturnsService/ViewAll"
	PurchasesReturnsService_ViewAllForEntityUUID_FullMethodName                       = "/Scailo.PurchasesReturnsService/ViewAllForEntityUUID"
	PurchasesReturnsService_ViewWithPagination_FullMethodName                         = "/Scailo.PurchasesReturnsService/ViewWithPagination"
	PurchasesReturnsService_ViewProspectiveFamilies_FullMethodName                    = "/Scailo.PurchasesReturnsService/ViewProspectiveFamilies"
	PurchasesReturnsService_FilterProspectiveFamilies_FullMethodName                  = "/Scailo.PurchasesReturnsService/FilterProspectiveFamilies"
	PurchasesReturnsService_ViewProspectivePurchaseReturnItem_FullMethodName          = "/Scailo.PurchasesReturnsService/ViewProspectivePurchaseReturnItem"
	PurchasesReturnsService_SearchReturnableInventory_FullMethodName                  = "/Scailo.PurchasesReturnsService/SearchReturnableInventory"
	PurchasesReturnsService_FilterReturnableInventory_FullMethodName                  = "/Scailo.PurchasesReturnsService/FilterReturnableInventory"
	PurchasesReturnsService_ViewAssociatedDebitNoteInfo_FullMethodName                = "/Scailo.PurchasesReturnsService/ViewAssociatedDebitNoteInfo"
	PurchasesReturnsService_IsBilled_FullMethodName                                   = "/Scailo.PurchasesReturnsService/IsBilled"
	PurchasesReturnsService_ViewAddedFamilyQuantityForSource_FullMethodName           = "/Scailo.PurchasesReturnsService/ViewAddedFamilyQuantityForSource"
	PurchasesReturnsService_IsDownloadable_FullMethodName                             = "/Scailo.PurchasesReturnsService/IsDownloadable"
	PurchasesReturnsService_DownloadByUUID_FullMethodName                             = "/Scailo.PurchasesReturnsService/DownloadByUUID"
	PurchasesReturnsService_DownloadLabelByUUID_FullMethodName                        = "/Scailo.PurchasesReturnsService/DownloadLabelByUUID"
	PurchasesReturnsService_SearchAll_FullMethodName                                  = "/Scailo.PurchasesReturnsService/SearchAll"
	PurchasesReturnsService_Filter_FullMethodName                                     = "/Scailo.PurchasesReturnsService/Filter"
	PurchasesReturnsService_CountInStatus_FullMethodName                              = "/Scailo.PurchasesReturnsService/CountInStatus"
	PurchasesReturnsService_Count_FullMethodName                                      = "/Scailo.PurchasesReturnsService/Count"
	PurchasesReturnsService_DownloadAsCSV_FullMethodName                              = "/Scailo.PurchasesReturnsService/DownloadAsCSV"
)

// PurchasesReturnsServiceClient is the client API for PurchasesReturnsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each purchase return
type PurchasesReturnsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *PurchasesReturnsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *PurchasesReturnsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *PurchasesReturnsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *PurchasesReturnsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Purchase Return can be marked as completed
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add an item to a purchase return
	AddPurchaseReturnItem(ctx context.Context, in *PurchasesReturnsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a purchase return
	ModifyPurchaseReturnItem(ctx context.Context, in *PurchasesReturnsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a purchase return
	ApprovePurchaseReturnItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a purchase return
	DeletePurchaseReturnItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a purchase return
	ReorderPurchaseReturnItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Purchase Return Item by ID
	ViewPurchaseReturnItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseReturnItem, error)
	// View Purchase Return Item by Inventory Hash
	ViewPurchaseReturnItemByInventoryHash(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PurchaseReturnItem, error)
	// View approved purchase return items for given purchase return ID
	ViewApprovedPurchaseReturnItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesReturnsItemsList, error)
	// View unapproved purchase return items for given purchase return ID
	ViewUnapprovedPurchaseReturnItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesReturnsItemsList, error)
	// View the history of the purchase return item
	ViewPurchaseReturnItemHistory(ctx context.Context, in *PurchaseReturnItemHistoryRequest, opts ...grpc.CallOption) (*PurchasesReturnsItemsList, error)
	// View approved sales return items for given sales return ID with pagination
	ViewPaginatedApprovedPurchaseReturnItems(ctx context.Context, in *PurchaseReturnItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesReturnsServicePaginatedItemsResponse, error)
	// View unapproved sales return items for given sales return ID with pagination
	ViewPaginatedUnapprovedPurchaseReturnItems(ctx context.Context, in *PurchaseReturnItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesReturnsServicePaginatedItemsResponse, error)
	// Search through sales return items with pagination
	SearchItemsWithPagination(ctx context.Context, in *PurchaseReturnItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesReturnsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseReturn, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseReturn, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PurchaseReturn, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseReturn, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseReturn, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PurchasesReturnsList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseReturnAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PurchasesReturnsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasesReturnsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *PurchasesReturnsServicePaginationReq, opts ...grpc.CallOption) (*PurchasesReturnsServicePaginationResponse, error)
	// View prospective families for the given purchase return
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective purchase return item info for the given family ID and purchase return ID
	ViewProspectivePurchaseReturnItem(ctx context.Context, in *PurchaseReturnItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PurchasesReturnsServiceItemCreateRequest, error)
	// Search for returnable inventory
	SearchReturnableInventory(ctx context.Context, in *SearchReturnableInventoryForIdentifierUUID, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// Filter returnable inventory
	FilterReturnableInventory(ctx context.Context, in *FilterReturnableInventoryForIdentifierUUID, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// Other view operations
	// View the associated debit note information that is denoted by the identifier in the response for the goods dispatch that is denoted by the identifier UUID in the request
	ViewAssociatedDebitNoteInfo(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Purchase Return has been billed
	IsBilled(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// View already added quantities
	ViewAddedFamilyQuantityForSource(ctx context.Context, in *PurchasesReturnsServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download purchase return with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the label for the purchase return with the given IdentifierUUID
	DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *PurchasesReturnsServiceSearchAllReq, opts ...grpc.CallOption) (*PurchasesReturnsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *PurchasesReturnsServiceFilterReq, opts ...grpc.CallOption) (*PurchasesReturnsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *PurchasesReturnsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *PurchasesReturnsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type purchasesReturnsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchasesReturnsServiceClient(cc grpc.ClientConnInterface) PurchasesReturnsServiceClient {
	return &purchasesReturnsServiceClient{cc}
}

func (c *purchasesReturnsServiceClient) Create(ctx context.Context, in *PurchasesReturnsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Draft(ctx context.Context, in *PurchasesReturnsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) DraftUpdate(ctx context.Context, in *PurchasesReturnsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) RevisionUpdate(ctx context.Context, in *PurchasesReturnsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) AddPurchaseReturnItem(ctx context.Context, in *PurchasesReturnsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_AddPurchaseReturnItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ModifyPurchaseReturnItem(ctx context.Context, in *PurchasesReturnsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ModifyPurchaseReturnItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ApprovePurchaseReturnItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ApprovePurchaseReturnItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) DeletePurchaseReturnItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_DeletePurchaseReturnItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ReorderPurchaseReturnItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ReorderPurchaseReturnItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewPurchaseReturnItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseReturnItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseReturnItem)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewPurchaseReturnItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewPurchaseReturnItemByInventoryHash(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PurchaseReturnItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseReturnItem)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewPurchaseReturnItemByInventoryHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewApprovedPurchaseReturnItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesReturnsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsItemsList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewApprovedPurchaseReturnItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewUnapprovedPurchaseReturnItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesReturnsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsItemsList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewUnapprovedPurchaseReturnItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewPurchaseReturnItemHistory(ctx context.Context, in *PurchaseReturnItemHistoryRequest, opts ...grpc.CallOption) (*PurchasesReturnsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsItemsList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewPurchaseReturnItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewPaginatedApprovedPurchaseReturnItems(ctx context.Context, in *PurchaseReturnItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesReturnsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewPaginatedApprovedPurchaseReturnItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewPaginatedUnapprovedPurchaseReturnItems(ctx context.Context, in *PurchaseReturnItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesReturnsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewPaginatedUnapprovedPurchaseReturnItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) SearchItemsWithPagination(ctx context.Context, in *PurchaseReturnItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesReturnsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseReturn)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseReturn)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PurchaseReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseReturn)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseReturn)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseReturn)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PurchasesReturnsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseReturnAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseReturnAncillaryParameters)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PurchasesReturnsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasesReturnsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewWithPagination(ctx context.Context, in *PurchasesReturnsServicePaginationReq, opts ...grpc.CallOption) (*PurchasesReturnsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsServicePaginationResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewProspectivePurchaseReturnItem(ctx context.Context, in *PurchaseReturnItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PurchasesReturnsServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewProspectivePurchaseReturnItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) SearchReturnableInventory(ctx context.Context, in *SearchReturnableInventoryForIdentifierUUID, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_SearchReturnableInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) FilterReturnableInventory(ctx context.Context, in *FilterReturnableInventoryForIdentifierUUID, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_FilterReturnableInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewAssociatedDebitNoteInfo(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewAssociatedDebitNoteInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) IsBilled(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_IsBilled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) ViewAddedFamilyQuantityForSource(ctx context.Context, in *PurchasesReturnsServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DualQuantitiesResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_ViewAddedFamilyQuantityForSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_DownloadLabelByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) SearchAll(ctx context.Context, in *PurchasesReturnsServiceSearchAllReq, opts ...grpc.CallOption) (*PurchasesReturnsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Filter(ctx context.Context, in *PurchasesReturnsServiceFilterReq, opts ...grpc.CallOption) (*PurchasesReturnsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesReturnsList)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) Count(ctx context.Context, in *PurchasesReturnsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesReturnsServiceClient) DownloadAsCSV(ctx context.Context, in *PurchasesReturnsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesReturnsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchasesReturnsService
