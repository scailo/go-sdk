// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: magic_links.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MagicLinksService_Create_FullMethodName               = "/Scailo.MagicLinksService/Create"
	MagicLinksService_Update_FullMethodName               = "/Scailo.MagicLinksService/Update"
	MagicLinksService_Discard_FullMethodName              = "/Scailo.MagicLinksService/Discard"
	MagicLinksService_Restore_FullMethodName              = "/Scailo.MagicLinksService/Restore"
	MagicLinksService_ViewByID_FullMethodName             = "/Scailo.MagicLinksService/ViewByID"
	MagicLinksService_ViewByUUID_FullMethodName           = "/Scailo.MagicLinksService/ViewByUUID"
	MagicLinksService_ViewByCode_FullMethodName           = "/Scailo.MagicLinksService/ViewByCode"
	MagicLinksService_ViewFromIDs_FullMethodName          = "/Scailo.MagicLinksService/ViewFromIDs"
	MagicLinksService_ViewAll_FullMethodName              = "/Scailo.MagicLinksService/ViewAll"
	MagicLinksService_ViewAllForEntityUUID_FullMethodName = "/Scailo.MagicLinksService/ViewAllForEntityUUID"
	MagicLinksService_ViewWithPagination_FullMethodName   = "/Scailo.MagicLinksService/ViewWithPagination"
	MagicLinksService_ViewAccessLogs_FullMethodName       = "/Scailo.MagicLinksService/ViewAccessLogs"
	MagicLinksService_SearchAll_FullMethodName            = "/Scailo.MagicLinksService/SearchAll"
	MagicLinksService_Filter_FullMethodName               = "/Scailo.MagicLinksService/Filter"
	MagicLinksService_Count_FullMethodName                = "/Scailo.MagicLinksService/Count"
	MagicLinksService_DownloadAsCSV_FullMethodName        = "/Scailo.MagicLinksService/DownloadAsCSV"
)

// MagicLinksServiceClient is the client API for MagicLinksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the methods applicable on each magic link
type MagicLinksServiceClient interface {
	// Create a magic link
	Create(ctx context.Context, in *MagicLinksServiceCreateRequest, opts ...grpc.CallOption) (*MagicLink, error)
	// Update a magic link
	Update(ctx context.Context, in *MagicLinksServiceUpdateRequest, opts ...grpc.CallOption) (*MagicLink, error)
	// Discard the magic link
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore the magic link
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MagicLink, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*MagicLink, error)
	// View only essential components that matches the given code
	ViewByCode(ctx context.Context, in *MagicLinkServiceSearchByCodeReq, opts ...grpc.CallOption) (*MagicLink, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*MagicLinksList, error)
	// View all magic links
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*MagicLinksList, error)
	// View all magic links with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*MagicLinksList, error)
	// View magic links with pagination
	ViewWithPagination(ctx context.Context, in *MagicLinksServicePaginationReq, opts ...grpc.CallOption) (*MagicLinkPaginationResp, error)
	// View access logs of magic link
	ViewAccessLogs(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*MagicLinkAccessLogsList, error)
	// View all magic links that match the given search key
	SearchAll(ctx context.Context, in *MagicLinksServiceSearchAllReq, opts ...grpc.CallOption) (*MagicLinksList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *MagicLinksServiceFilterReq, opts ...grpc.CallOption) (*MagicLinksList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *MagicLinksServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *MagicLinksServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type magicLinksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMagicLinksServiceClient(cc grpc.ClientConnInterface) MagicLinksServiceClient {
	return &magicLinksServiceClient{cc}
}

func (c *magicLinksServiceClient) Create(ctx context.Context, in *MagicLinksServiceCreateRequest, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, MagicLinksService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) Update(ctx context.Context, in *MagicLinksServiceUpdateRequest, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, MagicLinksService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MagicLinksService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MagicLinksService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, MagicLinksService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, MagicLinksService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) ViewByCode(ctx context.Context, in *MagicLinkServiceSearchByCodeReq, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, MagicLinksService_ViewByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*MagicLinksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLinksList)
	err := c.cc.Invoke(ctx, MagicLinksService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*MagicLinksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLinksList)
	err := c.cc.Invoke(ctx, MagicLinksService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*MagicLinksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLinksList)
	err := c.cc.Invoke(ctx, MagicLinksService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) ViewWithPagination(ctx context.Context, in *MagicLinksServicePaginationReq, opts ...grpc.CallOption) (*MagicLinkPaginationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLinkPaginationResp)
	err := c.cc.Invoke(ctx, MagicLinksService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) ViewAccessLogs(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*MagicLinkAccessLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLinkAccessLogsList)
	err := c.cc.Invoke(ctx, MagicLinksService_ViewAccessLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) SearchAll(ctx context.Context, in *MagicLinksServiceSearchAllReq, opts ...grpc.CallOption) (*MagicLinksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLinksList)
	err := c.cc.Invoke(ctx, MagicLinksService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) Filter(ctx context.Context, in *MagicLinksServiceFilterReq, opts ...grpc.CallOption) (*MagicLinksList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLinksList)
	err := c.cc.Invoke(ctx, MagicLinksService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) Count(ctx context.Context, in *MagicLinksServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, MagicLinksService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magicLinksServiceClient) DownloadAsCSV(ctx context.Context, in *MagicLinksServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, MagicLinksService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MagicLinksService
