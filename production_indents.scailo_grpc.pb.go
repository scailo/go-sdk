// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: production_indents.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductionIndentsService_Create_FullMethodName                                       = "/Scailo.ProductionIndentsService/Create"
	ProductionIndentsService_Draft_FullMethodName                                        = "/Scailo.ProductionIndentsService/Draft"
	ProductionIndentsService_DraftUpdate_FullMethodName                                  = "/Scailo.ProductionIndentsService/DraftUpdate"
	ProductionIndentsService_SendForVerification_FullMethodName                          = "/Scailo.ProductionIndentsService/SendForVerification"
	ProductionIndentsService_Verify_FullMethodName                                       = "/Scailo.ProductionIndentsService/Verify"
	ProductionIndentsService_Approve_FullMethodName                                      = "/Scailo.ProductionIndentsService/Approve"
	ProductionIndentsService_SendForRevision_FullMethodName                              = "/Scailo.ProductionIndentsService/SendForRevision"
	ProductionIndentsService_RevisionUpdate_FullMethodName                               = "/Scailo.ProductionIndentsService/RevisionUpdate"
	ProductionIndentsService_Halt_FullMethodName                                         = "/Scailo.ProductionIndentsService/Halt"
	ProductionIndentsService_Discard_FullMethodName                                      = "/Scailo.ProductionIndentsService/Discard"
	ProductionIndentsService_Restore_FullMethodName                                      = "/Scailo.ProductionIndentsService/Restore"
	ProductionIndentsService_Complete_FullMethodName                                     = "/Scailo.ProductionIndentsService/Complete"
	ProductionIndentsService_Repeat_FullMethodName                                       = "/Scailo.ProductionIndentsService/Repeat"
	ProductionIndentsService_Reopen_FullMethodName                                       = "/Scailo.ProductionIndentsService/Reopen"
	ProductionIndentsService_CommentAdd_FullMethodName                                   = "/Scailo.ProductionIndentsService/CommentAdd"
	ProductionIndentsService_SendEmail_FullMethodName                                    = "/Scailo.ProductionIndentsService/SendEmail"
	ProductionIndentsService_CreateMagicLink_FullMethodName                              = "/Scailo.ProductionIndentsService/CreateMagicLink"
	ProductionIndentsService_Autofill_FullMethodName                                     = "/Scailo.ProductionIndentsService/Autofill"
	ProductionIndentsService_IsCompletable_FullMethodName                                = "/Scailo.ProductionIndentsService/IsCompletable"
	ProductionIndentsService_AddProductionIndentItem_FullMethodName                      = "/Scailo.ProductionIndentsService/AddProductionIndentItem"
	ProductionIndentsService_ModifyProductionIndentItem_FullMethodName                   = "/Scailo.ProductionIndentsService/ModifyProductionIndentItem"
	ProductionIndentsService_ApproveProductionIndentItem_FullMethodName                  = "/Scailo.ProductionIndentsService/ApproveProductionIndentItem"
	ProductionIndentsService_DeleteProductionIndentItem_FullMethodName                   = "/Scailo.ProductionIndentsService/DeleteProductionIndentItem"
	ProductionIndentsService_ReorderProductionIndentItems_FullMethodName                 = "/Scailo.ProductionIndentsService/ReorderProductionIndentItems"
	ProductionIndentsService_ViewProductionIndentItemByID_FullMethodName                 = "/Scailo.ProductionIndentsService/ViewProductionIndentItemByID"
	ProductionIndentsService_ViewApprovedProductionIndentItems_FullMethodName            = "/Scailo.ProductionIndentsService/ViewApprovedProductionIndentItems"
	ProductionIndentsService_ViewUnapprovedProductionIndentItems_FullMethodName          = "/Scailo.ProductionIndentsService/ViewUnapprovedProductionIndentItems"
	ProductionIndentsService_ViewProductionIndentItemHistory_FullMethodName              = "/Scailo.ProductionIndentsService/ViewProductionIndentItemHistory"
	ProductionIndentsService_ViewPaginatedApprovedProductionIndentItems_FullMethodName   = "/Scailo.ProductionIndentsService/ViewPaginatedApprovedProductionIndentItems"
	ProductionIndentsService_ViewPaginatedUnapprovedProductionIndentItems_FullMethodName = "/Scailo.ProductionIndentsService/ViewPaginatedUnapprovedProductionIndentItems"
	ProductionIndentsService_SearchItemsWithPagination_FullMethodName                    = "/Scailo.ProductionIndentsService/SearchItemsWithPagination"
	ProductionIndentsService_DownloadItemsAsCSV_FullMethodName                           = "/Scailo.ProductionIndentsService/DownloadItemsAsCSV"
	ProductionIndentsService_DownloadItemsTemplateAsCSV_FullMethodName                   = "/Scailo.ProductionIndentsService/DownloadItemsTemplateAsCSV"
	ProductionIndentsService_UploadProductionIndentItems_FullMethodName                  = "/Scailo.ProductionIndentsService/UploadProductionIndentItems"
	ProductionIndentsService_ViewByID_FullMethodName                                     = "/Scailo.ProductionIndentsService/ViewByID"
	ProductionIndentsService_ViewByUUID_FullMethodName                                   = "/Scailo.ProductionIndentsService/ViewByUUID"
	ProductionIndentsService_ViewByReferenceID_FullMethodName                            = "/Scailo.ProductionIndentsService/ViewByReferenceID"
	ProductionIndentsService_ViewEssentialByID_FullMethodName                            = "/Scailo.ProductionIndentsService/ViewEssentialByID"
	ProductionIndentsService_ViewEssentialByUUID_FullMethodName                          = "/Scailo.ProductionIndentsService/ViewEssentialByUUID"
	ProductionIndentsService_ViewFromIDs_FullMethodName                                  = "/Scailo.ProductionIndentsService/ViewFromIDs"
	ProductionIndentsService_ViewAll_FullMethodName                                      = "/Scailo.ProductionIndentsService/ViewAll"
	ProductionIndentsService_ViewAllForEntityUUID_FullMethodName                         = "/Scailo.ProductionIndentsService/ViewAllForEntityUUID"
	ProductionIndentsService_ViewWithPagination_FullMethodName                           = "/Scailo.ProductionIndentsService/ViewWithPagination"
	ProductionIndentsService_ViewProspectiveFamilies_FullMethodName                      = "/Scailo.ProductionIndentsService/ViewProspectiveFamilies"
	ProductionIndentsService_FilterProspectiveFamilies_FullMethodName                    = "/Scailo.ProductionIndentsService/FilterProspectiveFamilies"
	ProductionIndentsService_ViewProspectiveProductionIndentItem_FullMethodName          = "/Scailo.ProductionIndentsService/ViewProspectiveProductionIndentItem"
	ProductionIndentsService_IsDownloadable_FullMethodName                               = "/Scailo.ProductionIndentsService/IsDownloadable"
	ProductionIndentsService_DownloadByUUID_FullMethodName                               = "/Scailo.ProductionIndentsService/DownloadByUUID"
	ProductionIndentsService_ViewIssuedStatistics_FullMethodName                         = "/Scailo.ProductionIndentsService/ViewIssuedStatistics"
	ProductionIndentsService_ViewAddedQuantityForFamily_FullMethodName                   = "/Scailo.ProductionIndentsService/ViewAddedQuantityForFamily"
	ProductionIndentsService_SearchAll_FullMethodName                                    = "/Scailo.ProductionIndentsService/SearchAll"
	ProductionIndentsService_Filter_FullMethodName                                       = "/Scailo.ProductionIndentsService/Filter"
	ProductionIndentsService_CountInStatus_FullMethodName                                = "/Scailo.ProductionIndentsService/CountInStatus"
	ProductionIndentsService_Count_FullMethodName                                        = "/Scailo.ProductionIndentsService/Count"
	ProductionIndentsService_DownloadAsCSV_FullMethodName                                = "/Scailo.ProductionIndentsService/DownloadAsCSV"
)

// ProductionIndentsServiceClient is the client API for ProductionIndentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each production indent
type ProductionIndentsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ProductionIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ProductionIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ProductionIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ProductionIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Autofill the production indent
	Autofill(ctx context.Context, in *ProductionIndentsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Production Indent can be marked as completed
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Add an item to a production indent
	AddProductionIndentItem(ctx context.Context, in *ProductionIndentsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a production indent
	ModifyProductionIndentItem(ctx context.Context, in *ProductionIndentsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a production indent
	ApproveProductionIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a production indent
	DeleteProductionIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a production indent
	ReorderProductionIndentItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Production Indent Item by ID
	ViewProductionIndentItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionIndentItem, error)
	// View approved production indent items for given production indent ID
	ViewApprovedProductionIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProductionIndentsItemsList, error)
	// View unapproved production indent items for given production indent ID
	ViewUnapprovedProductionIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProductionIndentsItemsList, error)
	// View the history of the production indent item
	ViewProductionIndentItemHistory(ctx context.Context, in *ProductionIndentItemHistoryRequest, opts ...grpc.CallOption) (*ProductionIndentsItemsList, error)
	// View approved production indent items for given production indent ID with pagination
	ViewPaginatedApprovedProductionIndentItems(ctx context.Context, in *ProductionIndentItemsSearchRequest, opts ...grpc.CallOption) (*ProductionIndentsServicePaginatedItemsResponse, error)
	// View unapproved production indent items for given production indent ID with pagination
	ViewPaginatedUnapprovedProductionIndentItems(ctx context.Context, in *ProductionIndentItemsSearchRequest, opts ...grpc.CallOption) (*ProductionIndentsServicePaginatedItemsResponse, error)
	// Search through production indent items with pagination
	SearchItemsWithPagination(ctx context.Context, in *ProductionIndentItemsSearchRequest, opts ...grpc.CallOption) (*ProductionIndentsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadProductionIndentItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionIndent, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionIndent, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*ProductionIndent, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionIndent, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionIndent, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ProductionIndentsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ProductionIndentsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionIndentsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ProductionIndentsServicePaginationReq, opts ...grpc.CallOption) (*ProductionIndentsServicePaginationResponse, error)
	// View prospective families for the given production indent
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective production indent item info for the given family ID and production indent ID
	ViewProspectiveProductionIndentItem(ctx context.Context, in *ProductionIndentItemProspectiveInfoRequest, opts ...grpc.CallOption) (*ProductionIndentsServiceItemCreateRequest, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download production indent with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View issued (stock issuance) statistics of the production indent
	ViewIssuedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionIndentIssuedStatisticsList, error)
	// View the added quantity for the family with the given request payload
	ViewAddedQuantityForFamily(ctx context.Context, in *ProductionIndentItemProspectiveInfoRequest, opts ...grpc.CallOption) (*QuantityResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ProductionIndentsServiceSearchAllReq, opts ...grpc.CallOption) (*ProductionIndentsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ProductionIndentsServiceFilterReq, opts ...grpc.CallOption) (*ProductionIndentsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ProductionIndentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ProductionIndentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type productionIndentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductionIndentsServiceClient(cc grpc.ClientConnInterface) ProductionIndentsServiceClient {
	return &productionIndentsServiceClient{cc}
}

func (c *productionIndentsServiceClient) Create(ctx context.Context, in *ProductionIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Draft(ctx context.Context, in *ProductionIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) DraftUpdate(ctx context.Context, in *ProductionIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) RevisionUpdate(ctx context.Context, in *ProductionIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, ProductionIndentsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Autofill(ctx context.Context, in *ProductionIndentsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) AddProductionIndentItem(ctx context.Context, in *ProductionIndentsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_AddProductionIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ModifyProductionIndentItem(ctx context.Context, in *ProductionIndentsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ModifyProductionIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ApproveProductionIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ApproveProductionIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) DeleteProductionIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_DeleteProductionIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ReorderProductionIndentItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ReorderProductionIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewProductionIndentItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionIndentItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentItem)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewProductionIndentItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewApprovedProductionIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProductionIndentsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsItemsList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewApprovedProductionIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewUnapprovedProductionIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProductionIndentsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsItemsList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewUnapprovedProductionIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewProductionIndentItemHistory(ctx context.Context, in *ProductionIndentItemHistoryRequest, opts ...grpc.CallOption) (*ProductionIndentsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsItemsList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewProductionIndentItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewPaginatedApprovedProductionIndentItems(ctx context.Context, in *ProductionIndentItemsSearchRequest, opts ...grpc.CallOption) (*ProductionIndentsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewPaginatedApprovedProductionIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewPaginatedUnapprovedProductionIndentItems(ctx context.Context, in *ProductionIndentItemsSearchRequest, opts ...grpc.CallOption) (*ProductionIndentsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewPaginatedUnapprovedProductionIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) SearchItemsWithPagination(ctx context.Context, in *ProductionIndentItemsSearchRequest, opts ...grpc.CallOption) (*ProductionIndentsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductionIndentsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductionIndentsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) UploadProductionIndentItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_UploadProductionIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndent)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndent)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*ProductionIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndent)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndent)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndent)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ProductionIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ProductionIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewWithPagination(ctx context.Context, in *ProductionIndentsServicePaginationReq, opts ...grpc.CallOption) (*ProductionIndentsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsServicePaginationResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewProspectiveProductionIndentItem(ctx context.Context, in *ProductionIndentItemProspectiveInfoRequest, opts ...grpc.CallOption) (*ProductionIndentsServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewProspectiveProductionIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductionIndentsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewIssuedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionIndentIssuedStatisticsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentIssuedStatisticsList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewIssuedStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) ViewAddedQuantityForFamily(ctx context.Context, in *ProductionIndentItemProspectiveInfoRequest, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_ViewAddedQuantityForFamily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) SearchAll(ctx context.Context, in *ProductionIndentsServiceSearchAllReq, opts ...grpc.CallOption) (*ProductionIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Filter(ctx context.Context, in *ProductionIndentsServiceFilterReq, opts ...grpc.CallOption) (*ProductionIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionIndentsList)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) Count(ctx context.Context, in *ProductionIndentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ProductionIndentsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionIndentsServiceClient) DownloadAsCSV(ctx context.Context, in *ProductionIndentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductionIndentsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductionIndentsService
