// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: merchandises.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchandisesService_Create_FullMethodName                    = "/Scailo.MerchandisesService/Create"
	MerchandisesService_SendToStore_FullMethodName               = "/Scailo.MerchandisesService/SendToStore"
	MerchandisesService_Update_FullMethodName                    = "/Scailo.MerchandisesService/Update"
	MerchandisesService_SendForRework_FullMethodName             = "/Scailo.MerchandisesService/SendForRework"
	MerchandisesService_SendForQC_FullMethodName                 = "/Scailo.MerchandisesService/SendForQC"
	MerchandisesService_SplitLot_FullMethodName                  = "/Scailo.MerchandisesService/SplitLot"
	MerchandisesService_Partition_FullMethodName                 = "/Scailo.MerchandisesService/Partition"
	MerchandisesService_Consume_FullMethodName                   = "/Scailo.MerchandisesService/Consume"
	MerchandisesService_Reject_FullMethodName                    = "/Scailo.MerchandisesService/Reject"
	MerchandisesService_Scrap_FullMethodName                     = "/Scailo.MerchandisesService/Scrap"
	MerchandisesService_ReturnMaterial_FullMethodName            = "/Scailo.MerchandisesService/ReturnMaterial"
	MerchandisesService_Discard_FullMethodName                   = "/Scailo.MerchandisesService/Discard"
	MerchandisesService_CommentAdd_FullMethodName                = "/Scailo.MerchandisesService/CommentAdd"
	MerchandisesService_CreateMagicLink_FullMethodName           = "/Scailo.MerchandisesService/CreateMagicLink"
	MerchandisesService_ViewByID_FullMethodName                  = "/Scailo.MerchandisesService/ViewByID"
	MerchandisesService_ViewByUUID_FullMethodName                = "/Scailo.MerchandisesService/ViewByUUID"
	MerchandisesService_ViewEssentialByID_FullMethodName         = "/Scailo.MerchandisesService/ViewEssentialByID"
	MerchandisesService_ViewEssentialByUUID_FullMethodName       = "/Scailo.MerchandisesService/ViewEssentialByUUID"
	MerchandisesService_ViewFromIDs_FullMethodName               = "/Scailo.MerchandisesService/ViewFromIDs"
	MerchandisesService_ViewFromUUIDs_FullMethodName             = "/Scailo.MerchandisesService/ViewFromUUIDs"
	MerchandisesService_ViewAll_FullMethodName                   = "/Scailo.MerchandisesService/ViewAll"
	MerchandisesService_ViewWithPagination_FullMethodName        = "/Scailo.MerchandisesService/ViewWithPagination"
	MerchandisesService_DownloadQCReportByID_FullMethodName      = "/Scailo.MerchandisesService/DownloadQCReportByID"
	MerchandisesService_DownloadQCReportByUUID_FullMethodName    = "/Scailo.MerchandisesService/DownloadQCReportByUUID"
	MerchandisesService_DownloadLabelByID_FullMethodName         = "/Scailo.MerchandisesService/DownloadLabelByID"
	MerchandisesService_DownloadLabelByUUID_FullMethodName       = "/Scailo.MerchandisesService/DownloadLabelByUUID"
	MerchandisesService_ViewInventoryInteractions_FullMethodName = "/Scailo.MerchandisesService/ViewInventoryInteractions"
	MerchandisesService_SearchAll_FullMethodName                 = "/Scailo.MerchandisesService/SearchAll"
	MerchandisesService_Filter_FullMethodName                    = "/Scailo.MerchandisesService/Filter"
	MerchandisesService_Count_FullMethodName                     = "/Scailo.MerchandisesService/Count"
	MerchandisesService_DownloadAsCSV_FullMethodName             = "/Scailo.MerchandisesService/DownloadAsCSV"
	MerchandisesService_DownloadImportTemplate_FullMethodName    = "/Scailo.MerchandisesService/DownloadImportTemplate"
	MerchandisesService_ImportFromCSV_FullMethodName             = "/Scailo.MerchandisesService/ImportFromCSV"
)

// MerchandisesServiceClient is the client API for MerchandisesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each merchandise
type MerchandisesServiceClient interface {
	// Create (and Send for QC)
	Create(ctx context.Context, in *MerchandisesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send to Store
	SendToStore(ctx context.Context, in *MerchandisesServiceSendToStoreRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update
	Update(ctx context.Context, in *MerchandisesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for Rework
	SendForRework(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for QC
	SendForQC(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Split into unit quantities
	SplitLot(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a partition from the parent lot (and returns the identifier of the new partition)
	Partition(ctx context.Context, in *InventoryPartitionRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Consume
	Consume(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reject
	Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Scrap
	Scrap(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Return
	ReturnMaterial(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Merchandise, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Merchandise, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Merchandise, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Merchandise, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*MerchandisesList, error)
	// View all records with the given UUIDs
	ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*MerchandisesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*MerchandisesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *MerchandisesServicePaginationReq, opts ...grpc.CallOption) (*MerchandisesServicePaginationResponse, error)
	// Download QC Report with the given Identifier
	DownloadQCReportByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error)
	// Download QC Report with the given IdentifierUUID (can be used to allow public downloads)
	DownloadQCReportByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download Label for the given Identifier
	DownloadLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error)
	// Download Label for the given IdentifierUUID (can be used to allow public downloads)
	DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all inventory interactions for merchandise with the given IdentifierUUID
	ViewInventoryInteractions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InventoryInteractionsList, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *MerchandisesServiceSearchAllReq, opts ...grpc.CallOption) (*MerchandisesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *MerchandisesServiceFilterReq, opts ...grpc.CallOption) (*MerchandisesList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *MerchandisesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request
	DownloadAsCSV(ctx context.Context, in *MerchandisesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload records
	DownloadImportTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file. Imports records as initial stock
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type merchandisesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchandisesServiceClient(cc grpc.ClientConnInterface) MerchandisesServiceClient {
	return &merchandisesServiceClient{cc}
}

func (c *merchandisesServiceClient) Create(ctx context.Context, in *MerchandisesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) SendToStore(ctx context.Context, in *MerchandisesServiceSendToStoreRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_SendToStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) Update(ctx context.Context, in *MerchandisesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) SendForRework(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_SendForRework_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) SendForQC(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_SendForQC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) SplitLot(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_SplitLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) Partition(ctx context.Context, in *InventoryPartitionRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_Partition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) Consume(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_Consume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_Reject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) Scrap(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_Scrap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ReturnMaterial(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_ReturnMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, MerchandisesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Merchandise, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Merchandise)
	err := c.cc.Invoke(ctx, MerchandisesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Merchandise, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Merchandise)
	err := c.cc.Invoke(ctx, MerchandisesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Merchandise, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Merchandise)
	err := c.cc.Invoke(ctx, MerchandisesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Merchandise, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Merchandise)
	err := c.cc.Invoke(ctx, MerchandisesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*MerchandisesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchandisesList)
	err := c.cc.Invoke(ctx, MerchandisesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*MerchandisesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchandisesList)
	err := c.cc.Invoke(ctx, MerchandisesService_ViewFromUUIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*MerchandisesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchandisesList)
	err := c.cc.Invoke(ctx, MerchandisesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ViewWithPagination(ctx context.Context, in *MerchandisesServicePaginationReq, opts ...grpc.CallOption) (*MerchandisesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchandisesServicePaginationResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) DownloadQCReportByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, MerchandisesService_DownloadQCReportByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) DownloadQCReportByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, MerchandisesService_DownloadQCReportByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) DownloadLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, MerchandisesService_DownloadLabelByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, MerchandisesService_DownloadLabelByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ViewInventoryInteractions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InventoryInteractionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryInteractionsList)
	err := c.cc.Invoke(ctx, MerchandisesService_ViewInventoryInteractions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) SearchAll(ctx context.Context, in *MerchandisesServiceSearchAllReq, opts ...grpc.CallOption) (*MerchandisesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchandisesList)
	err := c.cc.Invoke(ctx, MerchandisesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) Filter(ctx context.Context, in *MerchandisesServiceFilterReq, opts ...grpc.CallOption) (*MerchandisesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchandisesList)
	err := c.cc.Invoke(ctx, MerchandisesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) Count(ctx context.Context, in *MerchandisesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, MerchandisesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) DownloadAsCSV(ctx context.Context, in *MerchandisesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, MerchandisesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) DownloadImportTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, MerchandisesService_DownloadImportTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchandisesServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, MerchandisesService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchandisesService
