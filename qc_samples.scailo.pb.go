// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: qc_samples.scailo.proto

package sdk

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the lifecycle status of each qc sample
type QC_SAMPLE_LIFECYCLE int32

const (
	// Used only in filters
	QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED QC_SAMPLE_LIFECYCLE = 0
	// Denotes that the qc sample is open
	QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_OPEN QC_SAMPLE_LIFECYCLE = 1
	// Denotes that the qc sample has been finished and waiting for approval
	QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_FINISHED QC_SAMPLE_LIFECYCLE = 2
	// Denotes that the qc sample has been accepted
	QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_ACCEPTED QC_SAMPLE_LIFECYCLE = 3
	// Denotes that the qc sample has been accepted with deviation
	QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_ACCEPTED_WITH_DEVIATION QC_SAMPLE_LIFECYCLE = 4
	// Denotes that the qc sample has been rejected
	QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_REJECTED QC_SAMPLE_LIFECYCLE = 5
	// Denotes that the qc sample has been cancelled
	QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_CANCELLED QC_SAMPLE_LIFECYCLE = 6
)

// Enum value maps for QC_SAMPLE_LIFECYCLE.
var (
	QC_SAMPLE_LIFECYCLE_name = map[int32]string{
		0: "QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED",
		1: "QC_SAMPLE_LIFECYCLE_OPEN",
		2: "QC_SAMPLE_LIFECYCLE_FINISHED",
		3: "QC_SAMPLE_LIFECYCLE_ACCEPTED",
		4: "QC_SAMPLE_LIFECYCLE_ACCEPTED_WITH_DEVIATION",
		5: "QC_SAMPLE_LIFECYCLE_REJECTED",
		6: "QC_SAMPLE_LIFECYCLE_CANCELLED",
	}
	QC_SAMPLE_LIFECYCLE_value = map[string]int32{
		"QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED":         0,
		"QC_SAMPLE_LIFECYCLE_OPEN":                    1,
		"QC_SAMPLE_LIFECYCLE_FINISHED":                2,
		"QC_SAMPLE_LIFECYCLE_ACCEPTED":                3,
		"QC_SAMPLE_LIFECYCLE_ACCEPTED_WITH_DEVIATION": 4,
		"QC_SAMPLE_LIFECYCLE_REJECTED":                5,
		"QC_SAMPLE_LIFECYCLE_CANCELLED":               6,
	}
)

func (x QC_SAMPLE_LIFECYCLE) Enum() *QC_SAMPLE_LIFECYCLE {
	p := new(QC_SAMPLE_LIFECYCLE)
	*p = x
	return p
}

func (x QC_SAMPLE_LIFECYCLE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QC_SAMPLE_LIFECYCLE) Descriptor() protoreflect.EnumDescriptor {
	return file_qc_samples_scailo_proto_enumTypes[0].Descriptor()
}

func (QC_SAMPLE_LIFECYCLE) Type() protoreflect.EnumType {
	return &file_qc_samples_scailo_proto_enumTypes[0]
}

func (x QC_SAMPLE_LIFECYCLE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QC_SAMPLE_LIFECYCLE.Descriptor instead.
func (QC_SAMPLE_LIFECYCLE) EnumDescriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{0}
}

// Describes the available sort keys
type QC_SAMPLE_SORT_KEY int32

const (
	// Fetch ordered results by id
	QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED QC_SAMPLE_SORT_KEY = 0
	// Fetch ordered results by the creation timestamp
	QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_CREATED_AT QC_SAMPLE_SORT_KEY = 1
	// Fetch ordered results by the modified timestamp
	QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_MODIFIED_AT QC_SAMPLE_SORT_KEY = 2
	// Fetch ordered results by the approved on timestamp
	QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_APPROVED_ON QC_SAMPLE_SORT_KEY = 3
	// Fetch ordered results by the approved by field
	QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_APPROVED_BY QC_SAMPLE_SORT_KEY = 4
	// Fetch ordered results by the approver's role ID
	QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_APPROVER_ROLE_ID QC_SAMPLE_SORT_KEY = 5
	// Fetch ordered results by the approver's finished on timestamp
	QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_FINISHED_ON QC_SAMPLE_SORT_KEY = 6
	// Fetch ordered results by the qc group ID
	QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_QC_GROUP_ID QC_SAMPLE_SORT_KEY = 7
	// Fetch ordered results by the name
	QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_NAME QC_SAMPLE_SORT_KEY = 10
)

// Enum value maps for QC_SAMPLE_SORT_KEY.
var (
	QC_SAMPLE_SORT_KEY_name = map[int32]string{
		0:  "QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED",
		1:  "QC_SAMPLE_SORT_KEY_CREATED_AT",
		2:  "QC_SAMPLE_SORT_KEY_MODIFIED_AT",
		3:  "QC_SAMPLE_SORT_KEY_APPROVED_ON",
		4:  "QC_SAMPLE_SORT_KEY_APPROVED_BY",
		5:  "QC_SAMPLE_SORT_KEY_APPROVER_ROLE_ID",
		6:  "QC_SAMPLE_SORT_KEY_FINISHED_ON",
		7:  "QC_SAMPLE_SORT_KEY_QC_GROUP_ID",
		10: "QC_SAMPLE_SORT_KEY_NAME",
	}
	QC_SAMPLE_SORT_KEY_value = map[string]int32{
		"QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED":   0,
		"QC_SAMPLE_SORT_KEY_CREATED_AT":       1,
		"QC_SAMPLE_SORT_KEY_MODIFIED_AT":      2,
		"QC_SAMPLE_SORT_KEY_APPROVED_ON":      3,
		"QC_SAMPLE_SORT_KEY_APPROVED_BY":      4,
		"QC_SAMPLE_SORT_KEY_APPROVER_ROLE_ID": 5,
		"QC_SAMPLE_SORT_KEY_FINISHED_ON":      6,
		"QC_SAMPLE_SORT_KEY_QC_GROUP_ID":      7,
		"QC_SAMPLE_SORT_KEY_NAME":             10,
	}
)

func (x QC_SAMPLE_SORT_KEY) Enum() *QC_SAMPLE_SORT_KEY {
	p := new(QC_SAMPLE_SORT_KEY)
	*p = x
	return p
}

func (x QC_SAMPLE_SORT_KEY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QC_SAMPLE_SORT_KEY) Descriptor() protoreflect.EnumDescriptor {
	return file_qc_samples_scailo_proto_enumTypes[1].Descriptor()
}

func (QC_SAMPLE_SORT_KEY) Type() protoreflect.EnumType {
	return &file_qc_samples_scailo_proto_enumTypes[1]
}

func (x QC_SAMPLE_SORT_KEY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QC_SAMPLE_SORT_KEY.Descriptor instead.
func (QC_SAMPLE_SORT_KEY) EnumDescriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{1}
}

// Describes the available sort keys
type QC_SAMPLE_PARAMETER_SORT_KEY int32

const (
	// Fetch ordered results by id
	QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_PARAMETER_SORT_KEY_ID_UNSPECIFIED QC_SAMPLE_PARAMETER_SORT_KEY = 0
	// Fetch ordered results by the creation timestamp
	QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_PARAMETER_SORT_KEY_CREATED_AT QC_SAMPLE_PARAMETER_SORT_KEY = 1
	// Fetch ordered results by the modified timestamp
	QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_PARAMETER_SORT_KEY_MODIFIED_AT QC_SAMPLE_PARAMETER_SORT_KEY = 2
	// Fetch ordered results by username that checked
	QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_BY QC_SAMPLE_PARAMETER_SORT_KEY = 10
	// Fetch ordered results by the checked at timestamp
	QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_AT QC_SAMPLE_PARAMETER_SORT_KEY = 11
	// Fetch ordered results by the qc sample ID
	QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_ID QC_SAMPLE_PARAMETER_SORT_KEY = 12
	// Fetch ordered results by the qc param ID
	QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_PARAMETER_SORT_KEY_QC_PARAM_ID QC_SAMPLE_PARAMETER_SORT_KEY = 13
	// Fetch ordered results by the uom ID
	QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_PARAMETER_SORT_KEY_UOM_ID QC_SAMPLE_PARAMETER_SORT_KEY = 14
)

// Enum value maps for QC_SAMPLE_PARAMETER_SORT_KEY.
var (
	QC_SAMPLE_PARAMETER_SORT_KEY_name = map[int32]string{
		0:  "QC_SAMPLE_PARAMETER_SORT_KEY_ID_UNSPECIFIED",
		1:  "QC_SAMPLE_PARAMETER_SORT_KEY_CREATED_AT",
		2:  "QC_SAMPLE_PARAMETER_SORT_KEY_MODIFIED_AT",
		10: "QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_BY",
		11: "QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_AT",
		12: "QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_ID",
		13: "QC_SAMPLE_PARAMETER_SORT_KEY_QC_PARAM_ID",
		14: "QC_SAMPLE_PARAMETER_SORT_KEY_UOM_ID",
	}
	QC_SAMPLE_PARAMETER_SORT_KEY_value = map[string]int32{
		"QC_SAMPLE_PARAMETER_SORT_KEY_ID_UNSPECIFIED": 0,
		"QC_SAMPLE_PARAMETER_SORT_KEY_CREATED_AT":     1,
		"QC_SAMPLE_PARAMETER_SORT_KEY_MODIFIED_AT":    2,
		"QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_BY":     10,
		"QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_AT":     11,
		"QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_ID":   12,
		"QC_SAMPLE_PARAMETER_SORT_KEY_QC_PARAM_ID":    13,
		"QC_SAMPLE_PARAMETER_SORT_KEY_UOM_ID":         14,
	}
)

func (x QC_SAMPLE_PARAMETER_SORT_KEY) Enum() *QC_SAMPLE_PARAMETER_SORT_KEY {
	p := new(QC_SAMPLE_PARAMETER_SORT_KEY)
	*p = x
	return p
}

func (x QC_SAMPLE_PARAMETER_SORT_KEY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QC_SAMPLE_PARAMETER_SORT_KEY) Descriptor() protoreflect.EnumDescriptor {
	return file_qc_samples_scailo_proto_enumTypes[2].Descriptor()
}

func (QC_SAMPLE_PARAMETER_SORT_KEY) Type() protoreflect.EnumType {
	return &file_qc_samples_scailo_proto_enumTypes[2]
}

func (x QC_SAMPLE_PARAMETER_SORT_KEY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QC_SAMPLE_PARAMETER_SORT_KEY.Descriptor instead.
func (QC_SAMPLE_PARAMETER_SORT_KEY) EnumDescriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{2}
}

// Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being a qc sample lifecycle status
type LogbookLogQCSampleLC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the resource
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Stores if the resource is active
	IsActive bool `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Stores the timestamp of when this resource was created
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The UUID of the resource
	RefUuid string `protobuf:"bytes,10,opt,name=ref_uuid,json=refUuid,proto3" json:"ref_uuid,omitempty"`
	// The operation that was performed
	Operation QC_SAMPLE_LIFECYCLE `protobuf:"varint,11,opt,name=operation,proto3,enum=Scailo.QC_SAMPLE_LIFECYCLE" json:"operation,omitempty"`
	// The username of the user who performed this operation
	Username string `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
	// The name of the person who made this entry
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of the user who made this entry
	UserId uint64 `protobuf:"varint,14,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The comment generated by the application
	AppComment string `protobuf:"bytes,15,opt,name=app_comment,json=appComment,proto3" json:"app_comment,omitempty"`
	// The comment entered by the user
	UserComment   string `protobuf:"bytes,16,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogbookLogQCSampleLC) Reset() {
	*x = LogbookLogQCSampleLC{}
	mi := &file_qc_samples_scailo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogbookLogQCSampleLC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogbookLogQCSampleLC) ProtoMessage() {}

func (x *LogbookLogQCSampleLC) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogbookLogQCSampleLC.ProtoReflect.Descriptor instead.
func (*LogbookLogQCSampleLC) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{0}
}

func (x *LogbookLogQCSampleLC) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogbookLogQCSampleLC) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *LogbookLogQCSampleLC) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LogbookLogQCSampleLC) GetRefUuid() string {
	if x != nil {
		return x.RefUuid
	}
	return ""
}

func (x *LogbookLogQCSampleLC) GetOperation() QC_SAMPLE_LIFECYCLE {
	if x != nil {
		return x.Operation
	}
	return QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED
}

func (x *LogbookLogQCSampleLC) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LogbookLogQCSampleLC) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogbookLogQCSampleLC) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LogbookLogQCSampleLC) GetAppComment() string {
	if x != nil {
		return x.AppComment
	}
	return ""
}

func (x *LogbookLogQCSampleLC) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

// Describes the parameters necessary to create a record
type QCSamplesServiceCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,2,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The associated vault folder ID
	VaultFolderId uint64 `protobuf:"varint,8,opt,name=vault_folder_id,json=vaultFolderId,proto3" json:"vault_folder_id,omitempty"`
	// The associated family ID
	FamilyId uint64 `protobuf:"varint,10,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"`
	// The UUID of the inventory item
	InventoryItemUuid string `protobuf:"bytes,11,opt,name=inventory_item_uuid,json=inventoryItemUuid,proto3" json:"inventory_item_uuid,omitempty"`
	// The ID of the qc group
	QcGroupId uint64 `protobuf:"varint,12,opt,name=qc_group_id,json=qcGroupId,proto3" json:"qc_group_id,omitempty"`
	// The location ID of where the record is created
	LocationId uint64 `protobuf:"varint,13,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// The name that will be used as a prefix
	NamePrefix string `protobuf:"bytes,20,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	// The description of the qc sample
	Description string `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	// The number of samples that need to be created
	SampleCount   uint64 `protobuf:"varint,30,opt,name=sample_count,json=sampleCount,proto3" json:"sample_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesServiceCreateRequest) Reset() {
	*x = QCSamplesServiceCreateRequest{}
	mi := &file_qc_samples_scailo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesServiceCreateRequest) ProtoMessage() {}

func (x *QCSamplesServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*QCSamplesServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{1}
}

func (x *QCSamplesServiceCreateRequest) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *QCSamplesServiceCreateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *QCSamplesServiceCreateRequest) GetVaultFolderId() uint64 {
	if x != nil {
		return x.VaultFolderId
	}
	return 0
}

func (x *QCSamplesServiceCreateRequest) GetFamilyId() uint64 {
	if x != nil {
		return x.FamilyId
	}
	return 0
}

func (x *QCSamplesServiceCreateRequest) GetInventoryItemUuid() string {
	if x != nil {
		return x.InventoryItemUuid
	}
	return ""
}

func (x *QCSamplesServiceCreateRequest) GetQcGroupId() uint64 {
	if x != nil {
		return x.QcGroupId
	}
	return 0
}

func (x *QCSamplesServiceCreateRequest) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *QCSamplesServiceCreateRequest) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

func (x *QCSamplesServiceCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QCSamplesServiceCreateRequest) GetSampleCount() uint64 {
	if x != nil {
		return x.SampleCount
	}
	return 0
}

// Describes the parameters necessary to update a record
type QCSamplesServiceUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,1,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The ID of the record that needs to be updated
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
	NotifyUsers bool `protobuf:"varint,3,opt,name=notify_users,json=notifyUsers,proto3" json:"notify_users,omitempty"`
	// The associated vault folder ID
	VaultFolderId uint64 `protobuf:"varint,8,opt,name=vault_folder_id,json=vaultFolderId,proto3" json:"vault_folder_id,omitempty"`
	// The name of the qc sample
	Name string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the qc sample
	Description   string `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesServiceUpdateRequest) Reset() {
	*x = QCSamplesServiceUpdateRequest{}
	mi := &file_qc_samples_scailo_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesServiceUpdateRequest) ProtoMessage() {}

func (x *QCSamplesServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*QCSamplesServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{2}
}

func (x *QCSamplesServiceUpdateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *QCSamplesServiceUpdateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QCSamplesServiceUpdateRequest) GetNotifyUsers() bool {
	if x != nil {
		return x.NotifyUsers
	}
	return false
}

func (x *QCSamplesServiceUpdateRequest) GetVaultFolderId() uint64 {
	if x != nil {
		return x.VaultFolderId
	}
	return 0
}

func (x *QCSamplesServiceUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QCSamplesServiceUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Stores the UUID references of the record
type QCSampleAncillaryParameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID of the family
	FamilyUuid string `protobuf:"bytes,100,opt,name=family_uuid,json=familyUuid,proto3" json:"family_uuid,omitempty"`
	// The UUID of the inventory item
	InventoryItemUuid string `protobuf:"bytes,111,opt,name=inventory_item_uuid,json=inventoryItemUuid,proto3" json:"inventory_item_uuid,omitempty"`
	// The UUID of the qc group
	QcGroupUuid string `protobuf:"bytes,112,opt,name=qc_group_uuid,json=qcGroupUuid,proto3" json:"qc_group_uuid,omitempty"`
	// The UUID of the location
	LocationUuid  string `protobuf:"bytes,113,opt,name=location_uuid,json=locationUuid,proto3" json:"location_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSampleAncillaryParameters) Reset() {
	*x = QCSampleAncillaryParameters{}
	mi := &file_qc_samples_scailo_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSampleAncillaryParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSampleAncillaryParameters) ProtoMessage() {}

func (x *QCSampleAncillaryParameters) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSampleAncillaryParameters.ProtoReflect.Descriptor instead.
func (*QCSampleAncillaryParameters) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{3}
}

func (x *QCSampleAncillaryParameters) GetFamilyUuid() string {
	if x != nil {
		return x.FamilyUuid
	}
	return ""
}

func (x *QCSampleAncillaryParameters) GetInventoryItemUuid() string {
	if x != nil {
		return x.InventoryItemUuid
	}
	return ""
}

func (x *QCSampleAncillaryParameters) GetQcGroupUuid() string {
	if x != nil {
		return x.QcGroupUuid
	}
	return ""
}

func (x *QCSampleAncillaryParameters) GetLocationUuid() string {
	if x != nil {
		return x.LocationUuid
	}
	return ""
}

// Describes the parameters that are part of a standard response
type QCSample struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores the metadata of this qc sample
	Metadata *EmployeeMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Stores the approval metadata
	ApprovalMetadata *ApprovalMetadata `protobuf:"bytes,3,opt,name=approval_metadata,json=approvalMetadata,proto3" json:"approval_metadata,omitempty"`
	// The status of this qc sample
	Status QC_SAMPLE_LIFECYCLE `protobuf:"varint,4,opt,name=status,proto3,enum=Scailo.QC_SAMPLE_LIFECYCLE" json:"status,omitempty"`
	// Stores the logs of every operation performed on this qc sample
	Logs []*LogbookLogQCSampleLC `protobuf:"bytes,5,rep,name=logs,proto3" json:"logs,omitempty"`
	// The timestamp of when this qc sample was marked as finished
	FinishedOn uint64 `protobuf:"varint,6,opt,name=finished_on,json=finishedOn,proto3" json:"finished_on,omitempty"`
	// The associated vault folder ID
	VaultFolderId uint64 `protobuf:"varint,8,opt,name=vault_folder_id,json=vaultFolderId,proto3" json:"vault_folder_id,omitempty"`
	// The associated family type
	FamilyType FAMILY_TYPE `protobuf:"varint,9,opt,name=family_type,json=familyType,proto3,enum=Scailo.FAMILY_TYPE" json:"family_type,omitempty"`
	// The associated family ID
	FamilyId uint64 `protobuf:"varint,10,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"`
	// The UUID of the inventory item
	InventoryItemUuid string `protobuf:"bytes,11,opt,name=inventory_item_uuid,json=inventoryItemUuid,proto3" json:"inventory_item_uuid,omitempty"`
	// The ID of the qc group
	QcGroupId uint64 `protobuf:"varint,12,opt,name=qc_group_id,json=qcGroupId,proto3" json:"qc_group_id,omitempty"`
	// The location ID of where the record is created
	LocationId uint64 `protobuf:"varint,13,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// The name of the qc sample (will be autogenerated if not provided)
	Name string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the qc sample
	Description   string `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSample) Reset() {
	*x = QCSample{}
	mi := &file_qc_samples_scailo_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSample) ProtoMessage() {}

func (x *QCSample) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSample.ProtoReflect.Descriptor instead.
func (*QCSample) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{4}
}

func (x *QCSample) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *QCSample) GetMetadata() *EmployeeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *QCSample) GetApprovalMetadata() *ApprovalMetadata {
	if x != nil {
		return x.ApprovalMetadata
	}
	return nil
}

func (x *QCSample) GetStatus() QC_SAMPLE_LIFECYCLE {
	if x != nil {
		return x.Status
	}
	return QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED
}

func (x *QCSample) GetLogs() []*LogbookLogQCSampleLC {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *QCSample) GetFinishedOn() uint64 {
	if x != nil {
		return x.FinishedOn
	}
	return 0
}

func (x *QCSample) GetVaultFolderId() uint64 {
	if x != nil {
		return x.VaultFolderId
	}
	return 0
}

func (x *QCSample) GetFamilyType() FAMILY_TYPE {
	if x != nil {
		return x.FamilyType
	}
	return FAMILY_TYPE_FAMILY_TYPE_ANY_UNSPECIFIED
}

func (x *QCSample) GetFamilyId() uint64 {
	if x != nil {
		return x.FamilyId
	}
	return 0
}

func (x *QCSample) GetInventoryItemUuid() string {
	if x != nil {
		return x.InventoryItemUuid
	}
	return ""
}

func (x *QCSample) GetQcGroupId() uint64 {
	if x != nil {
		return x.QcGroupId
	}
	return 0
}

func (x *QCSample) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *QCSample) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QCSample) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the parameters that are part of a standard response
type QCSampleWithMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores the QC Sample
	QcSample *QCSample `protobuf:"bytes,1,opt,name=qc_sample,json=qcSample,proto3" json:"qc_sample,omitempty"`
	// Stores the family information
	Family *Family `protobuf:"bytes,10,opt,name=family,proto3" json:"family,omitempty"`
	// Stores the associated qc group
	QcGroup *QCGroup `protobuf:"bytes,20,opt,name=qc_group,json=qcGroup,proto3" json:"qc_group,omitempty"`
	// Stores the generic inventory information
	InventoryItem *GenericInventory `protobuf:"bytes,30,opt,name=inventory_item,json=inventoryItem,proto3" json:"inventory_item,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSampleWithMetadata) Reset() {
	*x = QCSampleWithMetadata{}
	mi := &file_qc_samples_scailo_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSampleWithMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSampleWithMetadata) ProtoMessage() {}

func (x *QCSampleWithMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSampleWithMetadata.ProtoReflect.Descriptor instead.
func (*QCSampleWithMetadata) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{5}
}

func (x *QCSampleWithMetadata) GetQcSample() *QCSample {
	if x != nil {
		return x.QcSample
	}
	return nil
}

func (x *QCSampleWithMetadata) GetFamily() *Family {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *QCSampleWithMetadata) GetQcGroup() *QCGroup {
	if x != nil {
		return x.QcGroup
	}
	return nil
}

func (x *QCSampleWithMetadata) GetInventoryItem() *GenericInventory {
	if x != nil {
		return x.InventoryItem
	}
	return nil
}

// Describes the message consisting of the list of records
type QCSamplesList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of records
	List          []*QCSample `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesList) Reset() {
	*x = QCSamplesList{}
	mi := &file_qc_samples_scailo_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesList) ProtoMessage() {}

func (x *QCSamplesList) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesList.ProtoReflect.Descriptor instead.
func (*QCSamplesList) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{6}
}

func (x *QCSamplesList) GetList() []*QCSample {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes the message consisting of the list of QC samples with metadata
type QCSamplesWithMetadataList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of records
	List          []*QCSampleWithMetadata `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesWithMetadataList) Reset() {
	*x = QCSamplesWithMetadataList{}
	mi := &file_qc_samples_scailo_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesWithMetadataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesWithMetadataList) ProtoMessage() {}

func (x *QCSamplesWithMetadataList) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesWithMetadataList.ProtoReflect.Descriptor instead.
func (*QCSamplesWithMetadataList) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{7}
}

func (x *QCSamplesWithMetadataList) GetList() []*QCSampleWithMetadata {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes a pagination request to retrieve records
type QCSamplesServicePaginationReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey QC_SAMPLE_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.QC_SAMPLE_SORT_KEY" json:"sort_key,omitempty"`
	// The status of this qc sample
	Status        QC_SAMPLE_LIFECYCLE `protobuf:"varint,6,opt,name=status,proto3,enum=Scailo.QC_SAMPLE_LIFECYCLE" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesServicePaginationReq) Reset() {
	*x = QCSamplesServicePaginationReq{}
	mi := &file_qc_samples_scailo_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesServicePaginationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesServicePaginationReq) ProtoMessage() {}

func (x *QCSamplesServicePaginationReq) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesServicePaginationReq.ProtoReflect.Descriptor instead.
func (*QCSamplesServicePaginationReq) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{8}
}

func (x *QCSamplesServicePaginationReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *QCSamplesServicePaginationReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QCSamplesServicePaginationReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QCSamplesServicePaginationReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *QCSamplesServicePaginationReq) GetSortKey() QC_SAMPLE_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED
}

func (x *QCSamplesServicePaginationReq) GetStatus() QC_SAMPLE_LIFECYCLE {
	if x != nil {
		return x.Status
	}
	return QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED
}

// Describes the response to a pagination request
type QCSamplesServicePaginationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of records in this payload
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The total number of records that are available
	Total uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// The list of records
	Payload       []*QCSample `protobuf:"bytes,4,rep,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesServicePaginationResponse) Reset() {
	*x = QCSamplesServicePaginationResponse{}
	mi := &file_qc_samples_scailo_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesServicePaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesServicePaginationResponse) ProtoMessage() {}

func (x *QCSamplesServicePaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesServicePaginationResponse.ProtoReflect.Descriptor instead.
func (*QCSamplesServicePaginationResponse) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{9}
}

func (x *QCSamplesServicePaginationResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QCSamplesServicePaginationResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QCSamplesServicePaginationResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QCSamplesServicePaginationResponse) GetPayload() []*QCSample {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Describes the base request payload of a filter search
type QCSamplesServiceFilterReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey QC_SAMPLE_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.QC_SAMPLE_SORT_KEY" json:"sort_key,omitempty"`
	// The minimum timestamp that needs to be considered to filter by creation
	CreationTimestampStart uint64 `protobuf:"varint,101,opt,name=creation_timestamp_start,json=creationTimestampStart,proto3" json:"creation_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by creation
	CreationTimestampEnd uint64 `protobuf:"varint,102,opt,name=creation_timestamp_end,json=creationTimestampEnd,proto3" json:"creation_timestamp_end,omitempty"`
	// The minimum timestamp that needs to be considered to filter by modification
	ModificationTimestampStart uint64 `protobuf:"varint,103,opt,name=modification_timestamp_start,json=modificationTimestampStart,proto3" json:"modification_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by modification
	ModificationTimestampEnd uint64 `protobuf:"varint,104,opt,name=modification_timestamp_end,json=modificationTimestampEnd,proto3" json:"modification_timestamp_end,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,8,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// The status of this qc sample
	Status QC_SAMPLE_LIFECYCLE `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.QC_SAMPLE_LIFECYCLE" json:"status,omitempty"`
	// The start range of finished timestamp
	FinishedOnStart uint64 `protobuf:"varint,15,opt,name=finished_on_start,json=finishedOnStart,proto3" json:"finished_on_start,omitempty"`
	// The end range of finished timestamp
	FinishedOnEnd uint64 `protobuf:"varint,16,opt,name=finished_on_end,json=finishedOnEnd,proto3" json:"finished_on_end,omitempty"`
	// The associated family type
	FamilyType FAMILY_TYPE `protobuf:"varint,17,opt,name=family_type,json=familyType,proto3,enum=Scailo.FAMILY_TYPE" json:"family_type,omitempty"`
	// The associated family ID
	FamilyId uint64 `protobuf:"varint,18,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"`
	// The ID of the qc group
	QcGroupId uint64 `protobuf:"varint,19,opt,name=qc_group_id,json=qcGroupId,proto3" json:"qc_group_id,omitempty"`
	// The UUID of the inventory item
	InventoryItemUuid string `protobuf:"bytes,20,opt,name=inventory_item_uuid,json=inventoryItemUuid,proto3" json:"inventory_item_uuid,omitempty"`
	// The location ID of where the record is created
	LocationId uint64 `protobuf:"varint,21,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// ------------------------------------------------------------
	// Higher order filters
	// ------------------------------------------------------------
	// The associated production plan ID
	ProductionPlanId uint64 `protobuf:"varint,50,opt,name=production_plan_id,json=productionPlanId,proto3" json:"production_plan_id,omitempty"`
	// The associated goods receipt ID
	GoodsReceiptId uint64 `protobuf:"varint,51,opt,name=goods_receipt_id,json=goodsReceiptId,proto3" json:"goods_receipt_id,omitempty"`
	// The associated inward job free issue material ID
	InwardJobFreeIssueMaterialId uint64 `protobuf:"varint,52,opt,name=inward_job_free_issue_material_id,json=inwardJobFreeIssueMaterialId,proto3" json:"inward_job_free_issue_material_id,omitempty"`
	// The associated vendor ID
	VendorId uint64 `protobuf:"varint,55,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	// The associated buyer client ID of the linked sales order
	BuyerClientId uint64 `protobuf:"varint,70,opt,name=buyer_client_id,json=buyerClientId,proto3" json:"buyer_client_id,omitempty"` // ------------------------------------------------------------
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesServiceFilterReq) Reset() {
	*x = QCSamplesServiceFilterReq{}
	mi := &file_qc_samples_scailo_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesServiceFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesServiceFilterReq) ProtoMessage() {}

func (x *QCSamplesServiceFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesServiceFilterReq.ProtoReflect.Descriptor instead.
func (*QCSamplesServiceFilterReq) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{10}
}

func (x *QCSamplesServiceFilterReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *QCSamplesServiceFilterReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *QCSamplesServiceFilterReq) GetSortKey() QC_SAMPLE_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED
}

func (x *QCSamplesServiceFilterReq) GetCreationTimestampStart() uint64 {
	if x != nil {
		return x.CreationTimestampStart
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetCreationTimestampEnd() uint64 {
	if x != nil {
		return x.CreationTimestampEnd
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetModificationTimestampStart() uint64 {
	if x != nil {
		return x.ModificationTimestampStart
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetModificationTimestampEnd() uint64 {
	if x != nil {
		return x.ModificationTimestampEnd
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *QCSamplesServiceFilterReq) GetStatus() QC_SAMPLE_LIFECYCLE {
	if x != nil {
		return x.Status
	}
	return QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED
}

func (x *QCSamplesServiceFilterReq) GetFinishedOnStart() uint64 {
	if x != nil {
		return x.FinishedOnStart
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetFinishedOnEnd() uint64 {
	if x != nil {
		return x.FinishedOnEnd
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetFamilyType() FAMILY_TYPE {
	if x != nil {
		return x.FamilyType
	}
	return FAMILY_TYPE_FAMILY_TYPE_ANY_UNSPECIFIED
}

func (x *QCSamplesServiceFilterReq) GetFamilyId() uint64 {
	if x != nil {
		return x.FamilyId
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetQcGroupId() uint64 {
	if x != nil {
		return x.QcGroupId
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetInventoryItemUuid() string {
	if x != nil {
		return x.InventoryItemUuid
	}
	return ""
}

func (x *QCSamplesServiceFilterReq) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetProductionPlanId() uint64 {
	if x != nil {
		return x.ProductionPlanId
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetGoodsReceiptId() uint64 {
	if x != nil {
		return x.GoodsReceiptId
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetInwardJobFreeIssueMaterialId() uint64 {
	if x != nil {
		return x.InwardJobFreeIssueMaterialId
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetVendorId() uint64 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *QCSamplesServiceFilterReq) GetBuyerClientId() uint64 {
	if x != nil {
		return x.BuyerClientId
	}
	return 0
}

// Describes the base request payload of a count search
type QCSamplesServiceCountReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The minimum timestamp that needs to be considered to filter by creation
	CreationTimestampStart uint64 `protobuf:"varint,101,opt,name=creation_timestamp_start,json=creationTimestampStart,proto3" json:"creation_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by creation
	CreationTimestampEnd uint64 `protobuf:"varint,102,opt,name=creation_timestamp_end,json=creationTimestampEnd,proto3" json:"creation_timestamp_end,omitempty"`
	// The minimum timestamp that needs to be considered to filter by modification
	ModificationTimestampStart uint64 `protobuf:"varint,103,opt,name=modification_timestamp_start,json=modificationTimestampStart,proto3" json:"modification_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by modification
	ModificationTimestampEnd uint64 `protobuf:"varint,104,opt,name=modification_timestamp_end,json=modificationTimestampEnd,proto3" json:"modification_timestamp_end,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,8,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// The status of this qc sample
	Status QC_SAMPLE_LIFECYCLE `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.QC_SAMPLE_LIFECYCLE" json:"status,omitempty"`
	// The start range of finished timestamp
	FinishedOnStart uint64 `protobuf:"varint,15,opt,name=finished_on_start,json=finishedOnStart,proto3" json:"finished_on_start,omitempty"`
	// The end range of finished timestamp
	FinishedOnEnd uint64 `protobuf:"varint,16,opt,name=finished_on_end,json=finishedOnEnd,proto3" json:"finished_on_end,omitempty"`
	// The associated family type
	FamilyType FAMILY_TYPE `protobuf:"varint,17,opt,name=family_type,json=familyType,proto3,enum=Scailo.FAMILY_TYPE" json:"family_type,omitempty"`
	// The associated family ID
	FamilyId uint64 `protobuf:"varint,18,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"`
	// The ID of the qc group
	QcGroupId uint64 `protobuf:"varint,19,opt,name=qc_group_id,json=qcGroupId,proto3" json:"qc_group_id,omitempty"`
	// The UUID of the inventory item
	InventoryItemUuid string `protobuf:"bytes,20,opt,name=inventory_item_uuid,json=inventoryItemUuid,proto3" json:"inventory_item_uuid,omitempty"`
	// The location ID of where the record is created
	LocationId uint64 `protobuf:"varint,21,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// ------------------------------------------------------------
	// Higher order filters
	// ------------------------------------------------------------
	// The associated production plan ID
	ProductionPlanId uint64 `protobuf:"varint,50,opt,name=production_plan_id,json=productionPlanId,proto3" json:"production_plan_id,omitempty"`
	// The associated goods receipt ID
	GoodsReceiptId uint64 `protobuf:"varint,51,opt,name=goods_receipt_id,json=goodsReceiptId,proto3" json:"goods_receipt_id,omitempty"`
	// The associated inward job free issue material ID
	InwardJobFreeIssueMaterialId uint64 `protobuf:"varint,52,opt,name=inward_job_free_issue_material_id,json=inwardJobFreeIssueMaterialId,proto3" json:"inward_job_free_issue_material_id,omitempty"`
	// The associated vendor ID
	VendorId uint64 `protobuf:"varint,55,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	// The associated buyer client ID of the linked sales order
	BuyerClientId uint64 `protobuf:"varint,70,opt,name=buyer_client_id,json=buyerClientId,proto3" json:"buyer_client_id,omitempty"` // ------------------------------------------------------------
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesServiceCountReq) Reset() {
	*x = QCSamplesServiceCountReq{}
	mi := &file_qc_samples_scailo_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesServiceCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesServiceCountReq) ProtoMessage() {}

func (x *QCSamplesServiceCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesServiceCountReq.ProtoReflect.Descriptor instead.
func (*QCSamplesServiceCountReq) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{11}
}

func (x *QCSamplesServiceCountReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *QCSamplesServiceCountReq) GetCreationTimestampStart() uint64 {
	if x != nil {
		return x.CreationTimestampStart
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetCreationTimestampEnd() uint64 {
	if x != nil {
		return x.CreationTimestampEnd
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetModificationTimestampStart() uint64 {
	if x != nil {
		return x.ModificationTimestampStart
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetModificationTimestampEnd() uint64 {
	if x != nil {
		return x.ModificationTimestampEnd
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *QCSamplesServiceCountReq) GetStatus() QC_SAMPLE_LIFECYCLE {
	if x != nil {
		return x.Status
	}
	return QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED
}

func (x *QCSamplesServiceCountReq) GetFinishedOnStart() uint64 {
	if x != nil {
		return x.FinishedOnStart
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetFinishedOnEnd() uint64 {
	if x != nil {
		return x.FinishedOnEnd
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetFamilyType() FAMILY_TYPE {
	if x != nil {
		return x.FamilyType
	}
	return FAMILY_TYPE_FAMILY_TYPE_ANY_UNSPECIFIED
}

func (x *QCSamplesServiceCountReq) GetFamilyId() uint64 {
	if x != nil {
		return x.FamilyId
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetQcGroupId() uint64 {
	if x != nil {
		return x.QcGroupId
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetInventoryItemUuid() string {
	if x != nil {
		return x.InventoryItemUuid
	}
	return ""
}

func (x *QCSamplesServiceCountReq) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetProductionPlanId() uint64 {
	if x != nil {
		return x.ProductionPlanId
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetGoodsReceiptId() uint64 {
	if x != nil {
		return x.GoodsReceiptId
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetInwardJobFreeIssueMaterialId() uint64 {
	if x != nil {
		return x.InwardJobFreeIssueMaterialId
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetVendorId() uint64 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *QCSamplesServiceCountReq) GetBuyerClientId() uint64 {
	if x != nil {
		return x.BuyerClientId
	}
	return 0
}

// Describes the request payload for performing a generic search operation on records
type QCSamplesServiceSearchAllReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey QC_SAMPLE_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.QC_SAMPLE_SORT_KEY" json:"sort_key,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,6,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Limit the search space to the given status
	Status QC_SAMPLE_LIFECYCLE `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.QC_SAMPLE_LIFECYCLE" json:"status,omitempty"`
	// Describes the key with which the search operation needs to be performed
	SearchKey string `protobuf:"bytes,11,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	// The associated family type
	FamilyType FAMILY_TYPE `protobuf:"varint,17,opt,name=family_type,json=familyType,proto3,enum=Scailo.FAMILY_TYPE" json:"family_type,omitempty"`
	// The associated family ID
	FamilyId uint64 `protobuf:"varint,18,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"`
	// The ID of the qc group
	QcGroupId uint64 `protobuf:"varint,19,opt,name=qc_group_id,json=qcGroupId,proto3" json:"qc_group_id,omitempty"`
	// The UUID of the inventory item
	InventoryItemUuid string `protobuf:"bytes,20,opt,name=inventory_item_uuid,json=inventoryItemUuid,proto3" json:"inventory_item_uuid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QCSamplesServiceSearchAllReq) Reset() {
	*x = QCSamplesServiceSearchAllReq{}
	mi := &file_qc_samples_scailo_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesServiceSearchAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesServiceSearchAllReq) ProtoMessage() {}

func (x *QCSamplesServiceSearchAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesServiceSearchAllReq.ProtoReflect.Descriptor instead.
func (*QCSamplesServiceSearchAllReq) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{12}
}

func (x *QCSamplesServiceSearchAllReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *QCSamplesServiceSearchAllReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QCSamplesServiceSearchAllReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QCSamplesServiceSearchAllReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *QCSamplesServiceSearchAllReq) GetSortKey() QC_SAMPLE_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return QC_SAMPLE_SORT_KEY_QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED
}

func (x *QCSamplesServiceSearchAllReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *QCSamplesServiceSearchAllReq) GetStatus() QC_SAMPLE_LIFECYCLE {
	if x != nil {
		return x.Status
	}
	return QC_SAMPLE_LIFECYCLE_QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED
}

func (x *QCSamplesServiceSearchAllReq) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *QCSamplesServiceSearchAllReq) GetFamilyType() FAMILY_TYPE {
	if x != nil {
		return x.FamilyType
	}
	return FAMILY_TYPE_FAMILY_TYPE_ANY_UNSPECIFIED
}

func (x *QCSamplesServiceSearchAllReq) GetFamilyId() uint64 {
	if x != nil {
		return x.FamilyId
	}
	return 0
}

func (x *QCSamplesServiceSearchAllReq) GetQcGroupId() uint64 {
	if x != nil {
		return x.QcGroupId
	}
	return 0
}

func (x *QCSamplesServiceSearchAllReq) GetInventoryItemUuid() string {
	if x != nil {
		return x.InventoryItemUuid
	}
	return ""
}

// Describes the parameters required to update an parameter in a qc sample
type QCSamplesServiceParameterUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,1,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The ID of the record
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Stores the observed value when it is a number
	NumberObservedValue int64 `protobuf:"varint,13,opt,name=number_observed_value,json=numberObservedValue,proto3" json:"number_observed_value,omitempty"`
	// Stores the observed value when it is a string
	TextObservedValue string `protobuf:"bytes,14,opt,name=text_observed_value,json=textObservedValue,proto3" json:"text_observed_value,omitempty"`
	// An optional description
	Description   string `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesServiceParameterUpdateRequest) Reset() {
	*x = QCSamplesServiceParameterUpdateRequest{}
	mi := &file_qc_samples_scailo_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesServiceParameterUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesServiceParameterUpdateRequest) ProtoMessage() {}

func (x *QCSamplesServiceParameterUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesServiceParameterUpdateRequest.ProtoReflect.Descriptor instead.
func (*QCSamplesServiceParameterUpdateRequest) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{13}
}

func (x *QCSamplesServiceParameterUpdateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *QCSamplesServiceParameterUpdateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QCSamplesServiceParameterUpdateRequest) GetNumberObservedValue() int64 {
	if x != nil {
		return x.NumberObservedValue
	}
	return 0
}

func (x *QCSamplesServiceParameterUpdateRequest) GetTextObservedValue() string {
	if x != nil {
		return x.TextObservedValue
	}
	return ""
}

func (x *QCSamplesServiceParameterUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the parameters that constitute an parameter associated to a qc sample
type QCSampleParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores the metadata of this qc sample
	Metadata *EmployeeMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Stores any comment that the user might have added during an operation
	UserComment string `protobuf:"bytes,5,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// Stores the username of the employee who performed the check
	CheckedBy string `protobuf:"bytes,8,opt,name=checked_by,json=checkedBy,proto3" json:"checked_by,omitempty"`
	// Stores the timestamp of when this check was performed
	CheckedAt uint64 `protobuf:"varint,9,opt,name=checked_at,json=checkedAt,proto3" json:"checked_at,omitempty"`
	// Stores the ID of the qc sample
	QcSampleId uint64 `protobuf:"varint,10,opt,name=qc_sample_id,json=qcSampleId,proto3" json:"qc_sample_id,omitempty"`
	// The ID of the qc param that is a part of the qc sample
	QcParamId uint64 `protobuf:"varint,11,opt,name=qc_param_id,json=qcParamId,proto3" json:"qc_param_id,omitempty"`
	// The ID of the associated unit of material
	UomId uint64 `protobuf:"varint,12,opt,name=uom_id,json=uomId,proto3" json:"uom_id,omitempty"`
	// Stores the observed value when it is a number
	NumberObservedValue int64 `protobuf:"varint,13,opt,name=number_observed_value,json=numberObservedValue,proto3" json:"number_observed_value,omitempty"`
	// Stores the observed value when it is a string
	TextObservedValue string `protobuf:"bytes,14,opt,name=text_observed_value,json=textObservedValue,proto3" json:"text_observed_value,omitempty"`
	// Denotes if this parameter is internal or not (if set to true, then this value will be hidden. If set to false, then this value will be printed)
	IsInternal bool `protobuf:"varint,19,opt,name=is_internal,json=isInternal,proto3" json:"is_internal,omitempty"`
	// The acceptable value type of the item
	AcceptableValueType QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE `protobuf:"varint,20,opt,name=acceptable_value_type,json=acceptableValueType,proto3,enum=Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE" json:"acceptable_value_type,omitempty"`
	// The acceptable value (in cents) in case the acceptable value type is number-absolute or number-percentage
	NumberAcceptableValue int64 `protobuf:"varint,21,opt,name=number_acceptable_value,json=numberAcceptableValue,proto3" json:"number_acceptable_value,omitempty"`
	// The relative lower bound (in cents) of the number_acceptable_value that serves as a reference point for the test
	NumberRelativeLowerBound int64 `protobuf:"varint,22,opt,name=number_relative_lower_bound,json=numberRelativeLowerBound,proto3" json:"number_relative_lower_bound,omitempty"`
	// The relative upper bound (in cents) of the number_acceptable_value that serves as a reference point for the test
	NumberRelativeUpperBound int64 `protobuf:"varint,23,opt,name=number_relative_upper_bound,json=numberRelativeUpperBound,proto3" json:"number_relative_upper_bound,omitempty"`
	// The list of values that are acceptable in case the acceptable value type is text-input or text-dropdown
	TextAcceptableValues []string `protobuf:"bytes,30,rep,name=text_acceptable_values,json=textAcceptableValues,proto3" json:"text_acceptable_values,omitempty"`
	// The list of values that are acceptable (but with deviation) in case the acceptable value type is text-input or text-dropdown
	TextAcceptableValuesWithDeviation []string `protobuf:"bytes,31,rep,name=text_acceptable_values_with_deviation,json=textAcceptableValuesWithDeviation,proto3" json:"text_acceptable_values_with_deviation,omitempty"`
	// The list of unacceptable values in case the acceptable value type is text-input or text-dropdown
	TextUnacceptableValues []string `protobuf:"bytes,32,rep,name=text_unacceptable_values,json=textUnacceptableValues,proto3" json:"text_unacceptable_values,omitempty"`
	// An optional description
	Description   string `protobuf:"bytes,40,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSampleParameter) Reset() {
	*x = QCSampleParameter{}
	mi := &file_qc_samples_scailo_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSampleParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSampleParameter) ProtoMessage() {}

func (x *QCSampleParameter) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSampleParameter.ProtoReflect.Descriptor instead.
func (*QCSampleParameter) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{14}
}

func (x *QCSampleParameter) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *QCSampleParameter) GetMetadata() *EmployeeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *QCSampleParameter) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *QCSampleParameter) GetCheckedBy() string {
	if x != nil {
		return x.CheckedBy
	}
	return ""
}

func (x *QCSampleParameter) GetCheckedAt() uint64 {
	if x != nil {
		return x.CheckedAt
	}
	return 0
}

func (x *QCSampleParameter) GetQcSampleId() uint64 {
	if x != nil {
		return x.QcSampleId
	}
	return 0
}

func (x *QCSampleParameter) GetQcParamId() uint64 {
	if x != nil {
		return x.QcParamId
	}
	return 0
}

func (x *QCSampleParameter) GetUomId() uint64 {
	if x != nil {
		return x.UomId
	}
	return 0
}

func (x *QCSampleParameter) GetNumberObservedValue() int64 {
	if x != nil {
		return x.NumberObservedValue
	}
	return 0
}

func (x *QCSampleParameter) GetTextObservedValue() string {
	if x != nil {
		return x.TextObservedValue
	}
	return ""
}

func (x *QCSampleParameter) GetIsInternal() bool {
	if x != nil {
		return x.IsInternal
	}
	return false
}

func (x *QCSampleParameter) GetAcceptableValueType() QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE {
	if x != nil {
		return x.AcceptableValueType
	}
	return QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_ANY_UNSPECIFIED
}

func (x *QCSampleParameter) GetNumberAcceptableValue() int64 {
	if x != nil {
		return x.NumberAcceptableValue
	}
	return 0
}

func (x *QCSampleParameter) GetNumberRelativeLowerBound() int64 {
	if x != nil {
		return x.NumberRelativeLowerBound
	}
	return 0
}

func (x *QCSampleParameter) GetNumberRelativeUpperBound() int64 {
	if x != nil {
		return x.NumberRelativeUpperBound
	}
	return 0
}

func (x *QCSampleParameter) GetTextAcceptableValues() []string {
	if x != nil {
		return x.TextAcceptableValues
	}
	return nil
}

func (x *QCSampleParameter) GetTextAcceptableValuesWithDeviation() []string {
	if x != nil {
		return x.TextAcceptableValuesWithDeviation
	}
	return nil
}

func (x *QCSampleParameter) GetTextUnacceptableValues() []string {
	if x != nil {
		return x.TextUnacceptableValues
	}
	return nil
}

func (x *QCSampleParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the message consisting of the list of qc sample parameters
type QCSampleParametersList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of records
	List          []*QCSampleParameter `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSampleParametersList) Reset() {
	*x = QCSampleParametersList{}
	mi := &file_qc_samples_scailo_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSampleParametersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSampleParametersList) ProtoMessage() {}

func (x *QCSampleParametersList) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSampleParametersList.ProtoReflect.Descriptor instead.
func (*QCSampleParametersList) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{15}
}

func (x *QCSampleParametersList) GetList() []*QCSampleParameter {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes the parameters that are required to retrieve the history of the record
type QCSampleParameterHistoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores the qc sample parameter ID
	QcSampleParameterId uint64 `protobuf:"varint,10,opt,name=qc_sample_parameter_id,json=qcSampleParameterId,proto3" json:"qc_sample_parameter_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QCSampleParameterHistoryRequest) Reset() {
	*x = QCSampleParameterHistoryRequest{}
	mi := &file_qc_samples_scailo_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSampleParameterHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSampleParameterHistoryRequest) ProtoMessage() {}

func (x *QCSampleParameterHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSampleParameterHistoryRequest.ProtoReflect.Descriptor instead.
func (*QCSampleParameterHistoryRequest) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{16}
}

func (x *QCSampleParameterHistoryRequest) GetQcSampleParameterId() uint64 {
	if x != nil {
		return x.QcSampleParameterId
	}
	return 0
}

// Describes the parameters that are present in a history response
type QCSampleParameterHistory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stores a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores the metadata of this qc sample
	Metadata *EmployeeMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Stores any comment that the user might have added during an operation
	UserComment string `protobuf:"bytes,5,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// Stores the username of the employee who performed the check
	CheckedBy string `protobuf:"bytes,8,opt,name=checked_by,json=checkedBy,proto3" json:"checked_by,omitempty"`
	// Stores the timestamp of when this check was performed
	CheckedAt uint64 `protobuf:"varint,9,opt,name=checked_at,json=checkedAt,proto3" json:"checked_at,omitempty"`
	// Stores the ID of the qc sample parameter
	QcSampleParameterId uint64 `protobuf:"varint,10,opt,name=qc_sample_parameter_id,json=qcSampleParameterId,proto3" json:"qc_sample_parameter_id,omitempty"`
	// Stores the observed value when it is a number
	NumberObservedValue int64 `protobuf:"varint,13,opt,name=number_observed_value,json=numberObservedValue,proto3" json:"number_observed_value,omitempty"`
	// Stores the observed value when it is a string
	TextObservedValue string `protobuf:"bytes,14,opt,name=text_observed_value,json=textObservedValue,proto3" json:"text_observed_value,omitempty"`
	// An optional description
	Description   string `protobuf:"bytes,40,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSampleParameterHistory) Reset() {
	*x = QCSampleParameterHistory{}
	mi := &file_qc_samples_scailo_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSampleParameterHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSampleParameterHistory) ProtoMessage() {}

func (x *QCSampleParameterHistory) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSampleParameterHistory.ProtoReflect.Descriptor instead.
func (*QCSampleParameterHistory) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{17}
}

func (x *QCSampleParameterHistory) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *QCSampleParameterHistory) GetMetadata() *EmployeeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *QCSampleParameterHistory) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *QCSampleParameterHistory) GetCheckedBy() string {
	if x != nil {
		return x.CheckedBy
	}
	return ""
}

func (x *QCSampleParameterHistory) GetCheckedAt() uint64 {
	if x != nil {
		return x.CheckedAt
	}
	return 0
}

func (x *QCSampleParameterHistory) GetQcSampleParameterId() uint64 {
	if x != nil {
		return x.QcSampleParameterId
	}
	return 0
}

func (x *QCSampleParameterHistory) GetNumberObservedValue() int64 {
	if x != nil {
		return x.NumberObservedValue
	}
	return 0
}

func (x *QCSampleParameterHistory) GetTextObservedValue() string {
	if x != nil {
		return x.TextObservedValue
	}
	return ""
}

func (x *QCSampleParameterHistory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the list of history parameters
type QCSampleParameterHistoryList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of records
	List          []*QCSampleParameterHistory `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSampleParameterHistoryList) Reset() {
	*x = QCSampleParameterHistoryList{}
	mi := &file_qc_samples_scailo_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSampleParameterHistoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSampleParameterHistoryList) ProtoMessage() {}

func (x *QCSampleParameterHistoryList) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSampleParameterHistoryList.ProtoReflect.Descriptor instead.
func (*QCSampleParameterHistoryList) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{18}
}

func (x *QCSampleParameterHistoryList) GetList() []*QCSampleParameterHistory {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes the request payload to retrieve parameters.
type QCSampleParametersSearchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey QC_SAMPLE_PARAMETER_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.QC_SAMPLE_PARAMETER_SORT_KEY" json:"sort_key,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,6,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Stores the username of the employee who performed the check
	CheckedBy string `protobuf:"bytes,10,opt,name=checked_by,json=checkedBy,proto3" json:"checked_by,omitempty"`
	// The start range of checked timestamp
	CheckedAtStart uint64 `protobuf:"varint,11,opt,name=checked_at_start,json=checkedAtStart,proto3" json:"checked_at_start,omitempty"`
	// The end range of checked timestamp
	CheckedAtEnd uint64 `protobuf:"varint,12,opt,name=checked_at_end,json=checkedAtEnd,proto3" json:"checked_at_end,omitempty"`
	// The ID of the qc sample
	QcSampleId uint64 `protobuf:"varint,13,opt,name=qc_sample_id,json=qcSampleId,proto3" json:"qc_sample_id,omitempty"`
	// The ID of the qc param that is a part of the qc sample
	QcParamId uint64 `protobuf:"varint,14,opt,name=qc_param_id,json=qcParamId,proto3" json:"qc_param_id,omitempty"`
	// The ID of the associated unit of material
	UomId uint64 `protobuf:"varint,15,opt,name=uom_id,json=uomId,proto3" json:"uom_id,omitempty"`
	// The start range of number observed value
	NumberObservedValueStart int64 `protobuf:"varint,20,opt,name=number_observed_value_start,json=numberObservedValueStart,proto3" json:"number_observed_value_start,omitempty"`
	// The end range of number observed value
	NumberObservedValueEnd int64 `protobuf:"varint,21,opt,name=number_observed_value_end,json=numberObservedValueEnd,proto3" json:"number_observed_value_end,omitempty"`
	// The text observed value
	TextObservedValue string `protobuf:"bytes,22,opt,name=text_observed_value,json=textObservedValue,proto3" json:"text_observed_value,omitempty"`
	// Describes the key with which the search operation needs to be performed
	SearchKey string `protobuf:"bytes,40,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	// ------------------------------------------------------------
	// Higher order filters
	// ------------------------------------------------------------
	// The associated production plan ID
	ProductionPlanId uint64 `protobuf:"varint,50,opt,name=production_plan_id,json=productionPlanId,proto3" json:"production_plan_id,omitempty"`
	// The associated goods receipt ID
	GoodsReceiptId uint64 `protobuf:"varint,51,opt,name=goods_receipt_id,json=goodsReceiptId,proto3" json:"goods_receipt_id,omitempty"`
	// The associated inward job free issue material ID
	InwardJobFreeIssueMaterialId uint64 `protobuf:"varint,52,opt,name=inward_job_free_issue_material_id,json=inwardJobFreeIssueMaterialId,proto3" json:"inward_job_free_issue_material_id,omitempty"`
	// The associated vendor ID
	VendorId uint64 `protobuf:"varint,55,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	// The associated family ID
	FamilyId      uint64 `protobuf:"varint,60,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"` // ------------------------------------------------------------
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSampleParametersSearchRequest) Reset() {
	*x = QCSampleParametersSearchRequest{}
	mi := &file_qc_samples_scailo_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSampleParametersSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSampleParametersSearchRequest) ProtoMessage() {}

func (x *QCSampleParametersSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSampleParametersSearchRequest.ProtoReflect.Descriptor instead.
func (*QCSampleParametersSearchRequest) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{19}
}

func (x *QCSampleParametersSearchRequest) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *QCSampleParametersSearchRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *QCSampleParametersSearchRequest) GetSortKey() QC_SAMPLE_PARAMETER_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_PARAMETER_SORT_KEY_ID_UNSPECIFIED
}

func (x *QCSampleParametersSearchRequest) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *QCSampleParametersSearchRequest) GetCheckedBy() string {
	if x != nil {
		return x.CheckedBy
	}
	return ""
}

func (x *QCSampleParametersSearchRequest) GetCheckedAtStart() uint64 {
	if x != nil {
		return x.CheckedAtStart
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetCheckedAtEnd() uint64 {
	if x != nil {
		return x.CheckedAtEnd
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetQcSampleId() uint64 {
	if x != nil {
		return x.QcSampleId
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetQcParamId() uint64 {
	if x != nil {
		return x.QcParamId
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetUomId() uint64 {
	if x != nil {
		return x.UomId
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetNumberObservedValueStart() int64 {
	if x != nil {
		return x.NumberObservedValueStart
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetNumberObservedValueEnd() int64 {
	if x != nil {
		return x.NumberObservedValueEnd
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetTextObservedValue() string {
	if x != nil {
		return x.TextObservedValue
	}
	return ""
}

func (x *QCSampleParametersSearchRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *QCSampleParametersSearchRequest) GetProductionPlanId() uint64 {
	if x != nil {
		return x.ProductionPlanId
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetGoodsReceiptId() uint64 {
	if x != nil {
		return x.GoodsReceiptId
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetInwardJobFreeIssueMaterialId() uint64 {
	if x != nil {
		return x.InwardJobFreeIssueMaterialId
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetVendorId() uint64 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *QCSampleParametersSearchRequest) GetFamilyId() uint64 {
	if x != nil {
		return x.FamilyId
	}
	return 0
}

// Describes the response to a pagination parameters request
type QCSamplesServicePaginatedParametersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of records in this payload
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The total number of records that are available
	Total uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// The list of records
	Payload       []*QCSampleParameter `protobuf:"bytes,4,rep,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesServicePaginatedParametersResponse) Reset() {
	*x = QCSamplesServicePaginatedParametersResponse{}
	mi := &file_qc_samples_scailo_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesServicePaginatedParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesServicePaginatedParametersResponse) ProtoMessage() {}

func (x *QCSamplesServicePaginatedParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesServicePaginatedParametersResponse.ProtoReflect.Descriptor instead.
func (*QCSamplesServicePaginatedParametersResponse) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{20}
}

func (x *QCSamplesServicePaginatedParametersResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QCSamplesServicePaginatedParametersResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QCSamplesServicePaginatedParametersResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *QCSamplesServicePaginatedParametersResponse) GetPayload() []*QCSampleParameter {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Describes the payload that has the counts of all the QC samples for an inventory item
type QCSamplesCountStatistics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of open samples
	Open uint64 `protobuf:"varint,1,opt,name=open,proto3" json:"open,omitempty"`
	// The number of finished samples
	Finished uint64 `protobuf:"varint,2,opt,name=finished,proto3" json:"finished,omitempty"`
	// The number of samples that were accepted
	Accepted uint64 `protobuf:"varint,3,opt,name=accepted,proto3" json:"accepted,omitempty"`
	// The number of samples that were accepted with deviation
	AcceptedWithDeviation uint64 `protobuf:"varint,4,opt,name=accepted_with_deviation,json=acceptedWithDeviation,proto3" json:"accepted_with_deviation,omitempty"`
	// The number of samples that were rejected
	Rejected uint64 `protobuf:"varint,5,opt,name=rejected,proto3" json:"rejected,omitempty"`
	// The number of samples that were cancelled
	Cancelled     uint64 `protobuf:"varint,6,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QCSamplesCountStatistics) Reset() {
	*x = QCSamplesCountStatistics{}
	mi := &file_qc_samples_scailo_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QCSamplesCountStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QCSamplesCountStatistics) ProtoMessage() {}

func (x *QCSamplesCountStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_qc_samples_scailo_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QCSamplesCountStatistics.ProtoReflect.Descriptor instead.
func (*QCSamplesCountStatistics) Descriptor() ([]byte, []int) {
	return file_qc_samples_scailo_proto_rawDescGZIP(), []int{21}
}

func (x *QCSamplesCountStatistics) GetOpen() uint64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *QCSamplesCountStatistics) GetFinished() uint64 {
	if x != nil {
		return x.Finished
	}
	return 0
}

func (x *QCSamplesCountStatistics) GetAccepted() uint64 {
	if x != nil {
		return x.Accepted
	}
	return 0
}

func (x *QCSamplesCountStatistics) GetAcceptedWithDeviation() uint64 {
	if x != nil {
		return x.AcceptedWithDeviation
	}
	return 0
}

func (x *QCSamplesCountStatistics) GetRejected() uint64 {
	if x != nil {
		return x.Rejected
	}
	return 0
}

func (x *QCSamplesCountStatistics) GetCancelled() uint64 {
	if x != nil {
		return x.Cancelled
	}
	return 0
}

var File_qc_samples_scailo_proto protoreflect.FileDescriptor

const file_qc_samples_scailo_proto_rawDesc = "" +
	"\n" +
	"\x17qc_samples.scailo.proto\x12\x06Scailo\x1a\x11base.scailo.proto\x1a\x1bbuf/validate/validate.proto\x1a\x15families.scailo.proto\x1a\x16inventory.scailo.proto\x1a\x18magic_links.scailo.proto\x1a\x16qc_groups.scailo.proto\"\xc4\x02\n" +
	"\x14LogbookLogQCSampleLC\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12\x1b\n" +
	"\tis_active\x18\x02 \x01(\bR\bisActive\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x04R\ttimestamp\x12\x19\n" +
	"\bref_uuid\x18\n" +
	" \x01(\tR\arefUuid\x129\n" +
	"\toperation\x18\v \x01(\x0e2\x1b.Scailo.QC_SAMPLE_LIFECYCLER\toperation\x12\x1a\n" +
	"\busername\x18\f \x01(\tR\busername\x12\x12\n" +
	"\x04name\x18\r \x01(\tR\x04name\x12\x17\n" +
	"\auser_id\x18\x0e \x01(\x04R\x06userId\x12\x1f\n" +
	"\vapp_comment\x18\x0f \x01(\tR\n" +
	"appComment\x12!\n" +
	"\fuser_comment\x18\x10 \x01(\tR\vuserComment\"\xbf\x03\n" +
	"\x1dQCSamplesServiceCreateRequest\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x12!\n" +
	"\fuser_comment\x18\x02 \x01(\tR\vuserComment\x12/\n" +
	"\x0fvault_folder_id\x18\b \x01(\x04B\a\xbaH\x042\x02(\x00R\rvaultFolderId\x12$\n" +
	"\tfamily_id\x18\n" +
	" \x01(\x04B\a\xbaH\x042\x02 \x00R\bfamilyId\x128\n" +
	"\x13inventory_item_uuid\x18\v \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x11inventoryItemUuid\x12'\n" +
	"\vqc_group_id\x18\f \x01(\x04B\a\xbaH\x042\x02 \x00R\tqcGroupId\x12(\n" +
	"\vlocation_id\x18\r \x01(\x04B\a\xbaH\x042\x02 \x00R\n" +
	"locationId\x12(\n" +
	"\vname_prefix\x18\x14 \x01(\tB\a\xbaH\x04r\x02\x10\x00R\n" +
	"namePrefix\x12 \n" +
	"\vdescription\x18\x15 \x01(\tR\vdescription\x12*\n" +
	"\fsample_count\x18\x1e \x01(\x04B\a\xbaH\x042\x02 \x00R\vsampleCount\"\xee\x01\n" +
	"\x1dQCSamplesServiceUpdateRequest\x12!\n" +
	"\fuser_comment\x18\x01 \x01(\tR\vuserComment\x12\x17\n" +
	"\x02id\x18\x02 \x01(\x04B\a\xbaH\x042\x02 \x00R\x02id\x12!\n" +
	"\fnotify_users\x18\x03 \x01(\bR\vnotifyUsers\x12/\n" +
	"\x0fvault_folder_id\x18\b \x01(\x04B\a\xbaH\x042\x02(\x00R\rvaultFolderId\x12\x1b\n" +
	"\x04name\x18\x14 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12 \n" +
	"\vdescription\x18\x15 \x01(\tR\vdescription\"\xb7\x01\n" +
	"\x1bQCSampleAncillaryParameters\x12\x1f\n" +
	"\vfamily_uuid\x18d \x01(\tR\n" +
	"familyUuid\x12.\n" +
	"\x13inventory_item_uuid\x18o \x01(\tR\x11inventoryItemUuid\x12\"\n" +
	"\rqc_group_uuid\x18p \x01(\tR\vqcGroupUuid\x12#\n" +
	"\rlocation_uuid\x18q \x01(\tR\flocationUuid\"\xd2\x04\n" +
	"\bQCSample\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x124\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.Scailo.EmployeeMetadataR\bmetadata\x12E\n" +
	"\x11approval_metadata\x18\x03 \x01(\v2\x18.Scailo.ApprovalMetadataR\x10approvalMetadata\x123\n" +
	"\x06status\x18\x04 \x01(\x0e2\x1b.Scailo.QC_SAMPLE_LIFECYCLER\x06status\x120\n" +
	"\x04logs\x18\x05 \x03(\v2\x1c.Scailo.LogbookLogQCSampleLCR\x04logs\x12\x1f\n" +
	"\vfinished_on\x18\x06 \x01(\x04R\n" +
	"finishedOn\x12&\n" +
	"\x0fvault_folder_id\x18\b \x01(\x04R\rvaultFolderId\x124\n" +
	"\vfamily_type\x18\t \x01(\x0e2\x13.Scailo.FAMILY_TYPER\n" +
	"familyType\x12\x1b\n" +
	"\tfamily_id\x18\n" +
	" \x01(\x04R\bfamilyId\x12.\n" +
	"\x13inventory_item_uuid\x18\v \x01(\tR\x11inventoryItemUuid\x12\x1e\n" +
	"\vqc_group_id\x18\f \x01(\x04R\tqcGroupId\x12\x1f\n" +
	"\vlocation_id\x18\r \x01(\x04R\n" +
	"locationId\x12\x12\n" +
	"\x04name\x18\x14 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x15 \x01(\tR\vdescription\"\xda\x01\n" +
	"\x14QCSampleWithMetadata\x12-\n" +
	"\tqc_sample\x18\x01 \x01(\v2\x10.Scailo.QCSampleR\bqcSample\x12&\n" +
	"\x06family\x18\n" +
	" \x01(\v2\x0e.Scailo.FamilyR\x06family\x12*\n" +
	"\bqc_group\x18\x14 \x01(\v2\x0f.Scailo.QCGroupR\aqcGroup\x12?\n" +
	"\x0einventory_item\x18\x1e \x01(\v2\x18.Scailo.GenericInventoryR\rinventoryItem\"5\n" +
	"\rQCSamplesList\x12$\n" +
	"\x04list\x18\x01 \x03(\v2\x10.Scailo.QCSampleR\x04list\"M\n" +
	"\x19QCSamplesWithMetadataList\x120\n" +
	"\x04list\x18\x01 \x03(\v2\x1c.Scailo.QCSampleWithMetadataR\x04list\"\xb0\x02\n" +
	"\x1dQCSamplesServicePaginationReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12\x1d\n" +
	"\x05count\x18\x02 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x125\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1a.Scailo.QC_SAMPLE_SORT_KEYR\asortKey\x123\n" +
	"\x06status\x18\x06 \x01(\x0e2\x1b.Scailo.QC_SAMPLE_LIFECYCLER\x06status\"\x94\x01\n" +
	"\"QCSamplesServicePaginationResponse\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x04R\x05count\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x04R\x06offset\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x04R\x05total\x12*\n" +
	"\apayload\x18\x04 \x03(\v2\x10.Scailo.QCSampleR\apayload\"\xc4\b\n" +
	"\x19QCSamplesServiceFilterReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12&\n" +
	"\x05count\x18\x02 \x01(\x03B\x10\xbaH\r\"\v(\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x125\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1a.Scailo.QC_SAMPLE_SORT_KEYR\asortKey\x128\n" +
	"\x18creation_timestamp_start\x18e \x01(\x04R\x16creationTimestampStart\x124\n" +
	"\x16creation_timestamp_end\x18f \x01(\x04R\x14creationTimestampEnd\x12@\n" +
	"\x1cmodification_timestamp_start\x18g \x01(\x04R\x1amodificationTimestampStart\x12<\n" +
	"\x1amodification_timestamp_end\x18h \x01(\x04R\x18modificationTimestampEnd\x12\x1f\n" +
	"\ventity_uuid\x18\b \x01(\tR\n" +
	"entityUuid\x123\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2\x1b.Scailo.QC_SAMPLE_LIFECYCLER\x06status\x12*\n" +
	"\x11finished_on_start\x18\x0f \x01(\x04R\x0ffinishedOnStart\x12&\n" +
	"\x0ffinished_on_end\x18\x10 \x01(\x04R\rfinishedOnEnd\x124\n" +
	"\vfamily_type\x18\x11 \x01(\x0e2\x13.Scailo.FAMILY_TYPER\n" +
	"familyType\x12\x1b\n" +
	"\tfamily_id\x18\x12 \x01(\x04R\bfamilyId\x12\x1e\n" +
	"\vqc_group_id\x18\x13 \x01(\x04R\tqcGroupId\x12.\n" +
	"\x13inventory_item_uuid\x18\x14 \x01(\tR\x11inventoryItemUuid\x12\x1f\n" +
	"\vlocation_id\x18\x15 \x01(\x04R\n" +
	"locationId\x12,\n" +
	"\x12production_plan_id\x182 \x01(\x04R\x10productionPlanId\x12(\n" +
	"\x10goods_receipt_id\x183 \x01(\x04R\x0egoodsReceiptId\x12G\n" +
	"!inward_job_free_issue_material_id\x184 \x01(\x04R\x1cinwardJobFreeIssueMaterialId\x12\x1b\n" +
	"\tvendor_id\x187 \x01(\x04R\bvendorId\x12&\n" +
	"\x0fbuyer_client_id\x18F \x01(\x04R\rbuyerClientId\"\x90\a\n" +
	"\x18QCSamplesServiceCountReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x128\n" +
	"\x18creation_timestamp_start\x18e \x01(\x04R\x16creationTimestampStart\x124\n" +
	"\x16creation_timestamp_end\x18f \x01(\x04R\x14creationTimestampEnd\x12@\n" +
	"\x1cmodification_timestamp_start\x18g \x01(\x04R\x1amodificationTimestampStart\x12<\n" +
	"\x1amodification_timestamp_end\x18h \x01(\x04R\x18modificationTimestampEnd\x12\x1f\n" +
	"\ventity_uuid\x18\b \x01(\tR\n" +
	"entityUuid\x123\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2\x1b.Scailo.QC_SAMPLE_LIFECYCLER\x06status\x12*\n" +
	"\x11finished_on_start\x18\x0f \x01(\x04R\x0ffinishedOnStart\x12&\n" +
	"\x0ffinished_on_end\x18\x10 \x01(\x04R\rfinishedOnEnd\x124\n" +
	"\vfamily_type\x18\x11 \x01(\x0e2\x13.Scailo.FAMILY_TYPER\n" +
	"familyType\x12\x1b\n" +
	"\tfamily_id\x18\x12 \x01(\x04R\bfamilyId\x12\x1e\n" +
	"\vqc_group_id\x18\x13 \x01(\x04R\tqcGroupId\x12.\n" +
	"\x13inventory_item_uuid\x18\x14 \x01(\tR\x11inventoryItemUuid\x12\x1f\n" +
	"\vlocation_id\x18\x15 \x01(\x04R\n" +
	"locationId\x12,\n" +
	"\x12production_plan_id\x182 \x01(\x04R\x10productionPlanId\x12(\n" +
	"\x10goods_receipt_id\x183 \x01(\x04R\x0egoodsReceiptId\x12G\n" +
	"!inward_job_free_issue_material_id\x184 \x01(\x04R\x1cinwardJobFreeIssueMaterialId\x12\x1b\n" +
	"\tvendor_id\x187 \x01(\x04R\bvendorId\x12&\n" +
	"\x0fbuyer_client_id\x18F \x01(\x04R\rbuyerClientId\"\x9b\x04\n" +
	"\x1cQCSamplesServiceSearchAllReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12&\n" +
	"\x05count\x18\x02 \x01(\x03B\x10\xbaH\r\"\v(\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x125\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1a.Scailo.QC_SAMPLE_SORT_KEYR\asortKey\x12\x1f\n" +
	"\ventity_uuid\x18\x06 \x01(\tR\n" +
	"entityUuid\x123\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2\x1b.Scailo.QC_SAMPLE_LIFECYCLER\x06status\x12\x1d\n" +
	"\n" +
	"search_key\x18\v \x01(\tR\tsearchKey\x124\n" +
	"\vfamily_type\x18\x11 \x01(\x0e2\x13.Scailo.FAMILY_TYPER\n" +
	"familyType\x12\x1b\n" +
	"\tfamily_id\x18\x12 \x01(\x04R\bfamilyId\x12\x1e\n" +
	"\vqc_group_id\x18\x13 \x01(\x04R\tqcGroupId\x12.\n" +
	"\x13inventory_item_uuid\x18\x14 \x01(\tR\x11inventoryItemUuid\"\xea\x01\n" +
	"&QCSamplesServiceParameterUpdateRequest\x12!\n" +
	"\fuser_comment\x18\x01 \x01(\tR\vuserComment\x12\x17\n" +
	"\x02id\x18\x02 \x01(\x04B\a\xbaH\x042\x02 \x00R\x02id\x122\n" +
	"\x15number_observed_value\x18\r \x01(\x03R\x13numberObservedValue\x12.\n" +
	"\x13text_observed_value\x18\x0e \x01(\tR\x11textObservedValue\x12 \n" +
	"\vdescription\x18\x14 \x01(\tR\vdescription\"\xa4\a\n" +
	"\x11QCSampleParameter\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x124\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.Scailo.EmployeeMetadataR\bmetadata\x12!\n" +
	"\fuser_comment\x18\x05 \x01(\tR\vuserComment\x12\x1d\n" +
	"\n" +
	"checked_by\x18\b \x01(\tR\tcheckedBy\x12\x1d\n" +
	"\n" +
	"checked_at\x18\t \x01(\x04R\tcheckedAt\x12 \n" +
	"\fqc_sample_id\x18\n" +
	" \x01(\x04R\n" +
	"qcSampleId\x12\x1e\n" +
	"\vqc_param_id\x18\v \x01(\x04R\tqcParamId\x12\x15\n" +
	"\x06uom_id\x18\f \x01(\x04R\x05uomId\x122\n" +
	"\x15number_observed_value\x18\r \x01(\x03R\x13numberObservedValue\x12.\n" +
	"\x13text_observed_value\x18\x0e \x01(\tR\x11textObservedValue\x12\x1f\n" +
	"\vis_internal\x18\x13 \x01(\bR\n" +
	"isInternal\x12_\n" +
	"\x15acceptable_value_type\x18\x14 \x01(\x0e2+.Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPER\x13acceptableValueType\x126\n" +
	"\x17number_acceptable_value\x18\x15 \x01(\x03R\x15numberAcceptableValue\x12=\n" +
	"\x1bnumber_relative_lower_bound\x18\x16 \x01(\x03R\x18numberRelativeLowerBound\x12=\n" +
	"\x1bnumber_relative_upper_bound\x18\x17 \x01(\x03R\x18numberRelativeUpperBound\x124\n" +
	"\x16text_acceptable_values\x18\x1e \x03(\tR\x14textAcceptableValues\x12P\n" +
	"%text_acceptable_values_with_deviation\x18\x1f \x03(\tR!textAcceptableValuesWithDeviation\x128\n" +
	"\x18text_unacceptable_values\x18  \x03(\tR\x16textUnacceptableValues\x12 \n" +
	"\vdescription\x18( \x01(\tR\vdescription\"G\n" +
	"\x16QCSampleParametersList\x12-\n" +
	"\x04list\x18\x01 \x03(\v2\x19.Scailo.QCSampleParameterR\x04list\"_\n" +
	"\x1fQCSampleParameterHistoryRequest\x12<\n" +
	"\x16qc_sample_parameter_id\x18\n" +
	" \x01(\x04B\a\xbaH\x042\x02 \x00R\x13qcSampleParameterId\"\x8d\x03\n" +
	"\x18QCSampleParameterHistory\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x124\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.Scailo.EmployeeMetadataR\bmetadata\x12!\n" +
	"\fuser_comment\x18\x05 \x01(\tR\vuserComment\x12\x1d\n" +
	"\n" +
	"checked_by\x18\b \x01(\tR\tcheckedBy\x12\x1d\n" +
	"\n" +
	"checked_at\x18\t \x01(\x04R\tcheckedAt\x123\n" +
	"\x16qc_sample_parameter_id\x18\n" +
	" \x01(\x04R\x13qcSampleParameterId\x122\n" +
	"\x15number_observed_value\x18\r \x01(\x03R\x13numberObservedValue\x12.\n" +
	"\x13text_observed_value\x18\x0e \x01(\tR\x11textObservedValue\x12 \n" +
	"\vdescription\x18( \x01(\tR\vdescription\"T\n" +
	"\x1cQCSampleParameterHistoryList\x124\n" +
	"\x04list\x18\x01 \x03(\v2 .Scailo.QCSampleParameterHistoryR\x04list\"\x9d\a\n" +
	"\x1fQCSampleParametersSearchRequest\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12&\n" +
	"\x05count\x18\x02 \x01(\x03B\x10\xbaH\r\"\v(\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x12?\n" +
	"\bsort_key\x18\x05 \x01(\x0e2$.Scailo.QC_SAMPLE_PARAMETER_SORT_KEYR\asortKey\x12\x1f\n" +
	"\ventity_uuid\x18\x06 \x01(\tR\n" +
	"entityUuid\x12\x1d\n" +
	"\n" +
	"checked_by\x18\n" +
	" \x01(\tR\tcheckedBy\x12(\n" +
	"\x10checked_at_start\x18\v \x01(\x04R\x0echeckedAtStart\x12$\n" +
	"\x0echecked_at_end\x18\f \x01(\x04R\fcheckedAtEnd\x12 \n" +
	"\fqc_sample_id\x18\r \x01(\x04R\n" +
	"qcSampleId\x12\x1e\n" +
	"\vqc_param_id\x18\x0e \x01(\x04R\tqcParamId\x12\x15\n" +
	"\x06uom_id\x18\x0f \x01(\x04R\x05uomId\x12=\n" +
	"\x1bnumber_observed_value_start\x18\x14 \x01(\x03R\x18numberObservedValueStart\x129\n" +
	"\x19number_observed_value_end\x18\x15 \x01(\x03R\x16numberObservedValueEnd\x12.\n" +
	"\x13text_observed_value\x18\x16 \x01(\tR\x11textObservedValue\x12\x1d\n" +
	"\n" +
	"search_key\x18( \x01(\tR\tsearchKey\x12,\n" +
	"\x12production_plan_id\x182 \x01(\x04R\x10productionPlanId\x12(\n" +
	"\x10goods_receipt_id\x183 \x01(\x04R\x0egoodsReceiptId\x12G\n" +
	"!inward_job_free_issue_material_id\x184 \x01(\x04R\x1cinwardJobFreeIssueMaterialId\x12\x1b\n" +
	"\tvendor_id\x187 \x01(\x04R\bvendorId\x12\x1b\n" +
	"\tfamily_id\x18< \x01(\x04R\bfamilyId\"\xa6\x01\n" +
	"+QCSamplesServicePaginatedParametersResponse\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x04R\x05count\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x04R\x06offset\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x04R\x05total\x123\n" +
	"\apayload\x18\x04 \x03(\v2\x19.Scailo.QCSampleParameterR\apayload\"\xd8\x01\n" +
	"\x18QCSamplesCountStatistics\x12\x12\n" +
	"\x04open\x18\x01 \x01(\x04R\x04open\x12\x1a\n" +
	"\bfinished\x18\x02 \x01(\x04R\bfinished\x12\x1a\n" +
	"\baccepted\x18\x03 \x01(\x04R\baccepted\x126\n" +
	"\x17accepted_with_deviation\x18\x04 \x01(\x04R\x15acceptedWithDeviation\x12\x1a\n" +
	"\brejected\x18\x05 \x01(\x04R\brejected\x12\x1c\n" +
	"\tcancelled\x18\x06 \x01(\x04R\tcancelled*\x96\x02\n" +
	"\x13QC_SAMPLE_LIFECYCLE\x12'\n" +
	"#QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18QC_SAMPLE_LIFECYCLE_OPEN\x10\x01\x12 \n" +
	"\x1cQC_SAMPLE_LIFECYCLE_FINISHED\x10\x02\x12 \n" +
	"\x1cQC_SAMPLE_LIFECYCLE_ACCEPTED\x10\x03\x12/\n" +
	"+QC_SAMPLE_LIFECYCLE_ACCEPTED_WITH_DEVIATION\x10\x04\x12 \n" +
	"\x1cQC_SAMPLE_LIFECYCLE_REJECTED\x10\x05\x12!\n" +
	"\x1dQC_SAMPLE_LIFECYCLE_CANCELLED\x10\x06*\xd8\x02\n" +
	"\x12QC_SAMPLE_SORT_KEY\x12%\n" +
	"!QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dQC_SAMPLE_SORT_KEY_CREATED_AT\x10\x01\x12\"\n" +
	"\x1eQC_SAMPLE_SORT_KEY_MODIFIED_AT\x10\x02\x12\"\n" +
	"\x1eQC_SAMPLE_SORT_KEY_APPROVED_ON\x10\x03\x12\"\n" +
	"\x1eQC_SAMPLE_SORT_KEY_APPROVED_BY\x10\x04\x12'\n" +
	"#QC_SAMPLE_SORT_KEY_APPROVER_ROLE_ID\x10\x05\x12\"\n" +
	"\x1eQC_SAMPLE_SORT_KEY_FINISHED_ON\x10\x06\x12\"\n" +
	"\x1eQC_SAMPLE_SORT_KEY_QC_GROUP_ID\x10\a\x12\x1b\n" +
	"\x17QC_SAMPLE_SORT_KEY_NAME\x10\n" +
	"*\x8a\x03\n" +
	"\x1cQC_SAMPLE_PARAMETER_SORT_KEY\x12/\n" +
	"+QC_SAMPLE_PARAMETER_SORT_KEY_ID_UNSPECIFIED\x10\x00\x12+\n" +
	"'QC_SAMPLE_PARAMETER_SORT_KEY_CREATED_AT\x10\x01\x12,\n" +
	"(QC_SAMPLE_PARAMETER_SORT_KEY_MODIFIED_AT\x10\x02\x12+\n" +
	"'QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_BY\x10\n" +
	"\x12+\n" +
	"'QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_AT\x10\v\x12-\n" +
	")QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_ID\x10\f\x12,\n" +
	"(QC_SAMPLE_PARAMETER_SORT_KEY_QC_PARAM_ID\x10\r\x12'\n" +
	"#QC_SAMPLE_PARAMETER_SORT_KEY_UOM_ID\x10\x0e2\x88\x15\n" +
	"\x10QCSamplesService\x12L\n" +
	"\x06Create\x12%.Scailo.QCSamplesServiceCreateRequest\x1a\x1b.Scailo.IdentifierUUIDsList\x12K\n" +
	"\x06Update\x12%.Scailo.QCSamplesServiceUpdateRequest\x1a\x1a.Scailo.IdentifierResponse\x12K\n" +
	"\x06Finish\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12K\n" +
	"\x06Accept\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12X\n" +
	"\x13AcceptWithDeviation\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12K\n" +
	"\x06Reject\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12K\n" +
	"\x06Cancel\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12K\n" +
	"\x06Reopen\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12O\n" +
	"\n" +
	"CommentAdd\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12N\n" +
	"\tSendEmail\x12%.Scailo.IdentifierWithEmailAttributes\x1a\x1a.Scailo.IdentifierResponse\x12_\n" +
	"\x0fCreateMagicLink\x129.Scailo.MagicLinksServiceCreateRequestForSpecificResource\x1a\x11.Scailo.MagicLink\x12]\n" +
	"\x0fUpdateParameter\x12..Scailo.QCSamplesServiceParameterUpdateRequest\x1a\x1a.Scailo.IdentifierResponse\x12B\n" +
	"\x11ViewParameterByID\x12\x12.Scailo.Identifier\x1a\x19.Scailo.QCSampleParameter\x12H\n" +
	"\x0eViewParameters\x12\x16.Scailo.IdentifierUUID\x1a\x1e.Scailo.QCSampleParametersList\x12e\n" +
	"\x14ViewParameterHistory\x12'.Scailo.QCSampleParameterHistoryRequest\x1a$.Scailo.QCSampleParameterHistoryList\x12w\n" +
	"\x17ViewPaginatedParameters\x12'.Scailo.QCSampleParametersSearchRequest\x1a3.Scailo.QCSamplesServicePaginatedParametersResponse\x12~\n" +
	"\x1eSearchParametersWithPagination\x12'.Scailo.QCSampleParametersSearchRequest\x1a3.Scailo.QCSamplesServicePaginatedParametersResponse\x12G\n" +
	"\x17DownloadParametersAsCSV\x12\x16.Scailo.IdentifierUUID\x1a\x14.Scailo.StandardFile\x120\n" +
	"\bViewByID\x12\x12.Scailo.Identifier\x1a\x10.Scailo.QCSample\x126\n" +
	"\n" +
	"ViewByUUID\x12\x16.Scailo.IdentifierUUID\x1a\x10.Scailo.QCSample\x129\n" +
	"\x11ViewEssentialByID\x12\x12.Scailo.Identifier\x1a\x10.Scailo.QCSample\x12?\n" +
	"\x13ViewEssentialByUUID\x12\x16.Scailo.IdentifierUUID\x1a\x10.Scailo.QCSample\x12=\n" +
	"\vViewFromIDs\x12\x17.Scailo.IdentifiersList\x1a\x15.Scailo.QCSamplesList\x12\\\n" +
	"\x1dViewAncillaryParametersByUUID\x12\x16.Scailo.IdentifierUUID\x1a#.Scailo.QCSampleAncillaryParameters\x126\n" +
	"\aViewAll\x12\x14.Scailo.ActiveStatus\x1a\x15.Scailo.QCSamplesList\x12E\n" +
	"\x14ViewAllForEntityUUID\x12\x16.Scailo.IdentifierUUID\x1a\x15.Scailo.QCSamplesList\x12g\n" +
	"\x12ViewWithPagination\x12%.Scailo.QCSamplesServicePaginationReq\x1a*.Scailo.QCSamplesServicePaginationResponse\x12A\n" +
	"\x0eIsDownloadable\x12\x16.Scailo.IdentifierUUID\x1a\x17.Scailo.BooleanResponse\x12>\n" +
	"\x0eDownloadByUUID\x12\x16.Scailo.IdentifierUUID\x1a\x14.Scailo.StandardFile\x12T\n" +
	"\tSearchAll\x12$.Scailo.QCSamplesServiceSearchAllReq\x1a!.Scailo.QCSamplesWithMetadataList\x12B\n" +
	"\x06Filter\x12!.Scailo.QCSamplesServiceFilterReq\x1a\x15.Scailo.QCSamplesList\x12@\n" +
	"\x05Count\x12 .Scailo.QCSamplesServiceCountReq\x1a\x15.Scailo.CountResponse\x12R\n" +
	"\x16CountsForInventoryItem\x12\x16.Scailo.IdentifierUUID\x1a .Scailo.QCSamplesCountStatistics\x12H\n" +
	"\rDownloadAsCSV\x12!.Scailo.QCSamplesServiceFilterReq\x1a\x14.Scailo.StandardFileBf\n" +
	"\n" +
	"com.ScailoB\x14QcSamplesScailoProtoP\x01Z\n" +
	"Scailo/sdk\xa2\x02\x03SXX\xaa\x02\x06Scailo\xca\x02\x06Scailo\xe2\x02\x12Scailo\\GPBMetadata\xea\x02\x06Scailob\x06proto3"

var (
	file_qc_samples_scailo_proto_rawDescOnce sync.Once
	file_qc_samples_scailo_proto_rawDescData []byte
)

func file_qc_samples_scailo_proto_rawDescGZIP() []byte {
	file_qc_samples_scailo_proto_rawDescOnce.Do(func() {
		file_qc_samples_scailo_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qc_samples_scailo_proto_rawDesc), len(file_qc_samples_scailo_proto_rawDesc)))
	})
	return file_qc_samples_scailo_proto_rawDescData
}

var file_qc_samples_scailo_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_qc_samples_scailo_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_qc_samples_scailo_proto_goTypes = []any{
	(QC_SAMPLE_LIFECYCLE)(0),                                  // 0: Scailo.QC_SAMPLE_LIFECYCLE
	(QC_SAMPLE_SORT_KEY)(0),                                   // 1: Scailo.QC_SAMPLE_SORT_KEY
	(QC_SAMPLE_PARAMETER_SORT_KEY)(0),                         // 2: Scailo.QC_SAMPLE_PARAMETER_SORT_KEY
	(*LogbookLogQCSampleLC)(nil),                              // 3: Scailo.LogbookLogQCSampleLC
	(*QCSamplesServiceCreateRequest)(nil),                     // 4: Scailo.QCSamplesServiceCreateRequest
	(*QCSamplesServiceUpdateRequest)(nil),                     // 5: Scailo.QCSamplesServiceUpdateRequest
	(*QCSampleAncillaryParameters)(nil),                       // 6: Scailo.QCSampleAncillaryParameters
	(*QCSample)(nil),                                          // 7: Scailo.QCSample
	(*QCSampleWithMetadata)(nil),                              // 8: Scailo.QCSampleWithMetadata
	(*QCSamplesList)(nil),                                     // 9: Scailo.QCSamplesList
	(*QCSamplesWithMetadataList)(nil),                         // 10: Scailo.QCSamplesWithMetadataList
	(*QCSamplesServicePaginationReq)(nil),                     // 11: Scailo.QCSamplesServicePaginationReq
	(*QCSamplesServicePaginationResponse)(nil),                // 12: Scailo.QCSamplesServicePaginationResponse
	(*QCSamplesServiceFilterReq)(nil),                         // 13: Scailo.QCSamplesServiceFilterReq
	(*QCSamplesServiceCountReq)(nil),                          // 14: Scailo.QCSamplesServiceCountReq
	(*QCSamplesServiceSearchAllReq)(nil),                      // 15: Scailo.QCSamplesServiceSearchAllReq
	(*QCSamplesServiceParameterUpdateRequest)(nil),            // 16: Scailo.QCSamplesServiceParameterUpdateRequest
	(*QCSampleParameter)(nil),                                 // 17: Scailo.QCSampleParameter
	(*QCSampleParametersList)(nil),                            // 18: Scailo.QCSampleParametersList
	(*QCSampleParameterHistoryRequest)(nil),                   // 19: Scailo.QCSampleParameterHistoryRequest
	(*QCSampleParameterHistory)(nil),                          // 20: Scailo.QCSampleParameterHistory
	(*QCSampleParameterHistoryList)(nil),                      // 21: Scailo.QCSampleParameterHistoryList
	(*QCSampleParametersSearchRequest)(nil),                   // 22: Scailo.QCSampleParametersSearchRequest
	(*QCSamplesServicePaginatedParametersResponse)(nil),       // 23: Scailo.QCSamplesServicePaginatedParametersResponse
	(*QCSamplesCountStatistics)(nil),                          // 24: Scailo.QCSamplesCountStatistics
	(*EmployeeMetadata)(nil),                                  // 25: Scailo.EmployeeMetadata
	(*ApprovalMetadata)(nil),                                  // 26: Scailo.ApprovalMetadata
	(FAMILY_TYPE)(0),                                          // 27: Scailo.FAMILY_TYPE
	(*Family)(nil),                                            // 28: Scailo.Family
	(*QCGroup)(nil),                                           // 29: Scailo.QCGroup
	(*GenericInventory)(nil),                                  // 30: Scailo.GenericInventory
	(BOOL_FILTER)(0),                                          // 31: Scailo.BOOL_FILTER
	(SORT_ORDER)(0),                                           // 32: Scailo.SORT_ORDER
	(QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE)(0),                  // 33: Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE
	(*IdentifierUUIDWithUserComment)(nil),                     // 34: Scailo.IdentifierUUIDWithUserComment
	(*IdentifierWithEmailAttributes)(nil),                     // 35: Scailo.IdentifierWithEmailAttributes
	(*MagicLinksServiceCreateRequestForSpecificResource)(nil), // 36: Scailo.MagicLinksServiceCreateRequestForSpecificResource
	(*Identifier)(nil),                                        // 37: Scailo.Identifier
	(*IdentifierUUID)(nil),                                    // 38: Scailo.IdentifierUUID
	(*IdentifiersList)(nil),                                   // 39: Scailo.IdentifiersList
	(*ActiveStatus)(nil),                                      // 40: Scailo.ActiveStatus
	(*IdentifierUUIDsList)(nil),                               // 41: Scailo.IdentifierUUIDsList
	(*IdentifierResponse)(nil),                                // 42: Scailo.IdentifierResponse
	(*MagicLink)(nil),                                         // 43: Scailo.MagicLink
	(*StandardFile)(nil),                                      // 44: Scailo.StandardFile
	(*BooleanResponse)(nil),                                   // 45: Scailo.BooleanResponse
	(*CountResponse)(nil),                                     // 46: Scailo.CountResponse
}
var file_qc_samples_scailo_proto_depIdxs = []int32{
	0,  // 0: Scailo.LogbookLogQCSampleLC.operation:type_name -> Scailo.QC_SAMPLE_LIFECYCLE
	25, // 1: Scailo.QCSample.metadata:type_name -> Scailo.EmployeeMetadata
	26, // 2: Scailo.QCSample.approval_metadata:type_name -> Scailo.ApprovalMetadata
	0,  // 3: Scailo.QCSample.status:type_name -> Scailo.QC_SAMPLE_LIFECYCLE
	3,  // 4: Scailo.QCSample.logs:type_name -> Scailo.LogbookLogQCSampleLC
	27, // 5: Scailo.QCSample.family_type:type_name -> Scailo.FAMILY_TYPE
	7,  // 6: Scailo.QCSampleWithMetadata.qc_sample:type_name -> Scailo.QCSample
	28, // 7: Scailo.QCSampleWithMetadata.family:type_name -> Scailo.Family
	29, // 8: Scailo.QCSampleWithMetadata.qc_group:type_name -> Scailo.QCGroup
	30, // 9: Scailo.QCSampleWithMetadata.inventory_item:type_name -> Scailo.GenericInventory
	7,  // 10: Scailo.QCSamplesList.list:type_name -> Scailo.QCSample
	8,  // 11: Scailo.QCSamplesWithMetadataList.list:type_name -> Scailo.QCSampleWithMetadata
	31, // 12: Scailo.QCSamplesServicePaginationReq.is_active:type_name -> Scailo.BOOL_FILTER
	32, // 13: Scailo.QCSamplesServicePaginationReq.sort_order:type_name -> Scailo.SORT_ORDER
	1,  // 14: Scailo.QCSamplesServicePaginationReq.sort_key:type_name -> Scailo.QC_SAMPLE_SORT_KEY
	0,  // 15: Scailo.QCSamplesServicePaginationReq.status:type_name -> Scailo.QC_SAMPLE_LIFECYCLE
	7,  // 16: Scailo.QCSamplesServicePaginationResponse.payload:type_name -> Scailo.QCSample
	31, // 17: Scailo.QCSamplesServiceFilterReq.is_active:type_name -> Scailo.BOOL_FILTER
	32, // 18: Scailo.QCSamplesServiceFilterReq.sort_order:type_name -> Scailo.SORT_ORDER
	1,  // 19: Scailo.QCSamplesServiceFilterReq.sort_key:type_name -> Scailo.QC_SAMPLE_SORT_KEY
	0,  // 20: Scailo.QCSamplesServiceFilterReq.status:type_name -> Scailo.QC_SAMPLE_LIFECYCLE
	27, // 21: Scailo.QCSamplesServiceFilterReq.family_type:type_name -> Scailo.FAMILY_TYPE
	31, // 22: Scailo.QCSamplesServiceCountReq.is_active:type_name -> Scailo.BOOL_FILTER
	0,  // 23: Scailo.QCSamplesServiceCountReq.status:type_name -> Scailo.QC_SAMPLE_LIFECYCLE
	27, // 24: Scailo.QCSamplesServiceCountReq.family_type:type_name -> Scailo.FAMILY_TYPE
	31, // 25: Scailo.QCSamplesServiceSearchAllReq.is_active:type_name -> Scailo.BOOL_FILTER
	32, // 26: Scailo.QCSamplesServiceSearchAllReq.sort_order:type_name -> Scailo.SORT_ORDER
	1,  // 27: Scailo.QCSamplesServiceSearchAllReq.sort_key:type_name -> Scailo.QC_SAMPLE_SORT_KEY
	0,  // 28: Scailo.QCSamplesServiceSearchAllReq.status:type_name -> Scailo.QC_SAMPLE_LIFECYCLE
	27, // 29: Scailo.QCSamplesServiceSearchAllReq.family_type:type_name -> Scailo.FAMILY_TYPE
	25, // 30: Scailo.QCSampleParameter.metadata:type_name -> Scailo.EmployeeMetadata
	33, // 31: Scailo.QCSampleParameter.acceptable_value_type:type_name -> Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE
	17, // 32: Scailo.QCSampleParametersList.list:type_name -> Scailo.QCSampleParameter
	25, // 33: Scailo.QCSampleParameterHistory.metadata:type_name -> Scailo.EmployeeMetadata
	20, // 34: Scailo.QCSampleParameterHistoryList.list:type_name -> Scailo.QCSampleParameterHistory
	31, // 35: Scailo.QCSampleParametersSearchRequest.is_active:type_name -> Scailo.BOOL_FILTER
	32, // 36: Scailo.QCSampleParametersSearchRequest.sort_order:type_name -> Scailo.SORT_ORDER
	2,  // 37: Scailo.QCSampleParametersSearchRequest.sort_key:type_name -> Scailo.QC_SAMPLE_PARAMETER_SORT_KEY
	17, // 38: Scailo.QCSamplesServicePaginatedParametersResponse.payload:type_name -> Scailo.QCSampleParameter
	4,  // 39: Scailo.QCSamplesService.Create:input_type -> Scailo.QCSamplesServiceCreateRequest
	5,  // 40: Scailo.QCSamplesService.Update:input_type -> Scailo.QCSamplesServiceUpdateRequest
	34, // 41: Scailo.QCSamplesService.Finish:input_type -> Scailo.IdentifierUUIDWithUserComment
	34, // 42: Scailo.QCSamplesService.Accept:input_type -> Scailo.IdentifierUUIDWithUserComment
	34, // 43: Scailo.QCSamplesService.AcceptWithDeviation:input_type -> Scailo.IdentifierUUIDWithUserComment
	34, // 44: Scailo.QCSamplesService.Reject:input_type -> Scailo.IdentifierUUIDWithUserComment
	34, // 45: Scailo.QCSamplesService.Cancel:input_type -> Scailo.IdentifierUUIDWithUserComment
	34, // 46: Scailo.QCSamplesService.Reopen:input_type -> Scailo.IdentifierUUIDWithUserComment
	34, // 47: Scailo.QCSamplesService.CommentAdd:input_type -> Scailo.IdentifierUUIDWithUserComment
	35, // 48: Scailo.QCSamplesService.SendEmail:input_type -> Scailo.IdentifierWithEmailAttributes
	36, // 49: Scailo.QCSamplesService.CreateMagicLink:input_type -> Scailo.MagicLinksServiceCreateRequestForSpecificResource
	16, // 50: Scailo.QCSamplesService.UpdateParameter:input_type -> Scailo.QCSamplesServiceParameterUpdateRequest
	37, // 51: Scailo.QCSamplesService.ViewParameterByID:input_type -> Scailo.Identifier
	38, // 52: Scailo.QCSamplesService.ViewParameters:input_type -> Scailo.IdentifierUUID
	19, // 53: Scailo.QCSamplesService.ViewParameterHistory:input_type -> Scailo.QCSampleParameterHistoryRequest
	22, // 54: Scailo.QCSamplesService.ViewPaginatedParameters:input_type -> Scailo.QCSampleParametersSearchRequest
	22, // 55: Scailo.QCSamplesService.SearchParametersWithPagination:input_type -> Scailo.QCSampleParametersSearchRequest
	38, // 56: Scailo.QCSamplesService.DownloadParametersAsCSV:input_type -> Scailo.IdentifierUUID
	37, // 57: Scailo.QCSamplesService.ViewByID:input_type -> Scailo.Identifier
	38, // 58: Scailo.QCSamplesService.ViewByUUID:input_type -> Scailo.IdentifierUUID
	37, // 59: Scailo.QCSamplesService.ViewEssentialByID:input_type -> Scailo.Identifier
	38, // 60: Scailo.QCSamplesService.ViewEssentialByUUID:input_type -> Scailo.IdentifierUUID
	39, // 61: Scailo.QCSamplesService.ViewFromIDs:input_type -> Scailo.IdentifiersList
	38, // 62: Scailo.QCSamplesService.ViewAncillaryParametersByUUID:input_type -> Scailo.IdentifierUUID
	40, // 63: Scailo.QCSamplesService.ViewAll:input_type -> Scailo.ActiveStatus
	38, // 64: Scailo.QCSamplesService.ViewAllForEntityUUID:input_type -> Scailo.IdentifierUUID
	11, // 65: Scailo.QCSamplesService.ViewWithPagination:input_type -> Scailo.QCSamplesServicePaginationReq
	38, // 66: Scailo.QCSamplesService.IsDownloadable:input_type -> Scailo.IdentifierUUID
	38, // 67: Scailo.QCSamplesService.DownloadByUUID:input_type -> Scailo.IdentifierUUID
	15, // 68: Scailo.QCSamplesService.SearchAll:input_type -> Scailo.QCSamplesServiceSearchAllReq
	13, // 69: Scailo.QCSamplesService.Filter:input_type -> Scailo.QCSamplesServiceFilterReq
	14, // 70: Scailo.QCSamplesService.Count:input_type -> Scailo.QCSamplesServiceCountReq
	38, // 71: Scailo.QCSamplesService.CountsForInventoryItem:input_type -> Scailo.IdentifierUUID
	13, // 72: Scailo.QCSamplesService.DownloadAsCSV:input_type -> Scailo.QCSamplesServiceFilterReq
	41, // 73: Scailo.QCSamplesService.Create:output_type -> Scailo.IdentifierUUIDsList
	42, // 74: Scailo.QCSamplesService.Update:output_type -> Scailo.IdentifierResponse
	42, // 75: Scailo.QCSamplesService.Finish:output_type -> Scailo.IdentifierResponse
	42, // 76: Scailo.QCSamplesService.Accept:output_type -> Scailo.IdentifierResponse
	42, // 77: Scailo.QCSamplesService.AcceptWithDeviation:output_type -> Scailo.IdentifierResponse
	42, // 78: Scailo.QCSamplesService.Reject:output_type -> Scailo.IdentifierResponse
	42, // 79: Scailo.QCSamplesService.Cancel:output_type -> Scailo.IdentifierResponse
	42, // 80: Scailo.QCSamplesService.Reopen:output_type -> Scailo.IdentifierResponse
	42, // 81: Scailo.QCSamplesService.CommentAdd:output_type -> Scailo.IdentifierResponse
	42, // 82: Scailo.QCSamplesService.SendEmail:output_type -> Scailo.IdentifierResponse
	43, // 83: Scailo.QCSamplesService.CreateMagicLink:output_type -> Scailo.MagicLink
	42, // 84: Scailo.QCSamplesService.UpdateParameter:output_type -> Scailo.IdentifierResponse
	17, // 85: Scailo.QCSamplesService.ViewParameterByID:output_type -> Scailo.QCSampleParameter
	18, // 86: Scailo.QCSamplesService.ViewParameters:output_type -> Scailo.QCSampleParametersList
	21, // 87: Scailo.QCSamplesService.ViewParameterHistory:output_type -> Scailo.QCSampleParameterHistoryList
	23, // 88: Scailo.QCSamplesService.ViewPaginatedParameters:output_type -> Scailo.QCSamplesServicePaginatedParametersResponse
	23, // 89: Scailo.QCSamplesService.SearchParametersWithPagination:output_type -> Scailo.QCSamplesServicePaginatedParametersResponse
	44, // 90: Scailo.QCSamplesService.DownloadParametersAsCSV:output_type -> Scailo.StandardFile
	7,  // 91: Scailo.QCSamplesService.ViewByID:output_type -> Scailo.QCSample
	7,  // 92: Scailo.QCSamplesService.ViewByUUID:output_type -> Scailo.QCSample
	7,  // 93: Scailo.QCSamplesService.ViewEssentialByID:output_type -> Scailo.QCSample
	7,  // 94: Scailo.QCSamplesService.ViewEssentialByUUID:output_type -> Scailo.QCSample
	9,  // 95: Scailo.QCSamplesService.ViewFromIDs:output_type -> Scailo.QCSamplesList
	6,  // 96: Scailo.QCSamplesService.ViewAncillaryParametersByUUID:output_type -> Scailo.QCSampleAncillaryParameters
	9,  // 97: Scailo.QCSamplesService.ViewAll:output_type -> Scailo.QCSamplesList
	9,  // 98: Scailo.QCSamplesService.ViewAllForEntityUUID:output_type -> Scailo.QCSamplesList
	12, // 99: Scailo.QCSamplesService.ViewWithPagination:output_type -> Scailo.QCSamplesServicePaginationResponse
	45, // 100: Scailo.QCSamplesService.IsDownloadable:output_type -> Scailo.BooleanResponse
	44, // 101: Scailo.QCSamplesService.DownloadByUUID:output_type -> Scailo.StandardFile
	10, // 102: Scailo.QCSamplesService.SearchAll:output_type -> Scailo.QCSamplesWithMetadataList
	9,  // 103: Scailo.QCSamplesService.Filter:output_type -> Scailo.QCSamplesList
	46, // 104: Scailo.QCSamplesService.Count:output_type -> Scailo.CountResponse
	24, // 105: Scailo.QCSamplesService.CountsForInventoryItem:output_type -> Scailo.QCSamplesCountStatistics
	44, // 106: Scailo.QCSamplesService.DownloadAsCSV:output_type -> Scailo.StandardFile
	73, // [73:107] is the sub-list for method output_type
	39, // [39:73] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_qc_samples_scailo_proto_init() }
func file_qc_samples_scailo_proto_init() {
	if File_qc_samples_scailo_proto != nil {
		return
	}
	file_base_scailo_proto_init()
	file_families_scailo_proto_init()
	file_inventory_scailo_proto_init()
	file_magic_links_scailo_proto_init()
	file_qc_groups_scailo_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qc_samples_scailo_proto_rawDesc), len(file_qc_samples_scailo_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_qc_samples_scailo_proto_goTypes,
		DependencyIndexes: file_qc_samples_scailo_proto_depIdxs,
		EnumInfos:         file_qc_samples_scailo_proto_enumTypes,
		MessageInfos:      file_qc_samples_scailo_proto_msgTypes,
	}.Build()
	File_qc_samples_scailo_proto = out.File
	file_qc_samples_scailo_proto_goTypes = nil
	file_qc_samples_scailo_proto_depIdxs = nil
}
