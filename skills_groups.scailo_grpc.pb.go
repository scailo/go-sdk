// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: skills_groups.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SkillsGroupsService_Create_FullMethodName                        = "/Scailo.SkillsGroupsService/Create"
	SkillsGroupsService_Draft_FullMethodName                         = "/Scailo.SkillsGroupsService/Draft"
	SkillsGroupsService_DraftUpdate_FullMethodName                   = "/Scailo.SkillsGroupsService/DraftUpdate"
	SkillsGroupsService_SendForVerification_FullMethodName           = "/Scailo.SkillsGroupsService/SendForVerification"
	SkillsGroupsService_Verify_FullMethodName                        = "/Scailo.SkillsGroupsService/Verify"
	SkillsGroupsService_Approve_FullMethodName                       = "/Scailo.SkillsGroupsService/Approve"
	SkillsGroupsService_SendForRevision_FullMethodName               = "/Scailo.SkillsGroupsService/SendForRevision"
	SkillsGroupsService_RevisionUpdate_FullMethodName                = "/Scailo.SkillsGroupsService/RevisionUpdate"
	SkillsGroupsService_Halt_FullMethodName                          = "/Scailo.SkillsGroupsService/Halt"
	SkillsGroupsService_Discard_FullMethodName                       = "/Scailo.SkillsGroupsService/Discard"
	SkillsGroupsService_Restore_FullMethodName                       = "/Scailo.SkillsGroupsService/Restore"
	SkillsGroupsService_Complete_FullMethodName                      = "/Scailo.SkillsGroupsService/Complete"
	SkillsGroupsService_Repeat_FullMethodName                        = "/Scailo.SkillsGroupsService/Repeat"
	SkillsGroupsService_Reopen_FullMethodName                        = "/Scailo.SkillsGroupsService/Reopen"
	SkillsGroupsService_CommentAdd_FullMethodName                    = "/Scailo.SkillsGroupsService/CommentAdd"
	SkillsGroupsService_Clone_FullMethodName                         = "/Scailo.SkillsGroupsService/Clone"
	SkillsGroupsService_AddSkillGroupItem_FullMethodName             = "/Scailo.SkillsGroupsService/AddSkillGroupItem"
	SkillsGroupsService_ModifySkillGroupItem_FullMethodName          = "/Scailo.SkillsGroupsService/ModifySkillGroupItem"
	SkillsGroupsService_ApproveSkillGroupItem_FullMethodName         = "/Scailo.SkillsGroupsService/ApproveSkillGroupItem"
	SkillsGroupsService_DeleteSkillGroupItem_FullMethodName          = "/Scailo.SkillsGroupsService/DeleteSkillGroupItem"
	SkillsGroupsService_ReorderSkillGroupItems_FullMethodName        = "/Scailo.SkillsGroupsService/ReorderSkillGroupItems"
	SkillsGroupsService_ViewSkillGroupItemByID_FullMethodName        = "/Scailo.SkillsGroupsService/ViewSkillGroupItemByID"
	SkillsGroupsService_ViewApprovedSkillGroupItems_FullMethodName   = "/Scailo.SkillsGroupsService/ViewApprovedSkillGroupItems"
	SkillsGroupsService_ViewUnapprovedSkillGroupItems_FullMethodName = "/Scailo.SkillsGroupsService/ViewUnapprovedSkillGroupItems"
	SkillsGroupsService_ViewSkillGroupItemHistory_FullMethodName     = "/Scailo.SkillsGroupsService/ViewSkillGroupItemHistory"
	SkillsGroupsService_DownloadItemsAsCSV_FullMethodName            = "/Scailo.SkillsGroupsService/DownloadItemsAsCSV"
	SkillsGroupsService_DownloadItemsTemplateAsCSV_FullMethodName    = "/Scailo.SkillsGroupsService/DownloadItemsTemplateAsCSV"
	SkillsGroupsService_UploadSkillGroupItems_FullMethodName         = "/Scailo.SkillsGroupsService/UploadSkillGroupItems"
	SkillsGroupsService_ViewByID_FullMethodName                      = "/Scailo.SkillsGroupsService/ViewByID"
	SkillsGroupsService_ViewByUUID_FullMethodName                    = "/Scailo.SkillsGroupsService/ViewByUUID"
	SkillsGroupsService_ViewByCode_FullMethodName                    = "/Scailo.SkillsGroupsService/ViewByCode"
	SkillsGroupsService_ViewEssentialByID_FullMethodName             = "/Scailo.SkillsGroupsService/ViewEssentialByID"
	SkillsGroupsService_ViewEssentialByUUID_FullMethodName           = "/Scailo.SkillsGroupsService/ViewEssentialByUUID"
	SkillsGroupsService_ViewFromIDs_FullMethodName                   = "/Scailo.SkillsGroupsService/ViewFromIDs"
	SkillsGroupsService_ViewAll_FullMethodName                       = "/Scailo.SkillsGroupsService/ViewAll"
	SkillsGroupsService_ViewAllForEntityUUID_FullMethodName          = "/Scailo.SkillsGroupsService/ViewAllForEntityUUID"
	SkillsGroupsService_ViewWithPagination_FullMethodName            = "/Scailo.SkillsGroupsService/ViewWithPagination"
	SkillsGroupsService_ViewForRoleID_FullMethodName                 = "/Scailo.SkillsGroupsService/ViewForRoleID"
	SkillsGroupsService_SearchAll_FullMethodName                     = "/Scailo.SkillsGroupsService/SearchAll"
	SkillsGroupsService_Filter_FullMethodName                        = "/Scailo.SkillsGroupsService/Filter"
	SkillsGroupsService_CountInStatus_FullMethodName                 = "/Scailo.SkillsGroupsService/CountInStatus"
	SkillsGroupsService_Count_FullMethodName                         = "/Scailo.SkillsGroupsService/Count"
	SkillsGroupsService_DownloadAsCSV_FullMethodName                 = "/Scailo.SkillsGroupsService/DownloadAsCSV"
	SkillsGroupsService_ImportFromCSV_FullMethodName                 = "/Scailo.SkillsGroupsService/ImportFromCSV"
)

// SkillsGroupsServiceClient is the client API for SkillsGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each skill group
type SkillsGroupsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *SkillsGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *SkillsGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *SkillsGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *SkillsGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Clone skill group from an existing skill group (denoted by the identifier)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a param to a skill group
	AddSkillGroupItem(ctx context.Context, in *SkillsGroupsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify a param in a skill group
	ModifySkillGroupItem(ctx context.Context, in *SkillsGroupsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a param in a skill group
	ApproveSkillGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a param in a skill group
	DeleteSkillGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder params in a skill group
	ReorderSkillGroupItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Skill Group Item by ID
	ViewSkillGroupItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SkillGroupItem, error)
	// View approved skill group params for given skill group ID
	ViewApprovedSkillGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SkillsGroupsItemsList, error)
	// View unapproved skill group params for given skill group ID
	ViewUnapprovedSkillGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SkillsGroupsItemsList, error)
	// View the history of the skill group item
	ViewSkillGroupItemHistory(ctx context.Context, in *SkillGroupItemHistoryRequest, opts ...grpc.CallOption) (*SkillsGroupsItemsList, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadSkillGroupItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SkillGroup, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SkillGroup, error)
	// View by Code (returns the latest record in case of duplicates)
	ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SkillGroup, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SkillGroup, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SkillGroup, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SkillsGroupsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SkillsGroupsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SkillsGroupsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *SkillsGroupsServicePaginationReq, opts ...grpc.CallOption) (*SkillsGroupsServicePaginationResponse, error)
	// View the latest skill group for a role (denoted by the given identifier)
	ViewForRoleID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SkillGroup, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *SkillsGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*SkillsGroupsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *SkillsGroupsServiceFilterReq, opts ...grpc.CallOption) (*SkillsGroupsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *SkillsGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *SkillsGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type skillsGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSkillsGroupsServiceClient(cc grpc.ClientConnInterface) SkillsGroupsServiceClient {
	return &skillsGroupsServiceClient{cc}
}

func (c *skillsGroupsServiceClient) Create(ctx context.Context, in *SkillsGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Draft(ctx context.Context, in *SkillsGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) DraftUpdate(ctx context.Context, in *SkillsGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) RevisionUpdate(ctx context.Context, in *SkillsGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) AddSkillGroupItem(ctx context.Context, in *SkillsGroupsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_AddSkillGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ModifySkillGroupItem(ctx context.Context, in *SkillsGroupsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ModifySkillGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ApproveSkillGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ApproveSkillGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) DeleteSkillGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_DeleteSkillGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ReorderSkillGroupItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ReorderSkillGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewSkillGroupItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SkillGroupItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillGroupItem)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewSkillGroupItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewApprovedSkillGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SkillsGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillsGroupsItemsList)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewApprovedSkillGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewUnapprovedSkillGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SkillsGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillsGroupsItemsList)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewUnapprovedSkillGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewSkillGroupItemHistory(ctx context.Context, in *SkillGroupItemHistoryRequest, opts ...grpc.CallOption) (*SkillsGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillsGroupsItemsList)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewSkillGroupItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SkillsGroupsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SkillsGroupsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) UploadSkillGroupItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SkillsGroupsService_UploadSkillGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SkillGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillGroup)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SkillGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillGroup)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SkillGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillGroup)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SkillGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillGroup)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SkillGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillGroup)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SkillsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillsGroupsList)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SkillsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillsGroupsList)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SkillsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillsGroupsList)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewWithPagination(ctx context.Context, in *SkillsGroupsServicePaginationReq, opts ...grpc.CallOption) (*SkillsGroupsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillsGroupsServicePaginationResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ViewForRoleID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SkillGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillGroup)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ViewForRoleID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) SearchAll(ctx context.Context, in *SkillsGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*SkillsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillsGroupsList)
	err := c.cc.Invoke(ctx, SkillsGroupsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Filter(ctx context.Context, in *SkillsGroupsServiceFilterReq, opts ...grpc.CallOption) (*SkillsGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkillsGroupsList)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) Count(ctx context.Context, in *SkillsGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SkillsGroupsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) DownloadAsCSV(ctx context.Context, in *SkillsGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SkillsGroupsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsGroupsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, SkillsGroupsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkillsGroupsService
