// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: purchases_enquiries.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PurchasesEnquiriesService_Create_FullMethodName                                      = "/Scailo.PurchasesEnquiriesService/Create"
	PurchasesEnquiriesService_Draft_FullMethodName                                       = "/Scailo.PurchasesEnquiriesService/Draft"
	PurchasesEnquiriesService_DraftUpdate_FullMethodName                                 = "/Scailo.PurchasesEnquiriesService/DraftUpdate"
	PurchasesEnquiriesService_SendForVerification_FullMethodName                         = "/Scailo.PurchasesEnquiriesService/SendForVerification"
	PurchasesEnquiriesService_Verify_FullMethodName                                      = "/Scailo.PurchasesEnquiriesService/Verify"
	PurchasesEnquiriesService_Approve_FullMethodName                                     = "/Scailo.PurchasesEnquiriesService/Approve"
	PurchasesEnquiriesService_SendForRevision_FullMethodName                             = "/Scailo.PurchasesEnquiriesService/SendForRevision"
	PurchasesEnquiriesService_RevisionUpdate_FullMethodName                              = "/Scailo.PurchasesEnquiriesService/RevisionUpdate"
	PurchasesEnquiriesService_Halt_FullMethodName                                        = "/Scailo.PurchasesEnquiriesService/Halt"
	PurchasesEnquiriesService_Discard_FullMethodName                                     = "/Scailo.PurchasesEnquiriesService/Discard"
	PurchasesEnquiriesService_Restore_FullMethodName                                     = "/Scailo.PurchasesEnquiriesService/Restore"
	PurchasesEnquiriesService_Complete_FullMethodName                                    = "/Scailo.PurchasesEnquiriesService/Complete"
	PurchasesEnquiriesService_Repeat_FullMethodName                                      = "/Scailo.PurchasesEnquiriesService/Repeat"
	PurchasesEnquiriesService_Reopen_FullMethodName                                      = "/Scailo.PurchasesEnquiriesService/Reopen"
	PurchasesEnquiriesService_CommentAdd_FullMethodName                                  = "/Scailo.PurchasesEnquiriesService/CommentAdd"
	PurchasesEnquiriesService_CreateMagicLink_FullMethodName                             = "/Scailo.PurchasesEnquiriesService/CreateMagicLink"
	PurchasesEnquiriesService_AddPurchaseEnquiryItem_FullMethodName                      = "/Scailo.PurchasesEnquiriesService/AddPurchaseEnquiryItem"
	PurchasesEnquiriesService_ModifyPurchaseEnquiryItem_FullMethodName                   = "/Scailo.PurchasesEnquiriesService/ModifyPurchaseEnquiryItem"
	PurchasesEnquiriesService_ApprovePurchaseEnquiryItem_FullMethodName                  = "/Scailo.PurchasesEnquiriesService/ApprovePurchaseEnquiryItem"
	PurchasesEnquiriesService_DeletePurchaseEnquiryItem_FullMethodName                   = "/Scailo.PurchasesEnquiriesService/DeletePurchaseEnquiryItem"
	PurchasesEnquiriesService_ReorderPurchaseEnquiryItems_FullMethodName                 = "/Scailo.PurchasesEnquiriesService/ReorderPurchaseEnquiryItems"
	PurchasesEnquiriesService_ViewPurchaseEnquiryItemByID_FullMethodName                 = "/Scailo.PurchasesEnquiriesService/ViewPurchaseEnquiryItemByID"
	PurchasesEnquiriesService_ViewApprovedPurchaseEnquiryItems_FullMethodName            = "/Scailo.PurchasesEnquiriesService/ViewApprovedPurchaseEnquiryItems"
	PurchasesEnquiriesService_ViewUnapprovedPurchaseEnquiryItems_FullMethodName          = "/Scailo.PurchasesEnquiriesService/ViewUnapprovedPurchaseEnquiryItems"
	PurchasesEnquiriesService_ViewPurchaseEnquiryItemHistory_FullMethodName              = "/Scailo.PurchasesEnquiriesService/ViewPurchaseEnquiryItemHistory"
	PurchasesEnquiriesService_ViewPaginatedApprovedPurchaseEnquiryItems_FullMethodName   = "/Scailo.PurchasesEnquiriesService/ViewPaginatedApprovedPurchaseEnquiryItems"
	PurchasesEnquiriesService_ViewPaginatedUnapprovedPurchaseEnquiryItems_FullMethodName = "/Scailo.PurchasesEnquiriesService/ViewPaginatedUnapprovedPurchaseEnquiryItems"
	PurchasesEnquiriesService_SearchItemsWithPagination_FullMethodName                   = "/Scailo.PurchasesEnquiriesService/SearchItemsWithPagination"
	PurchasesEnquiriesService_DownloadItemsAsCSV_FullMethodName                          = "/Scailo.PurchasesEnquiriesService/DownloadItemsAsCSV"
	PurchasesEnquiriesService_DownloadItemsTemplateAsCSV_FullMethodName                  = "/Scailo.PurchasesEnquiriesService/DownloadItemsTemplateAsCSV"
	PurchasesEnquiriesService_UploadPurchaseEnquiryItems_FullMethodName                  = "/Scailo.PurchasesEnquiriesService/UploadPurchaseEnquiryItems"
	PurchasesEnquiriesService_ViewByID_FullMethodName                                    = "/Scailo.PurchasesEnquiriesService/ViewByID"
	PurchasesEnquiriesService_ViewByUUID_FullMethodName                                  = "/Scailo.PurchasesEnquiriesService/ViewByUUID"
	PurchasesEnquiriesService_ViewByReferenceID_FullMethodName                           = "/Scailo.PurchasesEnquiriesService/ViewByReferenceID"
	PurchasesEnquiriesService_ViewEssentialByID_FullMethodName                           = "/Scailo.PurchasesEnquiriesService/ViewEssentialByID"
	PurchasesEnquiriesService_ViewEssentialByUUID_FullMethodName                         = "/Scailo.PurchasesEnquiriesService/ViewEssentialByUUID"
	PurchasesEnquiriesService_ViewFromIDs_FullMethodName                                 = "/Scailo.PurchasesEnquiriesService/ViewFromIDs"
	PurchasesEnquiriesService_ViewAll_FullMethodName                                     = "/Scailo.PurchasesEnquiriesService/ViewAll"
	PurchasesEnquiriesService_ViewAllForEntityUUID_FullMethodName                        = "/Scailo.PurchasesEnquiriesService/ViewAllForEntityUUID"
	PurchasesEnquiriesService_ViewWithPagination_FullMethodName                          = "/Scailo.PurchasesEnquiriesService/ViewWithPagination"
	PurchasesEnquiriesService_IsDownloadable_FullMethodName                              = "/Scailo.PurchasesEnquiriesService/IsDownloadable"
	PurchasesEnquiriesService_DownloadByUUID_FullMethodName                              = "/Scailo.PurchasesEnquiriesService/DownloadByUUID"
	PurchasesEnquiriesService_SearchAll_FullMethodName                                   = "/Scailo.PurchasesEnquiriesService/SearchAll"
	PurchasesEnquiriesService_Filter_FullMethodName                                      = "/Scailo.PurchasesEnquiriesService/Filter"
	PurchasesEnquiriesService_CountInStatus_FullMethodName                               = "/Scailo.PurchasesEnquiriesService/CountInStatus"
	PurchasesEnquiriesService_Count_FullMethodName                                       = "/Scailo.PurchasesEnquiriesService/Count"
	PurchasesEnquiriesService_DownloadAsCSV_FullMethodName                               = "/Scailo.PurchasesEnquiriesService/DownloadAsCSV"
)

// PurchasesEnquiriesServiceClient is the client API for PurchasesEnquiriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each purchase enquiry
type PurchasesEnquiriesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *PurchasesEnquiriesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *PurchasesEnquiriesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *PurchasesEnquiriesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *PurchasesEnquiriesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add an item to a purchase enquiry
	AddPurchaseEnquiryItem(ctx context.Context, in *PurchasesEnquiriesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a purchase enquiry
	ModifyPurchaseEnquiryItem(ctx context.Context, in *PurchasesEnquiriesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a purchase enquiry
	ApprovePurchaseEnquiryItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a purchase enquiry
	DeletePurchaseEnquiryItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a purchase enquiry
	ReorderPurchaseEnquiryItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View purchase enquiry Item by ID
	ViewPurchaseEnquiryItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseEnquiryItem, error)
	// View approved purchase enquiry items for given purchase enquiry ID
	ViewApprovedPurchaseEnquiryItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesEnquiriesItemsList, error)
	// View unapproved purchase enquiry items for given purchase enquiry ID
	ViewUnapprovedPurchaseEnquiryItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesEnquiriesItemsList, error)
	// View the history of the purchase enquiry item
	ViewPurchaseEnquiryItemHistory(ctx context.Context, in *PurchaseEnquiryItemHistoryRequest, opts ...grpc.CallOption) (*PurchasesEnquiriesItemsList, error)
	// View approved purchase enquiry items for given purchase enquiry ID with pagination
	ViewPaginatedApprovedPurchaseEnquiryItems(ctx context.Context, in *PurchaseEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*PurchaseEnquiriesServicePaginatedItemsResponse, error)
	// View unapproved purchase enquiry items for given purchase enquiry ID with pagination
	ViewPaginatedUnapprovedPurchaseEnquiryItems(ctx context.Context, in *PurchaseEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*PurchaseEnquiriesServicePaginatedItemsResponse, error)
	// Search through purchase enquiry items with pagination
	SearchItemsWithPagination(ctx context.Context, in *PurchaseEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*PurchaseEnquiriesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadPurchaseEnquiryItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseEnquiry, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseEnquiry, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PurchaseEnquiry, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseEnquiry, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseEnquiry, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PurchasesEnquiriesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PurchasesEnquiriesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasesEnquiriesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *PurchasesEnquiriesServicePaginationReq, opts ...grpc.CallOption) (*PurchasesEnquiriesServicePaginationResponse, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download purchase enquiry with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *PurchasesEnquiriesServiceSearchAllReq, opts ...grpc.CallOption) (*PurchasesEnquiriesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *PurchasesEnquiriesServiceFilterReq, opts ...grpc.CallOption) (*PurchasesEnquiriesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *PurchasesEnquiriesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *PurchasesEnquiriesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type purchasesEnquiriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchasesEnquiriesServiceClient(cc grpc.ClientConnInterface) PurchasesEnquiriesServiceClient {
	return &purchasesEnquiriesServiceClient{cc}
}

func (c *purchasesEnquiriesServiceClient) Create(ctx context.Context, in *PurchasesEnquiriesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Draft(ctx context.Context, in *PurchasesEnquiriesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) DraftUpdate(ctx context.Context, in *PurchasesEnquiriesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) RevisionUpdate(ctx context.Context, in *PurchasesEnquiriesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) AddPurchaseEnquiryItem(ctx context.Context, in *PurchasesEnquiriesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_AddPurchaseEnquiryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ModifyPurchaseEnquiryItem(ctx context.Context, in *PurchasesEnquiriesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ModifyPurchaseEnquiryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ApprovePurchaseEnquiryItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ApprovePurchaseEnquiryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) DeletePurchaseEnquiryItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_DeletePurchaseEnquiryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ReorderPurchaseEnquiryItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ReorderPurchaseEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewPurchaseEnquiryItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseEnquiryItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseEnquiryItem)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewPurchaseEnquiryItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewApprovedPurchaseEnquiryItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesEnquiriesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesEnquiriesItemsList)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewApprovedPurchaseEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewUnapprovedPurchaseEnquiryItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesEnquiriesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesEnquiriesItemsList)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewUnapprovedPurchaseEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewPurchaseEnquiryItemHistory(ctx context.Context, in *PurchaseEnquiryItemHistoryRequest, opts ...grpc.CallOption) (*PurchasesEnquiriesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesEnquiriesItemsList)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewPurchaseEnquiryItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewPaginatedApprovedPurchaseEnquiryItems(ctx context.Context, in *PurchaseEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*PurchaseEnquiriesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseEnquiriesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewPaginatedApprovedPurchaseEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewPaginatedUnapprovedPurchaseEnquiryItems(ctx context.Context, in *PurchaseEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*PurchaseEnquiriesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseEnquiriesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewPaginatedUnapprovedPurchaseEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) SearchItemsWithPagination(ctx context.Context, in *PurchaseEnquiryItemsSearchRequest, opts ...grpc.CallOption) (*PurchaseEnquiriesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseEnquiriesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) UploadPurchaseEnquiryItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_UploadPurchaseEnquiryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseEnquiry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseEnquiry)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseEnquiry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseEnquiry)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PurchaseEnquiry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseEnquiry)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseEnquiry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseEnquiry)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseEnquiry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseEnquiry)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PurchasesEnquiriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesEnquiriesList)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PurchasesEnquiriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesEnquiriesList)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasesEnquiriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesEnquiriesList)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) ViewWithPagination(ctx context.Context, in *PurchasesEnquiriesServicePaginationReq, opts ...grpc.CallOption) (*PurchasesEnquiriesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesEnquiriesServicePaginationResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) SearchAll(ctx context.Context, in *PurchasesEnquiriesServiceSearchAllReq, opts ...grpc.CallOption) (*PurchasesEnquiriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesEnquiriesList)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Filter(ctx context.Context, in *PurchasesEnquiriesServiceFilterReq, opts ...grpc.CallOption) (*PurchasesEnquiriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesEnquiriesList)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) Count(ctx context.Context, in *PurchasesEnquiriesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesEnquiriesServiceClient) DownloadAsCSV(ctx context.Context, in *PurchasesEnquiriesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesEnquiriesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchasesEnquiriesService
