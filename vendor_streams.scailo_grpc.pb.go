// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: vendor_streams.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VendorStreamsService_Create_FullMethodName                                  = "/Scailo.VendorStreamsService/Create"
	VendorStreamsService_Update_FullMethodName                                  = "/Scailo.VendorStreamsService/Update"
	VendorStreamsService_Cancel_FullMethodName                                  = "/Scailo.VendorStreamsService/Cancel"
	VendorStreamsService_Complete_FullMethodName                                = "/Scailo.VendorStreamsService/Complete"
	VendorStreamsService_Reopen_FullMethodName                                  = "/Scailo.VendorStreamsService/Reopen"
	VendorStreamsService_Repeat_FullMethodName                                  = "/Scailo.VendorStreamsService/Repeat"
	VendorStreamsService_CommentAdd_FullMethodName                              = "/Scailo.VendorStreamsService/CommentAdd"
	VendorStreamsService_AddMessage_FullMethodName                              = "/Scailo.VendorStreamsService/AddMessage"
	VendorStreamsService_SaveMessageForLater_FullMethodName                     = "/Scailo.VendorStreamsService/SaveMessageForLater"
	VendorStreamsService_DeleteMessage_FullMethodName                           = "/Scailo.VendorStreamsService/DeleteMessage"
	VendorStreamsService_ViewMessageByUUID_FullMethodName                       = "/Scailo.VendorStreamsService/ViewMessageByUUID"
	VendorStreamsService_ViewMessages_FullMethodName                            = "/Scailo.VendorStreamsService/ViewMessages"
	VendorStreamsService_ViewPaginatedMessages_FullMethodName                   = "/Scailo.VendorStreamsService/ViewPaginatedMessages"
	VendorStreamsService_SearchMessagesWithPagination_FullMethodName            = "/Scailo.VendorStreamsService/SearchMessagesWithPagination"
	VendorStreamsService_ViewMessageReceipts_FullMethodName                     = "/Scailo.VendorStreamsService/ViewMessageReceipts"
	VendorStreamsService_AddInternalSubscriber_FullMethodName                   = "/Scailo.VendorStreamsService/AddInternalSubscriber"
	VendorStreamsService_DeleteInternalSubscriber_FullMethodName                = "/Scailo.VendorStreamsService/DeleteInternalSubscriber"
	VendorStreamsService_ViewInternalSubscriberByID_FullMethodName              = "/Scailo.VendorStreamsService/ViewInternalSubscriberByID"
	VendorStreamsService_ViewInternalSubscribers_FullMethodName                 = "/Scailo.VendorStreamsService/ViewInternalSubscribers"
	VendorStreamsService_ImportInternalSubscribersFromTeam_FullMethodName       = "/Scailo.VendorStreamsService/ImportInternalSubscribersFromTeam"
	VendorStreamsService_ImportInternalSubscribersFromDepartment_FullMethodName = "/Scailo.VendorStreamsService/ImportInternalSubscribersFromDepartment"
	VendorStreamsService_AddVendorSubscriber_FullMethodName                     = "/Scailo.VendorStreamsService/AddVendorSubscriber"
	VendorStreamsService_DeleteVendorSubscriber_FullMethodName                  = "/Scailo.VendorStreamsService/DeleteVendorSubscriber"
	VendorStreamsService_ViewVendorSubscriberByID_FullMethodName                = "/Scailo.VendorStreamsService/ViewVendorSubscriberByID"
	VendorStreamsService_ViewVendorSubscribers_FullMethodName                   = "/Scailo.VendorStreamsService/ViewVendorSubscribers"
	VendorStreamsService_ViewByID_FullMethodName                                = "/Scailo.VendorStreamsService/ViewByID"
	VendorStreamsService_ViewByUUID_FullMethodName                              = "/Scailo.VendorStreamsService/ViewByUUID"
	VendorStreamsService_ViewEssentialByID_FullMethodName                       = "/Scailo.VendorStreamsService/ViewEssentialByID"
	VendorStreamsService_ViewEssentialByUUID_FullMethodName                     = "/Scailo.VendorStreamsService/ViewEssentialByUUID"
	VendorStreamsService_ViewFromIDs_FullMethodName                             = "/Scailo.VendorStreamsService/ViewFromIDs"
	VendorStreamsService_ViewAll_FullMethodName                                 = "/Scailo.VendorStreamsService/ViewAll"
	VendorStreamsService_ViewAllForEntityUUID_FullMethodName                    = "/Scailo.VendorStreamsService/ViewAllForEntityUUID"
	VendorStreamsService_ViewWithPagination_FullMethodName                      = "/Scailo.VendorStreamsService/ViewWithPagination"
	VendorStreamsService_SearchAll_FullMethodName                               = "/Scailo.VendorStreamsService/SearchAll"
	VendorStreamsService_Filter_FullMethodName                                  = "/Scailo.VendorStreamsService/Filter"
	VendorStreamsService_Count_FullMethodName                                   = "/Scailo.VendorStreamsService/Count"
	VendorStreamsService_DownloadAsCSV_FullMethodName                           = "/Scailo.VendorStreamsService/DownloadAsCSV"
)

// VendorStreamsServiceClient is the client API for VendorStreamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each vendor stream
type VendorStreamsServiceClient interface {
	// Create
	Create(ctx context.Context, in *VendorStreamsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Update
	Update(ctx context.Context, in *VendorStreamsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Cancel
	Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Add a message to an vendor stream
	AddMessage(ctx context.Context, in *VendorStreamsServiceMessageCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Saves a message for viewing it later
	SaveMessageForLater(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Delete a message in an vendor stream
	DeleteMessage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// View Vendor Stream Message by UUID
	ViewMessageByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamMessage, error)
	// View all messages for given vendor stream UUID
	ViewMessages(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamMessagesList, error)
	// View vendor stream messages for given vendor stream ID with pagination
	ViewPaginatedMessages(ctx context.Context, in *VendorStreamMessagesSearchRequest, opts ...grpc.CallOption) (*VendorStreamsServicePaginatedMessagesResponse, error)
	// Search through vendor stream messages with pagination
	SearchMessagesWithPagination(ctx context.Context, in *VendorStreamMessagesSearchRequest, opts ...grpc.CallOption) (*VendorStreamsServicePaginatedMessagesResponse, error)
	// View all receipts for the given message UUID
	ViewMessageReceipts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamMessageReceiptsList, error)
	// Add an internal subscriber
	AddInternalSubscriber(ctx context.Context, in *VendorStreamsServiceInternalSubscriberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an internal subscriber
	DeleteInternalSubscriber(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View an internal subscriber for the given ID
	ViewInternalSubscriberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorStreamInternalSubscriber, error)
	// View all internal subscribers for given vendor stream UUID
	ViewInternalSubscribers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamInternalSubscribersList, error)
	// Import users as internal subscribers from team and returns the ID of the vendor stream
	ImportInternalSubscribersFromTeam(ctx context.Context, in *VendorStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Import users as internal subscribers from department and returns the ID of the vendor stream
	ImportInternalSubscribersFromDepartment(ctx context.Context, in *VendorStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a vendor subscriber
	AddVendorSubscriber(ctx context.Context, in *VendorStreamsServiceVendorSubscriberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a vendor subscriber
	DeleteVendorSubscriber(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View vendor subscriber for the given ID
	ViewVendorSubscriberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorStreamVendorSubscriber, error)
	// View all vendor subscribers for given vendor stream UUID
	ViewVendorSubscribers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamVendorSubscribersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorStream, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStream, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorStream, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStream, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*VendorStreamsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*VendorStreamsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *VendorStreamsServicePaginationReq, opts ...grpc.CallOption) (*VendorStreamsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *VendorStreamsServiceSearchAllReq, opts ...grpc.CallOption) (*VendorStreamsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *VendorStreamsServiceFilterReq, opts ...grpc.CallOption) (*VendorStreamsList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *VendorStreamsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request
	DownloadAsCSV(ctx context.Context, in *VendorStreamsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type vendorStreamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorStreamsServiceClient(cc grpc.ClientConnInterface) VendorStreamsServiceClient {
	return &vendorStreamsServiceClient{cc}
}

func (c *vendorStreamsServiceClient) Create(ctx context.Context, in *VendorStreamsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, VendorStreamsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) Update(ctx context.Context, in *VendorStreamsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, VendorStreamsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, VendorStreamsService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, VendorStreamsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, VendorStreamsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, VendorStreamsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, VendorStreamsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) AddMessage(ctx context.Context, in *VendorStreamsServiceMessageCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, VendorStreamsService_AddMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) SaveMessageForLater(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, VendorStreamsService_SaveMessageForLater_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) DeleteMessage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, VendorStreamsService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewMessageByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamMessage)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewMessageByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewMessages(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamMessagesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamMessagesList)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewPaginatedMessages(ctx context.Context, in *VendorStreamMessagesSearchRequest, opts ...grpc.CallOption) (*VendorStreamsServicePaginatedMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamsServicePaginatedMessagesResponse)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewPaginatedMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) SearchMessagesWithPagination(ctx context.Context, in *VendorStreamMessagesSearchRequest, opts ...grpc.CallOption) (*VendorStreamsServicePaginatedMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamsServicePaginatedMessagesResponse)
	err := c.cc.Invoke(ctx, VendorStreamsService_SearchMessagesWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewMessageReceipts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamMessageReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamMessageReceiptsList)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewMessageReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) AddInternalSubscriber(ctx context.Context, in *VendorStreamsServiceInternalSubscriberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorStreamsService_AddInternalSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) DeleteInternalSubscriber(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorStreamsService_DeleteInternalSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewInternalSubscriberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorStreamInternalSubscriber, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamInternalSubscriber)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewInternalSubscriberByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewInternalSubscribers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamInternalSubscribersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamInternalSubscribersList)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewInternalSubscribers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ImportInternalSubscribersFromTeam(ctx context.Context, in *VendorStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorStreamsService_ImportInternalSubscribersFromTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ImportInternalSubscribersFromDepartment(ctx context.Context, in *VendorStreamsServiceImportInternalSubscribersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorStreamsService_ImportInternalSubscribersFromDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) AddVendorSubscriber(ctx context.Context, in *VendorStreamsServiceVendorSubscriberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorStreamsService_AddVendorSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) DeleteVendorSubscriber(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorStreamsService_DeleteVendorSubscriber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewVendorSubscriberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorStreamVendorSubscriber, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamVendorSubscriber)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewVendorSubscriberByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewVendorSubscribers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamVendorSubscribersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamVendorSubscribersList)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewVendorSubscribers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStream)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStream)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStream)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStream)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*VendorStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamsList)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*VendorStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamsList)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamsList)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) ViewWithPagination(ctx context.Context, in *VendorStreamsServicePaginationReq, opts ...grpc.CallOption) (*VendorStreamsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamsServicePaginationResponse)
	err := c.cc.Invoke(ctx, VendorStreamsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) SearchAll(ctx context.Context, in *VendorStreamsServiceSearchAllReq, opts ...grpc.CallOption) (*VendorStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamsList)
	err := c.cc.Invoke(ctx, VendorStreamsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) Filter(ctx context.Context, in *VendorStreamsServiceFilterReq, opts ...grpc.CallOption) (*VendorStreamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorStreamsList)
	err := c.cc.Invoke(ctx, VendorStreamsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) Count(ctx context.Context, in *VendorStreamsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, VendorStreamsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorStreamsServiceClient) DownloadAsCSV(ctx context.Context, in *VendorStreamsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, VendorStreamsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorStreamsService
