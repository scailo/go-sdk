// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: outward_jobs.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OutwardJobsService_Create_FullMethodName                                        = "/Scailo.OutwardJobsService/Create"
	OutwardJobsService_Draft_FullMethodName                                         = "/Scailo.OutwardJobsService/Draft"
	OutwardJobsService_DraftUpdate_FullMethodName                                   = "/Scailo.OutwardJobsService/DraftUpdate"
	OutwardJobsService_SendForVerification_FullMethodName                           = "/Scailo.OutwardJobsService/SendForVerification"
	OutwardJobsService_Verify_FullMethodName                                        = "/Scailo.OutwardJobsService/Verify"
	OutwardJobsService_Approve_FullMethodName                                       = "/Scailo.OutwardJobsService/Approve"
	OutwardJobsService_SendForRevision_FullMethodName                               = "/Scailo.OutwardJobsService/SendForRevision"
	OutwardJobsService_RevisionUpdate_FullMethodName                                = "/Scailo.OutwardJobsService/RevisionUpdate"
	OutwardJobsService_Halt_FullMethodName                                          = "/Scailo.OutwardJobsService/Halt"
	OutwardJobsService_Discard_FullMethodName                                       = "/Scailo.OutwardJobsService/Discard"
	OutwardJobsService_Restore_FullMethodName                                       = "/Scailo.OutwardJobsService/Restore"
	OutwardJobsService_Complete_FullMethodName                                      = "/Scailo.OutwardJobsService/Complete"
	OutwardJobsService_Repeat_FullMethodName                                        = "/Scailo.OutwardJobsService/Repeat"
	OutwardJobsService_Reopen_FullMethodName                                        = "/Scailo.OutwardJobsService/Reopen"
	OutwardJobsService_CommentAdd_FullMethodName                                    = "/Scailo.OutwardJobsService/CommentAdd"
	OutwardJobsService_SendEmail_FullMethodName                                     = "/Scailo.OutwardJobsService/SendEmail"
	OutwardJobsService_Autofill_FullMethodName                                      = "/Scailo.OutwardJobsService/Autofill"
	OutwardJobsService_CreateMagicLink_FullMethodName                               = "/Scailo.OutwardJobsService/CreateMagicLink"
	OutwardJobsService_IsCompletable_FullMethodName                                 = "/Scailo.OutwardJobsService/IsCompletable"
	OutwardJobsService_IsOrdered_FullMethodName                                     = "/Scailo.OutwardJobsService/IsOrdered"
	OutwardJobsService_IsDispatched_FullMethodName                                  = "/Scailo.OutwardJobsService/IsDispatched"
	OutwardJobsService_AddMultipleOutwardJobInwardItems_FullMethodName              = "/Scailo.OutwardJobsService/AddMultipleOutwardJobInwardItems"
	OutwardJobsService_AddOutwardJobInwardItem_FullMethodName                       = "/Scailo.OutwardJobsService/AddOutwardJobInwardItem"
	OutwardJobsService_ModifyOutwardJobInwardItem_FullMethodName                    = "/Scailo.OutwardJobsService/ModifyOutwardJobInwardItem"
	OutwardJobsService_ApproveOutwardJobInwardItem_FullMethodName                   = "/Scailo.OutwardJobsService/ApproveOutwardJobInwardItem"
	OutwardJobsService_DeleteOutwardJobInwardItem_FullMethodName                    = "/Scailo.OutwardJobsService/DeleteOutwardJobInwardItem"
	OutwardJobsService_ReorderOutwardJobInwardItems_FullMethodName                  = "/Scailo.OutwardJobsService/ReorderOutwardJobInwardItems"
	OutwardJobsService_ViewOutwardJobInwardItemByID_FullMethodName                  = "/Scailo.OutwardJobsService/ViewOutwardJobInwardItemByID"
	OutwardJobsService_ViewApprovedOutwardJobInwardItems_FullMethodName             = "/Scailo.OutwardJobsService/ViewApprovedOutwardJobInwardItems"
	OutwardJobsService_ViewUnapprovedOutwardJobInwardItems_FullMethodName           = "/Scailo.OutwardJobsService/ViewUnapprovedOutwardJobInwardItems"
	OutwardJobsService_ViewOutwardJobInwardItemHistory_FullMethodName               = "/Scailo.OutwardJobsService/ViewOutwardJobInwardItemHistory"
	OutwardJobsService_ViewPaginatedApprovedOutwardJobInwardItems_FullMethodName    = "/Scailo.OutwardJobsService/ViewPaginatedApprovedOutwardJobInwardItems"
	OutwardJobsService_ViewPaginatedUnapprovedOutwardJobInwardItems_FullMethodName  = "/Scailo.OutwardJobsService/ViewPaginatedUnapprovedOutwardJobInwardItems"
	OutwardJobsService_SearchInwardItemsWithPagination_FullMethodName               = "/Scailo.OutwardJobsService/SearchInwardItemsWithPagination"
	OutwardJobsService_DownloadInwardItemsCSVTemplate_FullMethodName                = "/Scailo.OutwardJobsService/DownloadInwardItemsCSVTemplate"
	OutwardJobsService_UploadOutwardJobInwardItems_FullMethodName                   = "/Scailo.OutwardJobsService/UploadOutwardJobInwardItems"
	OutwardJobsService_AddMultipleOutwardJobOutwardItems_FullMethodName             = "/Scailo.OutwardJobsService/AddMultipleOutwardJobOutwardItems"
	OutwardJobsService_AddOutwardJobOutwardItem_FullMethodName                      = "/Scailo.OutwardJobsService/AddOutwardJobOutwardItem"
	OutwardJobsService_ModifyOutwardJobOutwardItem_FullMethodName                   = "/Scailo.OutwardJobsService/ModifyOutwardJobOutwardItem"
	OutwardJobsService_ApproveOutwardJobOutwardItem_FullMethodName                  = "/Scailo.OutwardJobsService/ApproveOutwardJobOutwardItem"
	OutwardJobsService_DeleteOutwardJobOutwardItem_FullMethodName                   = "/Scailo.OutwardJobsService/DeleteOutwardJobOutwardItem"
	OutwardJobsService_ReorderOutwardJobOutwardItems_FullMethodName                 = "/Scailo.OutwardJobsService/ReorderOutwardJobOutwardItems"
	OutwardJobsService_ViewOutwardJobOutwardItemByID_FullMethodName                 = "/Scailo.OutwardJobsService/ViewOutwardJobOutwardItemByID"
	OutwardJobsService_ViewApprovedOutwardJobOutwardItems_FullMethodName            = "/Scailo.OutwardJobsService/ViewApprovedOutwardJobOutwardItems"
	OutwardJobsService_ViewUnapprovedOutwardJobOutwardItems_FullMethodName          = "/Scailo.OutwardJobsService/ViewUnapprovedOutwardJobOutwardItems"
	OutwardJobsService_ViewOutwardJobOutwardItemHistory_FullMethodName              = "/Scailo.OutwardJobsService/ViewOutwardJobOutwardItemHistory"
	OutwardJobsService_ViewPaginatedApprovedOutwardJobOutwardItems_FullMethodName   = "/Scailo.OutwardJobsService/ViewPaginatedApprovedOutwardJobOutwardItems"
	OutwardJobsService_ViewPaginatedUnapprovedOutwardJobOutwardItems_FullMethodName = "/Scailo.OutwardJobsService/ViewPaginatedUnapprovedOutwardJobOutwardItems"
	OutwardJobsService_SearchOutwardItemsWithPagination_FullMethodName              = "/Scailo.OutwardJobsService/SearchOutwardItemsWithPagination"
	OutwardJobsService_DownloadOutwardItemsCSVTemplate_FullMethodName               = "/Scailo.OutwardJobsService/DownloadOutwardItemsCSVTemplate"
	OutwardJobsService_UploadOutwardJobOutwardItems_FullMethodName                  = "/Scailo.OutwardJobsService/UploadOutwardJobOutwardItems"
	OutwardJobsService_AddOutwardJobContact_FullMethodName                          = "/Scailo.OutwardJobsService/AddOutwardJobContact"
	OutwardJobsService_ApproveOutwardJobContact_FullMethodName                      = "/Scailo.OutwardJobsService/ApproveOutwardJobContact"
	OutwardJobsService_DeleteOutwardJobContact_FullMethodName                       = "/Scailo.OutwardJobsService/DeleteOutwardJobContact"
	OutwardJobsService_ViewOutwardJobContactByID_FullMethodName                     = "/Scailo.OutwardJobsService/ViewOutwardJobContactByID"
	OutwardJobsService_ViewOutwardJobContacts_FullMethodName                        = "/Scailo.OutwardJobsService/ViewOutwardJobContacts"
	OutwardJobsService_ViewByID_FullMethodName                                      = "/Scailo.OutwardJobsService/ViewByID"
	OutwardJobsService_ViewByUUID_FullMethodName                                    = "/Scailo.OutwardJobsService/ViewByUUID"
	OutwardJobsService_ViewEssentialByID_FullMethodName                             = "/Scailo.OutwardJobsService/ViewEssentialByID"
	OutwardJobsService_ViewEssentialByUUID_FullMethodName                           = "/Scailo.OutwardJobsService/ViewEssentialByUUID"
	OutwardJobsService_ViewFromIDs_FullMethodName                                   = "/Scailo.OutwardJobsService/ViewFromIDs"
	OutwardJobsService_ViewAncillaryParametersByUUID_FullMethodName                 = "/Scailo.OutwardJobsService/ViewAncillaryParametersByUUID"
	OutwardJobsService_ViewAll_FullMethodName                                       = "/Scailo.OutwardJobsService/ViewAll"
	OutwardJobsService_ViewAllForEntityUUID_FullMethodName                          = "/Scailo.OutwardJobsService/ViewAllForEntityUUID"
	OutwardJobsService_ViewWithPagination_FullMethodName                            = "/Scailo.OutwardJobsService/ViewWithPagination"
	OutwardJobsService_ViewAssociatedPurchaseOrderIDs_FullMethodName                = "/Scailo.OutwardJobsService/ViewAssociatedPurchaseOrderIDs"
	OutwardJobsService_ViewProspectiveInwardFamilies_FullMethodName                 = "/Scailo.OutwardJobsService/ViewProspectiveInwardFamilies"
	OutwardJobsService_FilterProspectiveInwardFamilies_FullMethodName               = "/Scailo.OutwardJobsService/FilterProspectiveInwardFamilies"
	OutwardJobsService_ViewProspectiveOutwardJobInwardItem_FullMethodName           = "/Scailo.OutwardJobsService/ViewProspectiveOutwardJobInwardItem"
	OutwardJobsService_ViewInwardInventoryMatch_FullMethodName                      = "/Scailo.OutwardJobsService/ViewInwardInventoryMatch"
	OutwardJobsService_ViewProspectiveOutwardFamilies_FullMethodName                = "/Scailo.OutwardJobsService/ViewProspectiveOutwardFamilies"
	OutwardJobsService_FilterProspectiveOutwardFamilies_FullMethodName              = "/Scailo.OutwardJobsService/FilterProspectiveOutwardFamilies"
	OutwardJobsService_ViewProspectiveOutwardJobOutwardItem_FullMethodName          = "/Scailo.OutwardJobsService/ViewProspectiveOutwardJobOutwardItem"
	OutwardJobsService_ViewOutwardInventoryMatch_FullMethodName                     = "/Scailo.OutwardJobsService/ViewOutwardInventoryMatch"
	OutwardJobsService_IsDownloadable_FullMethodName                                = "/Scailo.OutwardJobsService/IsDownloadable"
	OutwardJobsService_DownloadByUUID_FullMethodName                                = "/Scailo.OutwardJobsService/DownloadByUUID"
	OutwardJobsService_SearchAll_FullMethodName                                     = "/Scailo.OutwardJobsService/SearchAll"
	OutwardJobsService_Filter_FullMethodName                                        = "/Scailo.OutwardJobsService/Filter"
	OutwardJobsService_CountInStatus_FullMethodName                                 = "/Scailo.OutwardJobsService/CountInStatus"
	OutwardJobsService_Count_FullMethodName                                         = "/Scailo.OutwardJobsService/Count"
	OutwardJobsService_DownloadAsCSV_FullMethodName                                 = "/Scailo.OutwardJobsService/DownloadAsCSV"
)

// OutwardJobsServiceClient is the client API for OutwardJobsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each outward job
type OutwardJobsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *OutwardJobsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *OutwardJobsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *OutwardJobsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *OutwardJobsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the outward job
	Autofill(ctx context.Context, in *OutwardJobsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Checks if the Outward Job can be marked as completed (is true when all the inward items have been ordered and all the outward items have been dispatched)
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Checks if the Inward items within an Outward Job have been ordered (through a Purchase Order)
	IsOrdered(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Checks if the Outward items within an Outward Job have been dispatched (through Free Issue Material)
	IsDispatched(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Add multiple items to a outward job
	AddMultipleOutwardJobInwardItems(ctx context.Context, in *OutwardJobsServiceMultipleInwardItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an inward item to a outward job
	AddOutwardJobInwardItem(ctx context.Context, in *OutwardJobsServiceInwardItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an inward item in a outward job
	ModifyOutwardJobInwardItem(ctx context.Context, in *OutwardJobsServiceInwardItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an inward item in a outward job
	ApproveOutwardJobInwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an inward item in a outward job
	DeleteOutwardJobInwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a outward job
	ReorderOutwardJobInwardItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Outward Job Inward Item by ID
	ViewOutwardJobInwardItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*OutwardJobInwardItem, error)
	// View approved outward job inward items for given outward job ID
	ViewApprovedOutwardJobInwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*OutwardJobsInwardItemsList, error)
	// View unapproved outward job inward items for given outward job ID
	ViewUnapprovedOutwardJobInwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*OutwardJobsInwardItemsList, error)
	// View the history of the outward job inward item
	ViewOutwardJobInwardItemHistory(ctx context.Context, in *OutwardJobInwardItemHistoryRequest, opts ...grpc.CallOption) (*OutwardJobsInwardItemsList, error)
	// View approved outward job inward items for given outward job ID with pagination
	ViewPaginatedApprovedOutwardJobInwardItems(ctx context.Context, in *OutwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedInwardItemsResponse, error)
	// View unapproved outward job inward items for given outward job ID with pagination
	ViewPaginatedUnapprovedOutwardJobInwardItems(ctx context.Context, in *OutwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedInwardItemsResponse, error)
	// Search through outward job inward items with pagination
	SearchInwardItemsWithPagination(ctx context.Context, in *OutwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedInwardItemsResponse, error)
	// Download the CSV template that could be used to upload inward items from the filled CSV file
	DownloadInwardItemsCSVTemplate(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload inward items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadOutwardJobInwardItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add multiple items to a outward job
	AddMultipleOutwardJobOutwardItems(ctx context.Context, in *OutwardJobsServiceMultipleOutwardItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an outward item to a outward job
	AddOutwardJobOutwardItem(ctx context.Context, in *OutwardJobsServiceOutwardItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an outward item in a outward job
	ModifyOutwardJobOutwardItem(ctx context.Context, in *OutwardJobsServiceOutwardItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an outward item in a outward job
	ApproveOutwardJobOutwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an outward item in a outward job
	DeleteOutwardJobOutwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a outward job
	ReorderOutwardJobOutwardItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Outward Job Outward Item by ID
	ViewOutwardJobOutwardItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*OutwardJobOutwardItem, error)
	// View approved outward job outward items for given outward job ID
	ViewApprovedOutwardJobOutwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*OutwardJobsOutwardItemsList, error)
	// View unapproved outward job outward items for given outward job ID
	ViewUnapprovedOutwardJobOutwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*OutwardJobsOutwardItemsList, error)
	// View the history of the outward job outward item
	ViewOutwardJobOutwardItemHistory(ctx context.Context, in *OutwardJobOutwardItemHistoryRequest, opts ...grpc.CallOption) (*OutwardJobsOutwardItemsList, error)
	// View approved outward job outward items for given outward job ID with pagination
	ViewPaginatedApprovedOutwardJobOutwardItems(ctx context.Context, in *OutwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedOutwardItemsResponse, error)
	// View unapproved outward job outward items for given outward job ID with pagination
	ViewPaginatedUnapprovedOutwardJobOutwardItems(ctx context.Context, in *OutwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedOutwardItemsResponse, error)
	// Search through outward job outward items with pagination
	SearchOutwardItemsWithPagination(ctx context.Context, in *OutwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedOutwardItemsResponse, error)
	// Download the CSV template that could be used to upload outward items from the filled CSV file
	DownloadOutwardItemsCSVTemplate(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload outward items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadOutwardJobOutwardItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a contact
	AddOutwardJobContact(ctx context.Context, in *OutwardJobsServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a contact
	ApproveOutwardJobContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a contact
	DeleteOutwardJobContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a contact for the given ID
	ViewOutwardJobContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*OutwardJobContact, error)
	// View all contacts for given outward job UUID
	ViewOutwardJobContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJobContactsList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*OutwardJob, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJob, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*OutwardJob, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJob, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*OutwardJobsList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJobAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*OutwardJobsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJobsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *OutwardJobsServicePaginationReq, opts ...grpc.CallOption) (*OutwardJobsServicePaginationResponse, error)
	// View all purchase order IDs that are associated with the given outward job UUID
	ViewAssociatedPurchaseOrderIDs(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View prospective inward items for the given outward job
	ViewProspectiveInwardFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective inward families for the record represented by the given UUID identifier
	FilterProspectiveInwardFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective outward job inward item info for the given family ID and outward job ID
	ViewProspectiveOutwardJobInwardItem(ctx context.Context, in *OutwardJobInwardItemProspectiveInfoRequest, opts ...grpc.CallOption) (*OutwardJobsServiceInwardItemCreateRequest, error)
	// View Inward Inventory Match of all the inward families of the given outward job
	ViewInwardInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJobInwardInventoryMatchList, error)
	// View prospective outward items for the given outward job
	ViewProspectiveOutwardFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective outward families for the record represented by the given UUID identifier
	FilterProspectiveOutwardFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective outward job outward item info for the given family ID and outward job ID
	ViewProspectiveOutwardJobOutwardItem(ctx context.Context, in *OutwardJobOutwardItemProspectiveInfoRequest, opts ...grpc.CallOption) (*OutwardJobsServiceOutwardItemCreateRequest, error)
	// View Outward Inventory Match of all the outward families of the given outward job
	ViewOutwardInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJobOutwardInventoryMatchList, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download outward job with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *OutwardJobsServiceSearchAllReq, opts ...grpc.CallOption) (*OutwardJobsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *OutwardJobsServiceFilterReq, opts ...grpc.CallOption) (*OutwardJobsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *OutwardJobsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *OutwardJobsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type outwardJobsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOutwardJobsServiceClient(cc grpc.ClientConnInterface) OutwardJobsServiceClient {
	return &outwardJobsServiceClient{cc}
}

func (c *outwardJobsServiceClient) Create(ctx context.Context, in *OutwardJobsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Draft(ctx context.Context, in *OutwardJobsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) DraftUpdate(ctx context.Context, in *OutwardJobsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) RevisionUpdate(ctx context.Context, in *OutwardJobsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Autofill(ctx context.Context, in *OutwardJobsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, OutwardJobsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) IsOrdered(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_IsOrdered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) IsDispatched(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_IsDispatched_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) AddMultipleOutwardJobInwardItems(ctx context.Context, in *OutwardJobsServiceMultipleInwardItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_AddMultipleOutwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) AddOutwardJobInwardItem(ctx context.Context, in *OutwardJobsServiceInwardItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_AddOutwardJobInwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ModifyOutwardJobInwardItem(ctx context.Context, in *OutwardJobsServiceInwardItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ModifyOutwardJobInwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ApproveOutwardJobInwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ApproveOutwardJobInwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) DeleteOutwardJobInwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_DeleteOutwardJobInwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ReorderOutwardJobInwardItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ReorderOutwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewOutwardJobInwardItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*OutwardJobInwardItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobInwardItem)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewOutwardJobInwardItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewApprovedOutwardJobInwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*OutwardJobsInwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsInwardItemsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewApprovedOutwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewUnapprovedOutwardJobInwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*OutwardJobsInwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsInwardItemsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewUnapprovedOutwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewOutwardJobInwardItemHistory(ctx context.Context, in *OutwardJobInwardItemHistoryRequest, opts ...grpc.CallOption) (*OutwardJobsInwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsInwardItemsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewOutwardJobInwardItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewPaginatedApprovedOutwardJobInwardItems(ctx context.Context, in *OutwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedInwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsServicePaginatedInwardItemsResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewPaginatedApprovedOutwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewPaginatedUnapprovedOutwardJobInwardItems(ctx context.Context, in *OutwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedInwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsServicePaginatedInwardItemsResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewPaginatedUnapprovedOutwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) SearchInwardItemsWithPagination(ctx context.Context, in *OutwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedInwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsServicePaginatedInwardItemsResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_SearchInwardItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) DownloadInwardItemsCSVTemplate(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, OutwardJobsService_DownloadInwardItemsCSVTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) UploadOutwardJobInwardItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, OutwardJobsService_UploadOutwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) AddMultipleOutwardJobOutwardItems(ctx context.Context, in *OutwardJobsServiceMultipleOutwardItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_AddMultipleOutwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) AddOutwardJobOutwardItem(ctx context.Context, in *OutwardJobsServiceOutwardItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_AddOutwardJobOutwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ModifyOutwardJobOutwardItem(ctx context.Context, in *OutwardJobsServiceOutwardItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ModifyOutwardJobOutwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ApproveOutwardJobOutwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ApproveOutwardJobOutwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) DeleteOutwardJobOutwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_DeleteOutwardJobOutwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ReorderOutwardJobOutwardItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ReorderOutwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewOutwardJobOutwardItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*OutwardJobOutwardItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobOutwardItem)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewOutwardJobOutwardItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewApprovedOutwardJobOutwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*OutwardJobsOutwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsOutwardItemsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewApprovedOutwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewUnapprovedOutwardJobOutwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*OutwardJobsOutwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsOutwardItemsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewUnapprovedOutwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewOutwardJobOutwardItemHistory(ctx context.Context, in *OutwardJobOutwardItemHistoryRequest, opts ...grpc.CallOption) (*OutwardJobsOutwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsOutwardItemsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewOutwardJobOutwardItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewPaginatedApprovedOutwardJobOutwardItems(ctx context.Context, in *OutwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedOutwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsServicePaginatedOutwardItemsResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewPaginatedApprovedOutwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewPaginatedUnapprovedOutwardJobOutwardItems(ctx context.Context, in *OutwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedOutwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsServicePaginatedOutwardItemsResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewPaginatedUnapprovedOutwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) SearchOutwardItemsWithPagination(ctx context.Context, in *OutwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*OutwardJobsServicePaginatedOutwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsServicePaginatedOutwardItemsResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_SearchOutwardItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) DownloadOutwardItemsCSVTemplate(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, OutwardJobsService_DownloadOutwardItemsCSVTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) UploadOutwardJobOutwardItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, OutwardJobsService_UploadOutwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) AddOutwardJobContact(ctx context.Context, in *OutwardJobsServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_AddOutwardJobContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ApproveOutwardJobContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ApproveOutwardJobContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) DeleteOutwardJobContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_DeleteOutwardJobContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewOutwardJobContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*OutwardJobContact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobContact)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewOutwardJobContactByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewOutwardJobContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJobContactsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobContactsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewOutwardJobContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*OutwardJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJob)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJob)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*OutwardJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJob)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJob)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*OutwardJobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJobAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobAncillaryParameters)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*OutwardJobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewWithPagination(ctx context.Context, in *OutwardJobsServicePaginationReq, opts ...grpc.CallOption) (*OutwardJobsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsServicePaginationResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewAssociatedPurchaseOrderIDs(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewAssociatedPurchaseOrderIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewProspectiveInwardFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewProspectiveInwardFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) FilterProspectiveInwardFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, OutwardJobsService_FilterProspectiveInwardFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewProspectiveOutwardJobInwardItem(ctx context.Context, in *OutwardJobInwardItemProspectiveInfoRequest, opts ...grpc.CallOption) (*OutwardJobsServiceInwardItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsServiceInwardItemCreateRequest)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewProspectiveOutwardJobInwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewInwardInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJobInwardInventoryMatchList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobInwardInventoryMatchList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewInwardInventoryMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewProspectiveOutwardFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewProspectiveOutwardFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) FilterProspectiveOutwardFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, OutwardJobsService_FilterProspectiveOutwardFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewProspectiveOutwardJobOutwardItem(ctx context.Context, in *OutwardJobOutwardItemProspectiveInfoRequest, opts ...grpc.CallOption) (*OutwardJobsServiceOutwardItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsServiceOutwardItemCreateRequest)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewProspectiveOutwardJobOutwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) ViewOutwardInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*OutwardJobOutwardInventoryMatchList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobOutwardInventoryMatchList)
	err := c.cc.Invoke(ctx, OutwardJobsService_ViewOutwardInventoryMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, OutwardJobsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) SearchAll(ctx context.Context, in *OutwardJobsServiceSearchAllReq, opts ...grpc.CallOption) (*OutwardJobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Filter(ctx context.Context, in *OutwardJobsServiceFilterReq, opts ...grpc.CallOption) (*OutwardJobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OutwardJobsList)
	err := c.cc.Invoke(ctx, OutwardJobsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) Count(ctx context.Context, in *OutwardJobsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, OutwardJobsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outwardJobsServiceClient) DownloadAsCSV(ctx context.Context, in *OutwardJobsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, OutwardJobsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutwardJobsService
