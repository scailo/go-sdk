// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: products.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductsService_Create_FullMethodName                         = "/Scailo.ProductsService/Create"
	ProductsService_SendToStore_FullMethodName                    = "/Scailo.ProductsService/SendToStore"
	ProductsService_Update_FullMethodName                         = "/Scailo.ProductsService/Update"
	ProductsService_SendForRework_FullMethodName                  = "/Scailo.ProductsService/SendForRework"
	ProductsService_SendForQC_FullMethodName                      = "/Scailo.ProductsService/SendForQC"
	ProductsService_SplitLot_FullMethodName                       = "/Scailo.ProductsService/SplitLot"
	ProductsService_Partition_FullMethodName                      = "/Scailo.ProductsService/Partition"
	ProductsService_Consume_FullMethodName                        = "/Scailo.ProductsService/Consume"
	ProductsService_Reject_FullMethodName                         = "/Scailo.ProductsService/Reject"
	ProductsService_Scrap_FullMethodName                          = "/Scailo.ProductsService/Scrap"
	ProductsService_Discard_FullMethodName                        = "/Scailo.ProductsService/Discard"
	ProductsService_CommentAdd_FullMethodName                     = "/Scailo.ProductsService/CommentAdd"
	ProductsService_CreateMagicLink_FullMethodName                = "/Scailo.ProductsService/CreateMagicLink"
	ProductsService_ViewByID_FullMethodName                       = "/Scailo.ProductsService/ViewByID"
	ProductsService_ViewByUUID_FullMethodName                     = "/Scailo.ProductsService/ViewByUUID"
	ProductsService_ViewEssentialByID_FullMethodName              = "/Scailo.ProductsService/ViewEssentialByID"
	ProductsService_ViewEssentialByUUID_FullMethodName            = "/Scailo.ProductsService/ViewEssentialByUUID"
	ProductsService_ViewFromIDs_FullMethodName                    = "/Scailo.ProductsService/ViewFromIDs"
	ProductsService_ViewFromUUIDs_FullMethodName                  = "/Scailo.ProductsService/ViewFromUUIDs"
	ProductsService_ViewAll_FullMethodName                        = "/Scailo.ProductsService/ViewAll"
	ProductsService_ViewWithPagination_FullMethodName             = "/Scailo.ProductsService/ViewWithPagination"
	ProductsService_ViewFamiliesInProductionPlan_FullMethodName   = "/Scailo.ProductsService/ViewFamiliesInProductionPlan"
	ProductsService_FilterFamiliesInProductionPlan_FullMethodName = "/Scailo.ProductsService/FilterFamiliesInProductionPlan"
	ProductsService_DownloadQCReportByID_FullMethodName           = "/Scailo.ProductsService/DownloadQCReportByID"
	ProductsService_DownloadQCReportByUUID_FullMethodName         = "/Scailo.ProductsService/DownloadQCReportByUUID"
	ProductsService_DownloadLabelByID_FullMethodName              = "/Scailo.ProductsService/DownloadLabelByID"
	ProductsService_DownloadLabelByUUID_FullMethodName            = "/Scailo.ProductsService/DownloadLabelByUUID"
	ProductsService_ViewInventoryInteractions_FullMethodName      = "/Scailo.ProductsService/ViewInventoryInteractions"
	ProductsService_SearchAll_FullMethodName                      = "/Scailo.ProductsService/SearchAll"
	ProductsService_Filter_FullMethodName                         = "/Scailo.ProductsService/Filter"
	ProductsService_Count_FullMethodName                          = "/Scailo.ProductsService/Count"
	ProductsService_DownloadAsCSV_FullMethodName                  = "/Scailo.ProductsService/DownloadAsCSV"
	ProductsService_DownloadImportTemplate_FullMethodName         = "/Scailo.ProductsService/DownloadImportTemplate"
	ProductsService_ImportFromCSV_FullMethodName                  = "/Scailo.ProductsService/ImportFromCSV"
)

// ProductsServiceClient is the client API for ProductsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each product
type ProductsServiceClient interface {
	// Create (and Send for QC)
	Create(ctx context.Context, in *ProductsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send to Store
	SendToStore(ctx context.Context, in *ProductsServiceSendToStoreRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update
	Update(ctx context.Context, in *ProductsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for Rework
	SendForRework(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for QC
	SendForQC(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Split into unit quantities
	SplitLot(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a partition from the parent lot (and returns the identifier of the new partition)
	Partition(ctx context.Context, in *InventoryPartitionRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Consume
	Consume(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reject
	Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Scrap
	Scrap(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Product, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Product, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Product, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Product, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ProductsList, error)
	// View all records with the given UUIDs
	ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*ProductsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ProductsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ProductsServicePaginationReq, opts ...grpc.CallOption) (*ProductsServicePaginationResponse, error)
	// View product families for the given production plan
	ViewFamiliesInProductionPlan(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter product families for the given production plan
	FilterFamiliesInProductionPlan(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// Download QC Report with the given Identifier
	DownloadQCReportByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error)
	// Download QC Report with the given IdentifierUUID (can be used to allow public downloads)
	DownloadQCReportByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download Label for the given Identifier
	DownloadLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error)
	// Download Label for the given IdentifierUUID (can be used to allow public downloads)
	DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all inventory interactions for product with the given IdentifierUUID
	ViewInventoryInteractions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InventoryInteractionsList, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ProductsServiceSearchAllReq, opts ...grpc.CallOption) (*ProductsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ProductsServiceFilterReq, opts ...grpc.CallOption) (*ProductsList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ProductsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request
	DownloadAsCSV(ctx context.Context, in *ProductsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload records
	DownloadImportTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file. Imports records as initial stock
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type productsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsServiceClient(cc grpc.ClientConnInterface) ProductsServiceClient {
	return &productsServiceClient{cc}
}

func (c *productsServiceClient) Create(ctx context.Context, in *ProductsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) SendToStore(ctx context.Context, in *ProductsServiceSendToStoreRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_SendToStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) Update(ctx context.Context, in *ProductsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) SendForRework(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_SendForRework_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) SendForQC(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_SendForQC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) SplitLot(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_SplitLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) Partition(ctx context.Context, in *InventoryPartitionRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_Partition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) Consume(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_Consume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_Reject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) Scrap(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_Scrap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, ProductsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ProductsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductsList)
	err := c.cc.Invoke(ctx, ProductsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*ProductsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductsList)
	err := c.cc.Invoke(ctx, ProductsService_ViewFromUUIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ProductsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductsList)
	err := c.cc.Invoke(ctx, ProductsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ViewWithPagination(ctx context.Context, in *ProductsServicePaginationReq, opts ...grpc.CallOption) (*ProductsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductsServicePaginationResponse)
	err := c.cc.Invoke(ctx, ProductsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ViewFamiliesInProductionPlan(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ProductsService_ViewFamiliesInProductionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) FilterFamiliesInProductionPlan(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ProductsService_FilterFamiliesInProductionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) DownloadQCReportByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductsService_DownloadQCReportByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) DownloadQCReportByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductsService_DownloadQCReportByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) DownloadLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductsService_DownloadLabelByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductsService_DownloadLabelByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ViewInventoryInteractions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InventoryInteractionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryInteractionsList)
	err := c.cc.Invoke(ctx, ProductsService_ViewInventoryInteractions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) SearchAll(ctx context.Context, in *ProductsServiceSearchAllReq, opts ...grpc.CallOption) (*ProductsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductsList)
	err := c.cc.Invoke(ctx, ProductsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) Filter(ctx context.Context, in *ProductsServiceFilterReq, opts ...grpc.CallOption) (*ProductsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductsList)
	err := c.cc.Invoke(ctx, ProductsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) Count(ctx context.Context, in *ProductsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ProductsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) DownloadAsCSV(ctx context.Context, in *ProductsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) DownloadImportTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductsService_DownloadImportTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, ProductsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsService
