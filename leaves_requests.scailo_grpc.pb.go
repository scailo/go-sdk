// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: leaves_requests.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeavesRequestsService_Create_FullMethodName               = "/Scailo.LeavesRequestsService/Create"
	LeavesRequestsService_Draft_FullMethodName                = "/Scailo.LeavesRequestsService/Draft"
	LeavesRequestsService_DraftUpdate_FullMethodName          = "/Scailo.LeavesRequestsService/DraftUpdate"
	LeavesRequestsService_SendForVerification_FullMethodName  = "/Scailo.LeavesRequestsService/SendForVerification"
	LeavesRequestsService_Verify_FullMethodName               = "/Scailo.LeavesRequestsService/Verify"
	LeavesRequestsService_Approve_FullMethodName              = "/Scailo.LeavesRequestsService/Approve"
	LeavesRequestsService_SendForRevision_FullMethodName      = "/Scailo.LeavesRequestsService/SendForRevision"
	LeavesRequestsService_RevisionUpdate_FullMethodName       = "/Scailo.LeavesRequestsService/RevisionUpdate"
	LeavesRequestsService_Halt_FullMethodName                 = "/Scailo.LeavesRequestsService/Halt"
	LeavesRequestsService_Discard_FullMethodName              = "/Scailo.LeavesRequestsService/Discard"
	LeavesRequestsService_Restore_FullMethodName              = "/Scailo.LeavesRequestsService/Restore"
	LeavesRequestsService_Complete_FullMethodName             = "/Scailo.LeavesRequestsService/Complete"
	LeavesRequestsService_Repeat_FullMethodName               = "/Scailo.LeavesRequestsService/Repeat"
	LeavesRequestsService_CommentAdd_FullMethodName           = "/Scailo.LeavesRequestsService/CommentAdd"
	LeavesRequestsService_ViewByID_FullMethodName             = "/Scailo.LeavesRequestsService/ViewByID"
	LeavesRequestsService_ViewByUUID_FullMethodName           = "/Scailo.LeavesRequestsService/ViewByUUID"
	LeavesRequestsService_ViewEssentialByID_FullMethodName    = "/Scailo.LeavesRequestsService/ViewEssentialByID"
	LeavesRequestsService_ViewEssentialByUUID_FullMethodName  = "/Scailo.LeavesRequestsService/ViewEssentialByUUID"
	LeavesRequestsService_ViewFromIDs_FullMethodName          = "/Scailo.LeavesRequestsService/ViewFromIDs"
	LeavesRequestsService_ViewAll_FullMethodName              = "/Scailo.LeavesRequestsService/ViewAll"
	LeavesRequestsService_ViewAllForEntityUUID_FullMethodName = "/Scailo.LeavesRequestsService/ViewAllForEntityUUID"
	LeavesRequestsService_ViewWithPagination_FullMethodName   = "/Scailo.LeavesRequestsService/ViewWithPagination"
	LeavesRequestsService_SearchAll_FullMethodName            = "/Scailo.LeavesRequestsService/SearchAll"
	LeavesRequestsService_Filter_FullMethodName               = "/Scailo.LeavesRequestsService/Filter"
	LeavesRequestsService_CountInStatus_FullMethodName        = "/Scailo.LeavesRequestsService/CountInStatus"
	LeavesRequestsService_Count_FullMethodName                = "/Scailo.LeavesRequestsService/Count"
	LeavesRequestsService_DownloadAsCSV_FullMethodName        = "/Scailo.LeavesRequestsService/DownloadAsCSV"
)

// LeavesRequestsServiceClient is the client API for LeavesRequestsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each leave request
type LeavesRequestsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *LeavesRequestsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *LeavesRequestsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *LeavesRequestsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *LeavesRequestsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*LeaveRequest, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeaveRequest, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*LeaveRequest, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeaveRequest, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*LeavesRequestsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*LeavesRequestsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeavesRequestsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *LeavesRequestsServicePaginationReq, opts ...grpc.CallOption) (*LeavesRequestsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *LeavesRequestsServiceSearchAllReq, opts ...grpc.CallOption) (*LeavesRequestsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *LeavesRequestsServiceFilterReq, opts ...grpc.CallOption) (*LeavesRequestsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *LeavesRequestsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *LeavesRequestsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type leavesRequestsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeavesRequestsServiceClient(cc grpc.ClientConnInterface) LeavesRequestsServiceClient {
	return &leavesRequestsServiceClient{cc}
}

func (c *leavesRequestsServiceClient) Create(ctx context.Context, in *LeavesRequestsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) Draft(ctx context.Context, in *LeavesRequestsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) DraftUpdate(ctx context.Context, in *LeavesRequestsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) RevisionUpdate(ctx context.Context, in *LeavesRequestsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*LeaveRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveRequest)
	err := c.cc.Invoke(ctx, LeavesRequestsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeaveRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveRequest)
	err := c.cc.Invoke(ctx, LeavesRequestsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*LeaveRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveRequest)
	err := c.cc.Invoke(ctx, LeavesRequestsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeaveRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveRequest)
	err := c.cc.Invoke(ctx, LeavesRequestsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*LeavesRequestsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesRequestsList)
	err := c.cc.Invoke(ctx, LeavesRequestsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*LeavesRequestsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesRequestsList)
	err := c.cc.Invoke(ctx, LeavesRequestsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeavesRequestsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesRequestsList)
	err := c.cc.Invoke(ctx, LeavesRequestsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) ViewWithPagination(ctx context.Context, in *LeavesRequestsServicePaginationReq, opts ...grpc.CallOption) (*LeavesRequestsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesRequestsServicePaginationResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) SearchAll(ctx context.Context, in *LeavesRequestsServiceSearchAllReq, opts ...grpc.CallOption) (*LeavesRequestsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesRequestsList)
	err := c.cc.Invoke(ctx, LeavesRequestsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) Filter(ctx context.Context, in *LeavesRequestsServiceFilterReq, opts ...grpc.CallOption) (*LeavesRequestsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesRequestsList)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) Count(ctx context.Context, in *LeavesRequestsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, LeavesRequestsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesRequestsServiceClient) DownloadAsCSV(ctx context.Context, in *LeavesRequestsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, LeavesRequestsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeavesRequestsService
