// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: teams.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TeamsService_Create_FullMethodName                             = "/Scailo.TeamsService/Create"
	TeamsService_Draft_FullMethodName                              = "/Scailo.TeamsService/Draft"
	TeamsService_DraftUpdate_FullMethodName                        = "/Scailo.TeamsService/DraftUpdate"
	TeamsService_SendForVerification_FullMethodName                = "/Scailo.TeamsService/SendForVerification"
	TeamsService_Verify_FullMethodName                             = "/Scailo.TeamsService/Verify"
	TeamsService_Approve_FullMethodName                            = "/Scailo.TeamsService/Approve"
	TeamsService_SendForRevision_FullMethodName                    = "/Scailo.TeamsService/SendForRevision"
	TeamsService_RevisionUpdate_FullMethodName                     = "/Scailo.TeamsService/RevisionUpdate"
	TeamsService_Halt_FullMethodName                               = "/Scailo.TeamsService/Halt"
	TeamsService_Discard_FullMethodName                            = "/Scailo.TeamsService/Discard"
	TeamsService_Restore_FullMethodName                            = "/Scailo.TeamsService/Restore"
	TeamsService_Complete_FullMethodName                           = "/Scailo.TeamsService/Complete"
	TeamsService_Repeat_FullMethodName                             = "/Scailo.TeamsService/Repeat"
	TeamsService_Reopen_FullMethodName                             = "/Scailo.TeamsService/Reopen"
	TeamsService_CommentAdd_FullMethodName                         = "/Scailo.TeamsService/CommentAdd"
	TeamsService_Clone_FullMethodName                              = "/Scailo.TeamsService/Clone"
	TeamsService_AddTeamMember_FullMethodName                      = "/Scailo.TeamsService/AddTeamMember"
	TeamsService_ModifyTeamMember_FullMethodName                   = "/Scailo.TeamsService/ModifyTeamMember"
	TeamsService_ApproveTeamMember_FullMethodName                  = "/Scailo.TeamsService/ApproveTeamMember"
	TeamsService_DeleteTeamMember_FullMethodName                   = "/Scailo.TeamsService/DeleteTeamMember"
	TeamsService_ReorderTeamMembers_FullMethodName                 = "/Scailo.TeamsService/ReorderTeamMembers"
	TeamsService_ViewTeamMemberByID_FullMethodName                 = "/Scailo.TeamsService/ViewTeamMemberByID"
	TeamsService_ViewApprovedTeamMembers_FullMethodName            = "/Scailo.TeamsService/ViewApprovedTeamMembers"
	TeamsService_ViewUnapprovedTeamMembers_FullMethodName          = "/Scailo.TeamsService/ViewUnapprovedTeamMembers"
	TeamsService_ViewTeamMemberHistory_FullMethodName              = "/Scailo.TeamsService/ViewTeamMemberHistory"
	TeamsService_ViewPaginatedApprovedTeamMembers_FullMethodName   = "/Scailo.TeamsService/ViewPaginatedApprovedTeamMembers"
	TeamsService_ViewPaginatedUnapprovedTeamMembers_FullMethodName = "/Scailo.TeamsService/ViewPaginatedUnapprovedTeamMembers"
	TeamsService_SearchMembersWithPagination_FullMethodName        = "/Scailo.TeamsService/SearchMembersWithPagination"
	TeamsService_ViewTeamsForMember_FullMethodName                 = "/Scailo.TeamsService/ViewTeamsForMember"
	TeamsService_ViewByID_FullMethodName                           = "/Scailo.TeamsService/ViewByID"
	TeamsService_ViewByUUID_FullMethodName                         = "/Scailo.TeamsService/ViewByUUID"
	TeamsService_ViewEssentialByID_FullMethodName                  = "/Scailo.TeamsService/ViewEssentialByID"
	TeamsService_ViewEssentialByUUID_FullMethodName                = "/Scailo.TeamsService/ViewEssentialByUUID"
	TeamsService_ViewFromIDs_FullMethodName                        = "/Scailo.TeamsService/ViewFromIDs"
	TeamsService_ViewAll_FullMethodName                            = "/Scailo.TeamsService/ViewAll"
	TeamsService_ViewAllForEntityUUID_FullMethodName               = "/Scailo.TeamsService/ViewAllForEntityUUID"
	TeamsService_ViewWithPagination_FullMethodName                 = "/Scailo.TeamsService/ViewWithPagination"
	TeamsService_SearchAll_FullMethodName                          = "/Scailo.TeamsService/SearchAll"
	TeamsService_Filter_FullMethodName                             = "/Scailo.TeamsService/Filter"
	TeamsService_CountInStatus_FullMethodName                      = "/Scailo.TeamsService/CountInStatus"
	TeamsService_Count_FullMethodName                              = "/Scailo.TeamsService/Count"
	TeamsService_DownloadAsCSV_FullMethodName                      = "/Scailo.TeamsService/DownloadAsCSV"
	TeamsService_ImportFromCSV_FullMethodName                      = "/Scailo.TeamsService/ImportFromCSV"
)

// TeamsServiceClient is the client API for TeamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each team
type TeamsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *TeamsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *TeamsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *TeamsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *TeamsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Clone team from an existing team (denoted by the identifier)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a member to a team
	AddTeamMember(ctx context.Context, in *TeamsServiceMemberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify a member in a team
	ModifyTeamMember(ctx context.Context, in *TeamsServiceMemberUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a member in a team
	ApproveTeamMember(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a member in a team
	DeleteTeamMember(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder members in a team
	ReorderTeamMembers(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Team Member by ID
	ViewTeamMemberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*TeamMember, error)
	// View approved team members for given team ID
	ViewApprovedTeamMembers(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*TeamsMembersList, error)
	// View unapproved team members for given team ID
	ViewUnapprovedTeamMembers(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*TeamsMembersList, error)
	// View the history of the team member
	ViewTeamMemberHistory(ctx context.Context, in *TeamMemberHistoryRequest, opts ...grpc.CallOption) (*TeamsMembersList, error)
	// View approved team members for given team ID with pagination
	ViewPaginatedApprovedTeamMembers(ctx context.Context, in *TeamMembersSearchRequest, opts ...grpc.CallOption) (*TeamsServicePaginatedMembersResponse, error)
	// View unapproved team members for given team ID with pagination
	ViewPaginatedUnapprovedTeamMembers(ctx context.Context, in *TeamMembersSearchRequest, opts ...grpc.CallOption) (*TeamsServicePaginatedMembersResponse, error)
	// Search through team members with pagination
	SearchMembersWithPagination(ctx context.Context, in *TeamMembersSearchRequest, opts ...grpc.CallOption) (*TeamsServicePaginatedMembersResponse, error)
	// View all the teams that the member is part of (and not the team lead)
	ViewTeamsForMember(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*TeamsList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Team, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Team, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Team, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Team, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*TeamsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*TeamsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*TeamsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *TeamsServicePaginationReq, opts ...grpc.CallOption) (*TeamsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *TeamsServiceSearchAllReq, opts ...grpc.CallOption) (*TeamsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *TeamsServiceFilterReq, opts ...grpc.CallOption) (*TeamsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *TeamsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *TeamsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type teamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamsServiceClient(cc grpc.ClientConnInterface) TeamsServiceClient {
	return &teamsServiceClient{cc}
}

func (c *teamsServiceClient) Create(ctx context.Context, in *TeamsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Draft(ctx context.Context, in *TeamsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) DraftUpdate(ctx context.Context, in *TeamsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) RevisionUpdate(ctx context.Context, in *TeamsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) AddTeamMember(ctx context.Context, in *TeamsServiceMemberCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_AddTeamMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ModifyTeamMember(ctx context.Context, in *TeamsServiceMemberUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_ModifyTeamMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ApproveTeamMember(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_ApproveTeamMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) DeleteTeamMember(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_DeleteTeamMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ReorderTeamMembers(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TeamsService_ReorderTeamMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewTeamMemberByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*TeamMember, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamMember)
	err := c.cc.Invoke(ctx, TeamsService_ViewTeamMemberByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewApprovedTeamMembers(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*TeamsMembersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsMembersList)
	err := c.cc.Invoke(ctx, TeamsService_ViewApprovedTeamMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewUnapprovedTeamMembers(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*TeamsMembersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsMembersList)
	err := c.cc.Invoke(ctx, TeamsService_ViewUnapprovedTeamMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewTeamMemberHistory(ctx context.Context, in *TeamMemberHistoryRequest, opts ...grpc.CallOption) (*TeamsMembersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsMembersList)
	err := c.cc.Invoke(ctx, TeamsService_ViewTeamMemberHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewPaginatedApprovedTeamMembers(ctx context.Context, in *TeamMembersSearchRequest, opts ...grpc.CallOption) (*TeamsServicePaginatedMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsServicePaginatedMembersResponse)
	err := c.cc.Invoke(ctx, TeamsService_ViewPaginatedApprovedTeamMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewPaginatedUnapprovedTeamMembers(ctx context.Context, in *TeamMembersSearchRequest, opts ...grpc.CallOption) (*TeamsServicePaginatedMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsServicePaginatedMembersResponse)
	err := c.cc.Invoke(ctx, TeamsService_ViewPaginatedUnapprovedTeamMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) SearchMembersWithPagination(ctx context.Context, in *TeamMembersSearchRequest, opts ...grpc.CallOption) (*TeamsServicePaginatedMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsServicePaginatedMembersResponse)
	err := c.cc.Invoke(ctx, TeamsService_SearchMembersWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewTeamsForMember(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*TeamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsList)
	err := c.cc.Invoke(ctx, TeamsService_ViewTeamsForMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Team, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Team, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Team, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Team, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Team)
	err := c.cc.Invoke(ctx, TeamsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*TeamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsList)
	err := c.cc.Invoke(ctx, TeamsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*TeamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsList)
	err := c.cc.Invoke(ctx, TeamsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*TeamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsList)
	err := c.cc.Invoke(ctx, TeamsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ViewWithPagination(ctx context.Context, in *TeamsServicePaginationReq, opts ...grpc.CallOption) (*TeamsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsServicePaginationResponse)
	err := c.cc.Invoke(ctx, TeamsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) SearchAll(ctx context.Context, in *TeamsServiceSearchAllReq, opts ...grpc.CallOption) (*TeamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsList)
	err := c.cc.Invoke(ctx, TeamsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Filter(ctx context.Context, in *TeamsServiceFilterReq, opts ...grpc.CallOption) (*TeamsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeamsList)
	err := c.cc.Invoke(ctx, TeamsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, TeamsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) Count(ctx context.Context, in *TeamsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, TeamsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) DownloadAsCSV(ctx context.Context, in *TeamsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, TeamsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, TeamsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsService
