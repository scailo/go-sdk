// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: activities.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActivitiesService_Create_FullMethodName                         = "/Scailo.ActivitiesService/Create"
	ActivitiesService_Update_FullMethodName                         = "/Scailo.ActivitiesService/Update"
	ActivitiesService_Cancel_FullMethodName                         = "/Scailo.ActivitiesService/Cancel"
	ActivitiesService_Complete_FullMethodName                       = "/Scailo.ActivitiesService/Complete"
	ActivitiesService_Reopen_FullMethodName                         = "/Scailo.ActivitiesService/Reopen"
	ActivitiesService_Repeat_FullMethodName                         = "/Scailo.ActivitiesService/Repeat"
	ActivitiesService_CommentAdd_FullMethodName                     = "/Scailo.ActivitiesService/CommentAdd"
	ActivitiesService_SendEmail_FullMethodName                      = "/Scailo.ActivitiesService/SendEmail"
	ActivitiesService_AddAction_FullMethodName                      = "/Scailo.ActivitiesService/AddAction"
	ActivitiesService_AddActionWithTimer_FullMethodName             = "/Scailo.ActivitiesService/AddActionWithTimer"
	ActivitiesService_ModifyAction_FullMethodName                   = "/Scailo.ActivitiesService/ModifyAction"
	ActivitiesService_DeleteAction_FullMethodName                   = "/Scailo.ActivitiesService/DeleteAction"
	ActivitiesService_ReorderActions_FullMethodName                 = "/Scailo.ActivitiesService/ReorderActions"
	ActivitiesService_ViewActionByID_FullMethodName                 = "/Scailo.ActivitiesService/ViewActionByID"
	ActivitiesService_ViewActionStatistics_FullMethodName           = "/Scailo.ActivitiesService/ViewActionStatistics"
	ActivitiesService_ViewActions_FullMethodName                    = "/Scailo.ActivitiesService/ViewActions"
	ActivitiesService_ViewActionHistory_FullMethodName              = "/Scailo.ActivitiesService/ViewActionHistory"
	ActivitiesService_ViewPaginatedActions_FullMethodName           = "/Scailo.ActivitiesService/ViewPaginatedActions"
	ActivitiesService_SearchActionsWithPagination_FullMethodName    = "/Scailo.ActivitiesService/SearchActionsWithPagination"
	ActivitiesService_DownloadActionsAsCSV_FullMethodName           = "/Scailo.ActivitiesService/DownloadActionsAsCSV"
	ActivitiesService_UploadActivityActions_FullMethodName          = "/Scailo.ActivitiesService/UploadActivityActions"
	ActivitiesService_AddActivityTagAssociation_FullMethodName      = "/Scailo.ActivitiesService/AddActivityTagAssociation"
	ActivitiesService_DeleteActivityTagAssociation_FullMethodName   = "/Scailo.ActivitiesService/DeleteActivityTagAssociation"
	ActivitiesService_ViewActivityTagAssociationByID_FullMethodName = "/Scailo.ActivitiesService/ViewActivityTagAssociationByID"
	ActivitiesService_ViewActivityTagAssociations_FullMethodName    = "/Scailo.ActivitiesService/ViewActivityTagAssociations"
	ActivitiesService_AddOwner_FullMethodName                       = "/Scailo.ActivitiesService/AddOwner"
	ActivitiesService_DeleteOwner_FullMethodName                    = "/Scailo.ActivitiesService/DeleteOwner"
	ActivitiesService_ViewOwnerByID_FullMethodName                  = "/Scailo.ActivitiesService/ViewOwnerByID"
	ActivitiesService_ViewOwners_FullMethodName                     = "/Scailo.ActivitiesService/ViewOwners"
	ActivitiesService_ImportOwnersFromTeam_FullMethodName           = "/Scailo.ActivitiesService/ImportOwnersFromTeam"
	ActivitiesService_ImportOwnersFromDepartment_FullMethodName     = "/Scailo.ActivitiesService/ImportOwnersFromDepartment"
	ActivitiesService_AddSupervisor_FullMethodName                  = "/Scailo.ActivitiesService/AddSupervisor"
	ActivitiesService_DeleteSupervisor_FullMethodName               = "/Scailo.ActivitiesService/DeleteSupervisor"
	ActivitiesService_ViewSupervisorByID_FullMethodName             = "/Scailo.ActivitiesService/ViewSupervisorByID"
	ActivitiesService_ViewSupervisors_FullMethodName                = "/Scailo.ActivitiesService/ViewSupervisors"
	ActivitiesService_AddTimer_FullMethodName                       = "/Scailo.ActivitiesService/AddTimer"
	ActivitiesService_EndTimer_FullMethodName                       = "/Scailo.ActivitiesService/EndTimer"
	ActivitiesService_ViewTimerByID_FullMethodName                  = "/Scailo.ActivitiesService/ViewTimerByID"
	ActivitiesService_ViewTimers_FullMethodName                     = "/Scailo.ActivitiesService/ViewTimers"
	ActivitiesService_ViewPaginatedTimers_FullMethodName            = "/Scailo.ActivitiesService/ViewPaginatedTimers"
	ActivitiesService_SearchTimersWithPagination_FullMethodName     = "/Scailo.ActivitiesService/SearchTimersWithPagination"
	ActivitiesService_DownloadTimersAsCSV_FullMethodName            = "/Scailo.ActivitiesService/DownloadTimersAsCSV"
	ActivitiesService_ViewByID_FullMethodName                       = "/Scailo.ActivitiesService/ViewByID"
	ActivitiesService_ViewByUUID_FullMethodName                     = "/Scailo.ActivitiesService/ViewByUUID"
	ActivitiesService_ViewEssentialByID_FullMethodName              = "/Scailo.ActivitiesService/ViewEssentialByID"
	ActivitiesService_ViewEssentialByUUID_FullMethodName            = "/Scailo.ActivitiesService/ViewEssentialByUUID"
	ActivitiesService_ViewFromIDs_FullMethodName                    = "/Scailo.ActivitiesService/ViewFromIDs"
	ActivitiesService_ViewAll_FullMethodName                        = "/Scailo.ActivitiesService/ViewAll"
	ActivitiesService_ViewAllForEntityUUID_FullMethodName           = "/Scailo.ActivitiesService/ViewAllForEntityUUID"
	ActivitiesService_ViewWithPagination_FullMethodName             = "/Scailo.ActivitiesService/ViewWithPagination"
	ActivitiesService_ViewStatistics_FullMethodName                 = "/Scailo.ActivitiesService/ViewStatistics"
	ActivitiesService_SearchAll_FullMethodName                      = "/Scailo.ActivitiesService/SearchAll"
	ActivitiesService_Filter_FullMethodName                         = "/Scailo.ActivitiesService/Filter"
	ActivitiesService_Count_FullMethodName                          = "/Scailo.ActivitiesService/Count"
	ActivitiesService_DownloadAsCSV_FullMethodName                  = "/Scailo.ActivitiesService/DownloadAsCSV"
	ActivitiesService_ImportFromCSV_FullMethodName                  = "/Scailo.ActivitiesService/ImportFromCSV"
)

// ActivitiesServiceClient is the client API for ActivitiesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each activity
type ActivitiesServiceClient interface {
	// Create
	Create(ctx context.Context, in *ActivitiesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Update
	Update(ctx context.Context, in *ActivitiesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Cancel
	Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Add an action to an activity
	AddAction(ctx context.Context, in *ActivitiesServiceActionCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an action with an activity timer to an activity
	AddActionWithTimer(ctx context.Context, in *ActivitiesServiceActionWithTimerCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an action in an activity
	ModifyAction(ctx context.Context, in *ActivitiesServiceActionUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an action in an activity
	DeleteAction(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder actions in an activity
	ReorderActions(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Activity Action by ID
	ViewActionByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityAction, error)
	// View Statistics of Activity Action by ID
	ViewActionStatistics(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityActionStatistics, error)
	// View all actions for given activity UUID
	ViewActions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityActionsList, error)
	// View the history of the activity action
	ViewActionHistory(ctx context.Context, in *ActivityActionHistoryRequest, opts ...grpc.CallOption) (*ActivityActionsList, error)
	// View activity actions for given activity ID with pagination
	ViewPaginatedActions(ctx context.Context, in *ActivityActionsSearchRequest, opts ...grpc.CallOption) (*ActivitiesServicePaginatedActionsResponse, error)
	// Search through activity actions with pagination
	SearchActionsWithPagination(ctx context.Context, in *ActivityActionsSearchRequest, opts ...grpc.CallOption) (*ActivitiesServicePaginatedActionsResponse, error)
	// CSV operations
	// Download the CSV file that could be used to upload actions from the filled CSV file. The same file can also be used as a template when there are no existing records
	DownloadActionsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload actions using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadActivityActions(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add an activity tag
	AddActivityTagAssociation(ctx context.Context, in *ActivitiesServiceActivityTagAssociationCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an activity tag
	DeleteActivityTagAssociation(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View activity tag for the given ID
	ViewActivityTagAssociationByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityTagAssociation, error)
	// View all activities tags for given activity UUID
	ViewActivityTagAssociations(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityTagAssociationsList, error)
	// Add an owner
	AddOwner(ctx context.Context, in *ActivitiesServiceOwnerCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an owner
	DeleteOwner(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View an owner for the given ID
	ViewOwnerByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityOwner, error)
	// View all owners for given activity UUID
	ViewOwners(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityOwnersList, error)
	// Import employees as owners from team and returns the ID of the activity
	ImportOwnersFromTeam(ctx context.Context, in *ActivitiesServiceImportOwnersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Import employees as owners from department and returns the ID of the activity
	ImportOwnersFromDepartment(ctx context.Context, in *ActivitiesServiceImportOwnersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a supervisor
	AddSupervisor(ctx context.Context, in *ActivitiesServiceSupervisorCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a supervisor
	DeleteSupervisor(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View supervisor for the given ID
	ViewSupervisorByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivitySupervisor, error)
	// View all supervisors for given activity UUID
	ViewSupervisors(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivitySupervisorsList, error)
	// Add a timer
	AddTimer(ctx context.Context, in *ActivitiesServiceTimerCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// End a timer
	EndTimer(ctx context.Context, in *ActivitiesServiceTimerEndRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a timer for the given ID
	ViewTimerByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityTimer, error)
	// View all timers for given activity UUID
	ViewTimers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityTimersList, error)
	// View activity timers for given activity ID with pagination
	ViewPaginatedTimers(ctx context.Context, in *ActivityTimersSearchRequest, opts ...grpc.CallOption) (*ActivitiesServicePaginatedTimersResponse, error)
	// Search through activity timers with pagination
	SearchTimersWithPagination(ctx context.Context, in *ActivityTimersSearchRequest, opts ...grpc.CallOption) (*ActivitiesServicePaginatedTimersResponse, error)
	// CSV operations
	// Download the CSV file that could be used to upload timers from the filled CSV file. The same file can also be used as a template when there are no existing records
	DownloadTimersAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Activity, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Activity, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Activity, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Activity, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ActivitiesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ActivitiesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivitiesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ActivitiesServicePaginationReq, opts ...grpc.CallOption) (*ActivitiesServicePaginationResponse, error)
	// View Statistics of Activity
	ViewStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityStatistics, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ActivitiesServiceSearchAllReq, opts ...grpc.CallOption) (*ActivitiesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ActivitiesServiceFilterReq, opts ...grpc.CallOption) (*ActivitiesList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ActivitiesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ActivitiesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type activitiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivitiesServiceClient(cc grpc.ClientConnInterface) ActivitiesServiceClient {
	return &activitiesServiceClient{cc}
}

func (c *activitiesServiceClient) Create(ctx context.Context, in *ActivitiesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ActivitiesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) Update(ctx context.Context, in *ActivitiesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ActivitiesService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ActivitiesService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ActivitiesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ActivitiesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ActivitiesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ActivitiesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, ActivitiesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) AddAction(ctx context.Context, in *ActivitiesServiceActionCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_AddAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) AddActionWithTimer(ctx context.Context, in *ActivitiesServiceActionWithTimerCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_AddActionWithTimer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ModifyAction(ctx context.Context, in *ActivitiesServiceActionUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_ModifyAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) DeleteAction(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_DeleteAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ReorderActions(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_ReorderActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewActionByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityAction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityAction)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewActionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewActionStatistics(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityActionStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityActionStatistics)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewActionStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewActions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityActionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityActionsList)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewActionHistory(ctx context.Context, in *ActivityActionHistoryRequest, opts ...grpc.CallOption) (*ActivityActionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityActionsList)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewActionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewPaginatedActions(ctx context.Context, in *ActivityActionsSearchRequest, opts ...grpc.CallOption) (*ActivitiesServicePaginatedActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesServicePaginatedActionsResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewPaginatedActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) SearchActionsWithPagination(ctx context.Context, in *ActivityActionsSearchRequest, opts ...grpc.CallOption) (*ActivitiesServicePaginatedActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesServicePaginatedActionsResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_SearchActionsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) DownloadActionsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ActivitiesService_DownloadActionsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) UploadActivityActions(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, ActivitiesService_UploadActivityActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) AddActivityTagAssociation(ctx context.Context, in *ActivitiesServiceActivityTagAssociationCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_AddActivityTagAssociation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) DeleteActivityTagAssociation(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_DeleteActivityTagAssociation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewActivityTagAssociationByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityTagAssociation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityTagAssociation)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewActivityTagAssociationByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewActivityTagAssociations(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityTagAssociationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityTagAssociationsList)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewActivityTagAssociations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) AddOwner(ctx context.Context, in *ActivitiesServiceOwnerCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_AddOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) DeleteOwner(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_DeleteOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewOwnerByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityOwner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityOwner)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewOwnerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewOwners(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityOwnersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityOwnersList)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewOwners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ImportOwnersFromTeam(ctx context.Context, in *ActivitiesServiceImportOwnersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_ImportOwnersFromTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ImportOwnersFromDepartment(ctx context.Context, in *ActivitiesServiceImportOwnersRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_ImportOwnersFromDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) AddSupervisor(ctx context.Context, in *ActivitiesServiceSupervisorCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_AddSupervisor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) DeleteSupervisor(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_DeleteSupervisor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewSupervisorByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivitySupervisor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitySupervisor)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewSupervisorByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewSupervisors(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivitySupervisorsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitySupervisorsList)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewSupervisors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) AddTimer(ctx context.Context, in *ActivitiesServiceTimerCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_AddTimer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) EndTimer(ctx context.Context, in *ActivitiesServiceTimerEndRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_EndTimer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewTimerByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityTimer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityTimer)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewTimerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewTimers(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityTimersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityTimersList)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewTimers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewPaginatedTimers(ctx context.Context, in *ActivityTimersSearchRequest, opts ...grpc.CallOption) (*ActivitiesServicePaginatedTimersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesServicePaginatedTimersResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewPaginatedTimers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) SearchTimersWithPagination(ctx context.Context, in *ActivityTimersSearchRequest, opts ...grpc.CallOption) (*ActivitiesServicePaginatedTimersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesServicePaginatedTimersResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_SearchTimersWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) DownloadTimersAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ActivitiesService_DownloadTimersAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Activity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Activity)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Activity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Activity)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Activity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Activity)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Activity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Activity)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ActivitiesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesList)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ActivitiesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesList)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivitiesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesList)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewWithPagination(ctx context.Context, in *ActivitiesServicePaginationReq, opts ...grpc.CallOption) (*ActivitiesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesServicePaginationResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ViewStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityStatistics)
	err := c.cc.Invoke(ctx, ActivitiesService_ViewStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) SearchAll(ctx context.Context, in *ActivitiesServiceSearchAllReq, opts ...grpc.CallOption) (*ActivitiesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesList)
	err := c.cc.Invoke(ctx, ActivitiesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) Filter(ctx context.Context, in *ActivitiesServiceFilterReq, opts ...grpc.CallOption) (*ActivitiesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesList)
	err := c.cc.Invoke(ctx, ActivitiesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) Count(ctx context.Context, in *ActivitiesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ActivitiesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) DownloadAsCSV(ctx context.Context, in *ActivitiesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ActivitiesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, ActivitiesService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivitiesService
