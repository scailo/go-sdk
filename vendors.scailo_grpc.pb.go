// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: vendors.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VendorsService_Create_FullMethodName                             = "/Scailo.VendorsService/Create"
	VendorsService_Draft_FullMethodName                              = "/Scailo.VendorsService/Draft"
	VendorsService_DraftUpdate_FullMethodName                        = "/Scailo.VendorsService/DraftUpdate"
	VendorsService_SendForVerification_FullMethodName                = "/Scailo.VendorsService/SendForVerification"
	VendorsService_Verify_FullMethodName                             = "/Scailo.VendorsService/Verify"
	VendorsService_Approve_FullMethodName                            = "/Scailo.VendorsService/Approve"
	VendorsService_SendForRevision_FullMethodName                    = "/Scailo.VendorsService/SendForRevision"
	VendorsService_RevisionUpdate_FullMethodName                     = "/Scailo.VendorsService/RevisionUpdate"
	VendorsService_Halt_FullMethodName                               = "/Scailo.VendorsService/Halt"
	VendorsService_Discard_FullMethodName                            = "/Scailo.VendorsService/Discard"
	VendorsService_Restore_FullMethodName                            = "/Scailo.VendorsService/Restore"
	VendorsService_CommentAdd_FullMethodName                         = "/Scailo.VendorsService/CommentAdd"
	VendorsService_SendEmail_FullMethodName                          = "/Scailo.VendorsService/SendEmail"
	VendorsService_CreateMagicLink_FullMethodName                    = "/Scailo.VendorsService/CreateMagicLink"
	VendorsService_AddVendorItem_FullMethodName                      = "/Scailo.VendorsService/AddVendorItem"
	VendorsService_ModifyVendorItem_FullMethodName                   = "/Scailo.VendorsService/ModifyVendorItem"
	VendorsService_ApproveVendorItem_FullMethodName                  = "/Scailo.VendorsService/ApproveVendorItem"
	VendorsService_DeleteVendorItem_FullMethodName                   = "/Scailo.VendorsService/DeleteVendorItem"
	VendorsService_ViewVendorItemByID_FullMethodName                 = "/Scailo.VendorsService/ViewVendorItemByID"
	VendorsService_ViewPaginatedApprovedVendorItems_FullMethodName   = "/Scailo.VendorsService/ViewPaginatedApprovedVendorItems"
	VendorsService_ViewPaginatedUnapprovedVendorItems_FullMethodName = "/Scailo.VendorsService/ViewPaginatedUnapprovedVendorItems"
	VendorsService_ViewVendorItemHistory_FullMethodName              = "/Scailo.VendorsService/ViewVendorItemHistory"
	VendorsService_SearchItemsWithPagination_FullMethodName          = "/Scailo.VendorsService/SearchItemsWithPagination"
	VendorsService_SearchRequiredItemsWithPagination_FullMethodName  = "/Scailo.VendorsService/SearchRequiredItemsWithPagination"
	VendorsService_DownloadItemsAsCSV_FullMethodName                 = "/Scailo.VendorsService/DownloadItemsAsCSV"
	VendorsService_DownloadItemsTemplateAsCSV_FullMethodName         = "/Scailo.VendorsService/DownloadItemsTemplateAsCSV"
	VendorsService_UploadVendorItems_FullMethodName                  = "/Scailo.VendorsService/UploadVendorItems"
	VendorsService_AddVendorUser_FullMethodName                      = "/Scailo.VendorsService/AddVendorUser"
	VendorsService_ApproveVendorUser_FullMethodName                  = "/Scailo.VendorsService/ApproveVendorUser"
	VendorsService_DeleteVendorUser_FullMethodName                   = "/Scailo.VendorsService/DeleteVendorUser"
	VendorsService_ViewVendorUserByID_FullMethodName                 = "/Scailo.VendorsService/ViewVendorUserByID"
	VendorsService_ViewVendorUsers_FullMethodName                    = "/Scailo.VendorsService/ViewVendorUsers"
	VendorsService_SearchVendorUsersWithPagination_FullMethodName    = "/Scailo.VendorsService/SearchVendorUsersWithPagination"
	VendorsService_ViewByID_FullMethodName                           = "/Scailo.VendorsService/ViewByID"
	VendorsService_ViewByUUID_FullMethodName                         = "/Scailo.VendorsService/ViewByUUID"
	VendorsService_ViewByCode_FullMethodName                         = "/Scailo.VendorsService/ViewByCode"
	VendorsService_ViewEssentialByID_FullMethodName                  = "/Scailo.VendorsService/ViewEssentialByID"
	VendorsService_ViewEssentialByUUID_FullMethodName                = "/Scailo.VendorsService/ViewEssentialByUUID"
	VendorsService_ViewEssentialByEmail_FullMethodName               = "/Scailo.VendorsService/ViewEssentialByEmail"
	VendorsService_ViewEssentialByPhone_FullMethodName               = "/Scailo.VendorsService/ViewEssentialByPhone"
	VendorsService_ViewFromIDs_FullMethodName                        = "/Scailo.VendorsService/ViewFromIDs"
	VendorsService_ViewAll_FullMethodName                            = "/Scailo.VendorsService/ViewAll"
	VendorsService_ViewAllForEntityUUID_FullMethodName               = "/Scailo.VendorsService/ViewAllForEntityUUID"
	VendorsService_ViewWithPagination_FullMethodName                 = "/Scailo.VendorsService/ViewWithPagination"
	VendorsService_ViewVendorsForFamily_FullMethodName               = "/Scailo.VendorsService/ViewVendorsForFamily"
	VendorsService_DownloadByUUID_FullMethodName                     = "/Scailo.VendorsService/DownloadByUUID"
	VendorsService_SearchAll_FullMethodName                          = "/Scailo.VendorsService/SearchAll"
	VendorsService_Filter_FullMethodName                             = "/Scailo.VendorsService/Filter"
	VendorsService_CountInStatus_FullMethodName                      = "/Scailo.VendorsService/CountInStatus"
	VendorsService_Count_FullMethodName                              = "/Scailo.VendorsService/Count"
	VendorsService_DownloadAsCSV_FullMethodName                      = "/Scailo.VendorsService/DownloadAsCSV"
	VendorsService_ImportFromCSV_FullMethodName                      = "/Scailo.VendorsService/ImportFromCSV"
)

// VendorsServiceClient is the client API for VendorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each vendor
type VendorsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *VendorsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *VendorsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *VendorsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *VendorsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add an item to a vendor
	AddVendorItem(ctx context.Context, in *VendorsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a vendor
	ModifyVendorItem(ctx context.Context, in *VendorsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a vendor
	ApproveVendorItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a vendor
	DeleteVendorItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a vendor
	// rpc ReorderVendorItems(ReorderItemsRequest) returns (IdentifierResponse);
	// View Vendor Item by ID
	ViewVendorItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorItem, error)
	// View approved vendor items for given vendor ID with pagination
	ViewPaginatedApprovedVendorItems(ctx context.Context, in *VendorItemsSearchRequest, opts ...grpc.CallOption) (*VendorsServicePaginatedItemsResponse, error)
	// View unapproved vendor items for given vendor ID with pagination
	ViewPaginatedUnapprovedVendorItems(ctx context.Context, in *VendorItemsSearchRequest, opts ...grpc.CallOption) (*VendorsServicePaginatedItemsResponse, error)
	// View the history of the vendor item
	ViewVendorItemHistory(ctx context.Context, in *VendorItemHistoryRequest, opts ...grpc.CallOption) (*VendorItemsList, error)
	// Search through vendor items with pagination
	SearchItemsWithPagination(ctx context.Context, in *VendorItemsSearchRequest, opts ...grpc.CallOption) (*VendorsServicePaginatedItemsResponse, error)
	// Search through vendor items that are required with pagination
	SearchRequiredItemsWithPagination(ctx context.Context, in *VendorItemsSearchRequest, opts ...grpc.CallOption) (*VendorsServicePaginatedRequiredItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. Returns an error in case duplicates are found (family code and uom code are unique)
	UploadVendorItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a user
	AddVendorUser(ctx context.Context, in *VendorsServiceUserCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a user
	ApproveVendorUser(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a user
	DeleteVendorUser(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a user for the given ID
	ViewVendorUserByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorUser, error)
	// View all users for given vendor ID
	ViewVendorUsers(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorUsersList, error)
	// Search through vendor users with pagination
	SearchVendorUsersWithPagination(ctx context.Context, in *VendorUsersSearchRequest, opts ...grpc.CallOption) (*VendorsServicePaginatedUsersResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Vendor, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Vendor, error)
	// View by Code (returns the latest record in case of duplicates)
	ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Vendor, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Vendor, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Vendor, error)
	// View only essential components (without logs) that matches the first given email address
	ViewEssentialByEmail(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Vendor, error)
	// View only essential components (without logs) that matches the first given phone number
	ViewEssentialByPhone(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Vendor, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*VendorsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*VendorsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *VendorsServicePaginationReq, opts ...grpc.CallOption) (*VendorsServicePaginationResponse, error)
	// View vendors that have been associated with the given family ID (returns vendors that have not been approved for the family as well)
	ViewVendorsForFamily(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorsList, error)
	// Other view operations
	// Download vendor with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *VendorsServiceSearchAllReq, opts ...grpc.CallOption) (*VendorsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *VendorsServiceFilterReq, opts ...grpc.CallOption) (*VendorsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *VendorsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *VendorsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type vendorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorsServiceClient(cc grpc.ClientConnInterface) VendorsServiceClient {
	return &vendorsServiceClient{cc}
}

func (c *vendorsServiceClient) Create(ctx context.Context, in *VendorsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) Draft(ctx context.Context, in *VendorsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) DraftUpdate(ctx context.Context, in *VendorsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) RevisionUpdate(ctx context.Context, in *VendorsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, VendorsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) AddVendorItem(ctx context.Context, in *VendorsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_AddVendorItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ModifyVendorItem(ctx context.Context, in *VendorsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_ModifyVendorItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ApproveVendorItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_ApproveVendorItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) DeleteVendorItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_DeleteVendorItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewVendorItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorItem)
	err := c.cc.Invoke(ctx, VendorsService_ViewVendorItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewPaginatedApprovedVendorItems(ctx context.Context, in *VendorItemsSearchRequest, opts ...grpc.CallOption) (*VendorsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, VendorsService_ViewPaginatedApprovedVendorItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewPaginatedUnapprovedVendorItems(ctx context.Context, in *VendorItemsSearchRequest, opts ...grpc.CallOption) (*VendorsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, VendorsService_ViewPaginatedUnapprovedVendorItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewVendorItemHistory(ctx context.Context, in *VendorItemHistoryRequest, opts ...grpc.CallOption) (*VendorItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorItemsList)
	err := c.cc.Invoke(ctx, VendorsService_ViewVendorItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) SearchItemsWithPagination(ctx context.Context, in *VendorItemsSearchRequest, opts ...grpc.CallOption) (*VendorsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, VendorsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) SearchRequiredItemsWithPagination(ctx context.Context, in *VendorItemsSearchRequest, opts ...grpc.CallOption) (*VendorsServicePaginatedRequiredItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsServicePaginatedRequiredItemsResponse)
	err := c.cc.Invoke(ctx, VendorsService_SearchRequiredItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, VendorsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, VendorsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) UploadVendorItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, VendorsService_UploadVendorItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) AddVendorUser(ctx context.Context, in *VendorsServiceUserCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_AddVendorUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ApproveVendorUser(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_ApproveVendorUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) DeleteVendorUser(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VendorsService_DeleteVendorUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewVendorUserByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorUser)
	err := c.cc.Invoke(ctx, VendorsService_ViewVendorUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewVendorUsers(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorUsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorUsersList)
	err := c.cc.Invoke(ctx, VendorsService_ViewVendorUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) SearchVendorUsersWithPagination(ctx context.Context, in *VendorUsersSearchRequest, opts ...grpc.CallOption) (*VendorsServicePaginatedUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsServicePaginatedUsersResponse)
	err := c.cc.Invoke(ctx, VendorsService_SearchVendorUsersWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Vendor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vendor)
	err := c.cc.Invoke(ctx, VendorsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Vendor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vendor)
	err := c.cc.Invoke(ctx, VendorsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Vendor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vendor)
	err := c.cc.Invoke(ctx, VendorsService_ViewByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Vendor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vendor)
	err := c.cc.Invoke(ctx, VendorsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Vendor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vendor)
	err := c.cc.Invoke(ctx, VendorsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewEssentialByEmail(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Vendor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vendor)
	err := c.cc.Invoke(ctx, VendorsService_ViewEssentialByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewEssentialByPhone(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Vendor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vendor)
	err := c.cc.Invoke(ctx, VendorsService_ViewEssentialByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*VendorsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsList)
	err := c.cc.Invoke(ctx, VendorsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*VendorsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsList)
	err := c.cc.Invoke(ctx, VendorsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VendorsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsList)
	err := c.cc.Invoke(ctx, VendorsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewWithPagination(ctx context.Context, in *VendorsServicePaginationReq, opts ...grpc.CallOption) (*VendorsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsServicePaginationResponse)
	err := c.cc.Invoke(ctx, VendorsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ViewVendorsForFamily(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*VendorsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsList)
	err := c.cc.Invoke(ctx, VendorsService_ViewVendorsForFamily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, VendorsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) SearchAll(ctx context.Context, in *VendorsServiceSearchAllReq, opts ...grpc.CallOption) (*VendorsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsList)
	err := c.cc.Invoke(ctx, VendorsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) Filter(ctx context.Context, in *VendorsServiceFilterReq, opts ...grpc.CallOption) (*VendorsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorsList)
	err := c.cc.Invoke(ctx, VendorsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, VendorsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) Count(ctx context.Context, in *VendorsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, VendorsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) DownloadAsCSV(ctx context.Context, in *VendorsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, VendorsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, VendorsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorsService
