// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meetings.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeetingsService_Create_FullMethodName                          = "/Scailo.MeetingsService/Create"
	MeetingsService_Update_FullMethodName                          = "/Scailo.MeetingsService/Update"
	MeetingsService_Cancel_FullMethodName                          = "/Scailo.MeetingsService/Cancel"
	MeetingsService_Complete_FullMethodName                        = "/Scailo.MeetingsService/Complete"
	MeetingsService_Repeat_FullMethodName                          = "/Scailo.MeetingsService/Repeat"
	MeetingsService_CommentAdd_FullMethodName                      = "/Scailo.MeetingsService/CommentAdd"
	MeetingsService_SendEmail_FullMethodName                       = "/Scailo.MeetingsService/SendEmail"
	MeetingsService_RequestRSVP_FullMethodName                     = "/Scailo.MeetingsService/RequestRSVP"
	MeetingsService_SendActionables_FullMethodName                 = "/Scailo.MeetingsService/SendActionables"
	MeetingsService_AddActionable_FullMethodName                   = "/Scailo.MeetingsService/AddActionable"
	MeetingsService_ModifyActionable_FullMethodName                = "/Scailo.MeetingsService/ModifyActionable"
	MeetingsService_DeleteActionable_FullMethodName                = "/Scailo.MeetingsService/DeleteActionable"
	MeetingsService_ReorderActionables_FullMethodName              = "/Scailo.MeetingsService/ReorderActionables"
	MeetingsService_ViewActionableByID_FullMethodName              = "/Scailo.MeetingsService/ViewActionableByID"
	MeetingsService_ViewActionables_FullMethodName                 = "/Scailo.MeetingsService/ViewActionables"
	MeetingsService_ViewActionableHistory_FullMethodName           = "/Scailo.MeetingsService/ViewActionableHistory"
	MeetingsService_ViewPaginatedActionables_FullMethodName        = "/Scailo.MeetingsService/ViewPaginatedActionables"
	MeetingsService_SearchActionablesWithPagination_FullMethodName = "/Scailo.MeetingsService/SearchActionablesWithPagination"
	MeetingsService_AddEmployee_FullMethodName                     = "/Scailo.MeetingsService/AddEmployee"
	MeetingsService_DeleteEmployee_FullMethodName                  = "/Scailo.MeetingsService/DeleteEmployee"
	MeetingsService_ViewEmployeeByID_FullMethodName                = "/Scailo.MeetingsService/ViewEmployeeByID"
	MeetingsService_ViewEmployees_FullMethodName                   = "/Scailo.MeetingsService/ViewEmployees"
	MeetingsService_SetEmployeeRSVP_FullMethodName                 = "/Scailo.MeetingsService/SetEmployeeRSVP"
	MeetingsService_ImportFromTeam_FullMethodName                  = "/Scailo.MeetingsService/ImportFromTeam"
	MeetingsService_ImportFromDepartment_FullMethodName            = "/Scailo.MeetingsService/ImportFromDepartment"
	MeetingsService_AddAssociate_FullMethodName                    = "/Scailo.MeetingsService/AddAssociate"
	MeetingsService_DeleteAssociate_FullMethodName                 = "/Scailo.MeetingsService/DeleteAssociate"
	MeetingsService_ViewAssociateByID_FullMethodName               = "/Scailo.MeetingsService/ViewAssociateByID"
	MeetingsService_ViewAssociates_FullMethodName                  = "/Scailo.MeetingsService/ViewAssociates"
	MeetingsService_SetAssociateRSVP_FullMethodName                = "/Scailo.MeetingsService/SetAssociateRSVP"
	MeetingsService_ViewByID_FullMethodName                        = "/Scailo.MeetingsService/ViewByID"
	MeetingsService_ViewByUUID_FullMethodName                      = "/Scailo.MeetingsService/ViewByUUID"
	MeetingsService_ViewEssentialByID_FullMethodName               = "/Scailo.MeetingsService/ViewEssentialByID"
	MeetingsService_ViewEssentialByUUID_FullMethodName             = "/Scailo.MeetingsService/ViewEssentialByUUID"
	MeetingsService_ViewFromIDs_FullMethodName                     = "/Scailo.MeetingsService/ViewFromIDs"
	MeetingsService_ViewAll_FullMethodName                         = "/Scailo.MeetingsService/ViewAll"
	MeetingsService_ViewAllForEntityUUID_FullMethodName            = "/Scailo.MeetingsService/ViewAllForEntityUUID"
	MeetingsService_ViewWithPagination_FullMethodName              = "/Scailo.MeetingsService/ViewWithPagination"
	MeetingsService_SearchAll_FullMethodName                       = "/Scailo.MeetingsService/SearchAll"
	MeetingsService_Filter_FullMethodName                          = "/Scailo.MeetingsService/Filter"
	MeetingsService_Count_FullMethodName                           = "/Scailo.MeetingsService/Count"
)

// MeetingsServiceClient is the client API for MeetingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each meeting
type MeetingsServiceClient interface {
	// Create
	Create(ctx context.Context, in *MeetingsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update
	Update(ctx context.Context, in *MeetingsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Cancel
	Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Request RSVPs from all the participants
	RequestRSVP(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send all the actionables in an email
	SendActionables(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an actionable to a meeting
	AddActionable(ctx context.Context, in *MeetingsServiceActionableCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an actionable in a meeting
	ModifyActionable(ctx context.Context, in *MeetingsServiceActionableUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an actionable in a meeting
	DeleteActionable(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder actionables in a meeting
	ReorderActionables(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Meeting Actionable by ID
	ViewActionableByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MeetingActionable, error)
	// View all actionables for given meeting ID
	ViewActionables(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*MeetingActionablesList, error)
	// View the history of the meeting actionable
	ViewActionableHistory(ctx context.Context, in *MeetingActionableHistoryRequest, opts ...grpc.CallOption) (*MeetingActionablesList, error)
	// View meeting actionables for given meeting ID with pagination
	ViewPaginatedActionables(ctx context.Context, in *MeetingActionablesSearchRequest, opts ...grpc.CallOption) (*MeetingsServicePaginatedActionablesResponse, error)
	// Search through meeting actionables with pagination
	SearchActionablesWithPagination(ctx context.Context, in *MeetingActionablesSearchRequest, opts ...grpc.CallOption) (*MeetingsServicePaginatedActionablesResponse, error)
	// Add an employee
	AddEmployee(ctx context.Context, in *MeetingsServiceEmployeeCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an employee
	DeleteEmployee(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View an employee for the given ID
	ViewEmployeeByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MeetingEmployee, error)
	// View all employees for given meeting ID
	ViewEmployees(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MeetingEmployeesList, error)
	// Set the RSVP of the employee with the given meeting employee UUID
	SetEmployeeRSVP(ctx context.Context, in *MeetingsServiceSetRSVPRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Import employees from team and returns the ID of the meeting
	ImportFromTeam(ctx context.Context, in *MeetingsServiceImportEmployeesRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Import employees from department and returns the ID of the meeting
	ImportFromDepartment(ctx context.Context, in *MeetingsServiceImportEmployeesRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an associate
	AddAssociate(ctx context.Context, in *MeetingsServiceAssociateCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an associate
	DeleteAssociate(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View an associate for the given ID
	ViewAssociateByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MeetingAssociate, error)
	// View all associates for given meeting ID
	ViewAssociates(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MeetingAssociatesList, error)
	// Set the RSVP of the associate with the given meeting associate UUID
	SetAssociateRSVP(ctx context.Context, in *MeetingsServiceSetRSVPRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Meeting, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Meeting, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Meeting, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Meeting, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*MeetingsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*MeetingsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*MeetingsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *MeetingsServicePaginationReq, opts ...grpc.CallOption) (*MeetingsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *MeetingsServiceSearchAllReq, opts ...grpc.CallOption) (*MeetingsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *MeetingsServiceFilterReq, opts ...grpc.CallOption) (*MeetingsList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *MeetingsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
}

type meetingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetingsServiceClient(cc grpc.ClientConnInterface) MeetingsServiceClient {
	return &meetingsServiceClient{cc}
}

func (c *meetingsServiceClient) Create(ctx context.Context, in *MeetingsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) Update(ctx context.Context, in *MeetingsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) RequestRSVP(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_RequestRSVP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) SendActionables(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_SendActionables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) AddActionable(ctx context.Context, in *MeetingsServiceActionableCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_AddActionable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ModifyActionable(ctx context.Context, in *MeetingsServiceActionableUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_ModifyActionable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) DeleteActionable(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_DeleteActionable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ReorderActionables(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_ReorderActionables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewActionableByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MeetingActionable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingActionable)
	err := c.cc.Invoke(ctx, MeetingsService_ViewActionableByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewActionables(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*MeetingActionablesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingActionablesList)
	err := c.cc.Invoke(ctx, MeetingsService_ViewActionables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewActionableHistory(ctx context.Context, in *MeetingActionableHistoryRequest, opts ...grpc.CallOption) (*MeetingActionablesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingActionablesList)
	err := c.cc.Invoke(ctx, MeetingsService_ViewActionableHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewPaginatedActionables(ctx context.Context, in *MeetingActionablesSearchRequest, opts ...grpc.CallOption) (*MeetingsServicePaginatedActionablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingsServicePaginatedActionablesResponse)
	err := c.cc.Invoke(ctx, MeetingsService_ViewPaginatedActionables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) SearchActionablesWithPagination(ctx context.Context, in *MeetingActionablesSearchRequest, opts ...grpc.CallOption) (*MeetingsServicePaginatedActionablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingsServicePaginatedActionablesResponse)
	err := c.cc.Invoke(ctx, MeetingsService_SearchActionablesWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) AddEmployee(ctx context.Context, in *MeetingsServiceEmployeeCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_AddEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) DeleteEmployee(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_DeleteEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewEmployeeByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MeetingEmployee, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingEmployee)
	err := c.cc.Invoke(ctx, MeetingsService_ViewEmployeeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewEmployees(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MeetingEmployeesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingEmployeesList)
	err := c.cc.Invoke(ctx, MeetingsService_ViewEmployees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) SetEmployeeRSVP(ctx context.Context, in *MeetingsServiceSetRSVPRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, MeetingsService_SetEmployeeRSVP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ImportFromTeam(ctx context.Context, in *MeetingsServiceImportEmployeesRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_ImportFromTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ImportFromDepartment(ctx context.Context, in *MeetingsServiceImportEmployeesRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_ImportFromDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) AddAssociate(ctx context.Context, in *MeetingsServiceAssociateCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_AddAssociate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) DeleteAssociate(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, MeetingsService_DeleteAssociate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewAssociateByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MeetingAssociate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingAssociate)
	err := c.cc.Invoke(ctx, MeetingsService_ViewAssociateByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewAssociates(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*MeetingAssociatesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingAssociatesList)
	err := c.cc.Invoke(ctx, MeetingsService_ViewAssociates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) SetAssociateRSVP(ctx context.Context, in *MeetingsServiceSetRSVPRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, MeetingsService_SetAssociateRSVP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Meeting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meeting)
	err := c.cc.Invoke(ctx, MeetingsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Meeting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meeting)
	err := c.cc.Invoke(ctx, MeetingsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Meeting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meeting)
	err := c.cc.Invoke(ctx, MeetingsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Meeting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meeting)
	err := c.cc.Invoke(ctx, MeetingsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*MeetingsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingsList)
	err := c.cc.Invoke(ctx, MeetingsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*MeetingsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingsList)
	err := c.cc.Invoke(ctx, MeetingsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*MeetingsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingsList)
	err := c.cc.Invoke(ctx, MeetingsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) ViewWithPagination(ctx context.Context, in *MeetingsServicePaginationReq, opts ...grpc.CallOption) (*MeetingsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingsServicePaginationResponse)
	err := c.cc.Invoke(ctx, MeetingsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) SearchAll(ctx context.Context, in *MeetingsServiceSearchAllReq, opts ...grpc.CallOption) (*MeetingsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingsList)
	err := c.cc.Invoke(ctx, MeetingsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) Filter(ctx context.Context, in *MeetingsServiceFilterReq, opts ...grpc.CallOption) (*MeetingsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeetingsList)
	err := c.cc.Invoke(ctx, MeetingsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingsServiceClient) Count(ctx context.Context, in *MeetingsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, MeetingsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetingsService
