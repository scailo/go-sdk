// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: stock_issuances.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockIssuancesService_Create_FullMethodName                                    = "/Scailo.StockIssuancesService/Create"
	StockIssuancesService_Draft_FullMethodName                                     = "/Scailo.StockIssuancesService/Draft"
	StockIssuancesService_DraftUpdate_FullMethodName                               = "/Scailo.StockIssuancesService/DraftUpdate"
	StockIssuancesService_SendForVerification_FullMethodName                       = "/Scailo.StockIssuancesService/SendForVerification"
	StockIssuancesService_Verify_FullMethodName                                    = "/Scailo.StockIssuancesService/Verify"
	StockIssuancesService_Approve_FullMethodName                                   = "/Scailo.StockIssuancesService/Approve"
	StockIssuancesService_SendForRevision_FullMethodName                           = "/Scailo.StockIssuancesService/SendForRevision"
	StockIssuancesService_RevisionUpdate_FullMethodName                            = "/Scailo.StockIssuancesService/RevisionUpdate"
	StockIssuancesService_Halt_FullMethodName                                      = "/Scailo.StockIssuancesService/Halt"
	StockIssuancesService_Discard_FullMethodName                                   = "/Scailo.StockIssuancesService/Discard"
	StockIssuancesService_Restore_FullMethodName                                   = "/Scailo.StockIssuancesService/Restore"
	StockIssuancesService_Complete_FullMethodName                                  = "/Scailo.StockIssuancesService/Complete"
	StockIssuancesService_Repeat_FullMethodName                                    = "/Scailo.StockIssuancesService/Repeat"
	StockIssuancesService_Reopen_FullMethodName                                    = "/Scailo.StockIssuancesService/Reopen"
	StockIssuancesService_CommentAdd_FullMethodName                                = "/Scailo.StockIssuancesService/CommentAdd"
	StockIssuancesService_SendEmail_FullMethodName                                 = "/Scailo.StockIssuancesService/SendEmail"
	StockIssuancesService_CreateMagicLink_FullMethodName                           = "/Scailo.StockIssuancesService/CreateMagicLink"
	StockIssuancesService_Autofill_FullMethodName                                  = "/Scailo.StockIssuancesService/Autofill"
	StockIssuancesService_IsCompletable_FullMethodName                             = "/Scailo.StockIssuancesService/IsCompletable"
	StockIssuancesService_AddStockIssuanceItem_FullMethodName                      = "/Scailo.StockIssuancesService/AddStockIssuanceItem"
	StockIssuancesService_ModifyStockIssuanceItem_FullMethodName                   = "/Scailo.StockIssuancesService/ModifyStockIssuanceItem"
	StockIssuancesService_ApproveStockIssuanceItem_FullMethodName                  = "/Scailo.StockIssuancesService/ApproveStockIssuanceItem"
	StockIssuancesService_DeleteStockIssuanceItem_FullMethodName                   = "/Scailo.StockIssuancesService/DeleteStockIssuanceItem"
	StockIssuancesService_ReorderStockIssuanceItems_FullMethodName                 = "/Scailo.StockIssuancesService/ReorderStockIssuanceItems"
	StockIssuancesService_ViewStockIssuanceItemByID_FullMethodName                 = "/Scailo.StockIssuancesService/ViewStockIssuanceItemByID"
	StockIssuancesService_ViewStockIssuanceItemByInventoryHash_FullMethodName      = "/Scailo.StockIssuancesService/ViewStockIssuanceItemByInventoryHash"
	StockIssuancesService_ViewApprovedStockIssuanceItems_FullMethodName            = "/Scailo.StockIssuancesService/ViewApprovedStockIssuanceItems"
	StockIssuancesService_ViewUnapprovedStockIssuanceItems_FullMethodName          = "/Scailo.StockIssuancesService/ViewUnapprovedStockIssuanceItems"
	StockIssuancesService_ViewStockIssuanceItemHistory_FullMethodName              = "/Scailo.StockIssuancesService/ViewStockIssuanceItemHistory"
	StockIssuancesService_ViewPaginatedApprovedStockIssuanceItems_FullMethodName   = "/Scailo.StockIssuancesService/ViewPaginatedApprovedStockIssuanceItems"
	StockIssuancesService_ViewPaginatedUnapprovedStockIssuanceItems_FullMethodName = "/Scailo.StockIssuancesService/ViewPaginatedUnapprovedStockIssuanceItems"
	StockIssuancesService_SearchItemsWithPagination_FullMethodName                 = "/Scailo.StockIssuancesService/SearchItemsWithPagination"
	StockIssuancesService_DownloadItemsAsCSV_FullMethodName                        = "/Scailo.StockIssuancesService/DownloadItemsAsCSV"
	StockIssuancesService_DownloadItemsTemplateAsCSV_FullMethodName                = "/Scailo.StockIssuancesService/DownloadItemsTemplateAsCSV"
	StockIssuancesService_ViewByID_FullMethodName                                  = "/Scailo.StockIssuancesService/ViewByID"
	StockIssuancesService_ViewByUUID_FullMethodName                                = "/Scailo.StockIssuancesService/ViewByUUID"
	StockIssuancesService_ViewByReferenceID_FullMethodName                         = "/Scailo.StockIssuancesService/ViewByReferenceID"
	StockIssuancesService_ViewEssentialByID_FullMethodName                         = "/Scailo.StockIssuancesService/ViewEssentialByID"
	StockIssuancesService_ViewEssentialByUUID_FullMethodName                       = "/Scailo.StockIssuancesService/ViewEssentialByUUID"
	StockIssuancesService_ViewFromIDs_FullMethodName                               = "/Scailo.StockIssuancesService/ViewFromIDs"
	StockIssuancesService_ViewAll_FullMethodName                                   = "/Scailo.StockIssuancesService/ViewAll"
	StockIssuancesService_ViewAllForEntityUUID_FullMethodName                      = "/Scailo.StockIssuancesService/ViewAllForEntityUUID"
	StockIssuancesService_ViewWithPagination_FullMethodName                        = "/Scailo.StockIssuancesService/ViewWithPagination"
	StockIssuancesService_ViewProspectiveFamilies_FullMethodName                   = "/Scailo.StockIssuancesService/ViewProspectiveFamilies"
	StockIssuancesService_FilterProspectiveFamilies_FullMethodName                 = "/Scailo.StockIssuancesService/FilterProspectiveFamilies"
	StockIssuancesService_ViewProspectiveStockIssuanceItem_FullMethodName          = "/Scailo.StockIssuancesService/ViewProspectiveStockIssuanceItem"
	StockIssuancesService_ViewAddedFamilyQuantityForSource_FullMethodName          = "/Scailo.StockIssuancesService/ViewAddedFamilyQuantityForSource"
	StockIssuancesService_DownloadLabelByUUID_FullMethodName                       = "/Scailo.StockIssuancesService/DownloadLabelByUUID"
	StockIssuancesService_IsDownloadable_FullMethodName                            = "/Scailo.StockIssuancesService/IsDownloadable"
	StockIssuancesService_DownloadByUUID_FullMethodName                            = "/Scailo.StockIssuancesService/DownloadByUUID"
	StockIssuancesService_SearchAll_FullMethodName                                 = "/Scailo.StockIssuancesService/SearchAll"
	StockIssuancesService_Filter_FullMethodName                                    = "/Scailo.StockIssuancesService/Filter"
	StockIssuancesService_CountInStatus_FullMethodName                             = "/Scailo.StockIssuancesService/CountInStatus"
	StockIssuancesService_Count_FullMethodName                                     = "/Scailo.StockIssuancesService/Count"
	StockIssuancesService_DownloadAsCSV_FullMethodName                             = "/Scailo.StockIssuancesService/DownloadAsCSV"
)

// StockIssuancesServiceClient is the client API for StockIssuancesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each stock issuance
type StockIssuancesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *StockIssuancesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *StockIssuancesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *StockIssuancesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *StockIssuancesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Autofill the stock issuance
	Autofill(ctx context.Context, in *StockIssuancesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Stock Issuance can be marked as completed
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Add an item to a stock issuance
	AddStockIssuanceItem(ctx context.Context, in *StockIssuancesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a stock issuance
	ModifyStockIssuanceItem(ctx context.Context, in *StockIssuancesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a stock issuance
	ApproveStockIssuanceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a stock issuance
	DeleteStockIssuanceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a stock issuance
	ReorderStockIssuanceItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Stock Issuance Item by ID
	ViewStockIssuanceItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockIssuanceItem, error)
	// View Stock Issuance Item by Inventory Hash
	ViewStockIssuanceItemByInventoryHash(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockIssuanceItem, error)
	// View approved stock issuance items for given stock issuance ID
	ViewApprovedStockIssuanceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockIssuancesItemsList, error)
	// View unapproved stock issuance items for given stock issuance ID
	ViewUnapprovedStockIssuanceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockIssuancesItemsList, error)
	// View the history of the stock issuance item
	ViewStockIssuanceItemHistory(ctx context.Context, in *StockIssuanceItemHistoryRequest, opts ...grpc.CallOption) (*StockIssuancesItemsList, error)
	// View approved stock issuance items for given stock issuance ID with pagination
	ViewPaginatedApprovedStockIssuanceItems(ctx context.Context, in *StockIssuanceItemsSearchRequest, opts ...grpc.CallOption) (*StockIssuancesServicePaginatedItemsResponse, error)
	// View unapproved stock issuance items for given stock issuance ID with pagination
	ViewPaginatedUnapprovedStockIssuanceItems(ctx context.Context, in *StockIssuanceItemsSearchRequest, opts ...grpc.CallOption) (*StockIssuancesServicePaginatedItemsResponse, error)
	// Search through stock issuance items with pagination
	SearchItemsWithPagination(ctx context.Context, in *StockIssuanceItemsSearchRequest, opts ...grpc.CallOption) (*StockIssuancesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockIssuance, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockIssuance, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockIssuance, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockIssuance, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockIssuance, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*StockIssuancesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*StockIssuancesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockIssuancesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *StockIssuancesServicePaginationReq, opts ...grpc.CallOption) (*StockIssuancesServicePaginationResponse, error)
	// View prospective families for the given stock issuance
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective stock issuance item info for the given family ID and stock issuance ID
	ViewProspectiveStockIssuanceItem(ctx context.Context, in *StockIssuanceItemProspectiveInfoRequest, opts ...grpc.CallOption) (*StockIssuancesServiceItemCreateRequest, error)
	// View already added quantities
	ViewAddedFamilyQuantityForSource(ctx context.Context, in *StockIssuancesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*QuantityResponse, error)
	// Download the label for the stock issuance with the given IdentifierUUID
	DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download stock issuance with the given IdentifierUUID
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *StockIssuancesServiceSearchAllReq, opts ...grpc.CallOption) (*StockIssuancesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *StockIssuancesServiceFilterReq, opts ...grpc.CallOption) (*StockIssuancesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *StockIssuancesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *StockIssuancesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type stockIssuancesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockIssuancesServiceClient(cc grpc.ClientConnInterface) StockIssuancesServiceClient {
	return &stockIssuancesServiceClient{cc}
}

func (c *stockIssuancesServiceClient) Create(ctx context.Context, in *StockIssuancesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Draft(ctx context.Context, in *StockIssuancesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) DraftUpdate(ctx context.Context, in *StockIssuancesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) RevisionUpdate(ctx context.Context, in *StockIssuancesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, StockIssuancesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Autofill(ctx context.Context, in *StockIssuancesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) AddStockIssuanceItem(ctx context.Context, in *StockIssuancesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_AddStockIssuanceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ModifyStockIssuanceItem(ctx context.Context, in *StockIssuancesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_ModifyStockIssuanceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ApproveStockIssuanceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_ApproveStockIssuanceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) DeleteStockIssuanceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_DeleteStockIssuanceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ReorderStockIssuanceItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_ReorderStockIssuanceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewStockIssuanceItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockIssuanceItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuanceItem)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewStockIssuanceItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewStockIssuanceItemByInventoryHash(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockIssuanceItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuanceItem)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewStockIssuanceItemByInventoryHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewApprovedStockIssuanceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockIssuancesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesItemsList)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewApprovedStockIssuanceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewUnapprovedStockIssuanceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockIssuancesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesItemsList)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewUnapprovedStockIssuanceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewStockIssuanceItemHistory(ctx context.Context, in *StockIssuanceItemHistoryRequest, opts ...grpc.CallOption) (*StockIssuancesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesItemsList)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewStockIssuanceItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewPaginatedApprovedStockIssuanceItems(ctx context.Context, in *StockIssuanceItemsSearchRequest, opts ...grpc.CallOption) (*StockIssuancesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewPaginatedApprovedStockIssuanceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewPaginatedUnapprovedStockIssuanceItems(ctx context.Context, in *StockIssuanceItemsSearchRequest, opts ...grpc.CallOption) (*StockIssuancesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewPaginatedUnapprovedStockIssuanceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) SearchItemsWithPagination(ctx context.Context, in *StockIssuanceItemsSearchRequest, opts ...grpc.CallOption) (*StockIssuancesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockIssuancesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockIssuancesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockIssuance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuance)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockIssuance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuance)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockIssuance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuance)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockIssuance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuance)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockIssuance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuance)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*StockIssuancesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesList)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*StockIssuancesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesList)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockIssuancesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesList)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewWithPagination(ctx context.Context, in *StockIssuancesServicePaginationReq, opts ...grpc.CallOption) (*StockIssuancesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesServicePaginationResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, StockIssuancesService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewProspectiveStockIssuanceItem(ctx context.Context, in *StockIssuanceItemProspectiveInfoRequest, opts ...grpc.CallOption) (*StockIssuancesServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewProspectiveStockIssuanceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) ViewAddedFamilyQuantityForSource(ctx context.Context, in *StockIssuancesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_ViewAddedFamilyQuantityForSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockIssuancesService_DownloadLabelByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockIssuancesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) SearchAll(ctx context.Context, in *StockIssuancesServiceSearchAllReq, opts ...grpc.CallOption) (*StockIssuancesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesList)
	err := c.cc.Invoke(ctx, StockIssuancesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Filter(ctx context.Context, in *StockIssuancesServiceFilterReq, opts ...grpc.CallOption) (*StockIssuancesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockIssuancesList)
	err := c.cc.Invoke(ctx, StockIssuancesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) Count(ctx context.Context, in *StockIssuancesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, StockIssuancesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockIssuancesServiceClient) DownloadAsCSV(ctx context.Context, in *StockIssuancesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockIssuancesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockIssuancesService
