// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: expenses.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExpensesService_Create_FullMethodName                              = "/Scailo.ExpensesService/Create"
	ExpensesService_Draft_FullMethodName                               = "/Scailo.ExpensesService/Draft"
	ExpensesService_DraftUpdate_FullMethodName                         = "/Scailo.ExpensesService/DraftUpdate"
	ExpensesService_SendForVerification_FullMethodName                 = "/Scailo.ExpensesService/SendForVerification"
	ExpensesService_Verify_FullMethodName                              = "/Scailo.ExpensesService/Verify"
	ExpensesService_Approve_FullMethodName                             = "/Scailo.ExpensesService/Approve"
	ExpensesService_SendForRevision_FullMethodName                     = "/Scailo.ExpensesService/SendForRevision"
	ExpensesService_RevisionUpdate_FullMethodName                      = "/Scailo.ExpensesService/RevisionUpdate"
	ExpensesService_Halt_FullMethodName                                = "/Scailo.ExpensesService/Halt"
	ExpensesService_Discard_FullMethodName                             = "/Scailo.ExpensesService/Discard"
	ExpensesService_Restore_FullMethodName                             = "/Scailo.ExpensesService/Restore"
	ExpensesService_Complete_FullMethodName                            = "/Scailo.ExpensesService/Complete"
	ExpensesService_Repeat_FullMethodName                              = "/Scailo.ExpensesService/Repeat"
	ExpensesService_Reopen_FullMethodName                              = "/Scailo.ExpensesService/Reopen"
	ExpensesService_CommentAdd_FullMethodName                          = "/Scailo.ExpensesService/CommentAdd"
	ExpensesService_SendEmail_FullMethodName                           = "/Scailo.ExpensesService/SendEmail"
	ExpensesService_CreateMagicLink_FullMethodName                     = "/Scailo.ExpensesService/CreateMagicLink"
	ExpensesService_AddExpenseItem_FullMethodName                      = "/Scailo.ExpensesService/AddExpenseItem"
	ExpensesService_ModifyExpenseItem_FullMethodName                   = "/Scailo.ExpensesService/ModifyExpenseItem"
	ExpensesService_ApproveExpenseItem_FullMethodName                  = "/Scailo.ExpensesService/ApproveExpenseItem"
	ExpensesService_DeleteExpenseItem_FullMethodName                   = "/Scailo.ExpensesService/DeleteExpenseItem"
	ExpensesService_ReorderExpenseItems_FullMethodName                 = "/Scailo.ExpensesService/ReorderExpenseItems"
	ExpensesService_ViewExpenseItemByID_FullMethodName                 = "/Scailo.ExpensesService/ViewExpenseItemByID"
	ExpensesService_ViewApprovedExpenseItems_FullMethodName            = "/Scailo.ExpensesService/ViewApprovedExpenseItems"
	ExpensesService_ViewUnapprovedExpenseItems_FullMethodName          = "/Scailo.ExpensesService/ViewUnapprovedExpenseItems"
	ExpensesService_ViewExpenseItemHistory_FullMethodName              = "/Scailo.ExpensesService/ViewExpenseItemHistory"
	ExpensesService_ViewPaginatedApprovedExpenseItems_FullMethodName   = "/Scailo.ExpensesService/ViewPaginatedApprovedExpenseItems"
	ExpensesService_ViewPaginatedUnapprovedExpenseItems_FullMethodName = "/Scailo.ExpensesService/ViewPaginatedUnapprovedExpenseItems"
	ExpensesService_SearchItemsWithPagination_FullMethodName           = "/Scailo.ExpensesService/SearchItemsWithPagination"
	ExpensesService_DownloadItemsAsCSV_FullMethodName                  = "/Scailo.ExpensesService/DownloadItemsAsCSV"
	ExpensesService_DownloadItemsTemplateAsCSV_FullMethodName          = "/Scailo.ExpensesService/DownloadItemsTemplateAsCSV"
	ExpensesService_UploadExpenseItems_FullMethodName                  = "/Scailo.ExpensesService/UploadExpenseItems"
	ExpensesService_ViewByID_FullMethodName                            = "/Scailo.ExpensesService/ViewByID"
	ExpensesService_ViewByUUID_FullMethodName                          = "/Scailo.ExpensesService/ViewByUUID"
	ExpensesService_ViewByReferenceID_FullMethodName                   = "/Scailo.ExpensesService/ViewByReferenceID"
	ExpensesService_ViewEssentialByID_FullMethodName                   = "/Scailo.ExpensesService/ViewEssentialByID"
	ExpensesService_ViewEssentialByUUID_FullMethodName                 = "/Scailo.ExpensesService/ViewEssentialByUUID"
	ExpensesService_ViewFromIDs_FullMethodName                         = "/Scailo.ExpensesService/ViewFromIDs"
	ExpensesService_ViewAll_FullMethodName                             = "/Scailo.ExpensesService/ViewAll"
	ExpensesService_ViewAllForEntityUUID_FullMethodName                = "/Scailo.ExpensesService/ViewAllForEntityUUID"
	ExpensesService_ViewWithPagination_FullMethodName                  = "/Scailo.ExpensesService/ViewWithPagination"
	ExpensesService_IsDownloadable_FullMethodName                      = "/Scailo.ExpensesService/IsDownloadable"
	ExpensesService_DownloadByUUID_FullMethodName                      = "/Scailo.ExpensesService/DownloadByUUID"
	ExpensesService_SearchAll_FullMethodName                           = "/Scailo.ExpensesService/SearchAll"
	ExpensesService_Filter_FullMethodName                              = "/Scailo.ExpensesService/Filter"
	ExpensesService_CountInStatus_FullMethodName                       = "/Scailo.ExpensesService/CountInStatus"
	ExpensesService_Count_FullMethodName                               = "/Scailo.ExpensesService/Count"
	ExpensesService_DownloadAsCSV_FullMethodName                       = "/Scailo.ExpensesService/DownloadAsCSV"
)

// ExpensesServiceClient is the client API for ExpensesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each expense
type ExpensesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ExpensesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ExpensesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ExpensesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ExpensesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add an item to a expense
	AddExpenseItem(ctx context.Context, in *ExpensesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a expense
	ModifyExpenseItem(ctx context.Context, in *ExpensesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a expense
	ApproveExpenseItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a expense
	DeleteExpenseItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a expense
	ReorderExpenseItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Expense Item by ID
	ViewExpenseItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ExpenseItem, error)
	// View approved expense items for given expense ID
	ViewApprovedExpenseItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ExpensesItemsList, error)
	// View unapproved expense items for given expense ID
	ViewUnapprovedExpenseItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ExpensesItemsList, error)
	// View the history of the expense item
	ViewExpenseItemHistory(ctx context.Context, in *ExpenseItemHistoryRequest, opts ...grpc.CallOption) (*ExpensesItemsList, error)
	// View approved expense items for given expense ID with pagination
	ViewPaginatedApprovedExpenseItems(ctx context.Context, in *ExpenseItemsSearchRequest, opts ...grpc.CallOption) (*ExpensesServicePaginatedItemsResponse, error)
	// View unapproved expense items for given expense ID with pagination
	ViewPaginatedUnapprovedExpenseItems(ctx context.Context, in *ExpenseItemsSearchRequest, opts ...grpc.CallOption) (*ExpensesServicePaginatedItemsResponse, error)
	// Search through expense items with pagination
	SearchItemsWithPagination(ctx context.Context, in *ExpenseItemsSearchRequest, opts ...grpc.CallOption) (*ExpensesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadExpenseItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Expense, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Expense, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Expense, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Expense, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Expense, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ExpensesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ExpensesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ExpensesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ExpensesServicePaginationReq, opts ...grpc.CallOption) (*ExpensesServicePaginationResponse, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download expense with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ExpensesServiceSearchAllReq, opts ...grpc.CallOption) (*ExpensesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ExpensesServiceFilterReq, opts ...grpc.CallOption) (*ExpensesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *ExpensesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ExpensesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type expensesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpensesServiceClient(cc grpc.ClientConnInterface) ExpensesServiceClient {
	return &expensesServiceClient{cc}
}

func (c *expensesServiceClient) Create(ctx context.Context, in *ExpensesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Draft(ctx context.Context, in *ExpensesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) DraftUpdate(ctx context.Context, in *ExpensesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) RevisionUpdate(ctx context.Context, in *ExpensesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, ExpensesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) AddExpenseItem(ctx context.Context, in *ExpensesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_AddExpenseItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ModifyExpenseItem(ctx context.Context, in *ExpensesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_ModifyExpenseItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ApproveExpenseItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_ApproveExpenseItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) DeleteExpenseItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_DeleteExpenseItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ReorderExpenseItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ExpensesService_ReorderExpenseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewExpenseItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ExpenseItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpenseItem)
	err := c.cc.Invoke(ctx, ExpensesService_ViewExpenseItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewApprovedExpenseItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ExpensesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesItemsList)
	err := c.cc.Invoke(ctx, ExpensesService_ViewApprovedExpenseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewUnapprovedExpenseItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ExpensesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesItemsList)
	err := c.cc.Invoke(ctx, ExpensesService_ViewUnapprovedExpenseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewExpenseItemHistory(ctx context.Context, in *ExpenseItemHistoryRequest, opts ...grpc.CallOption) (*ExpensesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesItemsList)
	err := c.cc.Invoke(ctx, ExpensesService_ViewExpenseItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewPaginatedApprovedExpenseItems(ctx context.Context, in *ExpenseItemsSearchRequest, opts ...grpc.CallOption) (*ExpensesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ExpensesService_ViewPaginatedApprovedExpenseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewPaginatedUnapprovedExpenseItems(ctx context.Context, in *ExpenseItemsSearchRequest, opts ...grpc.CallOption) (*ExpensesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ExpensesService_ViewPaginatedUnapprovedExpenseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) SearchItemsWithPagination(ctx context.Context, in *ExpenseItemsSearchRequest, opts ...grpc.CallOption) (*ExpensesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ExpensesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ExpensesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ExpensesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) UploadExpenseItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, ExpensesService_UploadExpenseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Expense, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Expense)
	err := c.cc.Invoke(ctx, ExpensesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Expense, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Expense)
	err := c.cc.Invoke(ctx, ExpensesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Expense, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Expense)
	err := c.cc.Invoke(ctx, ExpensesService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Expense, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Expense)
	err := c.cc.Invoke(ctx, ExpensesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Expense, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Expense)
	err := c.cc.Invoke(ctx, ExpensesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ExpensesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesList)
	err := c.cc.Invoke(ctx, ExpensesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ExpensesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesList)
	err := c.cc.Invoke(ctx, ExpensesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ExpensesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesList)
	err := c.cc.Invoke(ctx, ExpensesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) ViewWithPagination(ctx context.Context, in *ExpensesServicePaginationReq, opts ...grpc.CallOption) (*ExpensesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesServicePaginationResponse)
	err := c.cc.Invoke(ctx, ExpensesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, ExpensesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ExpensesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) SearchAll(ctx context.Context, in *ExpensesServiceSearchAllReq, opts ...grpc.CallOption) (*ExpensesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesList)
	err := c.cc.Invoke(ctx, ExpensesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Filter(ctx context.Context, in *ExpensesServiceFilterReq, opts ...grpc.CallOption) (*ExpensesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpensesList)
	err := c.cc.Invoke(ctx, ExpensesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ExpensesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) Count(ctx context.Context, in *ExpensesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ExpensesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expensesServiceClient) DownloadAsCSV(ctx context.Context, in *ExpensesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ExpensesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpensesService
