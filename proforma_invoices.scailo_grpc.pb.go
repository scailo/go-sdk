// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proforma_invoices.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProformaInvoicesService_Create_FullMethodName                                      = "/Scailo.ProformaInvoicesService/Create"
	ProformaInvoicesService_Draft_FullMethodName                                       = "/Scailo.ProformaInvoicesService/Draft"
	ProformaInvoicesService_DraftUpdate_FullMethodName                                 = "/Scailo.ProformaInvoicesService/DraftUpdate"
	ProformaInvoicesService_SendForVerification_FullMethodName                         = "/Scailo.ProformaInvoicesService/SendForVerification"
	ProformaInvoicesService_Verify_FullMethodName                                      = "/Scailo.ProformaInvoicesService/Verify"
	ProformaInvoicesService_Approve_FullMethodName                                     = "/Scailo.ProformaInvoicesService/Approve"
	ProformaInvoicesService_SendForRevision_FullMethodName                             = "/Scailo.ProformaInvoicesService/SendForRevision"
	ProformaInvoicesService_RevisionUpdate_FullMethodName                              = "/Scailo.ProformaInvoicesService/RevisionUpdate"
	ProformaInvoicesService_Halt_FullMethodName                                        = "/Scailo.ProformaInvoicesService/Halt"
	ProformaInvoicesService_Discard_FullMethodName                                     = "/Scailo.ProformaInvoicesService/Discard"
	ProformaInvoicesService_Restore_FullMethodName                                     = "/Scailo.ProformaInvoicesService/Restore"
	ProformaInvoicesService_Complete_FullMethodName                                    = "/Scailo.ProformaInvoicesService/Complete"
	ProformaInvoicesService_Repeat_FullMethodName                                      = "/Scailo.ProformaInvoicesService/Repeat"
	ProformaInvoicesService_Reopen_FullMethodName                                      = "/Scailo.ProformaInvoicesService/Reopen"
	ProformaInvoicesService_CommentAdd_FullMethodName                                  = "/Scailo.ProformaInvoicesService/CommentAdd"
	ProformaInvoicesService_SendEmail_FullMethodName                                   = "/Scailo.ProformaInvoicesService/SendEmail"
	ProformaInvoicesService_Autofill_FullMethodName                                    = "/Scailo.ProformaInvoicesService/Autofill"
	ProformaInvoicesService_Amend_FullMethodName                                       = "/Scailo.ProformaInvoicesService/Amend"
	ProformaInvoicesService_CreateMagicLink_FullMethodName                             = "/Scailo.ProformaInvoicesService/CreateMagicLink"
	ProformaInvoicesService_AddMultipleProformaInvoiceItems_FullMethodName             = "/Scailo.ProformaInvoicesService/AddMultipleProformaInvoiceItems"
	ProformaInvoicesService_AddProformaInvoiceItem_FullMethodName                      = "/Scailo.ProformaInvoicesService/AddProformaInvoiceItem"
	ProformaInvoicesService_ModifyProformaInvoiceItem_FullMethodName                   = "/Scailo.ProformaInvoicesService/ModifyProformaInvoiceItem"
	ProformaInvoicesService_ApproveProformaInvoiceItem_FullMethodName                  = "/Scailo.ProformaInvoicesService/ApproveProformaInvoiceItem"
	ProformaInvoicesService_DeleteProformaInvoiceItem_FullMethodName                   = "/Scailo.ProformaInvoicesService/DeleteProformaInvoiceItem"
	ProformaInvoicesService_ReorderProformaInvoiceItems_FullMethodName                 = "/Scailo.ProformaInvoicesService/ReorderProformaInvoiceItems"
	ProformaInvoicesService_ViewProformaInvoiceItemByID_FullMethodName                 = "/Scailo.ProformaInvoicesService/ViewProformaInvoiceItemByID"
	ProformaInvoicesService_ViewApprovedProformaInvoiceItems_FullMethodName            = "/Scailo.ProformaInvoicesService/ViewApprovedProformaInvoiceItems"
	ProformaInvoicesService_ViewUnapprovedProformaInvoiceItems_FullMethodName          = "/Scailo.ProformaInvoicesService/ViewUnapprovedProformaInvoiceItems"
	ProformaInvoicesService_ViewProformaInvoiceItemHistory_FullMethodName              = "/Scailo.ProformaInvoicesService/ViewProformaInvoiceItemHistory"
	ProformaInvoicesService_ViewPaginatedApprovedProformaInvoiceItems_FullMethodName   = "/Scailo.ProformaInvoicesService/ViewPaginatedApprovedProformaInvoiceItems"
	ProformaInvoicesService_ViewPaginatedUnapprovedProformaInvoiceItems_FullMethodName = "/Scailo.ProformaInvoicesService/ViewPaginatedUnapprovedProformaInvoiceItems"
	ProformaInvoicesService_SearchItemsWithPagination_FullMethodName                   = "/Scailo.ProformaInvoicesService/SearchItemsWithPagination"
	ProformaInvoicesService_DownloadItemsAsCSV_FullMethodName                          = "/Scailo.ProformaInvoicesService/DownloadItemsAsCSV"
	ProformaInvoicesService_DownloadItemsTemplateAsCSV_FullMethodName                  = "/Scailo.ProformaInvoicesService/DownloadItemsTemplateAsCSV"
	ProformaInvoicesService_UploadProformaInvoiceItems_FullMethodName                  = "/Scailo.ProformaInvoicesService/UploadProformaInvoiceItems"
	ProformaInvoicesService_ViewByID_FullMethodName                                    = "/Scailo.ProformaInvoicesService/ViewByID"
	ProformaInvoicesService_ViewByUUID_FullMethodName                                  = "/Scailo.ProformaInvoicesService/ViewByUUID"
	ProformaInvoicesService_ViewByReferenceID_FullMethodName                           = "/Scailo.ProformaInvoicesService/ViewByReferenceID"
	ProformaInvoicesService_ViewEssentialByID_FullMethodName                           = "/Scailo.ProformaInvoicesService/ViewEssentialByID"
	ProformaInvoicesService_ViewEssentialByUUID_FullMethodName                         = "/Scailo.ProformaInvoicesService/ViewEssentialByUUID"
	ProformaInvoicesService_ViewFromIDs_FullMethodName                                 = "/Scailo.ProformaInvoicesService/ViewFromIDs"
	ProformaInvoicesService_ViewAncillaryParametersByUUID_FullMethodName               = "/Scailo.ProformaInvoicesService/ViewAncillaryParametersByUUID"
	ProformaInvoicesService_ViewAll_FullMethodName                                     = "/Scailo.ProformaInvoicesService/ViewAll"
	ProformaInvoicesService_ViewAllForEntityUUID_FullMethodName                        = "/Scailo.ProformaInvoicesService/ViewAllForEntityUUID"
	ProformaInvoicesService_ViewWithPagination_FullMethodName                          = "/Scailo.ProformaInvoicesService/ViewWithPagination"
	ProformaInvoicesService_ViewAmendments_FullMethodName                              = "/Scailo.ProformaInvoicesService/ViewAmendments"
	ProformaInvoicesService_ViewProspectiveFamilies_FullMethodName                     = "/Scailo.ProformaInvoicesService/ViewProspectiveFamilies"
	ProformaInvoicesService_FilterProspectiveFamilies_FullMethodName                   = "/Scailo.ProformaInvoicesService/FilterProspectiveFamilies"
	ProformaInvoicesService_ViewProspectiveProformaInvoiceItem_FullMethodName          = "/Scailo.ProformaInvoicesService/ViewProspectiveProformaInvoiceItem"
	ProformaInvoicesService_IsDownloadable_FullMethodName                              = "/Scailo.ProformaInvoicesService/IsDownloadable"
	ProformaInvoicesService_DownloadByUUID_FullMethodName                              = "/Scailo.ProformaInvoicesService/DownloadByUUID"
	ProformaInvoicesService_ViewAssociatedSalesInvoiceInfo_FullMethodName              = "/Scailo.ProformaInvoicesService/ViewAssociatedSalesInvoiceInfo"
	ProformaInvoicesService_IsBilled_FullMethodName                                    = "/Scailo.ProformaInvoicesService/IsBilled"
	ProformaInvoicesService_ViewAddedFamilyQuantityForSource_FullMethodName            = "/Scailo.ProformaInvoicesService/ViewAddedFamilyQuantityForSource"
	ProformaInvoicesService_SearchAll_FullMethodName                                   = "/Scailo.ProformaInvoicesService/SearchAll"
	ProformaInvoicesService_Filter_FullMethodName                                      = "/Scailo.ProformaInvoicesService/Filter"
	ProformaInvoicesService_CountInStatus_FullMethodName                               = "/Scailo.ProformaInvoicesService/CountInStatus"
	ProformaInvoicesService_Count_FullMethodName                                       = "/Scailo.ProformaInvoicesService/Count"
	ProformaInvoicesService_AccruedValue_FullMethodName                                = "/Scailo.ProformaInvoicesService/AccruedValue"
	ProformaInvoicesService_DownloadAsCSV_FullMethodName                               = "/Scailo.ProformaInvoicesService/DownloadAsCSV"
)

// ProformaInvoicesServiceClient is the client API for ProformaInvoicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each proforma invoice
type ProformaInvoicesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ProformaInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ProformaInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ProformaInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ProformaInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the proforma invoice
	Autofill(ctx context.Context, in *ProformaInvoicesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Amend the proforma invoice and send for revision
	Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add multiple items to a proforma invoice
	AddMultipleProformaInvoiceItems(ctx context.Context, in *ProformaInvoicesServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a proforma invoice
	AddProformaInvoiceItem(ctx context.Context, in *ProformaInvoicesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a proforma invoice
	ModifyProformaInvoiceItem(ctx context.Context, in *ProformaInvoicesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a proforma invoice
	ApproveProformaInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a proforma invoice
	DeleteProformaInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a proforma invoice
	ReorderProformaInvoiceItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Proforma Invoice Item by ID
	ViewProformaInvoiceItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProformaInvoiceItem, error)
	// View approved proforma invoice items for given proforma invoice ID
	ViewApprovedProformaInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProformaInvoiceItemsList, error)
	// View unapproved proforma invoice items for given proforma invoice ID
	ViewUnapprovedProformaInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProformaInvoiceItemsList, error)
	// View the history of the proforma invoice item
	ViewProformaInvoiceItemHistory(ctx context.Context, in *ProformaInvoiceItemHistoryRequest, opts ...grpc.CallOption) (*ProformaInvoiceItemsList, error)
	// View approved proforma invoice items for given proforma invoice ID with pagination
	ViewPaginatedApprovedProformaInvoiceItems(ctx context.Context, in *ProformaInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*ProformaInvoicesServicePaginatedItemsResponse, error)
	// View unapproved proforma invoice items for given proforma invoice ID with pagination
	ViewPaginatedUnapprovedProformaInvoiceItems(ctx context.Context, in *ProformaInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*ProformaInvoicesServicePaginatedItemsResponse, error)
	// Search through proforma invoice items with pagination
	SearchItemsWithPagination(ctx context.Context, in *ProformaInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*ProformaInvoicesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadProformaInvoiceItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProformaInvoice, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProformaInvoice, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*ProformaInvoice, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProformaInvoice, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProformaInvoice, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ProformaInvoicesList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProformaInvoiceAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ProformaInvoicesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProformaInvoicesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ProformaInvoicesServicePaginationReq, opts ...grpc.CallOption) (*ProformaInvoicesServicePaginationResponse, error)
	// View all the amendments made
	ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error)
	// View prospective families for the given proforma invoice
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective proforma invoice item info for the given family ID and proforma invoice ID
	ViewProspectiveProformaInvoiceItem(ctx context.Context, in *ProformaInvoiceItemProspectiveInfoRequest, opts ...grpc.CallOption) (*ProformaInvoicesServiceItemCreateRequest, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download proforma invoice with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View the associated sales invoice information that is denoted by the identifier in the response for the proforma invoice that is denoted by the identifier UUID in the request
	ViewAssociatedSalesInvoiceInfo(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Goods Dispatch has been billed
	IsBilled(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// View already added quantities
	ViewAddedFamilyQuantityForSource(ctx context.Context, in *ProformaInvoicesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ProformaInvoicesServiceSearchAllReq, opts ...grpc.CallOption) (*ProformaInvoicesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ProformaInvoicesServiceFilterReq, opts ...grpc.CallOption) (*ProformaInvoicesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ProformaInvoicesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// Returns the sum of the total value of all the records that match the given criteria
	AccruedValue(ctx context.Context, in *ProformaInvoicesServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ProformaInvoicesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type proformaInvoicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProformaInvoicesServiceClient(cc grpc.ClientConnInterface) ProformaInvoicesServiceClient {
	return &proformaInvoicesServiceClient{cc}
}

func (c *proformaInvoicesServiceClient) Create(ctx context.Context, in *ProformaInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Draft(ctx context.Context, in *ProformaInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) DraftUpdate(ctx context.Context, in *ProformaInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) RevisionUpdate(ctx context.Context, in *ProformaInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Autofill(ctx context.Context, in *ProformaInvoicesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) AddMultipleProformaInvoiceItems(ctx context.Context, in *ProformaInvoicesServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_AddMultipleProformaInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) AddProformaInvoiceItem(ctx context.Context, in *ProformaInvoicesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_AddProformaInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ModifyProformaInvoiceItem(ctx context.Context, in *ProformaInvoicesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ModifyProformaInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ApproveProformaInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ApproveProformaInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) DeleteProformaInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_DeleteProformaInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ReorderProformaInvoiceItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ReorderProformaInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewProformaInvoiceItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProformaInvoiceItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoiceItem)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewProformaInvoiceItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewApprovedProformaInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProformaInvoiceItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoiceItemsList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewApprovedProformaInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewUnapprovedProformaInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProformaInvoiceItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoiceItemsList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewUnapprovedProformaInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewProformaInvoiceItemHistory(ctx context.Context, in *ProformaInvoiceItemHistoryRequest, opts ...grpc.CallOption) (*ProformaInvoiceItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoiceItemsList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewProformaInvoiceItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewPaginatedApprovedProformaInvoiceItems(ctx context.Context, in *ProformaInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*ProformaInvoicesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoicesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewPaginatedApprovedProformaInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewPaginatedUnapprovedProformaInvoiceItems(ctx context.Context, in *ProformaInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*ProformaInvoicesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoicesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewPaginatedUnapprovedProformaInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) SearchItemsWithPagination(ctx context.Context, in *ProformaInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*ProformaInvoicesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoicesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) UploadProformaInvoiceItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_UploadProformaInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProformaInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoice)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProformaInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoice)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*ProformaInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoice)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProformaInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoice)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProformaInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoice)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ProformaInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoicesList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProformaInvoiceAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoiceAncillaryParameters)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ProformaInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoicesList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProformaInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoicesList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewWithPagination(ctx context.Context, in *ProformaInvoicesServicePaginationReq, opts ...grpc.CallOption) (*ProformaInvoicesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoicesServicePaginationResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendmentLogsList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewProspectiveProformaInvoiceItem(ctx context.Context, in *ProformaInvoiceItemProspectiveInfoRequest, opts ...grpc.CallOption) (*ProformaInvoicesServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoicesServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewProspectiveProformaInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewAssociatedSalesInvoiceInfo(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewAssociatedSalesInvoiceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) IsBilled(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_IsBilled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) ViewAddedFamilyQuantityForSource(ctx context.Context, in *ProformaInvoicesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DualQuantitiesResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_ViewAddedFamilyQuantityForSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) SearchAll(ctx context.Context, in *ProformaInvoicesServiceSearchAllReq, opts ...grpc.CallOption) (*ProformaInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoicesList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Filter(ctx context.Context, in *ProformaInvoicesServiceFilterReq, opts ...grpc.CallOption) (*ProformaInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProformaInvoicesList)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) Count(ctx context.Context, in *ProformaInvoicesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) AccruedValue(ctx context.Context, in *ProformaInvoicesServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_AccruedValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proformaInvoicesServiceClient) DownloadAsCSV(ctx context.Context, in *ProformaInvoicesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProformaInvoicesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProformaInvoicesService
