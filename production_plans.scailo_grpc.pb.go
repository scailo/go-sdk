// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: production_plans.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductionPlansService_Create_FullMethodName                                     = "/Scailo.ProductionPlansService/Create"
	ProductionPlansService_Draft_FullMethodName                                      = "/Scailo.ProductionPlansService/Draft"
	ProductionPlansService_DraftUpdate_FullMethodName                                = "/Scailo.ProductionPlansService/DraftUpdate"
	ProductionPlansService_SendForVerification_FullMethodName                        = "/Scailo.ProductionPlansService/SendForVerification"
	ProductionPlansService_Verify_FullMethodName                                     = "/Scailo.ProductionPlansService/Verify"
	ProductionPlansService_Approve_FullMethodName                                    = "/Scailo.ProductionPlansService/Approve"
	ProductionPlansService_SendForRevision_FullMethodName                            = "/Scailo.ProductionPlansService/SendForRevision"
	ProductionPlansService_RevisionUpdate_FullMethodName                             = "/Scailo.ProductionPlansService/RevisionUpdate"
	ProductionPlansService_Halt_FullMethodName                                       = "/Scailo.ProductionPlansService/Halt"
	ProductionPlansService_Discard_FullMethodName                                    = "/Scailo.ProductionPlansService/Discard"
	ProductionPlansService_Restore_FullMethodName                                    = "/Scailo.ProductionPlansService/Restore"
	ProductionPlansService_Complete_FullMethodName                                   = "/Scailo.ProductionPlansService/Complete"
	ProductionPlansService_Repeat_FullMethodName                                     = "/Scailo.ProductionPlansService/Repeat"
	ProductionPlansService_Reopen_FullMethodName                                     = "/Scailo.ProductionPlansService/Reopen"
	ProductionPlansService_CommentAdd_FullMethodName                                 = "/Scailo.ProductionPlansService/CommentAdd"
	ProductionPlansService_SendEmail_FullMethodName                                  = "/Scailo.ProductionPlansService/SendEmail"
	ProductionPlansService_CreateMagicLink_FullMethodName                            = "/Scailo.ProductionPlansService/CreateMagicLink"
	ProductionPlansService_Autofill_FullMethodName                                   = "/Scailo.ProductionPlansService/Autofill"
	ProductionPlansService_IsCompletable_FullMethodName                              = "/Scailo.ProductionPlansService/IsCompletable"
	ProductionPlansService_AddProductionPlanItem_FullMethodName                      = "/Scailo.ProductionPlansService/AddProductionPlanItem"
	ProductionPlansService_ModifyProductionPlanItem_FullMethodName                   = "/Scailo.ProductionPlansService/ModifyProductionPlanItem"
	ProductionPlansService_ApproveProductionPlanItem_FullMethodName                  = "/Scailo.ProductionPlansService/ApproveProductionPlanItem"
	ProductionPlansService_DeleteProductionPlanItem_FullMethodName                   = "/Scailo.ProductionPlansService/DeleteProductionPlanItem"
	ProductionPlansService_ReorderProductionPlanItems_FullMethodName                 = "/Scailo.ProductionPlansService/ReorderProductionPlanItems"
	ProductionPlansService_ViewProductionPlanItemByID_FullMethodName                 = "/Scailo.ProductionPlansService/ViewProductionPlanItemByID"
	ProductionPlansService_ViewApprovedProductionPlanItems_FullMethodName            = "/Scailo.ProductionPlansService/ViewApprovedProductionPlanItems"
	ProductionPlansService_ViewUnapprovedProductionPlanItems_FullMethodName          = "/Scailo.ProductionPlansService/ViewUnapprovedProductionPlanItems"
	ProductionPlansService_ViewProductionPlanItemHistory_FullMethodName              = "/Scailo.ProductionPlansService/ViewProductionPlanItemHistory"
	ProductionPlansService_ViewPaginatedApprovedProductionPlanItems_FullMethodName   = "/Scailo.ProductionPlansService/ViewPaginatedApprovedProductionPlanItems"
	ProductionPlansService_ViewPaginatedUnapprovedProductionPlanItems_FullMethodName = "/Scailo.ProductionPlansService/ViewPaginatedUnapprovedProductionPlanItems"
	ProductionPlansService_SearchItemsWithPagination_FullMethodName                  = "/Scailo.ProductionPlansService/SearchItemsWithPagination"
	ProductionPlansService_DownloadItemsAsCSV_FullMethodName                         = "/Scailo.ProductionPlansService/DownloadItemsAsCSV"
	ProductionPlansService_DownloadItemsTemplateAsCSV_FullMethodName                 = "/Scailo.ProductionPlansService/DownloadItemsTemplateAsCSV"
	ProductionPlansService_UploadProductionPlanItems_FullMethodName                  = "/Scailo.ProductionPlansService/UploadProductionPlanItems"
	ProductionPlansService_ViewByID_FullMethodName                                   = "/Scailo.ProductionPlansService/ViewByID"
	ProductionPlansService_ViewByUUID_FullMethodName                                 = "/Scailo.ProductionPlansService/ViewByUUID"
	ProductionPlansService_ViewByReferenceID_FullMethodName                          = "/Scailo.ProductionPlansService/ViewByReferenceID"
	ProductionPlansService_ViewEssentialByID_FullMethodName                          = "/Scailo.ProductionPlansService/ViewEssentialByID"
	ProductionPlansService_ViewEssentialByUUID_FullMethodName                        = "/Scailo.ProductionPlansService/ViewEssentialByUUID"
	ProductionPlansService_ViewFromIDs_FullMethodName                                = "/Scailo.ProductionPlansService/ViewFromIDs"
	ProductionPlansService_ViewAncillaryParametersByUUID_FullMethodName              = "/Scailo.ProductionPlansService/ViewAncillaryParametersByUUID"
	ProductionPlansService_ViewAll_FullMethodName                                    = "/Scailo.ProductionPlansService/ViewAll"
	ProductionPlansService_ViewAllForEntityUUID_FullMethodName                       = "/Scailo.ProductionPlansService/ViewAllForEntityUUID"
	ProductionPlansService_ViewWithPagination_FullMethodName                         = "/Scailo.ProductionPlansService/ViewWithPagination"
	ProductionPlansService_ViewProspectiveFamilies_FullMethodName                    = "/Scailo.ProductionPlansService/ViewProspectiveFamilies"
	ProductionPlansService_FilterProspectiveFamilies_FullMethodName                  = "/Scailo.ProductionPlansService/FilterProspectiveFamilies"
	ProductionPlansService_ViewProspectiveProductionPlanItem_FullMethodName          = "/Scailo.ProductionPlansService/ViewProspectiveProductionPlanItem"
	ProductionPlansService_ViewRemainingProductionQuantity_FullMethodName            = "/Scailo.ProductionPlansService/ViewRemainingProductionQuantity"
	ProductionPlansService_ViewProductionStatistics_FullMethodName                   = "/Scailo.ProductionPlansService/ViewProductionStatistics"
	ProductionPlansService_ViewFamiliesInProductionPlan_FullMethodName               = "/Scailo.ProductionPlansService/ViewFamiliesInProductionPlan"
	ProductionPlansService_FilterFamiliesInProductionPlan_FullMethodName             = "/Scailo.ProductionPlansService/FilterFamiliesInProductionPlan"
	ProductionPlansService_ViewAddedFamilyQuantityForSource_FullMethodName           = "/Scailo.ProductionPlansService/ViewAddedFamilyQuantityForSource"
	ProductionPlansService_IsDownloadable_FullMethodName                             = "/Scailo.ProductionPlansService/IsDownloadable"
	ProductionPlansService_DownloadByUUID_FullMethodName                             = "/Scailo.ProductionPlansService/DownloadByUUID"
	ProductionPlansService_SearchAll_FullMethodName                                  = "/Scailo.ProductionPlansService/SearchAll"
	ProductionPlansService_Filter_FullMethodName                                     = "/Scailo.ProductionPlansService/Filter"
	ProductionPlansService_CountInStatus_FullMethodName                              = "/Scailo.ProductionPlansService/CountInStatus"
	ProductionPlansService_Count_FullMethodName                                      = "/Scailo.ProductionPlansService/Count"
	ProductionPlansService_DownloadAsCSV_FullMethodName                              = "/Scailo.ProductionPlansService/DownloadAsCSV"
)

// ProductionPlansServiceClient is the client API for ProductionPlansService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each production plan
type ProductionPlansServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ProductionPlansServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ProductionPlansServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ProductionPlansServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ProductionPlansServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Autofill the production plan
	Autofill(ctx context.Context, in *ProductionPlansServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Production Plan can be marked as completed
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Add an item to a production plan
	AddProductionPlanItem(ctx context.Context, in *ProductionPlansServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a production plan
	ModifyProductionPlanItem(ctx context.Context, in *ProductionPlansServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a production plan
	ApproveProductionPlanItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a production plan
	DeleteProductionPlanItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a production plan
	ReorderProductionPlanItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Production Plan Item by ID
	ViewProductionPlanItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionPlanItem, error)
	// View approved production plan items for given production plan ID
	ViewApprovedProductionPlanItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProductionPlansItemsList, error)
	// View unapproved production plan items for given production plan ID
	ViewUnapprovedProductionPlanItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProductionPlansItemsList, error)
	// View the history of the production plan item
	ViewProductionPlanItemHistory(ctx context.Context, in *ProductionPlanItemHistoryRequest, opts ...grpc.CallOption) (*ProductionPlansItemsList, error)
	// View approved production plan items for given production plan ID with pagination
	ViewPaginatedApprovedProductionPlanItems(ctx context.Context, in *ProductionPlanItemsSearchRequest, opts ...grpc.CallOption) (*ProductionPlansServicePaginatedItemsResponse, error)
	// View unapproved production plan items for given production plan ID with pagination
	ViewPaginatedUnapprovedProductionPlanItems(ctx context.Context, in *ProductionPlanItemsSearchRequest, opts ...grpc.CallOption) (*ProductionPlansServicePaginatedItemsResponse, error)
	// Search through production plan items with pagination
	SearchItemsWithPagination(ctx context.Context, in *ProductionPlanItemsSearchRequest, opts ...grpc.CallOption) (*ProductionPlansServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadProductionPlanItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionPlan, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionPlan, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*ProductionPlan, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionPlan, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionPlan, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ProductionPlansList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionPlanAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ProductionPlansList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionPlansList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ProductionPlansServicePaginationReq, opts ...grpc.CallOption) (*ProductionPlansServicePaginationResponse, error)
	// View prospective families for the given production plan
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective production plan item info for the given family ID and production plan ID
	ViewProspectiveProductionPlanItem(ctx context.Context, in *ProductionPlanItemProspectiveInfoRequest, opts ...grpc.CallOption) (*ProductionPlansServiceItemCreateRequest, error)
	// View the net quantity to be produced for the given family in the given production plan
	ViewRemainingProductionQuantity(ctx context.Context, in *ProductionPlanItemProspectiveInfoRequest, opts ...grpc.CallOption) (*QuantityResponse, error)
	// View production statistics of the production plan (match with all the produced items)
	ViewProductionStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionPlanProductionStatisticsList, error)
	// View families (of all family types) for the given production plan
	ViewFamiliesInProductionPlan(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter families (of all family types) for the given production plan
	FilterFamiliesInProductionPlan(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View already added quantities
	ViewAddedFamilyQuantityForSource(ctx context.Context, in *ProductionPlansServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*QuantityResponse, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download production plan with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ProductionPlansServiceSearchAllReq, opts ...grpc.CallOption) (*ProductionPlansList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ProductionPlansServiceFilterReq, opts ...grpc.CallOption) (*ProductionPlansList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ProductionPlansServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ProductionPlansServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type productionPlansServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductionPlansServiceClient(cc grpc.ClientConnInterface) ProductionPlansServiceClient {
	return &productionPlansServiceClient{cc}
}

func (c *productionPlansServiceClient) Create(ctx context.Context, in *ProductionPlansServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Draft(ctx context.Context, in *ProductionPlansServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) DraftUpdate(ctx context.Context, in *ProductionPlansServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) RevisionUpdate(ctx context.Context, in *ProductionPlansServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, ProductionPlansService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Autofill(ctx context.Context, in *ProductionPlansServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) AddProductionPlanItem(ctx context.Context, in *ProductionPlansServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_AddProductionPlanItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ModifyProductionPlanItem(ctx context.Context, in *ProductionPlansServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_ModifyProductionPlanItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ApproveProductionPlanItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_ApproveProductionPlanItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) DeleteProductionPlanItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_DeleteProductionPlanItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ReorderProductionPlanItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_ReorderProductionPlanItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewProductionPlanItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionPlanItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlanItem)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewProductionPlanItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewApprovedProductionPlanItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProductionPlansItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansItemsList)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewApprovedProductionPlanItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewUnapprovedProductionPlanItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*ProductionPlansItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansItemsList)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewUnapprovedProductionPlanItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewProductionPlanItemHistory(ctx context.Context, in *ProductionPlanItemHistoryRequest, opts ...grpc.CallOption) (*ProductionPlansItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansItemsList)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewProductionPlanItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewPaginatedApprovedProductionPlanItems(ctx context.Context, in *ProductionPlanItemsSearchRequest, opts ...grpc.CallOption) (*ProductionPlansServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewPaginatedApprovedProductionPlanItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewPaginatedUnapprovedProductionPlanItems(ctx context.Context, in *ProductionPlanItemsSearchRequest, opts ...grpc.CallOption) (*ProductionPlansServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewPaginatedUnapprovedProductionPlanItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) SearchItemsWithPagination(ctx context.Context, in *ProductionPlanItemsSearchRequest, opts ...grpc.CallOption) (*ProductionPlansServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductionPlansService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductionPlansService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) UploadProductionPlanItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, ProductionPlansService_UploadProductionPlanItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionPlan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlan)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionPlan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlan)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*ProductionPlan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlan)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ProductionPlan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlan)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionPlan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlan)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ProductionPlansList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansList)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionPlanAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlanAncillaryParameters)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ProductionPlansList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansList)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionPlansList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansList)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewWithPagination(ctx context.Context, in *ProductionPlansServicePaginationReq, opts ...grpc.CallOption) (*ProductionPlansServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansServicePaginationResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ProductionPlansService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewProspectiveProductionPlanItem(ctx context.Context, in *ProductionPlanItemProspectiveInfoRequest, opts ...grpc.CallOption) (*ProductionPlansServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewProspectiveProductionPlanItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewRemainingProductionQuantity(ctx context.Context, in *ProductionPlanItemProspectiveInfoRequest, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewRemainingProductionQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewProductionStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ProductionPlanProductionStatisticsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlanProductionStatisticsList)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewProductionStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewFamiliesInProductionPlan(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewFamiliesInProductionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) FilterFamiliesInProductionPlan(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, ProductionPlansService_FilterFamiliesInProductionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) ViewAddedFamilyQuantityForSource(ctx context.Context, in *ProductionPlansServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_ViewAddedFamilyQuantityForSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductionPlansService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) SearchAll(ctx context.Context, in *ProductionPlansServiceSearchAllReq, opts ...grpc.CallOption) (*ProductionPlansList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansList)
	err := c.cc.Invoke(ctx, ProductionPlansService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Filter(ctx context.Context, in *ProductionPlansServiceFilterReq, opts ...grpc.CallOption) (*ProductionPlansList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductionPlansList)
	err := c.cc.Invoke(ctx, ProductionPlansService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) Count(ctx context.Context, in *ProductionPlansServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ProductionPlansService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productionPlansServiceClient) DownloadAsCSV(ctx context.Context, in *ProductionPlansServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ProductionPlansService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductionPlansService
