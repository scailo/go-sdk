// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: activities_groups.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActivitiesGroupsService_Create_FullMethodName               = "/Scailo.ActivitiesGroupsService/Create"
	ActivitiesGroupsService_Draft_FullMethodName                = "/Scailo.ActivitiesGroupsService/Draft"
	ActivitiesGroupsService_DraftUpdate_FullMethodName          = "/Scailo.ActivitiesGroupsService/DraftUpdate"
	ActivitiesGroupsService_SendForVerification_FullMethodName  = "/Scailo.ActivitiesGroupsService/SendForVerification"
	ActivitiesGroupsService_Verify_FullMethodName               = "/Scailo.ActivitiesGroupsService/Verify"
	ActivitiesGroupsService_Approve_FullMethodName              = "/Scailo.ActivitiesGroupsService/Approve"
	ActivitiesGroupsService_SendForRevision_FullMethodName      = "/Scailo.ActivitiesGroupsService/SendForRevision"
	ActivitiesGroupsService_RevisionUpdate_FullMethodName       = "/Scailo.ActivitiesGroupsService/RevisionUpdate"
	ActivitiesGroupsService_Halt_FullMethodName                 = "/Scailo.ActivitiesGroupsService/Halt"
	ActivitiesGroupsService_Discard_FullMethodName              = "/Scailo.ActivitiesGroupsService/Discard"
	ActivitiesGroupsService_Restore_FullMethodName              = "/Scailo.ActivitiesGroupsService/Restore"
	ActivitiesGroupsService_CommentAdd_FullMethodName           = "/Scailo.ActivitiesGroupsService/CommentAdd"
	ActivitiesGroupsService_ViewByID_FullMethodName             = "/Scailo.ActivitiesGroupsService/ViewByID"
	ActivitiesGroupsService_ViewByUUID_FullMethodName           = "/Scailo.ActivitiesGroupsService/ViewByUUID"
	ActivitiesGroupsService_ViewEssentialByID_FullMethodName    = "/Scailo.ActivitiesGroupsService/ViewEssentialByID"
	ActivitiesGroupsService_ViewEssentialByUUID_FullMethodName  = "/Scailo.ActivitiesGroupsService/ViewEssentialByUUID"
	ActivitiesGroupsService_ViewFromIDs_FullMethodName          = "/Scailo.ActivitiesGroupsService/ViewFromIDs"
	ActivitiesGroupsService_ViewAll_FullMethodName              = "/Scailo.ActivitiesGroupsService/ViewAll"
	ActivitiesGroupsService_ViewAllForEntityUUID_FullMethodName = "/Scailo.ActivitiesGroupsService/ViewAllForEntityUUID"
	ActivitiesGroupsService_ViewWithPagination_FullMethodName   = "/Scailo.ActivitiesGroupsService/ViewWithPagination"
	ActivitiesGroupsService_ViewStatistics_FullMethodName       = "/Scailo.ActivitiesGroupsService/ViewStatistics"
	ActivitiesGroupsService_SearchAll_FullMethodName            = "/Scailo.ActivitiesGroupsService/SearchAll"
	ActivitiesGroupsService_Filter_FullMethodName               = "/Scailo.ActivitiesGroupsService/Filter"
	ActivitiesGroupsService_CountInStatus_FullMethodName        = "/Scailo.ActivitiesGroupsService/CountInStatus"
	ActivitiesGroupsService_Count_FullMethodName                = "/Scailo.ActivitiesGroupsService/Count"
	ActivitiesGroupsService_DownloadAsCSV_FullMethodName        = "/Scailo.ActivitiesGroupsService/DownloadAsCSV"
	ActivitiesGroupsService_ImportFromCSV_FullMethodName        = "/Scailo.ActivitiesGroupsService/ImportFromCSV"
)

// ActivitiesGroupsServiceClient is the client API for ActivitiesGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each activity group
type ActivitiesGroupsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ActivitiesGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ActivitiesGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ActivitiesGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ActivitiesGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityGroup, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityGroup, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityGroup, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityGroup, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ActivitiesGroupsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ActivitiesGroupsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivitiesGroupsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ActivitiesGroupsServicePaginationReq, opts ...grpc.CallOption) (*ActivitiesGroupsServicePaginationResponse, error)
	// View Statistics of Activity Group
	ViewStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityGroupStatistics, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ActivitiesGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*ActivitiesGroupsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ActivitiesGroupsServiceFilterReq, opts ...grpc.CallOption) (*ActivitiesGroupsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ActivitiesGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ActivitiesGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type activitiesGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivitiesGroupsServiceClient(cc grpc.ClientConnInterface) ActivitiesGroupsServiceClient {
	return &activitiesGroupsServiceClient{cc}
}

func (c *activitiesGroupsServiceClient) Create(ctx context.Context, in *ActivitiesGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) Draft(ctx context.Context, in *ActivitiesGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) DraftUpdate(ctx context.Context, in *ActivitiesGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) RevisionUpdate(ctx context.Context, in *ActivitiesGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityGroup)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityGroup)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityGroup)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityGroup)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ActivitiesGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesGroupsList)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ActivitiesGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesGroupsList)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivitiesGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesGroupsList)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) ViewWithPagination(ctx context.Context, in *ActivitiesGroupsServicePaginationReq, opts ...grpc.CallOption) (*ActivitiesGroupsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesGroupsServicePaginationResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) ViewStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityGroupStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityGroupStatistics)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_ViewStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) SearchAll(ctx context.Context, in *ActivitiesGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*ActivitiesGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesGroupsList)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) Filter(ctx context.Context, in *ActivitiesGroupsServiceFilterReq, opts ...grpc.CallOption) (*ActivitiesGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesGroupsList)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) Count(ctx context.Context, in *ActivitiesGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) DownloadAsCSV(ctx context.Context, in *ActivitiesGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesGroupsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, ActivitiesGroupsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivitiesGroupsService
