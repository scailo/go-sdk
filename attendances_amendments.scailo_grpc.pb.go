// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: attendances_amendments.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AttendancesAmendmentsService_Create_FullMethodName               = "/Scailo.AttendancesAmendmentsService/Create"
	AttendancesAmendmentsService_Draft_FullMethodName                = "/Scailo.AttendancesAmendmentsService/Draft"
	AttendancesAmendmentsService_DraftUpdate_FullMethodName          = "/Scailo.AttendancesAmendmentsService/DraftUpdate"
	AttendancesAmendmentsService_SendForVerification_FullMethodName  = "/Scailo.AttendancesAmendmentsService/SendForVerification"
	AttendancesAmendmentsService_Verify_FullMethodName               = "/Scailo.AttendancesAmendmentsService/Verify"
	AttendancesAmendmentsService_Approve_FullMethodName              = "/Scailo.AttendancesAmendmentsService/Approve"
	AttendancesAmendmentsService_SendForRevision_FullMethodName      = "/Scailo.AttendancesAmendmentsService/SendForRevision"
	AttendancesAmendmentsService_RevisionUpdate_FullMethodName       = "/Scailo.AttendancesAmendmentsService/RevisionUpdate"
	AttendancesAmendmentsService_Halt_FullMethodName                 = "/Scailo.AttendancesAmendmentsService/Halt"
	AttendancesAmendmentsService_Discard_FullMethodName              = "/Scailo.AttendancesAmendmentsService/Discard"
	AttendancesAmendmentsService_Restore_FullMethodName              = "/Scailo.AttendancesAmendmentsService/Restore"
	AttendancesAmendmentsService_Complete_FullMethodName             = "/Scailo.AttendancesAmendmentsService/Complete"
	AttendancesAmendmentsService_Repeat_FullMethodName               = "/Scailo.AttendancesAmendmentsService/Repeat"
	AttendancesAmendmentsService_CommentAdd_FullMethodName           = "/Scailo.AttendancesAmendmentsService/CommentAdd"
	AttendancesAmendmentsService_ViewByID_FullMethodName             = "/Scailo.AttendancesAmendmentsService/ViewByID"
	AttendancesAmendmentsService_ViewByUUID_FullMethodName           = "/Scailo.AttendancesAmendmentsService/ViewByUUID"
	AttendancesAmendmentsService_ViewEssentialByID_FullMethodName    = "/Scailo.AttendancesAmendmentsService/ViewEssentialByID"
	AttendancesAmendmentsService_ViewEssentialByUUID_FullMethodName  = "/Scailo.AttendancesAmendmentsService/ViewEssentialByUUID"
	AttendancesAmendmentsService_ViewFromIDs_FullMethodName          = "/Scailo.AttendancesAmendmentsService/ViewFromIDs"
	AttendancesAmendmentsService_ViewAll_FullMethodName              = "/Scailo.AttendancesAmendmentsService/ViewAll"
	AttendancesAmendmentsService_ViewAllForEntityUUID_FullMethodName = "/Scailo.AttendancesAmendmentsService/ViewAllForEntityUUID"
	AttendancesAmendmentsService_ViewWithPagination_FullMethodName   = "/Scailo.AttendancesAmendmentsService/ViewWithPagination"
	AttendancesAmendmentsService_SearchAll_FullMethodName            = "/Scailo.AttendancesAmendmentsService/SearchAll"
	AttendancesAmendmentsService_Filter_FullMethodName               = "/Scailo.AttendancesAmendmentsService/Filter"
	AttendancesAmendmentsService_CountInStatus_FullMethodName        = "/Scailo.AttendancesAmendmentsService/CountInStatus"
	AttendancesAmendmentsService_Count_FullMethodName                = "/Scailo.AttendancesAmendmentsService/Count"
	AttendancesAmendmentsService_CheckConflicts_FullMethodName       = "/Scailo.AttendancesAmendmentsService/CheckConflicts"
	AttendancesAmendmentsService_DownloadAsCSV_FullMethodName        = "/Scailo.AttendancesAmendmentsService/DownloadAsCSV"
)

// AttendancesAmendmentsServiceClient is the client API for AttendancesAmendmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each attendance amendment
type AttendancesAmendmentsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *AttendancesAmendmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *AttendancesAmendmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *AttendancesAmendmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *AttendancesAmendmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AttendanceAmendment, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*AttendanceAmendment, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AttendanceAmendment, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*AttendanceAmendment, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*AttendancesAmendmentsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*AttendancesAmendmentsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*AttendancesAmendmentsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *AttendancesAmendmentsServicePaginationReq, opts ...grpc.CallOption) (*AttendancesAmendmentsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *AttendancesAmendmentsServiceSearchAllReq, opts ...grpc.CallOption) (*AttendancesAmendmentsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *AttendancesAmendmentsServiceFilterReq, opts ...grpc.CallOption) (*AttendancesAmendmentsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *AttendancesAmendmentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// Check if there are any conflicts for the amendment to be approved. Returns true if there are conflicts and the amendment cannot be approved
	CheckConflicts(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*BooleanResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *AttendancesAmendmentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type attendancesAmendmentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendancesAmendmentsServiceClient(cc grpc.ClientConnInterface) AttendancesAmendmentsServiceClient {
	return &attendancesAmendmentsServiceClient{cc}
}

func (c *attendancesAmendmentsServiceClient) Create(ctx context.Context, in *AttendancesAmendmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) Draft(ctx context.Context, in *AttendancesAmendmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) DraftUpdate(ctx context.Context, in *AttendancesAmendmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) RevisionUpdate(ctx context.Context, in *AttendancesAmendmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AttendanceAmendment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendanceAmendment)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*AttendanceAmendment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendanceAmendment)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AttendanceAmendment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendanceAmendment)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*AttendanceAmendment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendanceAmendment)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*AttendancesAmendmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesAmendmentsList)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*AttendancesAmendmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesAmendmentsList)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*AttendancesAmendmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesAmendmentsList)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) ViewWithPagination(ctx context.Context, in *AttendancesAmendmentsServicePaginationReq, opts ...grpc.CallOption) (*AttendancesAmendmentsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesAmendmentsServicePaginationResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) SearchAll(ctx context.Context, in *AttendancesAmendmentsServiceSearchAllReq, opts ...grpc.CallOption) (*AttendancesAmendmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesAmendmentsList)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) Filter(ctx context.Context, in *AttendancesAmendmentsServiceFilterReq, opts ...grpc.CallOption) (*AttendancesAmendmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendancesAmendmentsList)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) Count(ctx context.Context, in *AttendancesAmendmentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) CheckConflicts(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_CheckConflicts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendancesAmendmentsServiceClient) DownloadAsCSV(ctx context.Context, in *AttendancesAmendmentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, AttendancesAmendmentsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendancesAmendmentsService
