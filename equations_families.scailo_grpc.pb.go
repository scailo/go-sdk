// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: equations_families.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EquationsFamiliesService_Create_FullMethodName                                     = "/Scailo.EquationsFamiliesService/Create"
	EquationsFamiliesService_Draft_FullMethodName                                      = "/Scailo.EquationsFamiliesService/Draft"
	EquationsFamiliesService_DraftUpdate_FullMethodName                                = "/Scailo.EquationsFamiliesService/DraftUpdate"
	EquationsFamiliesService_SendForVerification_FullMethodName                        = "/Scailo.EquationsFamiliesService/SendForVerification"
	EquationsFamiliesService_Verify_FullMethodName                                     = "/Scailo.EquationsFamiliesService/Verify"
	EquationsFamiliesService_Approve_FullMethodName                                    = "/Scailo.EquationsFamiliesService/Approve"
	EquationsFamiliesService_SendForRevision_FullMethodName                            = "/Scailo.EquationsFamiliesService/SendForRevision"
	EquationsFamiliesService_RevisionUpdate_FullMethodName                             = "/Scailo.EquationsFamiliesService/RevisionUpdate"
	EquationsFamiliesService_Halt_FullMethodName                                       = "/Scailo.EquationsFamiliesService/Halt"
	EquationsFamiliesService_Discard_FullMethodName                                    = "/Scailo.EquationsFamiliesService/Discard"
	EquationsFamiliesService_Restore_FullMethodName                                    = "/Scailo.EquationsFamiliesService/Restore"
	EquationsFamiliesService_Complete_FullMethodName                                   = "/Scailo.EquationsFamiliesService/Complete"
	EquationsFamiliesService_Repeat_FullMethodName                                     = "/Scailo.EquationsFamiliesService/Repeat"
	EquationsFamiliesService_Reopen_FullMethodName                                     = "/Scailo.EquationsFamiliesService/Reopen"
	EquationsFamiliesService_CommentAdd_FullMethodName                                 = "/Scailo.EquationsFamiliesService/CommentAdd"
	EquationsFamiliesService_CreateMagicLink_FullMethodName                            = "/Scailo.EquationsFamiliesService/CreateMagicLink"
	EquationsFamiliesService_Clone_FullMethodName                                      = "/Scailo.EquationsFamiliesService/Clone"
	EquationsFamiliesService_AddEquationFamilyItem_FullMethodName                      = "/Scailo.EquationsFamiliesService/AddEquationFamilyItem"
	EquationsFamiliesService_ModifyEquationFamilyItem_FullMethodName                   = "/Scailo.EquationsFamiliesService/ModifyEquationFamilyItem"
	EquationsFamiliesService_ApproveEquationFamilyItem_FullMethodName                  = "/Scailo.EquationsFamiliesService/ApproveEquationFamilyItem"
	EquationsFamiliesService_DeleteEquationFamilyItem_FullMethodName                   = "/Scailo.EquationsFamiliesService/DeleteEquationFamilyItem"
	EquationsFamiliesService_ReorderEquationFamilyItems_FullMethodName                 = "/Scailo.EquationsFamiliesService/ReorderEquationFamilyItems"
	EquationsFamiliesService_ViewEquationFamilyItemByID_FullMethodName                 = "/Scailo.EquationsFamiliesService/ViewEquationFamilyItemByID"
	EquationsFamiliesService_ViewApprovedEquationFamilyItems_FullMethodName            = "/Scailo.EquationsFamiliesService/ViewApprovedEquationFamilyItems"
	EquationsFamiliesService_ViewUnapprovedEquationFamilyItems_FullMethodName          = "/Scailo.EquationsFamiliesService/ViewUnapprovedEquationFamilyItems"
	EquationsFamiliesService_ViewEquationFamilyItemHistory_FullMethodName              = "/Scailo.EquationsFamiliesService/ViewEquationFamilyItemHistory"
	EquationsFamiliesService_ViewPaginatedApprovedEquationFamilyItems_FullMethodName   = "/Scailo.EquationsFamiliesService/ViewPaginatedApprovedEquationFamilyItems"
	EquationsFamiliesService_ViewPaginatedUnapprovedEquationFamilyItems_FullMethodName = "/Scailo.EquationsFamiliesService/ViewPaginatedUnapprovedEquationFamilyItems"
	EquationsFamiliesService_SearchItemsWithPagination_FullMethodName                  = "/Scailo.EquationsFamiliesService/SearchItemsWithPagination"
	EquationsFamiliesService_DownloadItemsAsCSV_FullMethodName                         = "/Scailo.EquationsFamiliesService/DownloadItemsAsCSV"
	EquationsFamiliesService_DownloadItemsTemplateAsCSV_FullMethodName                 = "/Scailo.EquationsFamiliesService/DownloadItemsTemplateAsCSV"
	EquationsFamiliesService_DownloadTreeAsCSV_FullMethodName                          = "/Scailo.EquationsFamiliesService/DownloadTreeAsCSV"
	EquationsFamiliesService_UploadEquationFamilyItems_FullMethodName                  = "/Scailo.EquationsFamiliesService/UploadEquationFamilyItems"
	EquationsFamiliesService_ViewByID_FullMethodName                                   = "/Scailo.EquationsFamiliesService/ViewByID"
	EquationsFamiliesService_ViewByUUID_FullMethodName                                 = "/Scailo.EquationsFamiliesService/ViewByUUID"
	EquationsFamiliesService_ViewByName_FullMethodName                                 = "/Scailo.EquationsFamiliesService/ViewByName"
	EquationsFamiliesService_ViewEssentialByID_FullMethodName                          = "/Scailo.EquationsFamiliesService/ViewEssentialByID"
	EquationsFamiliesService_ViewEssentialByUUID_FullMethodName                        = "/Scailo.EquationsFamiliesService/ViewEssentialByUUID"
	EquationsFamiliesService_ViewFromIDs_FullMethodName                                = "/Scailo.EquationsFamiliesService/ViewFromIDs"
	EquationsFamiliesService_ViewAll_FullMethodName                                    = "/Scailo.EquationsFamiliesService/ViewAll"
	EquationsFamiliesService_ViewAllForEntityUUID_FullMethodName                       = "/Scailo.EquationsFamiliesService/ViewAllForEntityUUID"
	EquationsFamiliesService_ViewWithPagination_FullMethodName                         = "/Scailo.EquationsFamiliesService/ViewWithPagination"
	EquationsFamiliesService_ViewForFamilyID_FullMethodName                            = "/Scailo.EquationsFamiliesService/ViewForFamilyID"
	EquationsFamiliesService_ViewProspectiveFamilies_FullMethodName                    = "/Scailo.EquationsFamiliesService/ViewProspectiveFamilies"
	EquationsFamiliesService_FilterProspectiveFamilies_FullMethodName                  = "/Scailo.EquationsFamiliesService/FilterProspectiveFamilies"
	EquationsFamiliesService_IsDownloadable_FullMethodName                             = "/Scailo.EquationsFamiliesService/IsDownloadable"
	EquationsFamiliesService_DownloadByUUID_FullMethodName                             = "/Scailo.EquationsFamiliesService/DownloadByUUID"
	EquationsFamiliesService_SearchAll_FullMethodName                                  = "/Scailo.EquationsFamiliesService/SearchAll"
	EquationsFamiliesService_Filter_FullMethodName                                     = "/Scailo.EquationsFamiliesService/Filter"
	EquationsFamiliesService_CountInStatus_FullMethodName                              = "/Scailo.EquationsFamiliesService/CountInStatus"
	EquationsFamiliesService_Count_FullMethodName                                      = "/Scailo.EquationsFamiliesService/Count"
	EquationsFamiliesService_DownloadAsCSV_FullMethodName                              = "/Scailo.EquationsFamiliesService/DownloadAsCSV"
	EquationsFamiliesService_ImportFromCSV_FullMethodName                              = "/Scailo.EquationsFamiliesService/ImportFromCSV"
)

// EquationsFamiliesServiceClient is the client API for EquationsFamiliesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each equation family
type EquationsFamiliesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *EquationsFamiliesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *EquationsFamiliesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *EquationsFamiliesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *EquationsFamiliesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	// rpc SendEmail (IdentifierWithEmailAttributes) returns (IdentifierResponse);
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Clone equation from an existing equation (denoted by the identifier)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a equation family
	AddEquationFamilyItem(ctx context.Context, in *EquationsFamiliesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a equation family
	ModifyEquationFamilyItem(ctx context.Context, in *EquationsFamiliesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a equation family
	ApproveEquationFamilyItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a equation family
	DeleteEquationFamilyItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a equation family
	ReorderEquationFamilyItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Equation Family Item by ID
	ViewEquationFamilyItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationFamilyItem, error)
	// View approved equation family items for given equation family ID
	ViewApprovedEquationFamilyItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsFamiliesItemsList, error)
	// View unapproved equation family items for given equation family ID
	ViewUnapprovedEquationFamilyItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsFamiliesItemsList, error)
	// View the history of the equation family item
	ViewEquationFamilyItemHistory(ctx context.Context, in *EquationFamilyItemHistoryRequest, opts ...grpc.CallOption) (*EquationsFamiliesItemsList, error)
	// View approved equation family items for given equation family ID with pagination
	ViewPaginatedApprovedEquationFamilyItems(ctx context.Context, in *EquationFamilyItemsSearchRequest, opts ...grpc.CallOption) (*EquationsFamiliesServicePaginatedItemsResponse, error)
	// View unapproved equation family items for given equation family ID with pagination
	ViewPaginatedUnapprovedEquationFamilyItems(ctx context.Context, in *EquationFamilyItemsSearchRequest, opts ...grpc.CallOption) (*EquationsFamiliesServicePaginatedItemsResponse, error)
	// Search through equation family items with pagination
	SearchItemsWithPagination(ctx context.Context, in *EquationFamilyItemsSearchRequest, opts ...grpc.CallOption) (*EquationsFamiliesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV file with the entire dependency tree. Useful for identifying quantities necessary from all the dependencies.
	DownloadTreeAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadEquationFamilyItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationFamily, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationFamily, error)
	// View by Name (returns the latest record in case of duplicates)
	ViewByName(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*EquationFamily, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationFamily, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationFamily, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*EquationsFamiliesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*EquationsFamiliesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationsFamiliesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *EquationsFamiliesServicePaginationReq, opts ...grpc.CallOption) (*EquationsFamiliesServicePaginationResponse, error)
	// View the latest equation for a family (denoted by the given identifier)
	ViewForFamilyID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationFamily, error)
	// View prospective families for the given equation family (without cyclical dependencies)
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier (without cyclical dependencies)
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download equation with the given IdentifierUUID
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *EquationsFamiliesServiceSearchAllReq, opts ...grpc.CallOption) (*EquationsFamiliesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *EquationsFamiliesServiceFilterReq, opts ...grpc.CallOption) (*EquationsFamiliesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *EquationsFamiliesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *EquationsFamiliesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type equationsFamiliesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquationsFamiliesServiceClient(cc grpc.ClientConnInterface) EquationsFamiliesServiceClient {
	return &equationsFamiliesServiceClient{cc}
}

func (c *equationsFamiliesServiceClient) Create(ctx context.Context, in *EquationsFamiliesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Draft(ctx context.Context, in *EquationsFamiliesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) DraftUpdate(ctx context.Context, in *EquationsFamiliesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) RevisionUpdate(ctx context.Context, in *EquationsFamiliesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) AddEquationFamilyItem(ctx context.Context, in *EquationsFamiliesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_AddEquationFamilyItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ModifyEquationFamilyItem(ctx context.Context, in *EquationsFamiliesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ModifyEquationFamilyItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ApproveEquationFamilyItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ApproveEquationFamilyItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) DeleteEquationFamilyItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_DeleteEquationFamilyItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ReorderEquationFamilyItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ReorderEquationFamilyItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewEquationFamilyItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationFamilyItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationFamilyItem)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewEquationFamilyItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewApprovedEquationFamilyItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsFamiliesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesItemsList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewApprovedEquationFamilyItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewUnapprovedEquationFamilyItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsFamiliesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesItemsList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewUnapprovedEquationFamilyItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewEquationFamilyItemHistory(ctx context.Context, in *EquationFamilyItemHistoryRequest, opts ...grpc.CallOption) (*EquationsFamiliesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesItemsList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewEquationFamilyItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewPaginatedApprovedEquationFamilyItems(ctx context.Context, in *EquationFamilyItemsSearchRequest, opts ...grpc.CallOption) (*EquationsFamiliesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewPaginatedApprovedEquationFamilyItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewPaginatedUnapprovedEquationFamilyItems(ctx context.Context, in *EquationFamilyItemsSearchRequest, opts ...grpc.CallOption) (*EquationsFamiliesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewPaginatedUnapprovedEquationFamilyItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) SearchItemsWithPagination(ctx context.Context, in *EquationFamilyItemsSearchRequest, opts ...grpc.CallOption) (*EquationsFamiliesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) DownloadTreeAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_DownloadTreeAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) UploadEquationFamilyItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_UploadEquationFamilyItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationFamily, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationFamily)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationFamily, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationFamily)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewByName(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*EquationFamily, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationFamily)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationFamily, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationFamily)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationFamily, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationFamily)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*EquationsFamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*EquationsFamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationsFamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewWithPagination(ctx context.Context, in *EquationsFamiliesServicePaginationReq, opts ...grpc.CallOption) (*EquationsFamiliesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesServicePaginationResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewForFamilyID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationFamily, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationFamily)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewForFamilyID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) SearchAll(ctx context.Context, in *EquationsFamiliesServiceSearchAllReq, opts ...grpc.CallOption) (*EquationsFamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Filter(ctx context.Context, in *EquationsFamiliesServiceFilterReq, opts ...grpc.CallOption) (*EquationsFamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsFamiliesList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) Count(ctx context.Context, in *EquationsFamiliesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) DownloadAsCSV(ctx context.Context, in *EquationsFamiliesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsFamiliesServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, EquationsFamiliesService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquationsFamiliesService
