// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: quotations_requests.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuotationsRequestsService_Create_FullMethodName                                       = "/Scailo.QuotationsRequestsService/Create"
	QuotationsRequestsService_Draft_FullMethodName                                        = "/Scailo.QuotationsRequestsService/Draft"
	QuotationsRequestsService_DraftUpdate_FullMethodName                                  = "/Scailo.QuotationsRequestsService/DraftUpdate"
	QuotationsRequestsService_SendForVerification_FullMethodName                          = "/Scailo.QuotationsRequestsService/SendForVerification"
	QuotationsRequestsService_Verify_FullMethodName                                       = "/Scailo.QuotationsRequestsService/Verify"
	QuotationsRequestsService_Approve_FullMethodName                                      = "/Scailo.QuotationsRequestsService/Approve"
	QuotationsRequestsService_SendForRevision_FullMethodName                              = "/Scailo.QuotationsRequestsService/SendForRevision"
	QuotationsRequestsService_RevisionUpdate_FullMethodName                               = "/Scailo.QuotationsRequestsService/RevisionUpdate"
	QuotationsRequestsService_Halt_FullMethodName                                         = "/Scailo.QuotationsRequestsService/Halt"
	QuotationsRequestsService_Discard_FullMethodName                                      = "/Scailo.QuotationsRequestsService/Discard"
	QuotationsRequestsService_Restore_FullMethodName                                      = "/Scailo.QuotationsRequestsService/Restore"
	QuotationsRequestsService_Complete_FullMethodName                                     = "/Scailo.QuotationsRequestsService/Complete"
	QuotationsRequestsService_Repeat_FullMethodName                                       = "/Scailo.QuotationsRequestsService/Repeat"
	QuotationsRequestsService_Reopen_FullMethodName                                       = "/Scailo.QuotationsRequestsService/Reopen"
	QuotationsRequestsService_CommentAdd_FullMethodName                                   = "/Scailo.QuotationsRequestsService/CommentAdd"
	QuotationsRequestsService_CreateMagicLink_FullMethodName                              = "/Scailo.QuotationsRequestsService/CreateMagicLink"
	QuotationsRequestsService_Autofill_FullMethodName                                     = "/Scailo.QuotationsRequestsService/Autofill"
	QuotationsRequestsService_AddQuotationRequestItem_FullMethodName                      = "/Scailo.QuotationsRequestsService/AddQuotationRequestItem"
	QuotationsRequestsService_ModifyQuotationRequestItem_FullMethodName                   = "/Scailo.QuotationsRequestsService/ModifyQuotationRequestItem"
	QuotationsRequestsService_ApproveQuotationRequestItem_FullMethodName                  = "/Scailo.QuotationsRequestsService/ApproveQuotationRequestItem"
	QuotationsRequestsService_DeleteQuotationRequestItem_FullMethodName                   = "/Scailo.QuotationsRequestsService/DeleteQuotationRequestItem"
	QuotationsRequestsService_ReorderQuotationRequestItems_FullMethodName                 = "/Scailo.QuotationsRequestsService/ReorderQuotationRequestItems"
	QuotationsRequestsService_ViewQuotationRequestItemByID_FullMethodName                 = "/Scailo.QuotationsRequestsService/ViewQuotationRequestItemByID"
	QuotationsRequestsService_ViewApprovedQuotationRequestItems_FullMethodName            = "/Scailo.QuotationsRequestsService/ViewApprovedQuotationRequestItems"
	QuotationsRequestsService_ViewUnapprovedQuotationRequestItems_FullMethodName          = "/Scailo.QuotationsRequestsService/ViewUnapprovedQuotationRequestItems"
	QuotationsRequestsService_ViewQuotationRequestItemHistory_FullMethodName              = "/Scailo.QuotationsRequestsService/ViewQuotationRequestItemHistory"
	QuotationsRequestsService_ViewPaginatedApprovedQuotationRequestItems_FullMethodName   = "/Scailo.QuotationsRequestsService/ViewPaginatedApprovedQuotationRequestItems"
	QuotationsRequestsService_ViewPaginatedUnapprovedQuotationRequestItems_FullMethodName = "/Scailo.QuotationsRequestsService/ViewPaginatedUnapprovedQuotationRequestItems"
	QuotationsRequestsService_SearchItemsWithPagination_FullMethodName                    = "/Scailo.QuotationsRequestsService/SearchItemsWithPagination"
	QuotationsRequestsService_DownloadItemsAsCSV_FullMethodName                           = "/Scailo.QuotationsRequestsService/DownloadItemsAsCSV"
	QuotationsRequestsService_DownloadItemsTemplateAsCSV_FullMethodName                   = "/Scailo.QuotationsRequestsService/DownloadItemsTemplateAsCSV"
	QuotationsRequestsService_UploadQuotationRequestItems_FullMethodName                  = "/Scailo.QuotationsRequestsService/UploadQuotationRequestItems"
	QuotationsRequestsService_ViewByID_FullMethodName                                     = "/Scailo.QuotationsRequestsService/ViewByID"
	QuotationsRequestsService_ViewByUUID_FullMethodName                                   = "/Scailo.QuotationsRequestsService/ViewByUUID"
	QuotationsRequestsService_ViewByReferenceID_FullMethodName                            = "/Scailo.QuotationsRequestsService/ViewByReferenceID"
	QuotationsRequestsService_ViewEssentialByID_FullMethodName                            = "/Scailo.QuotationsRequestsService/ViewEssentialByID"
	QuotationsRequestsService_ViewEssentialByUUID_FullMethodName                          = "/Scailo.QuotationsRequestsService/ViewEssentialByUUID"
	QuotationsRequestsService_ViewFromIDs_FullMethodName                                  = "/Scailo.QuotationsRequestsService/ViewFromIDs"
	QuotationsRequestsService_ViewAncillaryParametersByUUID_FullMethodName                = "/Scailo.QuotationsRequestsService/ViewAncillaryParametersByUUID"
	QuotationsRequestsService_ViewAll_FullMethodName                                      = "/Scailo.QuotationsRequestsService/ViewAll"
	QuotationsRequestsService_ViewAllForEntityUUID_FullMethodName                         = "/Scailo.QuotationsRequestsService/ViewAllForEntityUUID"
	QuotationsRequestsService_ViewWithPagination_FullMethodName                           = "/Scailo.QuotationsRequestsService/ViewWithPagination"
	QuotationsRequestsService_IsDownloadable_FullMethodName                               = "/Scailo.QuotationsRequestsService/IsDownloadable"
	QuotationsRequestsService_DownloadByUUID_FullMethodName                               = "/Scailo.QuotationsRequestsService/DownloadByUUID"
	QuotationsRequestsService_SearchAll_FullMethodName                                    = "/Scailo.QuotationsRequestsService/SearchAll"
	QuotationsRequestsService_Filter_FullMethodName                                       = "/Scailo.QuotationsRequestsService/Filter"
	QuotationsRequestsService_CountInStatus_FullMethodName                                = "/Scailo.QuotationsRequestsService/CountInStatus"
	QuotationsRequestsService_Count_FullMethodName                                        = "/Scailo.QuotationsRequestsService/Count"
	QuotationsRequestsService_DownloadAsCSV_FullMethodName                                = "/Scailo.QuotationsRequestsService/DownloadAsCSV"
)

// QuotationsRequestsServiceClient is the client API for QuotationsRequestsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each quotation request
type QuotationsRequestsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *QuotationsRequestsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *QuotationsRequestsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *QuotationsRequestsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *QuotationsRequestsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Autofill the quotation request (from the associated purchase enquiry)
	Autofill(ctx context.Context, in *QuotationsRequestsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a quotation request
	AddQuotationRequestItem(ctx context.Context, in *QuotationsRequestsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a quotation request
	ModifyQuotationRequestItem(ctx context.Context, in *QuotationsRequestsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a quotation request
	ApproveQuotationRequestItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a quotation request
	DeleteQuotationRequestItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a quotation request
	ReorderQuotationRequestItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View quotation request Item by ID
	ViewQuotationRequestItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationRequestItem, error)
	// View approved quotation request items for given quotation request ID
	ViewApprovedQuotationRequestItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QuotationsRequestsItemsList, error)
	// View unapproved quotation request items for given quotation request ID
	ViewUnapprovedQuotationRequestItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QuotationsRequestsItemsList, error)
	// View the history of the quotation request item
	ViewQuotationRequestItemHistory(ctx context.Context, in *QuotationRequestItemHistoryRequest, opts ...grpc.CallOption) (*QuotationsRequestsItemsList, error)
	// View approved quotation request items for given quotation request ID with pagination
	ViewPaginatedApprovedQuotationRequestItems(ctx context.Context, in *QuotationRequestItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsRequestsServicePaginatedItemsResponse, error)
	// View unapproved quotation request items for given quotation request ID with pagination
	ViewPaginatedUnapprovedQuotationRequestItems(ctx context.Context, in *QuotationRequestItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsRequestsServicePaginatedItemsResponse, error)
	// Search through quotation request items with pagination
	SearchItemsWithPagination(ctx context.Context, in *QuotationRequestItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsRequestsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadQuotationRequestItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationRequest, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationRequest, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*QuotationRequest, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationRequest, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationRequest, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*QuotationsRequestsList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationRequestAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*QuotationsRequestsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationsRequestsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *QuotationsRequestsServicePaginationReq, opts ...grpc.CallOption) (*QuotationsRequestsServicePaginationResponse, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download quotation request with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *QuotationsRequestsServiceSearchAllReq, opts ...grpc.CallOption) (*QuotationsRequestsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *QuotationsRequestsServiceFilterReq, opts ...grpc.CallOption) (*QuotationsRequestsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *QuotationsRequestsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *QuotationsRequestsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type quotationsRequestsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotationsRequestsServiceClient(cc grpc.ClientConnInterface) QuotationsRequestsServiceClient {
	return &quotationsRequestsServiceClient{cc}
}

func (c *quotationsRequestsServiceClient) Create(ctx context.Context, in *QuotationsRequestsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Draft(ctx context.Context, in *QuotationsRequestsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) DraftUpdate(ctx context.Context, in *QuotationsRequestsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) RevisionUpdate(ctx context.Context, in *QuotationsRequestsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Autofill(ctx context.Context, in *QuotationsRequestsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) AddQuotationRequestItem(ctx context.Context, in *QuotationsRequestsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_AddQuotationRequestItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ModifyQuotationRequestItem(ctx context.Context, in *QuotationsRequestsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ModifyQuotationRequestItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ApproveQuotationRequestItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ApproveQuotationRequestItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) DeleteQuotationRequestItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_DeleteQuotationRequestItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ReorderQuotationRequestItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ReorderQuotationRequestItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewQuotationRequestItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationRequestItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationRequestItem)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewQuotationRequestItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewApprovedQuotationRequestItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QuotationsRequestsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsItemsList)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewApprovedQuotationRequestItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewUnapprovedQuotationRequestItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QuotationsRequestsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsItemsList)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewUnapprovedQuotationRequestItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewQuotationRequestItemHistory(ctx context.Context, in *QuotationRequestItemHistoryRequest, opts ...grpc.CallOption) (*QuotationsRequestsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsItemsList)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewQuotationRequestItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewPaginatedApprovedQuotationRequestItems(ctx context.Context, in *QuotationRequestItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsRequestsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewPaginatedApprovedQuotationRequestItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewPaginatedUnapprovedQuotationRequestItems(ctx context.Context, in *QuotationRequestItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsRequestsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewPaginatedUnapprovedQuotationRequestItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) SearchItemsWithPagination(ctx context.Context, in *QuotationRequestItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsRequestsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) UploadQuotationRequestItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_UploadQuotationRequestItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationRequest)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationRequest)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*QuotationRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationRequest)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationRequest)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationRequest)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*QuotationsRequestsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsList)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationRequestAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationRequestAncillaryParameters)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*QuotationsRequestsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsList)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationsRequestsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsList)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) ViewWithPagination(ctx context.Context, in *QuotationsRequestsServicePaginationReq, opts ...grpc.CallOption) (*QuotationsRequestsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsServicePaginationResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) SearchAll(ctx context.Context, in *QuotationsRequestsServiceSearchAllReq, opts ...grpc.CallOption) (*QuotationsRequestsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsList)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Filter(ctx context.Context, in *QuotationsRequestsServiceFilterReq, opts ...grpc.CallOption) (*QuotationsRequestsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsRequestsList)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) Count(ctx context.Context, in *QuotationsRequestsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsRequestsServiceClient) DownloadAsCSV(ctx context.Context, in *QuotationsRequestsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QuotationsRequestsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotationsRequestsService
