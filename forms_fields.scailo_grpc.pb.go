// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: forms_fields.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FormsFieldsService_Create_FullMethodName               = "/Scailo.FormsFieldsService/Create"
	FormsFieldsService_Update_FullMethodName               = "/Scailo.FormsFieldsService/Update"
	FormsFieldsService_Discard_FullMethodName              = "/Scailo.FormsFieldsService/Discard"
	FormsFieldsService_Restore_FullMethodName              = "/Scailo.FormsFieldsService/Restore"
	FormsFieldsService_ViewByID_FullMethodName             = "/Scailo.FormsFieldsService/ViewByID"
	FormsFieldsService_ViewByUUID_FullMethodName           = "/Scailo.FormsFieldsService/ViewByUUID"
	FormsFieldsService_ViewByCode_FullMethodName           = "/Scailo.FormsFieldsService/ViewByCode"
	FormsFieldsService_ViewEssentialByID_FullMethodName    = "/Scailo.FormsFieldsService/ViewEssentialByID"
	FormsFieldsService_ViewEssentialByUUID_FullMethodName  = "/Scailo.FormsFieldsService/ViewEssentialByUUID"
	FormsFieldsService_ViewFromIDs_FullMethodName          = "/Scailo.FormsFieldsService/ViewFromIDs"
	FormsFieldsService_ViewAll_FullMethodName              = "/Scailo.FormsFieldsService/ViewAll"
	FormsFieldsService_ViewAllForEntityUUID_FullMethodName = "/Scailo.FormsFieldsService/ViewAllForEntityUUID"
	FormsFieldsService_ViewWithPagination_FullMethodName   = "/Scailo.FormsFieldsService/ViewWithPagination"
	FormsFieldsService_SearchAll_FullMethodName            = "/Scailo.FormsFieldsService/SearchAll"
	FormsFieldsService_Filter_FullMethodName               = "/Scailo.FormsFieldsService/Filter"
	FormsFieldsService_Count_FullMethodName                = "/Scailo.FormsFieldsService/Count"
	FormsFieldsService_DownloadAsCSV_FullMethodName        = "/Scailo.FormsFieldsService/DownloadAsCSV"
	FormsFieldsService_ImportFromCSV_FullMethodName        = "/Scailo.FormsFieldsService/ImportFromCSV"
)

// FormsFieldsServiceClient is the client API for FormsFieldsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the methods applicable on each form field
type FormsFieldsServiceClient interface {
	// Create a form field
	Create(ctx context.Context, in *FormsFieldsServiceCreateRequest, opts ...grpc.CallOption) (*FormField, error)
	// Update a form field
	Update(ctx context.Context, in *FormsFieldsServiceUpdateRequest, opts ...grpc.CallOption) (*FormField, error)
	// Discard the form field
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore the form field
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FormField, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormField, error)
	// View by Code
	ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FormField, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FormField, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormField, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*FormsFieldsList, error)
	// View all forms fields
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*FormsFieldsList, error)
	// View all forms fields with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormsFieldsList, error)
	// View forms fields with pagination
	ViewWithPagination(ctx context.Context, in *FormsFieldsServicePaginationReq, opts ...grpc.CallOption) (*FormFieldPaginationResp, error)
	// View all forms fields that match the given search key
	SearchAll(ctx context.Context, in *FormsFieldsServiceSearchAllReq, opts ...grpc.CallOption) (*FormsFieldsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *FormsFieldsServiceFilterReq, opts ...grpc.CallOption) (*FormsFieldsList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *FormsFieldsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *FormsFieldsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type formsFieldsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormsFieldsServiceClient(cc grpc.ClientConnInterface) FormsFieldsServiceClient {
	return &formsFieldsServiceClient{cc}
}

func (c *formsFieldsServiceClient) Create(ctx context.Context, in *FormsFieldsServiceCreateRequest, opts ...grpc.CallOption) (*FormField, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormField)
	err := c.cc.Invoke(ctx, FormsFieldsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) Update(ctx context.Context, in *FormsFieldsServiceUpdateRequest, opts ...grpc.CallOption) (*FormField, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormField)
	err := c.cc.Invoke(ctx, FormsFieldsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FormsFieldsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FormsFieldsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FormField, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormField)
	err := c.cc.Invoke(ctx, FormsFieldsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormField, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormField)
	err := c.cc.Invoke(ctx, FormsFieldsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FormField, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormField)
	err := c.cc.Invoke(ctx, FormsFieldsService_ViewByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FormField, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormField)
	err := c.cc.Invoke(ctx, FormsFieldsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormField, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormField)
	err := c.cc.Invoke(ctx, FormsFieldsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*FormsFieldsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormsFieldsList)
	err := c.cc.Invoke(ctx, FormsFieldsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*FormsFieldsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormsFieldsList)
	err := c.cc.Invoke(ctx, FormsFieldsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FormsFieldsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormsFieldsList)
	err := c.cc.Invoke(ctx, FormsFieldsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) ViewWithPagination(ctx context.Context, in *FormsFieldsServicePaginationReq, opts ...grpc.CallOption) (*FormFieldPaginationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormFieldPaginationResp)
	err := c.cc.Invoke(ctx, FormsFieldsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) SearchAll(ctx context.Context, in *FormsFieldsServiceSearchAllReq, opts ...grpc.CallOption) (*FormsFieldsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormsFieldsList)
	err := c.cc.Invoke(ctx, FormsFieldsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) Filter(ctx context.Context, in *FormsFieldsServiceFilterReq, opts ...grpc.CallOption) (*FormsFieldsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormsFieldsList)
	err := c.cc.Invoke(ctx, FormsFieldsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) Count(ctx context.Context, in *FormsFieldsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, FormsFieldsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) DownloadAsCSV(ctx context.Context, in *FormsFieldsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, FormsFieldsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formsFieldsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, FormsFieldsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormsFieldsService
