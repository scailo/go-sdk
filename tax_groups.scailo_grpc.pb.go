// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: tax_groups.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaxGroupsService_Create_FullMethodName                      = "/Scailo.TaxGroupsService/Create"
	TaxGroupsService_Draft_FullMethodName                       = "/Scailo.TaxGroupsService/Draft"
	TaxGroupsService_DraftUpdate_FullMethodName                 = "/Scailo.TaxGroupsService/DraftUpdate"
	TaxGroupsService_SendForVerification_FullMethodName         = "/Scailo.TaxGroupsService/SendForVerification"
	TaxGroupsService_Verify_FullMethodName                      = "/Scailo.TaxGroupsService/Verify"
	TaxGroupsService_Approve_FullMethodName                     = "/Scailo.TaxGroupsService/Approve"
	TaxGroupsService_SendForRevision_FullMethodName             = "/Scailo.TaxGroupsService/SendForRevision"
	TaxGroupsService_RevisionUpdate_FullMethodName              = "/Scailo.TaxGroupsService/RevisionUpdate"
	TaxGroupsService_Halt_FullMethodName                        = "/Scailo.TaxGroupsService/Halt"
	TaxGroupsService_Discard_FullMethodName                     = "/Scailo.TaxGroupsService/Discard"
	TaxGroupsService_Restore_FullMethodName                     = "/Scailo.TaxGroupsService/Restore"
	TaxGroupsService_CommentAdd_FullMethodName                  = "/Scailo.TaxGroupsService/CommentAdd"
	TaxGroupsService_AddTaxGroupItem_FullMethodName             = "/Scailo.TaxGroupsService/AddTaxGroupItem"
	TaxGroupsService_ModifyTaxGroupItem_FullMethodName          = "/Scailo.TaxGroupsService/ModifyTaxGroupItem"
	TaxGroupsService_ApproveTaxGroupItem_FullMethodName         = "/Scailo.TaxGroupsService/ApproveTaxGroupItem"
	TaxGroupsService_DeleteTaxGroupItem_FullMethodName          = "/Scailo.TaxGroupsService/DeleteTaxGroupItem"
	TaxGroupsService_ReorderTaxGroupItems_FullMethodName        = "/Scailo.TaxGroupsService/ReorderTaxGroupItems"
	TaxGroupsService_ViewTaxGroupItemByID_FullMethodName        = "/Scailo.TaxGroupsService/ViewTaxGroupItemByID"
	TaxGroupsService_ViewApprovedTaxGroupItems_FullMethodName   = "/Scailo.TaxGroupsService/ViewApprovedTaxGroupItems"
	TaxGroupsService_ViewUnapprovedTaxGroupItems_FullMethodName = "/Scailo.TaxGroupsService/ViewUnapprovedTaxGroupItems"
	TaxGroupsService_ViewTaxGroupItemHistory_FullMethodName     = "/Scailo.TaxGroupsService/ViewTaxGroupItemHistory"
	TaxGroupsService_ViewByID_FullMethodName                    = "/Scailo.TaxGroupsService/ViewByID"
	TaxGroupsService_ViewByUUID_FullMethodName                  = "/Scailo.TaxGroupsService/ViewByUUID"
	TaxGroupsService_ViewEssentialByID_FullMethodName           = "/Scailo.TaxGroupsService/ViewEssentialByID"
	TaxGroupsService_ViewEssentialByUUID_FullMethodName         = "/Scailo.TaxGroupsService/ViewEssentialByUUID"
	TaxGroupsService_ViewFromIDs_FullMethodName                 = "/Scailo.TaxGroupsService/ViewFromIDs"
	TaxGroupsService_ViewAll_FullMethodName                     = "/Scailo.TaxGroupsService/ViewAll"
	TaxGroupsService_ViewAllForEntityUUID_FullMethodName        = "/Scailo.TaxGroupsService/ViewAllForEntityUUID"
	TaxGroupsService_ViewWithPagination_FullMethodName          = "/Scailo.TaxGroupsService/ViewWithPagination"
	TaxGroupsService_SearchAll_FullMethodName                   = "/Scailo.TaxGroupsService/SearchAll"
	TaxGroupsService_Filter_FullMethodName                      = "/Scailo.TaxGroupsService/Filter"
	TaxGroupsService_CountInStatus_FullMethodName               = "/Scailo.TaxGroupsService/CountInStatus"
	TaxGroupsService_Count_FullMethodName                       = "/Scailo.TaxGroupsService/Count"
	TaxGroupsService_DownloadAsCSV_FullMethodName               = "/Scailo.TaxGroupsService/DownloadAsCSV"
	TaxGroupsService_ImportFromCSV_FullMethodName               = "/Scailo.TaxGroupsService/ImportFromCSV"
)

// TaxGroupsServiceClient is the client API for TaxGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each tax group
type TaxGroupsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *TaxGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *TaxGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *TaxGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *TaxGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a param to a tax group
	AddTaxGroupItem(ctx context.Context, in *TaxGroupsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify a param in a tax group
	ModifyTaxGroupItem(ctx context.Context, in *TaxGroupsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a param in a tax group
	ApproveTaxGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a param in a tax group
	DeleteTaxGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder params in a tax group
	ReorderTaxGroupItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Tax Group Item by ID
	ViewTaxGroupItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*TaxGroupItem, error)
	// View approved tax group params for given tax group ID
	ViewApprovedTaxGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*TaxGroupsItemsList, error)
	// View unapproved tax group params for given tax group ID
	ViewUnapprovedTaxGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*TaxGroupsItemsList, error)
	// View the history of the tax group item
	ViewTaxGroupItemHistory(ctx context.Context, in *TaxGroupItemHistoryRequest, opts ...grpc.CallOption) (*TaxGroupsItemsList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*TaxGroup, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*TaxGroup, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*TaxGroup, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*TaxGroup, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*TaxGroupsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*TaxGroupsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*TaxGroupsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *TaxGroupsServicePaginationReq, opts ...grpc.CallOption) (*TaxGroupsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *TaxGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*TaxGroupsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *TaxGroupsServiceFilterReq, opts ...grpc.CallOption) (*TaxGroupsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *TaxGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *TaxGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type taxGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaxGroupsServiceClient(cc grpc.ClientConnInterface) TaxGroupsServiceClient {
	return &taxGroupsServiceClient{cc}
}

func (c *taxGroupsServiceClient) Create(ctx context.Context, in *TaxGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) Draft(ctx context.Context, in *TaxGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) DraftUpdate(ctx context.Context, in *TaxGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) RevisionUpdate(ctx context.Context, in *TaxGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) AddTaxGroupItem(ctx context.Context, in *TaxGroupsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_AddTaxGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ModifyTaxGroupItem(ctx context.Context, in *TaxGroupsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_ModifyTaxGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ApproveTaxGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_ApproveTaxGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) DeleteTaxGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_DeleteTaxGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ReorderTaxGroupItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_ReorderTaxGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewTaxGroupItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*TaxGroupItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroupItem)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewTaxGroupItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewApprovedTaxGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*TaxGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroupsItemsList)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewApprovedTaxGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewUnapprovedTaxGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*TaxGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroupsItemsList)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewUnapprovedTaxGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewTaxGroupItemHistory(ctx context.Context, in *TaxGroupItemHistoryRequest, opts ...grpc.CallOption) (*TaxGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroupsItemsList)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewTaxGroupItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*TaxGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroup)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*TaxGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroup)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*TaxGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroup)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*TaxGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroup)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*TaxGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroupsList)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*TaxGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroupsList)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*TaxGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroupsList)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ViewWithPagination(ctx context.Context, in *TaxGroupsServicePaginationReq, opts ...grpc.CallOption) (*TaxGroupsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroupsServicePaginationResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) SearchAll(ctx context.Context, in *TaxGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*TaxGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroupsList)
	err := c.cc.Invoke(ctx, TaxGroupsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) Filter(ctx context.Context, in *TaxGroupsServiceFilterReq, opts ...grpc.CallOption) (*TaxGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaxGroupsList)
	err := c.cc.Invoke(ctx, TaxGroupsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) Count(ctx context.Context, in *TaxGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, TaxGroupsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) DownloadAsCSV(ctx context.Context, in *TaxGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, TaxGroupsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taxGroupsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, TaxGroupsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaxGroupsService
