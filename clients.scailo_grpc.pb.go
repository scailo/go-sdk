// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: clients.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientsService_Create_FullMethodName                          = "/Scailo.ClientsService/Create"
	ClientsService_Draft_FullMethodName                           = "/Scailo.ClientsService/Draft"
	ClientsService_DraftUpdate_FullMethodName                     = "/Scailo.ClientsService/DraftUpdate"
	ClientsService_SendForVerification_FullMethodName             = "/Scailo.ClientsService/SendForVerification"
	ClientsService_Verify_FullMethodName                          = "/Scailo.ClientsService/Verify"
	ClientsService_Approve_FullMethodName                         = "/Scailo.ClientsService/Approve"
	ClientsService_SendForRevision_FullMethodName                 = "/Scailo.ClientsService/SendForRevision"
	ClientsService_RevisionUpdate_FullMethodName                  = "/Scailo.ClientsService/RevisionUpdate"
	ClientsService_Halt_FullMethodName                            = "/Scailo.ClientsService/Halt"
	ClientsService_Discard_FullMethodName                         = "/Scailo.ClientsService/Discard"
	ClientsService_Restore_FullMethodName                         = "/Scailo.ClientsService/Restore"
	ClientsService_CommentAdd_FullMethodName                      = "/Scailo.ClientsService/CommentAdd"
	ClientsService_AddClientUser_FullMethodName                   = "/Scailo.ClientsService/AddClientUser"
	ClientsService_ApproveClientUser_FullMethodName               = "/Scailo.ClientsService/ApproveClientUser"
	ClientsService_DeleteClientUser_FullMethodName                = "/Scailo.ClientsService/DeleteClientUser"
	ClientsService_ViewClientUserByID_FullMethodName              = "/Scailo.ClientsService/ViewClientUserByID"
	ClientsService_ViewClientUsers_FullMethodName                 = "/Scailo.ClientsService/ViewClientUsers"
	ClientsService_SearchClientUsersWithPagination_FullMethodName = "/Scailo.ClientsService/SearchClientUsersWithPagination"
	ClientsService_ViewByID_FullMethodName                        = "/Scailo.ClientsService/ViewByID"
	ClientsService_ViewByUUID_FullMethodName                      = "/Scailo.ClientsService/ViewByUUID"
	ClientsService_ViewEssentialByID_FullMethodName               = "/Scailo.ClientsService/ViewEssentialByID"
	ClientsService_ViewEssentialByUUID_FullMethodName             = "/Scailo.ClientsService/ViewEssentialByUUID"
	ClientsService_ViewEssentialByEmail_FullMethodName            = "/Scailo.ClientsService/ViewEssentialByEmail"
	ClientsService_ViewEssentialByPhone_FullMethodName            = "/Scailo.ClientsService/ViewEssentialByPhone"
	ClientsService_ViewFromIDs_FullMethodName                     = "/Scailo.ClientsService/ViewFromIDs"
	ClientsService_ViewAll_FullMethodName                         = "/Scailo.ClientsService/ViewAll"
	ClientsService_ViewAllForEntityUUID_FullMethodName            = "/Scailo.ClientsService/ViewAllForEntityUUID"
	ClientsService_ViewWithPagination_FullMethodName              = "/Scailo.ClientsService/ViewWithPagination"
	ClientsService_SearchAll_FullMethodName                       = "/Scailo.ClientsService/SearchAll"
	ClientsService_Filter_FullMethodName                          = "/Scailo.ClientsService/Filter"
	ClientsService_CountInStatus_FullMethodName                   = "/Scailo.ClientsService/CountInStatus"
	ClientsService_Count_FullMethodName                           = "/Scailo.ClientsService/Count"
	ClientsService_DownloadAsCSV_FullMethodName                   = "/Scailo.ClientsService/DownloadAsCSV"
	ClientsService_ImportFromCSV_FullMethodName                   = "/Scailo.ClientsService/ImportFromCSV"
)

// ClientsServiceClient is the client API for ClientsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each client
type ClientsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ClientsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ClientsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ClientsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ClientsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a user
	AddClientUser(ctx context.Context, in *ClientsServiceUserCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a user
	ApproveClientUser(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a user
	DeleteClientUser(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a user for the given ID
	ViewClientUserByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientUser, error)
	// View all users for given client ID
	ViewClientUsers(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientUsersList, error)
	// Search through client users with pagination
	SearchClientUsersWithPagination(ctx context.Context, in *ClientUsersSearchRequest, opts ...grpc.CallOption) (*ClientsServicePaginatedUsersResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Client, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Client, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Client, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Client, error)
	// View only essential components (without logs) that matches the first given email address
	ViewEssentialByEmail(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Client, error)
	// View only essential components (without logs) that matches the first given phone number
	ViewEssentialByPhone(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Client, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ClientsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ClientsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ClientsServicePaginationReq, opts ...grpc.CallOption) (*ClientsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ClientsServiceSearchAllReq, opts ...grpc.CallOption) (*ClientsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ClientsServiceFilterReq, opts ...grpc.CallOption) (*ClientsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *ClientsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ClientsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type clientsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientsServiceClient(cc grpc.ClientConnInterface) ClientsServiceClient {
	return &clientsServiceClient{cc}
}

func (c *clientsServiceClient) Create(ctx context.Context, in *ClientsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) Draft(ctx context.Context, in *ClientsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) DraftUpdate(ctx context.Context, in *ClientsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) RevisionUpdate(ctx context.Context, in *ClientsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) AddClientUser(ctx context.Context, in *ClientsServiceUserCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_AddClientUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ApproveClientUser(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_ApproveClientUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) DeleteClientUser(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ClientsService_DeleteClientUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewClientUserByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientUser, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientUser)
	err := c.cc.Invoke(ctx, ClientsService_ViewClientUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewClientUsers(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ClientUsersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientUsersList)
	err := c.cc.Invoke(ctx, ClientsService_ViewClientUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) SearchClientUsersWithPagination(ctx context.Context, in *ClientUsersSearchRequest, opts ...grpc.CallOption) (*ClientsServicePaginatedUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsServicePaginatedUsersResponse)
	err := c.cc.Invoke(ctx, ClientsService_SearchClientUsersWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, ClientsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, ClientsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, ClientsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, ClientsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewEssentialByEmail(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, ClientsService_ViewEssentialByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewEssentialByPhone(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, ClientsService_ViewEssentialByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ClientsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsList)
	err := c.cc.Invoke(ctx, ClientsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ClientsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsList)
	err := c.cc.Invoke(ctx, ClientsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ClientsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsList)
	err := c.cc.Invoke(ctx, ClientsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ViewWithPagination(ctx context.Context, in *ClientsServicePaginationReq, opts ...grpc.CallOption) (*ClientsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsServicePaginationResponse)
	err := c.cc.Invoke(ctx, ClientsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) SearchAll(ctx context.Context, in *ClientsServiceSearchAllReq, opts ...grpc.CallOption) (*ClientsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsList)
	err := c.cc.Invoke(ctx, ClientsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) Filter(ctx context.Context, in *ClientsServiceFilterReq, opts ...grpc.CallOption) (*ClientsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsList)
	err := c.cc.Invoke(ctx, ClientsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ClientsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) Count(ctx context.Context, in *ClientsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ClientsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) DownloadAsCSV(ctx context.Context, in *ClientsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ClientsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, ClientsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientsService
