// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: purchases_payments.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PurchasesPaymentsService_Create_FullMethodName                        = "/Scailo.PurchasesPaymentsService/Create"
	PurchasesPaymentsService_Draft_FullMethodName                         = "/Scailo.PurchasesPaymentsService/Draft"
	PurchasesPaymentsService_DraftUpdate_FullMethodName                   = "/Scailo.PurchasesPaymentsService/DraftUpdate"
	PurchasesPaymentsService_SendForVerification_FullMethodName           = "/Scailo.PurchasesPaymentsService/SendForVerification"
	PurchasesPaymentsService_Verify_FullMethodName                        = "/Scailo.PurchasesPaymentsService/Verify"
	PurchasesPaymentsService_Approve_FullMethodName                       = "/Scailo.PurchasesPaymentsService/Approve"
	PurchasesPaymentsService_SendForRevision_FullMethodName               = "/Scailo.PurchasesPaymentsService/SendForRevision"
	PurchasesPaymentsService_RevisionUpdate_FullMethodName                = "/Scailo.PurchasesPaymentsService/RevisionUpdate"
	PurchasesPaymentsService_Halt_FullMethodName                          = "/Scailo.PurchasesPaymentsService/Halt"
	PurchasesPaymentsService_Discard_FullMethodName                       = "/Scailo.PurchasesPaymentsService/Discard"
	PurchasesPaymentsService_Restore_FullMethodName                       = "/Scailo.PurchasesPaymentsService/Restore"
	PurchasesPaymentsService_Complete_FullMethodName                      = "/Scailo.PurchasesPaymentsService/Complete"
	PurchasesPaymentsService_Repeat_FullMethodName                        = "/Scailo.PurchasesPaymentsService/Repeat"
	PurchasesPaymentsService_CommentAdd_FullMethodName                    = "/Scailo.PurchasesPaymentsService/CommentAdd"
	PurchasesPaymentsService_CreateMagicLink_FullMethodName               = "/Scailo.PurchasesPaymentsService/CreateMagicLink"
	PurchasesPaymentsService_ViewByID_FullMethodName                      = "/Scailo.PurchasesPaymentsService/ViewByID"
	PurchasesPaymentsService_ViewByUUID_FullMethodName                    = "/Scailo.PurchasesPaymentsService/ViewByUUID"
	PurchasesPaymentsService_ViewEssentialByID_FullMethodName             = "/Scailo.PurchasesPaymentsService/ViewEssentialByID"
	PurchasesPaymentsService_ViewEssentialByUUID_FullMethodName           = "/Scailo.PurchasesPaymentsService/ViewEssentialByUUID"
	PurchasesPaymentsService_ViewFromIDs_FullMethodName                   = "/Scailo.PurchasesPaymentsService/ViewFromIDs"
	PurchasesPaymentsService_ViewAncillaryParametersByUUID_FullMethodName = "/Scailo.PurchasesPaymentsService/ViewAncillaryParametersByUUID"
	PurchasesPaymentsService_ViewAll_FullMethodName                       = "/Scailo.PurchasesPaymentsService/ViewAll"
	PurchasesPaymentsService_ViewAllForEntityUUID_FullMethodName          = "/Scailo.PurchasesPaymentsService/ViewAllForEntityUUID"
	PurchasesPaymentsService_ViewWithPagination_FullMethodName            = "/Scailo.PurchasesPaymentsService/ViewWithPagination"
	PurchasesPaymentsService_SearchAll_FullMethodName                     = "/Scailo.PurchasesPaymentsService/SearchAll"
	PurchasesPaymentsService_Filter_FullMethodName                        = "/Scailo.PurchasesPaymentsService/Filter"
	PurchasesPaymentsService_CountInStatus_FullMethodName                 = "/Scailo.PurchasesPaymentsService/CountInStatus"
	PurchasesPaymentsService_Count_FullMethodName                         = "/Scailo.PurchasesPaymentsService/Count"
	PurchasesPaymentsService_DownloadAsCSV_FullMethodName                 = "/Scailo.PurchasesPaymentsService/DownloadAsCSV"
)

// PurchasesPaymentsServiceClient is the client API for PurchasesPaymentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each purchase payment
type PurchasesPaymentsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *PurchasesPaymentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *PurchasesPaymentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *PurchasesPaymentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *PurchasesPaymentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	// rpc SendEmail (Identifier) returns (IdentifierResponse);
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchasePayment, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasePayment, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchasePayment, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasePayment, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PurchasesPaymentsList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasePaymentAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PurchasesPaymentsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasesPaymentsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *PurchasesPaymentsServicePaginationReq, opts ...grpc.CallOption) (*PurchasesPaymentsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *PurchasesPaymentsServiceSearchAllReq, opts ...grpc.CallOption) (*PurchasesPaymentsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *PurchasesPaymentsServiceFilterReq, opts ...grpc.CallOption) (*PurchasesPaymentsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *PurchasesPaymentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *PurchasesPaymentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type purchasesPaymentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchasesPaymentsServiceClient(cc grpc.ClientConnInterface) PurchasesPaymentsServiceClient {
	return &purchasesPaymentsServiceClient{cc}
}

func (c *purchasesPaymentsServiceClient) Create(ctx context.Context, in *PurchasesPaymentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) Draft(ctx context.Context, in *PurchasesPaymentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) DraftUpdate(ctx context.Context, in *PurchasesPaymentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) RevisionUpdate(ctx context.Context, in *PurchasesPaymentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchasePayment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasePayment)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasePayment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasePayment)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchasePayment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasePayment)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasePayment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasePayment)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PurchasesPaymentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesPaymentsList)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasePaymentAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasePaymentAncillaryParameters)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PurchasesPaymentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesPaymentsList)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasesPaymentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesPaymentsList)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) ViewWithPagination(ctx context.Context, in *PurchasesPaymentsServicePaginationReq, opts ...grpc.CallOption) (*PurchasesPaymentsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesPaymentsServicePaginationResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) SearchAll(ctx context.Context, in *PurchasesPaymentsServiceSearchAllReq, opts ...grpc.CallOption) (*PurchasesPaymentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesPaymentsList)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) Filter(ctx context.Context, in *PurchasesPaymentsServiceFilterReq, opts ...grpc.CallOption) (*PurchasesPaymentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesPaymentsList)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) Count(ctx context.Context, in *PurchasesPaymentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesPaymentsServiceClient) DownloadAsCSV(ctx context.Context, in *PurchasesPaymentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesPaymentsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchasesPaymentsService
