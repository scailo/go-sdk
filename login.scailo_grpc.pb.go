// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: login.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoginService_UserLoginPrimary_FullMethodName         = "/Scailo.LoginService/UserLoginPrimary"
	LoginService_LoginAsEmployeePrimary_FullMethodName   = "/Scailo.LoginService/LoginAsEmployeePrimary"
	LoginService_LoginAsEmployeeSecondary_FullMethodName = "/Scailo.LoginService/LoginAsEmployeeSecondary"
	LoginService_LoginAsVendorUser_FullMethodName        = "/Scailo.LoginService/LoginAsVendorUser"
	LoginService_LoginAsClientUser_FullMethodName        = "/Scailo.LoginService/LoginAsClientUser"
	LoginService_IsAuthTokenValid_FullMethodName         = "/Scailo.LoginService/IsAuthTokenValid"
	LoginService_Logout_FullMethodName                   = "/Scailo.LoginService/Logout"
	LoginService_ViewHistory_FullMethodName              = "/Scailo.LoginService/ViewHistory"
)

// LoginServiceClient is the client API for LoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the methods applicable on the login service
type LoginServiceClient interface {
	// Deprecated: Do not use.
	// Login using credentials belonging to a user and evaluate using user's primary role (this has been deprecated. Use LoginAsEmployeePrimary instead)
	UserLoginPrimary(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	// Login as employee using primary role
	LoginAsEmployeePrimary(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	// Login as employee using mobile role
	LoginAsEmployeeSecondary(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	// Login using credentials belonging to a vendor user
	LoginAsVendorUser(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*VendorUserLoginResponse, error)
	// Login using credentials belonging to a client user
	LoginAsClientUser(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*ClientUserLoginResponse, error)
	// Check if the auth token is still valid
	IsAuthTokenValid(ctx context.Context, in *AuthTokenValidityRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Logout
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// View login history for the given username
	ViewHistory(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*UserLoginHistoryList, error)
}

type loginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginServiceClient(cc grpc.ClientConnInterface) LoginServiceClient {
	return &loginServiceClient{cc}
}

// Deprecated: Do not use.
func (c *loginServiceClient) UserLoginPrimary(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, LoginService_UserLoginPrimary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) LoginAsEmployeePrimary(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, LoginService_LoginAsEmployeePrimary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) LoginAsEmployeeSecondary(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, LoginService_LoginAsEmployeeSecondary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) LoginAsVendorUser(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*VendorUserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorUserLoginResponse)
	err := c.cc.Invoke(ctx, LoginService_LoginAsVendorUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) LoginAsClientUser(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*ClientUserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientUserLoginResponse)
	err := c.cc.Invoke(ctx, LoginService_LoginAsClientUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) IsAuthTokenValid(ctx context.Context, in *AuthTokenValidityRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, LoginService_IsAuthTokenValid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, LoginService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) ViewHistory(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*UserLoginHistoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginHistoryList)
	err := c.cc.Invoke(ctx, LoginService_ViewHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginService
