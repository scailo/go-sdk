// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: inward_jobs.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InwardJobsService_Create_FullMethodName                                       = "/Scailo.InwardJobsService/Create"
	InwardJobsService_Draft_FullMethodName                                        = "/Scailo.InwardJobsService/Draft"
	InwardJobsService_DraftUpdate_FullMethodName                                  = "/Scailo.InwardJobsService/DraftUpdate"
	InwardJobsService_SendForVerification_FullMethodName                          = "/Scailo.InwardJobsService/SendForVerification"
	InwardJobsService_Verify_FullMethodName                                       = "/Scailo.InwardJobsService/Verify"
	InwardJobsService_Approve_FullMethodName                                      = "/Scailo.InwardJobsService/Approve"
	InwardJobsService_SendForRevision_FullMethodName                              = "/Scailo.InwardJobsService/SendForRevision"
	InwardJobsService_RevisionUpdate_FullMethodName                               = "/Scailo.InwardJobsService/RevisionUpdate"
	InwardJobsService_Halt_FullMethodName                                         = "/Scailo.InwardJobsService/Halt"
	InwardJobsService_Discard_FullMethodName                                      = "/Scailo.InwardJobsService/Discard"
	InwardJobsService_Restore_FullMethodName                                      = "/Scailo.InwardJobsService/Restore"
	InwardJobsService_Complete_FullMethodName                                     = "/Scailo.InwardJobsService/Complete"
	InwardJobsService_Repeat_FullMethodName                                       = "/Scailo.InwardJobsService/Repeat"
	InwardJobsService_Reopen_FullMethodName                                       = "/Scailo.InwardJobsService/Reopen"
	InwardJobsService_CommentAdd_FullMethodName                                   = "/Scailo.InwardJobsService/CommentAdd"
	InwardJobsService_SendEmail_FullMethodName                                    = "/Scailo.InwardJobsService/SendEmail"
	InwardJobsService_Autofill_FullMethodName                                     = "/Scailo.InwardJobsService/Autofill"
	InwardJobsService_CreateMagicLink_FullMethodName                              = "/Scailo.InwardJobsService/CreateMagicLink"
	InwardJobsService_IsCompletable_FullMethodName                                = "/Scailo.InwardJobsService/IsCompletable"
	InwardJobsService_IsOrdered_FullMethodName                                    = "/Scailo.InwardJobsService/IsOrdered"
	InwardJobsService_IsReceived_FullMethodName                                   = "/Scailo.InwardJobsService/IsReceived"
	InwardJobsService_AddMultipleInwardJobInwardItems_FullMethodName              = "/Scailo.InwardJobsService/AddMultipleInwardJobInwardItems"
	InwardJobsService_AddInwardJobInwardItem_FullMethodName                       = "/Scailo.InwardJobsService/AddInwardJobInwardItem"
	InwardJobsService_ModifyInwardJobInwardItem_FullMethodName                    = "/Scailo.InwardJobsService/ModifyInwardJobInwardItem"
	InwardJobsService_ApproveInwardJobInwardItem_FullMethodName                   = "/Scailo.InwardJobsService/ApproveInwardJobInwardItem"
	InwardJobsService_DeleteInwardJobInwardItem_FullMethodName                    = "/Scailo.InwardJobsService/DeleteInwardJobInwardItem"
	InwardJobsService_ReorderInwardJobInwardItems_FullMethodName                  = "/Scailo.InwardJobsService/ReorderInwardJobInwardItems"
	InwardJobsService_ViewInwardJobInwardItemByID_FullMethodName                  = "/Scailo.InwardJobsService/ViewInwardJobInwardItemByID"
	InwardJobsService_ViewApprovedInwardJobInwardItems_FullMethodName             = "/Scailo.InwardJobsService/ViewApprovedInwardJobInwardItems"
	InwardJobsService_ViewUnapprovedInwardJobInwardItems_FullMethodName           = "/Scailo.InwardJobsService/ViewUnapprovedInwardJobInwardItems"
	InwardJobsService_ViewInwardJobInwardItemHistory_FullMethodName               = "/Scailo.InwardJobsService/ViewInwardJobInwardItemHistory"
	InwardJobsService_ViewPaginatedApprovedInwardJobInwardItems_FullMethodName    = "/Scailo.InwardJobsService/ViewPaginatedApprovedInwardJobInwardItems"
	InwardJobsService_ViewPaginatedUnapprovedInwardJobInwardItems_FullMethodName  = "/Scailo.InwardJobsService/ViewPaginatedUnapprovedInwardJobInwardItems"
	InwardJobsService_SearchInwardItemsWithPagination_FullMethodName              = "/Scailo.InwardJobsService/SearchInwardItemsWithPagination"
	InwardJobsService_DownloadInwardItemsCSVTemplate_FullMethodName               = "/Scailo.InwardJobsService/DownloadInwardItemsCSVTemplate"
	InwardJobsService_UploadInwardJobInwardItems_FullMethodName                   = "/Scailo.InwardJobsService/UploadInwardJobInwardItems"
	InwardJobsService_AddMultipleInwardJobOutwardItems_FullMethodName             = "/Scailo.InwardJobsService/AddMultipleInwardJobOutwardItems"
	InwardJobsService_AddInwardJobOutwardItem_FullMethodName                      = "/Scailo.InwardJobsService/AddInwardJobOutwardItem"
	InwardJobsService_ModifyInwardJobOutwardItem_FullMethodName                   = "/Scailo.InwardJobsService/ModifyInwardJobOutwardItem"
	InwardJobsService_ApproveInwardJobOutwardItem_FullMethodName                  = "/Scailo.InwardJobsService/ApproveInwardJobOutwardItem"
	InwardJobsService_DeleteInwardJobOutwardItem_FullMethodName                   = "/Scailo.InwardJobsService/DeleteInwardJobOutwardItem"
	InwardJobsService_ReorderInwardJobOutwardItems_FullMethodName                 = "/Scailo.InwardJobsService/ReorderInwardJobOutwardItems"
	InwardJobsService_ViewInwardJobOutwardItemByID_FullMethodName                 = "/Scailo.InwardJobsService/ViewInwardJobOutwardItemByID"
	InwardJobsService_ViewApprovedInwardJobOutwardItems_FullMethodName            = "/Scailo.InwardJobsService/ViewApprovedInwardJobOutwardItems"
	InwardJobsService_ViewUnapprovedInwardJobOutwardItems_FullMethodName          = "/Scailo.InwardJobsService/ViewUnapprovedInwardJobOutwardItems"
	InwardJobsService_ViewInwardJobOutwardItemHistory_FullMethodName              = "/Scailo.InwardJobsService/ViewInwardJobOutwardItemHistory"
	InwardJobsService_ViewPaginatedApprovedInwardJobOutwardItems_FullMethodName   = "/Scailo.InwardJobsService/ViewPaginatedApprovedInwardJobOutwardItems"
	InwardJobsService_ViewPaginatedUnapprovedInwardJobOutwardItems_FullMethodName = "/Scailo.InwardJobsService/ViewPaginatedUnapprovedInwardJobOutwardItems"
	InwardJobsService_SearchOutwardItemsWithPagination_FullMethodName             = "/Scailo.InwardJobsService/SearchOutwardItemsWithPagination"
	InwardJobsService_DownloadOutwardItemsCSVTemplate_FullMethodName              = "/Scailo.InwardJobsService/DownloadOutwardItemsCSVTemplate"
	InwardJobsService_UploadInwardJobOutwardItems_FullMethodName                  = "/Scailo.InwardJobsService/UploadInwardJobOutwardItems"
	InwardJobsService_AddInwardJobContact_FullMethodName                          = "/Scailo.InwardJobsService/AddInwardJobContact"
	InwardJobsService_ApproveInwardJobContact_FullMethodName                      = "/Scailo.InwardJobsService/ApproveInwardJobContact"
	InwardJobsService_DeleteInwardJobContact_FullMethodName                       = "/Scailo.InwardJobsService/DeleteInwardJobContact"
	InwardJobsService_ViewInwardJobContactByID_FullMethodName                     = "/Scailo.InwardJobsService/ViewInwardJobContactByID"
	InwardJobsService_ViewInwardJobContacts_FullMethodName                        = "/Scailo.InwardJobsService/ViewInwardJobContacts"
	InwardJobsService_ViewByID_FullMethodName                                     = "/Scailo.InwardJobsService/ViewByID"
	InwardJobsService_ViewByUUID_FullMethodName                                   = "/Scailo.InwardJobsService/ViewByUUID"
	InwardJobsService_ViewEssentialByID_FullMethodName                            = "/Scailo.InwardJobsService/ViewEssentialByID"
	InwardJobsService_ViewEssentialByUUID_FullMethodName                          = "/Scailo.InwardJobsService/ViewEssentialByUUID"
	InwardJobsService_ViewFromIDs_FullMethodName                                  = "/Scailo.InwardJobsService/ViewFromIDs"
	InwardJobsService_ViewAncillaryParametersByUUID_FullMethodName                = "/Scailo.InwardJobsService/ViewAncillaryParametersByUUID"
	InwardJobsService_ViewAll_FullMethodName                                      = "/Scailo.InwardJobsService/ViewAll"
	InwardJobsService_ViewAllForEntityUUID_FullMethodName                         = "/Scailo.InwardJobsService/ViewAllForEntityUUID"
	InwardJobsService_ViewWithPagination_FullMethodName                           = "/Scailo.InwardJobsService/ViewWithPagination"
	InwardJobsService_ViewAssociatedSalesOrderIDs_FullMethodName                  = "/Scailo.InwardJobsService/ViewAssociatedSalesOrderIDs"
	InwardJobsService_ViewInwardInventoryMatch_FullMethodName                     = "/Scailo.InwardJobsService/ViewInwardInventoryMatch"
	InwardJobsService_ViewProspectiveInwardFamilies_FullMethodName                = "/Scailo.InwardJobsService/ViewProspectiveInwardFamilies"
	InwardJobsService_FilterProspectiveInwardFamilies_FullMethodName              = "/Scailo.InwardJobsService/FilterProspectiveInwardFamilies"
	InwardJobsService_ViewProspectiveInwardJobInwardItem_FullMethodName           = "/Scailo.InwardJobsService/ViewProspectiveInwardJobInwardItem"
	InwardJobsService_ViewOutwardInventoryMatch_FullMethodName                    = "/Scailo.InwardJobsService/ViewOutwardInventoryMatch"
	InwardJobsService_ViewProspectiveOutwardFamilies_FullMethodName               = "/Scailo.InwardJobsService/ViewProspectiveOutwardFamilies"
	InwardJobsService_FilterProspectiveOutwardFamilies_FullMethodName             = "/Scailo.InwardJobsService/FilterProspectiveOutwardFamilies"
	InwardJobsService_ViewProspectiveInwardJobOutwardItem_FullMethodName          = "/Scailo.InwardJobsService/ViewProspectiveInwardJobOutwardItem"
	InwardJobsService_IsDownloadable_FullMethodName                               = "/Scailo.InwardJobsService/IsDownloadable"
	InwardJobsService_DownloadByUUID_FullMethodName                               = "/Scailo.InwardJobsService/DownloadByUUID"
	InwardJobsService_SearchAll_FullMethodName                                    = "/Scailo.InwardJobsService/SearchAll"
	InwardJobsService_Filter_FullMethodName                                       = "/Scailo.InwardJobsService/Filter"
	InwardJobsService_CountInStatus_FullMethodName                                = "/Scailo.InwardJobsService/CountInStatus"
	InwardJobsService_Count_FullMethodName                                        = "/Scailo.InwardJobsService/Count"
	InwardJobsService_DownloadAsCSV_FullMethodName                                = "/Scailo.InwardJobsService/DownloadAsCSV"
)

// InwardJobsServiceClient is the client API for InwardJobsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each inward job
type InwardJobsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *InwardJobsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *InwardJobsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *InwardJobsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *InwardJobsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the inward job
	Autofill(ctx context.Context, in *InwardJobsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Checks if the Inward Job can be marked as completed (is true when all the inward items have been ordered and all the outward items have been received)
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Checks if the Inward items within an Inward Job have been ordered (through a Sales Order)
	IsOrdered(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Checks if the Outward items within an Inward Job have been received (through Free Issue Material)
	IsReceived(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Add multiple items to a inward job
	AddMultipleInwardJobInwardItems(ctx context.Context, in *InwardJobsServiceMultipleInwardItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an inward item to a inward job
	AddInwardJobInwardItem(ctx context.Context, in *InwardJobsServiceInwardItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an inward item in a inward job
	ModifyInwardJobInwardItem(ctx context.Context, in *InwardJobsServiceInwardItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an inward item in a inward job
	ApproveInwardJobInwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an inward item in a inward job
	DeleteInwardJobInwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a inward job
	ReorderInwardJobInwardItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Inward Job Inward Item by ID
	ViewInwardJobInwardItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InwardJobInwardItem, error)
	// View approved inward job inward items for given inward job ID
	ViewApprovedInwardJobInwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*InwardJobsInwardItemsList, error)
	// View unapproved inward job inward items for given inward job ID
	ViewUnapprovedInwardJobInwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*InwardJobsInwardItemsList, error)
	// View the history of the inward job inward item
	ViewInwardJobInwardItemHistory(ctx context.Context, in *InwardJobInwardItemHistoryRequest, opts ...grpc.CallOption) (*InwardJobsInwardItemsList, error)
	// View approved inward job inward items for given inward job ID with pagination
	ViewPaginatedApprovedInwardJobInwardItems(ctx context.Context, in *InwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedInwardItemsResponse, error)
	// View unapproved inward job inward items for given inward job ID with pagination
	ViewPaginatedUnapprovedInwardJobInwardItems(ctx context.Context, in *InwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedInwardItemsResponse, error)
	// Search through inward job inward items with pagination
	SearchInwardItemsWithPagination(ctx context.Context, in *InwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedInwardItemsResponse, error)
	// Download the CSV template that could be used to upload inward items from the filled CSV file
	DownloadInwardItemsCSVTemplate(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload inward items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadInwardJobInwardItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add multiple items to a inward job
	AddMultipleInwardJobOutwardItems(ctx context.Context, in *InwardJobsServiceMultipleOutwardItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an outward item to a inward job
	AddInwardJobOutwardItem(ctx context.Context, in *InwardJobsServiceOutwardItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an outward item in a inward job
	ModifyInwardJobOutwardItem(ctx context.Context, in *InwardJobsServiceOutwardItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an outward item in a inward job
	ApproveInwardJobOutwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an outward item in a inward job
	DeleteInwardJobOutwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a inward job
	ReorderInwardJobOutwardItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Inward Job Outward Item by ID
	ViewInwardJobOutwardItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InwardJobOutwardItem, error)
	// View approved inward job outward items for given inward job ID
	ViewApprovedInwardJobOutwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*InwardJobsOutwardItemsList, error)
	// View unapproved inward job outward items for given inward job ID
	ViewUnapprovedInwardJobOutwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*InwardJobsOutwardItemsList, error)
	// View the history of the inward job outward item
	ViewInwardJobOutwardItemHistory(ctx context.Context, in *InwardJobOutwardItemHistoryRequest, opts ...grpc.CallOption) (*InwardJobsOutwardItemsList, error)
	// View approved inward job outward items for given inward job ID with pagination
	ViewPaginatedApprovedInwardJobOutwardItems(ctx context.Context, in *InwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedOutwardItemsResponse, error)
	// View unapproved inward job outward items for given inward job ID with pagination
	ViewPaginatedUnapprovedInwardJobOutwardItems(ctx context.Context, in *InwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedOutwardItemsResponse, error)
	// Search through inward job outward items with pagination
	SearchOutwardItemsWithPagination(ctx context.Context, in *InwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedOutwardItemsResponse, error)
	// Download the CSV template that could be used to upload outward items from the filled CSV file
	DownloadOutwardItemsCSVTemplate(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload outward items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadInwardJobOutwardItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a contact
	AddInwardJobContact(ctx context.Context, in *InwardJobsServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a contact
	ApproveInwardJobContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a contact
	DeleteInwardJobContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a contact for the given ID
	ViewInwardJobContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InwardJobContact, error)
	// View all contacts for given inward job UUID
	ViewInwardJobContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJobContactsList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InwardJob, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJob, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InwardJob, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJob, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*InwardJobsList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJobAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*InwardJobsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJobsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *InwardJobsServicePaginationReq, opts ...grpc.CallOption) (*InwardJobsServicePaginationResponse, error)
	// View all sales order IDs that are associated with the given inward job UUID
	ViewAssociatedSalesOrderIDs(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View Inward Inventory Match of all the inward families of the given inward job
	ViewInwardInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJobInwardInventoryMatchList, error)
	// View prospective inward items for the given inward job (all families that could be purchased)
	ViewProspectiveInwardFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective inward families for the record represented by the given UUID identifier
	FilterProspectiveInwardFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective inward job inward item info for the given family ID and inward job ID
	ViewProspectiveInwardJobInwardItem(ctx context.Context, in *InwardJobInwardItemProspectiveInfoRequest, opts ...grpc.CallOption) (*InwardJobsServiceInwardItemCreateRequest, error)
	// View Outward Inventory Match of all the outward families of the given inward job
	ViewOutwardInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJobOutwardInventoryMatchList, error)
	// View prospective outward items for the given inward job (all families that could be sold)
	ViewProspectiveOutwardFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective outward families for the record represented by the given UUID identifier
	FilterProspectiveOutwardFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective inward job outward item info for the given family ID and inward job ID
	ViewProspectiveInwardJobOutwardItem(ctx context.Context, in *InwardJobOutwardItemProspectiveInfoRequest, opts ...grpc.CallOption) (*InwardJobsServiceOutwardItemCreateRequest, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download inward job with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *InwardJobsServiceSearchAllReq, opts ...grpc.CallOption) (*InwardJobsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *InwardJobsServiceFilterReq, opts ...grpc.CallOption) (*InwardJobsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *InwardJobsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *InwardJobsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type inwardJobsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInwardJobsServiceClient(cc grpc.ClientConnInterface) InwardJobsServiceClient {
	return &inwardJobsServiceClient{cc}
}

func (c *inwardJobsServiceClient) Create(ctx context.Context, in *InwardJobsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Draft(ctx context.Context, in *InwardJobsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) DraftUpdate(ctx context.Context, in *InwardJobsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) RevisionUpdate(ctx context.Context, in *InwardJobsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Autofill(ctx context.Context, in *InwardJobsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, InwardJobsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) IsOrdered(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_IsOrdered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) IsReceived(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_IsReceived_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) AddMultipleInwardJobInwardItems(ctx context.Context, in *InwardJobsServiceMultipleInwardItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_AddMultipleInwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) AddInwardJobInwardItem(ctx context.Context, in *InwardJobsServiceInwardItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_AddInwardJobInwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ModifyInwardJobInwardItem(ctx context.Context, in *InwardJobsServiceInwardItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ModifyInwardJobInwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ApproveInwardJobInwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ApproveInwardJobInwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) DeleteInwardJobInwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_DeleteInwardJobInwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ReorderInwardJobInwardItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ReorderInwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewInwardJobInwardItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InwardJobInwardItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobInwardItem)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewInwardJobInwardItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewApprovedInwardJobInwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*InwardJobsInwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsInwardItemsList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewApprovedInwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewUnapprovedInwardJobInwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*InwardJobsInwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsInwardItemsList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewUnapprovedInwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewInwardJobInwardItemHistory(ctx context.Context, in *InwardJobInwardItemHistoryRequest, opts ...grpc.CallOption) (*InwardJobsInwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsInwardItemsList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewInwardJobInwardItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewPaginatedApprovedInwardJobInwardItems(ctx context.Context, in *InwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedInwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsServicePaginatedInwardItemsResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewPaginatedApprovedInwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewPaginatedUnapprovedInwardJobInwardItems(ctx context.Context, in *InwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedInwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsServicePaginatedInwardItemsResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewPaginatedUnapprovedInwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) SearchInwardItemsWithPagination(ctx context.Context, in *InwardJobInwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedInwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsServicePaginatedInwardItemsResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_SearchInwardItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) DownloadInwardItemsCSVTemplate(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, InwardJobsService_DownloadInwardItemsCSVTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) UploadInwardJobInwardItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, InwardJobsService_UploadInwardJobInwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) AddMultipleInwardJobOutwardItems(ctx context.Context, in *InwardJobsServiceMultipleOutwardItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_AddMultipleInwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) AddInwardJobOutwardItem(ctx context.Context, in *InwardJobsServiceOutwardItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_AddInwardJobOutwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ModifyInwardJobOutwardItem(ctx context.Context, in *InwardJobsServiceOutwardItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ModifyInwardJobOutwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ApproveInwardJobOutwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ApproveInwardJobOutwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) DeleteInwardJobOutwardItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_DeleteInwardJobOutwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ReorderInwardJobOutwardItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ReorderInwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewInwardJobOutwardItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InwardJobOutwardItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobOutwardItem)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewInwardJobOutwardItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewApprovedInwardJobOutwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*InwardJobsOutwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsOutwardItemsList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewApprovedInwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewUnapprovedInwardJobOutwardItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*InwardJobsOutwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsOutwardItemsList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewUnapprovedInwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewInwardJobOutwardItemHistory(ctx context.Context, in *InwardJobOutwardItemHistoryRequest, opts ...grpc.CallOption) (*InwardJobsOutwardItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsOutwardItemsList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewInwardJobOutwardItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewPaginatedApprovedInwardJobOutwardItems(ctx context.Context, in *InwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedOutwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsServicePaginatedOutwardItemsResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewPaginatedApprovedInwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewPaginatedUnapprovedInwardJobOutwardItems(ctx context.Context, in *InwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedOutwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsServicePaginatedOutwardItemsResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewPaginatedUnapprovedInwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) SearchOutwardItemsWithPagination(ctx context.Context, in *InwardJobOutwardItemsSearchRequest, opts ...grpc.CallOption) (*InwardJobsServicePaginatedOutwardItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsServicePaginatedOutwardItemsResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_SearchOutwardItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) DownloadOutwardItemsCSVTemplate(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, InwardJobsService_DownloadOutwardItemsCSVTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) UploadInwardJobOutwardItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, InwardJobsService_UploadInwardJobOutwardItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) AddInwardJobContact(ctx context.Context, in *InwardJobsServiceContactCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_AddInwardJobContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ApproveInwardJobContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ApproveInwardJobContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) DeleteInwardJobContact(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_DeleteInwardJobContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewInwardJobContactByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InwardJobContact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobContact)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewInwardJobContactByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewInwardJobContacts(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJobContactsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobContactsList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewInwardJobContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InwardJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJob)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJob)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*InwardJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJob)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJob)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*InwardJobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJobAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobAncillaryParameters)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*InwardJobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewWithPagination(ctx context.Context, in *InwardJobsServicePaginationReq, opts ...grpc.CallOption) (*InwardJobsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsServicePaginationResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewAssociatedSalesOrderIDs(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewAssociatedSalesOrderIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewInwardInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJobInwardInventoryMatchList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobInwardInventoryMatchList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewInwardInventoryMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewProspectiveInwardFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewProspectiveInwardFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) FilterProspectiveInwardFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, InwardJobsService_FilterProspectiveInwardFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewProspectiveInwardJobInwardItem(ctx context.Context, in *InwardJobInwardItemProspectiveInfoRequest, opts ...grpc.CallOption) (*InwardJobsServiceInwardItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsServiceInwardItemCreateRequest)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewProspectiveInwardJobInwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewOutwardInventoryMatch(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InwardJobOutwardInventoryMatchList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobOutwardInventoryMatchList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewOutwardInventoryMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewProspectiveOutwardFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewProspectiveOutwardFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) FilterProspectiveOutwardFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, InwardJobsService_FilterProspectiveOutwardFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) ViewProspectiveInwardJobOutwardItem(ctx context.Context, in *InwardJobOutwardItemProspectiveInfoRequest, opts ...grpc.CallOption) (*InwardJobsServiceOutwardItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsServiceOutwardItemCreateRequest)
	err := c.cc.Invoke(ctx, InwardJobsService_ViewProspectiveInwardJobOutwardItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, InwardJobsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) SearchAll(ctx context.Context, in *InwardJobsServiceSearchAllReq, opts ...grpc.CallOption) (*InwardJobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsList)
	err := c.cc.Invoke(ctx, InwardJobsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Filter(ctx context.Context, in *InwardJobsServiceFilterReq, opts ...grpc.CallOption) (*InwardJobsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InwardJobsList)
	err := c.cc.Invoke(ctx, InwardJobsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) Count(ctx context.Context, in *InwardJobsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, InwardJobsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inwardJobsServiceClient) DownloadAsCSV(ctx context.Context, in *InwardJobsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, InwardJobsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InwardJobsService
