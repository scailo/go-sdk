// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: families.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FamiliesService_Create_FullMethodName                       = "/Scailo.FamiliesService/Create"
	FamiliesService_Draft_FullMethodName                        = "/Scailo.FamiliesService/Draft"
	FamiliesService_DraftUpdate_FullMethodName                  = "/Scailo.FamiliesService/DraftUpdate"
	FamiliesService_SendForVerification_FullMethodName          = "/Scailo.FamiliesService/SendForVerification"
	FamiliesService_Verify_FullMethodName                       = "/Scailo.FamiliesService/Verify"
	FamiliesService_Approve_FullMethodName                      = "/Scailo.FamiliesService/Approve"
	FamiliesService_SendForRevision_FullMethodName              = "/Scailo.FamiliesService/SendForRevision"
	FamiliesService_RevisionUpdate_FullMethodName               = "/Scailo.FamiliesService/RevisionUpdate"
	FamiliesService_Halt_FullMethodName                         = "/Scailo.FamiliesService/Halt"
	FamiliesService_Discard_FullMethodName                      = "/Scailo.FamiliesService/Discard"
	FamiliesService_Restore_FullMethodName                      = "/Scailo.FamiliesService/Restore"
	FamiliesService_CommentAdd_FullMethodName                   = "/Scailo.FamiliesService/CommentAdd"
	FamiliesService_Amend_FullMethodName                        = "/Scailo.FamiliesService/Amend"
	FamiliesService_UpdatePrice_FullMethodName                  = "/Scailo.FamiliesService/UpdatePrice"
	FamiliesService_UploadPrices_FullMethodName                 = "/Scailo.FamiliesService/UploadPrices"
	FamiliesService_UpdateMinStockToMaintain_FullMethodName     = "/Scailo.FamiliesService/UpdateMinStockToMaintain"
	FamiliesService_UploadMinStockToMaintain_FullMethodName     = "/Scailo.FamiliesService/UploadMinStockToMaintain"
	FamiliesService_DownloadAsCSV_FullMethodName                = "/Scailo.FamiliesService/DownloadAsCSV"
	FamiliesService_ImportFromCSV_FullMethodName                = "/Scailo.FamiliesService/ImportFromCSV"
	FamiliesService_AddStorage_FullMethodName                   = "/Scailo.FamiliesService/AddStorage"
	FamiliesService_ApproveStorage_FullMethodName               = "/Scailo.FamiliesService/ApproveStorage"
	FamiliesService_DeleteStorage_FullMethodName                = "/Scailo.FamiliesService/DeleteStorage"
	FamiliesService_ViewStorageByID_FullMethodName              = "/Scailo.FamiliesService/ViewStorageByID"
	FamiliesService_ViewStorages_FullMethodName                 = "/Scailo.FamiliesService/ViewStorages"
	FamiliesService_AddLabel_FullMethodName                     = "/Scailo.FamiliesService/AddLabel"
	FamiliesService_ApproveLabel_FullMethodName                 = "/Scailo.FamiliesService/ApproveLabel"
	FamiliesService_DeleteLabel_FullMethodName                  = "/Scailo.FamiliesService/DeleteLabel"
	FamiliesService_ViewLabelByID_FullMethodName                = "/Scailo.FamiliesService/ViewLabelByID"
	FamiliesService_ViewLabels_FullMethodName                   = "/Scailo.FamiliesService/ViewLabels"
	FamiliesService_AddUnitConversion_FullMethodName            = "/Scailo.FamiliesService/AddUnitConversion"
	FamiliesService_ApproveUnitConversion_FullMethodName        = "/Scailo.FamiliesService/ApproveUnitConversion"
	FamiliesService_DeleteUnitConversion_FullMethodName         = "/Scailo.FamiliesService/DeleteUnitConversion"
	FamiliesService_ViewUnitConversionByID_FullMethodName       = "/Scailo.FamiliesService/ViewUnitConversionByID"
	FamiliesService_ViewUnitConversions_FullMethodName          = "/Scailo.FamiliesService/ViewUnitConversions"
	FamiliesService_ViewUnitConversionFor_FullMethodName        = "/Scailo.FamiliesService/ViewUnitConversionFor"
	FamiliesService_AddQCGroup_FullMethodName                   = "/Scailo.FamiliesService/AddQCGroup"
	FamiliesService_ApproveQCGroup_FullMethodName               = "/Scailo.FamiliesService/ApproveQCGroup"
	FamiliesService_DeleteQCGroup_FullMethodName                = "/Scailo.FamiliesService/DeleteQCGroup"
	FamiliesService_ViewQCGroupByID_FullMethodName              = "/Scailo.FamiliesService/ViewQCGroupByID"
	FamiliesService_ViewQCGroups_FullMethodName                 = "/Scailo.FamiliesService/ViewQCGroups"
	FamiliesService_ViewByID_FullMethodName                     = "/Scailo.FamiliesService/ViewByID"
	FamiliesService_ViewByUUID_FullMethodName                   = "/Scailo.FamiliesService/ViewByUUID"
	FamiliesService_ViewEssentialByID_FullMethodName            = "/Scailo.FamiliesService/ViewEssentialByID"
	FamiliesService_ViewEssentialByCode_FullMethodName          = "/Scailo.FamiliesService/ViewEssentialByCode"
	FamiliesService_ViewEssentialByUUID_FullMethodName          = "/Scailo.FamiliesService/ViewEssentialByUUID"
	FamiliesService_ViewFromIDs_FullMethodName                  = "/Scailo.FamiliesService/ViewFromIDs"
	FamiliesService_ViewAll_FullMethodName                      = "/Scailo.FamiliesService/ViewAll"
	FamiliesService_ViewAllForEntityUUID_FullMethodName         = "/Scailo.FamiliesService/ViewAllForEntityUUID"
	FamiliesService_ViewWithPagination_FullMethodName           = "/Scailo.FamiliesService/ViewWithPagination"
	FamiliesService_ViewAllRequirable_FullMethodName            = "/Scailo.FamiliesService/ViewAllRequirable"
	FamiliesService_ViewAmendments_FullMethodName               = "/Scailo.FamiliesService/ViewAmendments"
	FamiliesService_SearchAll_FullMethodName                    = "/Scailo.FamiliesService/SearchAll"
	FamiliesService_Filter_FullMethodName                       = "/Scailo.FamiliesService/Filter"
	FamiliesService_SearchForPurchase_FullMethodName            = "/Scailo.FamiliesService/SearchForPurchase"
	FamiliesService_SearchForSale_FullMethodName                = "/Scailo.FamiliesService/SearchForSale"
	FamiliesService_SearchForProduction_FullMethodName          = "/Scailo.FamiliesService/SearchForProduction"
	FamiliesService_SearchForReplaceables_FullMethodName        = "/Scailo.FamiliesService/SearchForReplaceables"
	FamiliesService_SearchForEquationFamily_FullMethodName      = "/Scailo.FamiliesService/SearchForEquationFamily"
	FamiliesService_SearchForEquationReplaceable_FullMethodName = "/Scailo.FamiliesService/SearchForEquationReplaceable"
	FamiliesService_SearchForEquationSalesBundle_FullMethodName = "/Scailo.FamiliesService/SearchForEquationSalesBundle"
	FamiliesService_CountInStatus_FullMethodName                = "/Scailo.FamiliesService/CountInStatus"
	FamiliesService_Count_FullMethodName                        = "/Scailo.FamiliesService/Count"
)

// FamiliesServiceClient is the client API for FamiliesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each family
type FamiliesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *FamiliesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *FamiliesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *FamiliesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *FamiliesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Amend the family and send for revision
	Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Updates the price of the family with the given UUID
	UpdatePrice(ctx context.Context, in *FamiliesServiceUpdatePriceRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Updates the price of all the families mentioned in the file
	UploadPrices(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
	// Updates the minimim stock to maintain for the family with the given UUID
	UpdateMinStockToMaintain(ctx context.Context, in *FamiliesServiceUpdateMinStockToMaintainRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Updates the minimum stock to maintain for all the families mentioned in the file
	UploadMinStockToMaintain(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
	// CSV operations
	// Download the CSV file that consists of the list of families according to the given filter request. The same file could also be used as a template for uploading families
	DownloadAsCSV(ctx context.Context, in *FamiliesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import families using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
	// Add a storage
	AddStorage(ctx context.Context, in *FamiliesServiceStorageCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a storage
	ApproveStorage(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a storage
	DeleteStorage(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a storage for the given ID
	ViewStorageByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyStorage, error)
	// View all storages for given family ID
	ViewStorages(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyStoragesList, error)
	// Add a label
	AddLabel(ctx context.Context, in *FamiliesServiceLabelCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a label
	ApproveLabel(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a label
	DeleteLabel(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a label for the given ID
	ViewLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyLabel, error)
	// View all labels for given family ID
	ViewLabels(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyLabelsList, error)
	// Add a unit conversion
	AddUnitConversion(ctx context.Context, in *FamiliesServiceUnitConversionCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a unit conversion
	ApproveUnitConversion(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a unit conversion
	DeleteUnitConversion(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a unit conversion for the given ID
	ViewUnitConversionByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyUnitConversion, error)
	// View all unit conversions for given family ID
	ViewUnitConversions(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyUnitConversionsList, error)
	// View the unit conversion for the given family ID and the given uom ID
	ViewUnitConversionFor(ctx context.Context, in *FamiliesServiceUnitConversionPresenceRequest, opts ...grpc.CallOption) (*FamilyUnitConversion, error)
	// Add a qc group
	AddQCGroup(ctx context.Context, in *FamiliesServiceQCGroupCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a qc group
	ApproveQCGroup(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a qc group
	DeleteQCGroup(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a qc group for the given ID
	ViewQCGroupByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyQCGroup, error)
	// View all qc groups for given family ID
	ViewQCGroups(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyQCGroupsList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Family, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Family, error)
	// View only essential components of the family (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Family, error)
	// View only essential components of the family (without logs) that matches the given code
	ViewEssentialByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Family, error)
	// View only essential components of the family (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Family, error)
	// View all families with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*FamiliesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*FamiliesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FamiliesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *FamiliesServicePaginationReq, opts ...grpc.CallOption) (*FamiliesServicePaginationResponse, error)
	// View all families with required quantity greater than 0 from the given family types
	ViewAllRequirable(ctx context.Context, in *FamilyTypesList, opts ...grpc.CallOption) (*FamiliesList, error)
	// View all the amendments made
	ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *FamiliesServiceSearchAllReq, opts ...grpc.CallOption) (*FamiliesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *FamiliesServiceFilterReq, opts ...grpc.CallOption) (*FamiliesList, error)
	// Deprecated: Do not use.
	// View all families for purchase that match the given search key
	SearchForPurchase(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error)
	// Deprecated: Do not use.
	// View all families for sale that match the given search key
	SearchForSale(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error)
	// Deprecated: Do not use.
	// View all families for production that match the given search key
	SearchForProduction(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error)
	// Deprecated: Do not use.
	// View all families for replaceables that match the given search key
	SearchForReplaceables(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error)
	// Deprecated: Do not use.
	// View all families for equation family that match the given search key
	SearchForEquationFamily(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error)
	// Deprecated: Do not use.
	// View all families for equation replaceable that match the given search key
	SearchForEquationReplaceable(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error)
	// Deprecated: Do not use.
	// View all families for equation sales bundle that match the given search key
	SearchForEquationSalesBundle(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *FamiliesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
}

type familiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFamiliesServiceClient(cc grpc.ClientConnInterface) FamiliesServiceClient {
	return &familiesServiceClient{cc}
}

func (c *familiesServiceClient) Create(ctx context.Context, in *FamiliesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) Draft(ctx context.Context, in *FamiliesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) DraftUpdate(ctx context.Context, in *FamiliesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) RevisionUpdate(ctx context.Context, in *FamiliesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) UpdatePrice(ctx context.Context, in *FamiliesServiceUpdatePriceRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_UpdatePrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) UploadPrices(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, FamiliesService_UploadPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) UpdateMinStockToMaintain(ctx context.Context, in *FamiliesServiceUpdateMinStockToMaintainRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_UpdateMinStockToMaintain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) UploadMinStockToMaintain(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, FamiliesService_UploadMinStockToMaintain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) DownloadAsCSV(ctx context.Context, in *FamiliesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, FamiliesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, FamiliesService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) AddStorage(ctx context.Context, in *FamiliesServiceStorageCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_AddStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ApproveStorage(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_ApproveStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) DeleteStorage(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_DeleteStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewStorageByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyStorage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyStorage)
	err := c.cc.Invoke(ctx, FamiliesService_ViewStorageByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewStorages(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyStoragesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyStoragesList)
	err := c.cc.Invoke(ctx, FamiliesService_ViewStorages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) AddLabel(ctx context.Context, in *FamiliesServiceLabelCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_AddLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ApproveLabel(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_ApproveLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) DeleteLabel(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_DeleteLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyLabel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyLabel)
	err := c.cc.Invoke(ctx, FamiliesService_ViewLabelByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewLabels(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyLabelsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyLabelsList)
	err := c.cc.Invoke(ctx, FamiliesService_ViewLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) AddUnitConversion(ctx context.Context, in *FamiliesServiceUnitConversionCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_AddUnitConversion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ApproveUnitConversion(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_ApproveUnitConversion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) DeleteUnitConversion(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_DeleteUnitConversion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewUnitConversionByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyUnitConversion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyUnitConversion)
	err := c.cc.Invoke(ctx, FamiliesService_ViewUnitConversionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewUnitConversions(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyUnitConversionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyUnitConversionsList)
	err := c.cc.Invoke(ctx, FamiliesService_ViewUnitConversions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewUnitConversionFor(ctx context.Context, in *FamiliesServiceUnitConversionPresenceRequest, opts ...grpc.CallOption) (*FamilyUnitConversion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyUnitConversion)
	err := c.cc.Invoke(ctx, FamiliesService_ViewUnitConversionFor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) AddQCGroup(ctx context.Context, in *FamiliesServiceQCGroupCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_AddQCGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ApproveQCGroup(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_ApproveQCGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) DeleteQCGroup(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, FamiliesService_DeleteQCGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewQCGroupByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyQCGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyQCGroup)
	err := c.cc.Invoke(ctx, FamiliesService_ViewQCGroupByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewQCGroups(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*FamilyQCGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyQCGroupsList)
	err := c.cc.Invoke(ctx, FamiliesService_ViewQCGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Family, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Family)
	err := c.cc.Invoke(ctx, FamiliesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Family, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Family)
	err := c.cc.Invoke(ctx, FamiliesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Family, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Family)
	err := c.cc.Invoke(ctx, FamiliesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewEssentialByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*Family, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Family)
	err := c.cc.Invoke(ctx, FamiliesService_ViewEssentialByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Family, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Family)
	err := c.cc.Invoke(ctx, FamiliesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewWithPagination(ctx context.Context, in *FamiliesServicePaginationReq, opts ...grpc.CallOption) (*FamiliesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesServicePaginationResponse)
	err := c.cc.Invoke(ctx, FamiliesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewAllRequirable(ctx context.Context, in *FamilyTypesList, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_ViewAllRequirable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendmentLogsList)
	err := c.cc.Invoke(ctx, FamiliesService_ViewAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) SearchAll(ctx context.Context, in *FamiliesServiceSearchAllReq, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) Filter(ctx context.Context, in *FamiliesServiceFilterReq, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *familiesServiceClient) SearchForPurchase(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_SearchForPurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *familiesServiceClient) SearchForSale(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_SearchForSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *familiesServiceClient) SearchForProduction(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_SearchForProduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *familiesServiceClient) SearchForReplaceables(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_SearchForReplaceables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *familiesServiceClient) SearchForEquationFamily(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_SearchForEquationFamily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *familiesServiceClient) SearchForEquationReplaceable(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_SearchForEquationReplaceable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *familiesServiceClient) SearchForEquationSalesBundle(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, FamiliesService_SearchForEquationSalesBundle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, FamiliesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familiesServiceClient) Count(ctx context.Context, in *FamiliesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, FamiliesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FamiliesService
