// addLeaveAdjustmentRecord
// modifyLeaveAdjustmentRecord
// reorderLeaveAdjustmentRecords
// deleteLeaveAdjustmentRecord
// approveLeaveAdjustmentRecord

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: leaves_adjustments.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeavesAdjustmentsService_Create_FullMethodName                                        = "/Scailo.LeavesAdjustmentsService/Create"
	LeavesAdjustmentsService_Draft_FullMethodName                                         = "/Scailo.LeavesAdjustmentsService/Draft"
	LeavesAdjustmentsService_DraftUpdate_FullMethodName                                   = "/Scailo.LeavesAdjustmentsService/DraftUpdate"
	LeavesAdjustmentsService_SendForVerification_FullMethodName                           = "/Scailo.LeavesAdjustmentsService/SendForVerification"
	LeavesAdjustmentsService_Verify_FullMethodName                                        = "/Scailo.LeavesAdjustmentsService/Verify"
	LeavesAdjustmentsService_Approve_FullMethodName                                       = "/Scailo.LeavesAdjustmentsService/Approve"
	LeavesAdjustmentsService_SendForRevision_FullMethodName                               = "/Scailo.LeavesAdjustmentsService/SendForRevision"
	LeavesAdjustmentsService_RevisionUpdate_FullMethodName                                = "/Scailo.LeavesAdjustmentsService/RevisionUpdate"
	LeavesAdjustmentsService_Halt_FullMethodName                                          = "/Scailo.LeavesAdjustmentsService/Halt"
	LeavesAdjustmentsService_Discard_FullMethodName                                       = "/Scailo.LeavesAdjustmentsService/Discard"
	LeavesAdjustmentsService_Restore_FullMethodName                                       = "/Scailo.LeavesAdjustmentsService/Restore"
	LeavesAdjustmentsService_Complete_FullMethodName                                      = "/Scailo.LeavesAdjustmentsService/Complete"
	LeavesAdjustmentsService_Repeat_FullMethodName                                        = "/Scailo.LeavesAdjustmentsService/Repeat"
	LeavesAdjustmentsService_CommentAdd_FullMethodName                                    = "/Scailo.LeavesAdjustmentsService/CommentAdd"
	LeavesAdjustmentsService_AddLeaveAdjustmentRecord_FullMethodName                      = "/Scailo.LeavesAdjustmentsService/AddLeaveAdjustmentRecord"
	LeavesAdjustmentsService_ModifyLeaveAdjustmentRecord_FullMethodName                   = "/Scailo.LeavesAdjustmentsService/ModifyLeaveAdjustmentRecord"
	LeavesAdjustmentsService_ApproveLeaveAdjustmentRecord_FullMethodName                  = "/Scailo.LeavesAdjustmentsService/ApproveLeaveAdjustmentRecord"
	LeavesAdjustmentsService_DeleteLeaveAdjustmentRecord_FullMethodName                   = "/Scailo.LeavesAdjustmentsService/DeleteLeaveAdjustmentRecord"
	LeavesAdjustmentsService_ReorderLeaveAdjustmentRecords_FullMethodName                 = "/Scailo.LeavesAdjustmentsService/ReorderLeaveAdjustmentRecords"
	LeavesAdjustmentsService_ViewLeaveAdjustmentRecordByID_FullMethodName                 = "/Scailo.LeavesAdjustmentsService/ViewLeaveAdjustmentRecordByID"
	LeavesAdjustmentsService_ViewApprovedLeaveAdjustmentRecords_FullMethodName            = "/Scailo.LeavesAdjustmentsService/ViewApprovedLeaveAdjustmentRecords"
	LeavesAdjustmentsService_ViewUnapprovedLeaveAdjustmentRecords_FullMethodName          = "/Scailo.LeavesAdjustmentsService/ViewUnapprovedLeaveAdjustmentRecords"
	LeavesAdjustmentsService_ViewLeaveAdjustmentRecordHistory_FullMethodName              = "/Scailo.LeavesAdjustmentsService/ViewLeaveAdjustmentRecordHistory"
	LeavesAdjustmentsService_ViewPaginatedApprovedLeaveAdjustmentRecords_FullMethodName   = "/Scailo.LeavesAdjustmentsService/ViewPaginatedApprovedLeaveAdjustmentRecords"
	LeavesAdjustmentsService_ViewPaginatedUnapprovedLeaveAdjustmentRecords_FullMethodName = "/Scailo.LeavesAdjustmentsService/ViewPaginatedUnapprovedLeaveAdjustmentRecords"
	LeavesAdjustmentsService_SearchRecordsWithPagination_FullMethodName                   = "/Scailo.LeavesAdjustmentsService/SearchRecordsWithPagination"
	LeavesAdjustmentsService_ViewByID_FullMethodName                                      = "/Scailo.LeavesAdjustmentsService/ViewByID"
	LeavesAdjustmentsService_ViewByUUID_FullMethodName                                    = "/Scailo.LeavesAdjustmentsService/ViewByUUID"
	LeavesAdjustmentsService_ViewEssentialByID_FullMethodName                             = "/Scailo.LeavesAdjustmentsService/ViewEssentialByID"
	LeavesAdjustmentsService_ViewEssentialByUUID_FullMethodName                           = "/Scailo.LeavesAdjustmentsService/ViewEssentialByUUID"
	LeavesAdjustmentsService_ViewFromIDs_FullMethodName                                   = "/Scailo.LeavesAdjustmentsService/ViewFromIDs"
	LeavesAdjustmentsService_ViewAll_FullMethodName                                       = "/Scailo.LeavesAdjustmentsService/ViewAll"
	LeavesAdjustmentsService_ViewAllForEntityUUID_FullMethodName                          = "/Scailo.LeavesAdjustmentsService/ViewAllForEntityUUID"
	LeavesAdjustmentsService_ViewWithPagination_FullMethodName                            = "/Scailo.LeavesAdjustmentsService/ViewWithPagination"
	LeavesAdjustmentsService_SearchAll_FullMethodName                                     = "/Scailo.LeavesAdjustmentsService/SearchAll"
	LeavesAdjustmentsService_Filter_FullMethodName                                        = "/Scailo.LeavesAdjustmentsService/Filter"
	LeavesAdjustmentsService_CountInStatus_FullMethodName                                 = "/Scailo.LeavesAdjustmentsService/CountInStatus"
	LeavesAdjustmentsService_Count_FullMethodName                                         = "/Scailo.LeavesAdjustmentsService/Count"
	LeavesAdjustmentsService_DownloadAsCSV_FullMethodName                                 = "/Scailo.LeavesAdjustmentsService/DownloadAsCSV"
)

// LeavesAdjustmentsServiceClient is the client API for LeavesAdjustmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each record
type LeavesAdjustmentsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *LeavesAdjustmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *LeavesAdjustmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *LeavesAdjustmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *LeavesAdjustmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a record to a record
	AddLeaveAdjustmentRecord(ctx context.Context, in *LeavesAdjustmentsServiceRecordCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify a record in a record
	ModifyLeaveAdjustmentRecord(ctx context.Context, in *LeavesAdjustmentsServiceRecordUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a record in a record
	ApproveLeaveAdjustmentRecord(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a record in a record
	DeleteLeaveAdjustmentRecord(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder records
	ReorderLeaveAdjustmentRecords(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Leave Adjustment Record by ID
	ViewLeaveAdjustmentRecordByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*LeaveAdjustmentRecord, error)
	// View approved leave adjustment records for given record ID
	ViewApprovedLeaveAdjustmentRecords(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*LeavesAdjustmentsRecordsList, error)
	// View unapproved leave adjustment records for given record ID
	ViewUnapprovedLeaveAdjustmentRecords(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*LeavesAdjustmentsRecordsList, error)
	// View the history of the record
	ViewLeaveAdjustmentRecordHistory(ctx context.Context, in *LeavesAdjustmentsRecordsHistoryRequest, opts ...grpc.CallOption) (*LeavesAdjustmentsRecordsList, error)
	// View approved leave adjustment records for given leave adjustment ID with pagination
	ViewPaginatedApprovedLeaveAdjustmentRecords(ctx context.Context, in *LeaveAdjustmentRecordsSearchRequest, opts ...grpc.CallOption) (*LeavesAdjustmentsServicePaginatedRecordsResponse, error)
	// View unapproved leave adjustment records for given leave adjustment ID with pagination
	ViewPaginatedUnapprovedLeaveAdjustmentRecords(ctx context.Context, in *LeaveAdjustmentRecordsSearchRequest, opts ...grpc.CallOption) (*LeavesAdjustmentsServicePaginatedRecordsResponse, error)
	// Search through leave adjustment records with pagination
	SearchRecordsWithPagination(ctx context.Context, in *LeaveAdjustmentRecordsSearchRequest, opts ...grpc.CallOption) (*LeavesAdjustmentsServicePaginatedRecordsResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*LeaveAdjustment, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeaveAdjustment, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*LeaveAdjustment, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeaveAdjustment, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*LeavesAdjustmentsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*LeavesAdjustmentsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeavesAdjustmentsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *LeavesAdjustmentsServicePaginationReq, opts ...grpc.CallOption) (*LeavesAdjustmentsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *LeavesAdjustmentsServiceSearchAllReq, opts ...grpc.CallOption) (*LeavesAdjustmentsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *LeavesAdjustmentsServiceFilterReq, opts ...grpc.CallOption) (*LeavesAdjustmentsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *LeavesAdjustmentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *LeavesAdjustmentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type leavesAdjustmentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeavesAdjustmentsServiceClient(cc grpc.ClientConnInterface) LeavesAdjustmentsServiceClient {
	return &leavesAdjustmentsServiceClient{cc}
}

func (c *leavesAdjustmentsServiceClient) Create(ctx context.Context, in *LeavesAdjustmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) Draft(ctx context.Context, in *LeavesAdjustmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) DraftUpdate(ctx context.Context, in *LeavesAdjustmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) RevisionUpdate(ctx context.Context, in *LeavesAdjustmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) AddLeaveAdjustmentRecord(ctx context.Context, in *LeavesAdjustmentsServiceRecordCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_AddLeaveAdjustmentRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ModifyLeaveAdjustmentRecord(ctx context.Context, in *LeavesAdjustmentsServiceRecordUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ModifyLeaveAdjustmentRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ApproveLeaveAdjustmentRecord(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ApproveLeaveAdjustmentRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) DeleteLeaveAdjustmentRecord(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_DeleteLeaveAdjustmentRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ReorderLeaveAdjustmentRecords(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ReorderLeaveAdjustmentRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewLeaveAdjustmentRecordByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*LeaveAdjustmentRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveAdjustmentRecord)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewLeaveAdjustmentRecordByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewApprovedLeaveAdjustmentRecords(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*LeavesAdjustmentsRecordsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsRecordsList)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewApprovedLeaveAdjustmentRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewUnapprovedLeaveAdjustmentRecords(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*LeavesAdjustmentsRecordsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsRecordsList)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewUnapprovedLeaveAdjustmentRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewLeaveAdjustmentRecordHistory(ctx context.Context, in *LeavesAdjustmentsRecordsHistoryRequest, opts ...grpc.CallOption) (*LeavesAdjustmentsRecordsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsRecordsList)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewLeaveAdjustmentRecordHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewPaginatedApprovedLeaveAdjustmentRecords(ctx context.Context, in *LeaveAdjustmentRecordsSearchRequest, opts ...grpc.CallOption) (*LeavesAdjustmentsServicePaginatedRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsServicePaginatedRecordsResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewPaginatedApprovedLeaveAdjustmentRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewPaginatedUnapprovedLeaveAdjustmentRecords(ctx context.Context, in *LeaveAdjustmentRecordsSearchRequest, opts ...grpc.CallOption) (*LeavesAdjustmentsServicePaginatedRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsServicePaginatedRecordsResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewPaginatedUnapprovedLeaveAdjustmentRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) SearchRecordsWithPagination(ctx context.Context, in *LeaveAdjustmentRecordsSearchRequest, opts ...grpc.CallOption) (*LeavesAdjustmentsServicePaginatedRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsServicePaginatedRecordsResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_SearchRecordsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*LeaveAdjustment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveAdjustment)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeaveAdjustment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveAdjustment)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*LeaveAdjustment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveAdjustment)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeaveAdjustment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveAdjustment)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*LeavesAdjustmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsList)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*LeavesAdjustmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsList)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LeavesAdjustmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsList)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) ViewWithPagination(ctx context.Context, in *LeavesAdjustmentsServicePaginationReq, opts ...grpc.CallOption) (*LeavesAdjustmentsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsServicePaginationResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) SearchAll(ctx context.Context, in *LeavesAdjustmentsServiceSearchAllReq, opts ...grpc.CallOption) (*LeavesAdjustmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsList)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) Filter(ctx context.Context, in *LeavesAdjustmentsServiceFilterReq, opts ...grpc.CallOption) (*LeavesAdjustmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavesAdjustmentsList)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) Count(ctx context.Context, in *LeavesAdjustmentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavesAdjustmentsServiceClient) DownloadAsCSV(ctx context.Context, in *LeavesAdjustmentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, LeavesAdjustmentsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeavesAdjustmentsService
