// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sales_receipts.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SalesReceiptsService_Create_FullMethodName                        = "/Scailo.SalesReceiptsService/Create"
	SalesReceiptsService_Draft_FullMethodName                         = "/Scailo.SalesReceiptsService/Draft"
	SalesReceiptsService_DraftUpdate_FullMethodName                   = "/Scailo.SalesReceiptsService/DraftUpdate"
	SalesReceiptsService_SendForVerification_FullMethodName           = "/Scailo.SalesReceiptsService/SendForVerification"
	SalesReceiptsService_Verify_FullMethodName                        = "/Scailo.SalesReceiptsService/Verify"
	SalesReceiptsService_Approve_FullMethodName                       = "/Scailo.SalesReceiptsService/Approve"
	SalesReceiptsService_SendForRevision_FullMethodName               = "/Scailo.SalesReceiptsService/SendForRevision"
	SalesReceiptsService_RevisionUpdate_FullMethodName                = "/Scailo.SalesReceiptsService/RevisionUpdate"
	SalesReceiptsService_Halt_FullMethodName                          = "/Scailo.SalesReceiptsService/Halt"
	SalesReceiptsService_Discard_FullMethodName                       = "/Scailo.SalesReceiptsService/Discard"
	SalesReceiptsService_Restore_FullMethodName                       = "/Scailo.SalesReceiptsService/Restore"
	SalesReceiptsService_Complete_FullMethodName                      = "/Scailo.SalesReceiptsService/Complete"
	SalesReceiptsService_Repeat_FullMethodName                        = "/Scailo.SalesReceiptsService/Repeat"
	SalesReceiptsService_CommentAdd_FullMethodName                    = "/Scailo.SalesReceiptsService/CommentAdd"
	SalesReceiptsService_CreateMagicLink_FullMethodName               = "/Scailo.SalesReceiptsService/CreateMagicLink"
	SalesReceiptsService_ViewByID_FullMethodName                      = "/Scailo.SalesReceiptsService/ViewByID"
	SalesReceiptsService_ViewByUUID_FullMethodName                    = "/Scailo.SalesReceiptsService/ViewByUUID"
	SalesReceiptsService_ViewEssentialByID_FullMethodName             = "/Scailo.SalesReceiptsService/ViewEssentialByID"
	SalesReceiptsService_ViewEssentialByUUID_FullMethodName           = "/Scailo.SalesReceiptsService/ViewEssentialByUUID"
	SalesReceiptsService_ViewFromIDs_FullMethodName                   = "/Scailo.SalesReceiptsService/ViewFromIDs"
	SalesReceiptsService_ViewAncillaryParametersByUUID_FullMethodName = "/Scailo.SalesReceiptsService/ViewAncillaryParametersByUUID"
	SalesReceiptsService_ViewAll_FullMethodName                       = "/Scailo.SalesReceiptsService/ViewAll"
	SalesReceiptsService_ViewAllForEntityUUID_FullMethodName          = "/Scailo.SalesReceiptsService/ViewAllForEntityUUID"
	SalesReceiptsService_ViewWithPagination_FullMethodName            = "/Scailo.SalesReceiptsService/ViewWithPagination"
	SalesReceiptsService_SearchAll_FullMethodName                     = "/Scailo.SalesReceiptsService/SearchAll"
	SalesReceiptsService_Filter_FullMethodName                        = "/Scailo.SalesReceiptsService/Filter"
	SalesReceiptsService_CountInStatus_FullMethodName                 = "/Scailo.SalesReceiptsService/CountInStatus"
	SalesReceiptsService_Count_FullMethodName                         = "/Scailo.SalesReceiptsService/Count"
	SalesReceiptsService_DownloadAsCSV_FullMethodName                 = "/Scailo.SalesReceiptsService/DownloadAsCSV"
)

// SalesReceiptsServiceClient is the client API for SalesReceiptsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each sales receipt
type SalesReceiptsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *SalesReceiptsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *SalesReceiptsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *SalesReceiptsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *SalesReceiptsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	// rpc SendEmail (Identifier) returns (IdentifierResponse);
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SaleReceipt, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SaleReceipt, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SaleReceipt, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SaleReceipt, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalesReceiptsList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SaleReceiptAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalesReceiptsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesReceiptsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *SalesReceiptsServicePaginationReq, opts ...grpc.CallOption) (*SalesReceiptsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *SalesReceiptsServiceSearchAllReq, opts ...grpc.CallOption) (*SalesReceiptsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *SalesReceiptsServiceFilterReq, opts ...grpc.CallOption) (*SalesReceiptsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *SalesReceiptsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *SalesReceiptsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type salesReceiptsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesReceiptsServiceClient(cc grpc.ClientConnInterface) SalesReceiptsServiceClient {
	return &salesReceiptsServiceClient{cc}
}

func (c *salesReceiptsServiceClient) Create(ctx context.Context, in *SalesReceiptsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) Draft(ctx context.Context, in *SalesReceiptsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) DraftUpdate(ctx context.Context, in *SalesReceiptsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) RevisionUpdate(ctx context.Context, in *SalesReceiptsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, SalesReceiptsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SaleReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleReceipt)
	err := c.cc.Invoke(ctx, SalesReceiptsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SaleReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleReceipt)
	err := c.cc.Invoke(ctx, SalesReceiptsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SaleReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleReceipt)
	err := c.cc.Invoke(ctx, SalesReceiptsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SaleReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleReceipt)
	err := c.cc.Invoke(ctx, SalesReceiptsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalesReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesReceiptsList)
	err := c.cc.Invoke(ctx, SalesReceiptsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SaleReceiptAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleReceiptAncillaryParameters)
	err := c.cc.Invoke(ctx, SalesReceiptsService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalesReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesReceiptsList)
	err := c.cc.Invoke(ctx, SalesReceiptsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesReceiptsList)
	err := c.cc.Invoke(ctx, SalesReceiptsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) ViewWithPagination(ctx context.Context, in *SalesReceiptsServicePaginationReq, opts ...grpc.CallOption) (*SalesReceiptsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesReceiptsServicePaginationResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) SearchAll(ctx context.Context, in *SalesReceiptsServiceSearchAllReq, opts ...grpc.CallOption) (*SalesReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesReceiptsList)
	err := c.cc.Invoke(ctx, SalesReceiptsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) Filter(ctx context.Context, in *SalesReceiptsServiceFilterReq, opts ...grpc.CallOption) (*SalesReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesReceiptsList)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) Count(ctx context.Context, in *SalesReceiptsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalesReceiptsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesReceiptsServiceClient) DownloadAsCSV(ctx context.Context, in *SalesReceiptsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesReceiptsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesReceiptsService
