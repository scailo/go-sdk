// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: stock_returns.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockReturnsService_Create_FullMethodName                                  = "/Scailo.StockReturnsService/Create"
	StockReturnsService_Draft_FullMethodName                                   = "/Scailo.StockReturnsService/Draft"
	StockReturnsService_DraftUpdate_FullMethodName                             = "/Scailo.StockReturnsService/DraftUpdate"
	StockReturnsService_SendForVerification_FullMethodName                     = "/Scailo.StockReturnsService/SendForVerification"
	StockReturnsService_Verify_FullMethodName                                  = "/Scailo.StockReturnsService/Verify"
	StockReturnsService_Approve_FullMethodName                                 = "/Scailo.StockReturnsService/Approve"
	StockReturnsService_SendForRevision_FullMethodName                         = "/Scailo.StockReturnsService/SendForRevision"
	StockReturnsService_RevisionUpdate_FullMethodName                          = "/Scailo.StockReturnsService/RevisionUpdate"
	StockReturnsService_Halt_FullMethodName                                    = "/Scailo.StockReturnsService/Halt"
	StockReturnsService_Discard_FullMethodName                                 = "/Scailo.StockReturnsService/Discard"
	StockReturnsService_Restore_FullMethodName                                 = "/Scailo.StockReturnsService/Restore"
	StockReturnsService_Complete_FullMethodName                                = "/Scailo.StockReturnsService/Complete"
	StockReturnsService_Repeat_FullMethodName                                  = "/Scailo.StockReturnsService/Repeat"
	StockReturnsService_Reopen_FullMethodName                                  = "/Scailo.StockReturnsService/Reopen"
	StockReturnsService_CommentAdd_FullMethodName                              = "/Scailo.StockReturnsService/CommentAdd"
	StockReturnsService_SendEmail_FullMethodName                               = "/Scailo.StockReturnsService/SendEmail"
	StockReturnsService_CreateMagicLink_FullMethodName                         = "/Scailo.StockReturnsService/CreateMagicLink"
	StockReturnsService_IsCompletable_FullMethodName                           = "/Scailo.StockReturnsService/IsCompletable"
	StockReturnsService_AddStockReturnItem_FullMethodName                      = "/Scailo.StockReturnsService/AddStockReturnItem"
	StockReturnsService_ModifyStockReturnItem_FullMethodName                   = "/Scailo.StockReturnsService/ModifyStockReturnItem"
	StockReturnsService_ApproveStockReturnItem_FullMethodName                  = "/Scailo.StockReturnsService/ApproveStockReturnItem"
	StockReturnsService_DeleteStockReturnItem_FullMethodName                   = "/Scailo.StockReturnsService/DeleteStockReturnItem"
	StockReturnsService_ReorderStockReturnItems_FullMethodName                 = "/Scailo.StockReturnsService/ReorderStockReturnItems"
	StockReturnsService_ViewStockReturnItemByID_FullMethodName                 = "/Scailo.StockReturnsService/ViewStockReturnItemByID"
	StockReturnsService_ViewStockReturnItemByInventoryHash_FullMethodName      = "/Scailo.StockReturnsService/ViewStockReturnItemByInventoryHash"
	StockReturnsService_ViewApprovedStockReturnItems_FullMethodName            = "/Scailo.StockReturnsService/ViewApprovedStockReturnItems"
	StockReturnsService_ViewUnapprovedStockReturnItems_FullMethodName          = "/Scailo.StockReturnsService/ViewUnapprovedStockReturnItems"
	StockReturnsService_ViewStockReturnItemHistory_FullMethodName              = "/Scailo.StockReturnsService/ViewStockReturnItemHistory"
	StockReturnsService_ViewPaginatedApprovedStockReturnItems_FullMethodName   = "/Scailo.StockReturnsService/ViewPaginatedApprovedStockReturnItems"
	StockReturnsService_ViewPaginatedUnapprovedStockReturnItems_FullMethodName = "/Scailo.StockReturnsService/ViewPaginatedUnapprovedStockReturnItems"
	StockReturnsService_SearchItemsWithPagination_FullMethodName               = "/Scailo.StockReturnsService/SearchItemsWithPagination"
	StockReturnsService_DownloadItemsAsCSV_FullMethodName                      = "/Scailo.StockReturnsService/DownloadItemsAsCSV"
	StockReturnsService_DownloadItemsTemplateAsCSV_FullMethodName              = "/Scailo.StockReturnsService/DownloadItemsTemplateAsCSV"
	StockReturnsService_ViewByID_FullMethodName                                = "/Scailo.StockReturnsService/ViewByID"
	StockReturnsService_ViewByUUID_FullMethodName                              = "/Scailo.StockReturnsService/ViewByUUID"
	StockReturnsService_ViewByReferenceID_FullMethodName                       = "/Scailo.StockReturnsService/ViewByReferenceID"
	StockReturnsService_ViewEssentialByID_FullMethodName                       = "/Scailo.StockReturnsService/ViewEssentialByID"
	StockReturnsService_ViewEssentialByUUID_FullMethodName                     = "/Scailo.StockReturnsService/ViewEssentialByUUID"
	StockReturnsService_ViewFromIDs_FullMethodName                             = "/Scailo.StockReturnsService/ViewFromIDs"
	StockReturnsService_ViewAll_FullMethodName                                 = "/Scailo.StockReturnsService/ViewAll"
	StockReturnsService_ViewAllForEntityUUID_FullMethodName                    = "/Scailo.StockReturnsService/ViewAllForEntityUUID"
	StockReturnsService_ViewWithPagination_FullMethodName                      = "/Scailo.StockReturnsService/ViewWithPagination"
	StockReturnsService_ViewProspectiveFamilies_FullMethodName                 = "/Scailo.StockReturnsService/ViewProspectiveFamilies"
	StockReturnsService_FilterProspectiveFamilies_FullMethodName               = "/Scailo.StockReturnsService/FilterProspectiveFamilies"
	StockReturnsService_ViewProspectiveStockReturnItem_FullMethodName          = "/Scailo.StockReturnsService/ViewProspectiveStockReturnItem"
	StockReturnsService_SearchReturnableInventory_FullMethodName               = "/Scailo.StockReturnsService/SearchReturnableInventory"
	StockReturnsService_FilterReturnableInventory_FullMethodName               = "/Scailo.StockReturnsService/FilterReturnableInventory"
	StockReturnsService_ViewAddedFamilyQuantityForSource_FullMethodName        = "/Scailo.StockReturnsService/ViewAddedFamilyQuantityForSource"
	StockReturnsService_IsDownloadable_FullMethodName                          = "/Scailo.StockReturnsService/IsDownloadable"
	StockReturnsService_DownloadByUUID_FullMethodName                          = "/Scailo.StockReturnsService/DownloadByUUID"
	StockReturnsService_DownloadLabelByUUID_FullMethodName                     = "/Scailo.StockReturnsService/DownloadLabelByUUID"
	StockReturnsService_SearchAll_FullMethodName                               = "/Scailo.StockReturnsService/SearchAll"
	StockReturnsService_Filter_FullMethodName                                  = "/Scailo.StockReturnsService/Filter"
	StockReturnsService_CountInStatus_FullMethodName                           = "/Scailo.StockReturnsService/CountInStatus"
	StockReturnsService_Count_FullMethodName                                   = "/Scailo.StockReturnsService/Count"
	StockReturnsService_DownloadAsCSV_FullMethodName                           = "/Scailo.StockReturnsService/DownloadAsCSV"
)

// StockReturnsServiceClient is the client API for StockReturnsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each stock return
type StockReturnsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *StockReturnsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *StockReturnsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *StockReturnsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *StockReturnsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Checks if the Stock Return can be marked as completed
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Add an item to a stock return
	AddStockReturnItem(ctx context.Context, in *StockReturnsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a stock return
	ModifyStockReturnItem(ctx context.Context, in *StockReturnsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a stock return
	ApproveStockReturnItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a stock return
	DeleteStockReturnItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a stock return
	ReorderStockReturnItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Stock Return Item by ID
	ViewStockReturnItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockReturnItem, error)
	// View Stock Return Item by Inventory Hash
	ViewStockReturnItemByInventoryHash(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockReturnItem, error)
	// View approved stock return items for given stock return ID
	ViewApprovedStockReturnItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockReturnsItemsList, error)
	// View unapproved stock return items for given stock return ID
	ViewUnapprovedStockReturnItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockReturnsItemsList, error)
	// View the history of the stock return item
	ViewStockReturnItemHistory(ctx context.Context, in *StockReturnItemHistoryRequest, opts ...grpc.CallOption) (*StockReturnsItemsList, error)
	// View approved stock return items for given stock return ID with pagination
	ViewPaginatedApprovedStockReturnItems(ctx context.Context, in *StockReturnItemsSearchRequest, opts ...grpc.CallOption) (*StockReturnsServicePaginatedItemsResponse, error)
	// View unapproved stock return items for given stock return ID with pagination
	ViewPaginatedUnapprovedStockReturnItems(ctx context.Context, in *StockReturnItemsSearchRequest, opts ...grpc.CallOption) (*StockReturnsServicePaginatedItemsResponse, error)
	// Search through stock return items with pagination
	SearchItemsWithPagination(ctx context.Context, in *StockReturnItemsSearchRequest, opts ...grpc.CallOption) (*StockReturnsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockReturn, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockReturn, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockReturn, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockReturn, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockReturn, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*StockReturnsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*StockReturnsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockReturnsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *StockReturnsServicePaginationReq, opts ...grpc.CallOption) (*StockReturnsServicePaginationResponse, error)
	// View prospective families for the given stock return
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective stock return item info for the given family ID and stock return ID
	ViewProspectiveStockReturnItem(ctx context.Context, in *StockReturnItemProspectiveInfoRequest, opts ...grpc.CallOption) (*StockReturnsServiceItemCreateRequest, error)
	// Search for returnable inventory
	SearchReturnableInventory(ctx context.Context, in *SearchReturnableInventoryForIdentifierUUID, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// Filter returnable inventory
	FilterReturnableInventory(ctx context.Context, in *FilterReturnableInventoryForIdentifierUUID, opts ...grpc.CallOption) (*GenericInventoryList, error)
	// View already added quantities
	ViewAddedFamilyQuantityForSource(ctx context.Context, in *StockReturnsServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*QuantityResponse, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download stock return with the given IdentifierUUID
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the label for the purchase return with the given IdentifierUUID
	DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *StockReturnsServiceSearchAllReq, opts ...grpc.CallOption) (*StockReturnsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *StockReturnsServiceFilterReq, opts ...grpc.CallOption) (*StockReturnsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *StockReturnsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *StockReturnsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type stockReturnsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockReturnsServiceClient(cc grpc.ClientConnInterface) StockReturnsServiceClient {
	return &stockReturnsServiceClient{cc}
}

func (c *stockReturnsServiceClient) Create(ctx context.Context, in *StockReturnsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Draft(ctx context.Context, in *StockReturnsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) DraftUpdate(ctx context.Context, in *StockReturnsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) RevisionUpdate(ctx context.Context, in *StockReturnsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, StockReturnsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) AddStockReturnItem(ctx context.Context, in *StockReturnsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_AddStockReturnItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ModifyStockReturnItem(ctx context.Context, in *StockReturnsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_ModifyStockReturnItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ApproveStockReturnItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_ApproveStockReturnItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) DeleteStockReturnItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_DeleteStockReturnItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ReorderStockReturnItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_ReorderStockReturnItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewStockReturnItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockReturnItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnItem)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewStockReturnItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewStockReturnItemByInventoryHash(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockReturnItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnItem)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewStockReturnItemByInventoryHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewApprovedStockReturnItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockReturnsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsItemsList)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewApprovedStockReturnItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewUnapprovedStockReturnItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockReturnsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsItemsList)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewUnapprovedStockReturnItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewStockReturnItemHistory(ctx context.Context, in *StockReturnItemHistoryRequest, opts ...grpc.CallOption) (*StockReturnsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsItemsList)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewStockReturnItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewPaginatedApprovedStockReturnItems(ctx context.Context, in *StockReturnItemsSearchRequest, opts ...grpc.CallOption) (*StockReturnsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewPaginatedApprovedStockReturnItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewPaginatedUnapprovedStockReturnItems(ctx context.Context, in *StockReturnItemsSearchRequest, opts ...grpc.CallOption) (*StockReturnsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewPaginatedUnapprovedStockReturnItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) SearchItemsWithPagination(ctx context.Context, in *StockReturnItemsSearchRequest, opts ...grpc.CallOption) (*StockReturnsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockReturnsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockReturnsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturn)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturn)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturn)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturn)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturn)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*StockReturnsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsList)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*StockReturnsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsList)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockReturnsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsList)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewWithPagination(ctx context.Context, in *StockReturnsServicePaginationReq, opts ...grpc.CallOption) (*StockReturnsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsServicePaginationResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, StockReturnsService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewProspectiveStockReturnItem(ctx context.Context, in *StockReturnItemProspectiveInfoRequest, opts ...grpc.CallOption) (*StockReturnsServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewProspectiveStockReturnItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) SearchReturnableInventory(ctx context.Context, in *SearchReturnableInventoryForIdentifierUUID, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, StockReturnsService_SearchReturnableInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) FilterReturnableInventory(ctx context.Context, in *FilterReturnableInventoryForIdentifierUUID, opts ...grpc.CallOption) (*GenericInventoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericInventoryList)
	err := c.cc.Invoke(ctx, StockReturnsService_FilterReturnableInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) ViewAddedFamilyQuantityForSource(ctx context.Context, in *StockReturnsServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*QuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuantityResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_ViewAddedFamilyQuantityForSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockReturnsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockReturnsService_DownloadLabelByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) SearchAll(ctx context.Context, in *StockReturnsServiceSearchAllReq, opts ...grpc.CallOption) (*StockReturnsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsList)
	err := c.cc.Invoke(ctx, StockReturnsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Filter(ctx context.Context, in *StockReturnsServiceFilterReq, opts ...grpc.CallOption) (*StockReturnsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockReturnsList)
	err := c.cc.Invoke(ctx, StockReturnsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) Count(ctx context.Context, in *StockReturnsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, StockReturnsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReturnsServiceClient) DownloadAsCSV(ctx context.Context, in *StockReturnsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockReturnsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockReturnsService
