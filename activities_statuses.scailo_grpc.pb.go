// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: activities_statuses.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActivitiesStatusesService_Create_FullMethodName               = "/Scailo.ActivitiesStatusesService/Create"
	ActivitiesStatusesService_Draft_FullMethodName                = "/Scailo.ActivitiesStatusesService/Draft"
	ActivitiesStatusesService_DraftUpdate_FullMethodName          = "/Scailo.ActivitiesStatusesService/DraftUpdate"
	ActivitiesStatusesService_SendForVerification_FullMethodName  = "/Scailo.ActivitiesStatusesService/SendForVerification"
	ActivitiesStatusesService_Verify_FullMethodName               = "/Scailo.ActivitiesStatusesService/Verify"
	ActivitiesStatusesService_Approve_FullMethodName              = "/Scailo.ActivitiesStatusesService/Approve"
	ActivitiesStatusesService_SendForRevision_FullMethodName      = "/Scailo.ActivitiesStatusesService/SendForRevision"
	ActivitiesStatusesService_RevisionUpdate_FullMethodName       = "/Scailo.ActivitiesStatusesService/RevisionUpdate"
	ActivitiesStatusesService_Halt_FullMethodName                 = "/Scailo.ActivitiesStatusesService/Halt"
	ActivitiesStatusesService_Discard_FullMethodName              = "/Scailo.ActivitiesStatusesService/Discard"
	ActivitiesStatusesService_Restore_FullMethodName              = "/Scailo.ActivitiesStatusesService/Restore"
	ActivitiesStatusesService_CommentAdd_FullMethodName           = "/Scailo.ActivitiesStatusesService/CommentAdd"
	ActivitiesStatusesService_ViewByID_FullMethodName             = "/Scailo.ActivitiesStatusesService/ViewByID"
	ActivitiesStatusesService_ViewByUUID_FullMethodName           = "/Scailo.ActivitiesStatusesService/ViewByUUID"
	ActivitiesStatusesService_ViewEssentialByID_FullMethodName    = "/Scailo.ActivitiesStatusesService/ViewEssentialByID"
	ActivitiesStatusesService_ViewEssentialByUUID_FullMethodName  = "/Scailo.ActivitiesStatusesService/ViewEssentialByUUID"
	ActivitiesStatusesService_ViewFromIDs_FullMethodName          = "/Scailo.ActivitiesStatusesService/ViewFromIDs"
	ActivitiesStatusesService_ViewAll_FullMethodName              = "/Scailo.ActivitiesStatusesService/ViewAll"
	ActivitiesStatusesService_ViewAllForEntityUUID_FullMethodName = "/Scailo.ActivitiesStatusesService/ViewAllForEntityUUID"
	ActivitiesStatusesService_ViewWithPagination_FullMethodName   = "/Scailo.ActivitiesStatusesService/ViewWithPagination"
	ActivitiesStatusesService_SearchAll_FullMethodName            = "/Scailo.ActivitiesStatusesService/SearchAll"
	ActivitiesStatusesService_Filter_FullMethodName               = "/Scailo.ActivitiesStatusesService/Filter"
	ActivitiesStatusesService_CountInStatus_FullMethodName        = "/Scailo.ActivitiesStatusesService/CountInStatus"
	ActivitiesStatusesService_Count_FullMethodName                = "/Scailo.ActivitiesStatusesService/Count"
	ActivitiesStatusesService_DownloadAsCSV_FullMethodName        = "/Scailo.ActivitiesStatusesService/DownloadAsCSV"
	ActivitiesStatusesService_ImportFromCSV_FullMethodName        = "/Scailo.ActivitiesStatusesService/ImportFromCSV"
)

// ActivitiesStatusesServiceClient is the client API for ActivitiesStatusesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each activity status
type ActivitiesStatusesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *ActivitiesStatusesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *ActivitiesStatusesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *ActivitiesStatusesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *ActivitiesStatusesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityStatus, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityStatus, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityStatus, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityStatus, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ActivitiesStatusesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ActivitiesStatusesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivitiesStatusesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *ActivitiesStatusesServicePaginationReq, opts ...grpc.CallOption) (*ActivitiesStatusesServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *ActivitiesStatusesServiceSearchAllReq, opts ...grpc.CallOption) (*ActivitiesStatusesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *ActivitiesStatusesServiceFilterReq, opts ...grpc.CallOption) (*ActivitiesStatusesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *ActivitiesStatusesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *ActivitiesStatusesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type activitiesStatusesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivitiesStatusesServiceClient(cc grpc.ClientConnInterface) ActivitiesStatusesServiceClient {
	return &activitiesStatusesServiceClient{cc}
}

func (c *activitiesStatusesServiceClient) Create(ctx context.Context, in *ActivitiesStatusesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) Draft(ctx context.Context, in *ActivitiesStatusesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) DraftUpdate(ctx context.Context, in *ActivitiesStatusesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) RevisionUpdate(ctx context.Context, in *ActivitiesStatusesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityStatus)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityStatus)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ActivityStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityStatus)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivityStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityStatus)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*ActivitiesStatusesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesStatusesList)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*ActivitiesStatusesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesStatusesList)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ActivitiesStatusesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesStatusesList)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) ViewWithPagination(ctx context.Context, in *ActivitiesStatusesServicePaginationReq, opts ...grpc.CallOption) (*ActivitiesStatusesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesStatusesServicePaginationResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) SearchAll(ctx context.Context, in *ActivitiesStatusesServiceSearchAllReq, opts ...grpc.CallOption) (*ActivitiesStatusesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesStatusesList)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) Filter(ctx context.Context, in *ActivitiesStatusesServiceFilterReq, opts ...grpc.CallOption) (*ActivitiesStatusesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivitiesStatusesList)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) Count(ctx context.Context, in *ActivitiesStatusesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) DownloadAsCSV(ctx context.Context, in *ActivitiesStatusesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activitiesStatusesServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, ActivitiesStatusesService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivitiesStatusesService
