// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: credit_notes.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreditNotesService_Create_FullMethodName                                 = "/Scailo.CreditNotesService/Create"
	CreditNotesService_Draft_FullMethodName                                  = "/Scailo.CreditNotesService/Draft"
	CreditNotesService_DraftUpdate_FullMethodName                            = "/Scailo.CreditNotesService/DraftUpdate"
	CreditNotesService_SendForVerification_FullMethodName                    = "/Scailo.CreditNotesService/SendForVerification"
	CreditNotesService_Verify_FullMethodName                                 = "/Scailo.CreditNotesService/Verify"
	CreditNotesService_Approve_FullMethodName                                = "/Scailo.CreditNotesService/Approve"
	CreditNotesService_SendForRevision_FullMethodName                        = "/Scailo.CreditNotesService/SendForRevision"
	CreditNotesService_RevisionUpdate_FullMethodName                         = "/Scailo.CreditNotesService/RevisionUpdate"
	CreditNotesService_Halt_FullMethodName                                   = "/Scailo.CreditNotesService/Halt"
	CreditNotesService_Discard_FullMethodName                                = "/Scailo.CreditNotesService/Discard"
	CreditNotesService_Restore_FullMethodName                                = "/Scailo.CreditNotesService/Restore"
	CreditNotesService_Complete_FullMethodName                               = "/Scailo.CreditNotesService/Complete"
	CreditNotesService_Repeat_FullMethodName                                 = "/Scailo.CreditNotesService/Repeat"
	CreditNotesService_Reopen_FullMethodName                                 = "/Scailo.CreditNotesService/Reopen"
	CreditNotesService_CommentAdd_FullMethodName                             = "/Scailo.CreditNotesService/CommentAdd"
	CreditNotesService_SendEmail_FullMethodName                              = "/Scailo.CreditNotesService/SendEmail"
	CreditNotesService_Autofill_FullMethodName                               = "/Scailo.CreditNotesService/Autofill"
	CreditNotesService_CreateMagicLink_FullMethodName                        = "/Scailo.CreditNotesService/CreateMagicLink"
	CreditNotesService_AddCreditNoteItem_FullMethodName                      = "/Scailo.CreditNotesService/AddCreditNoteItem"
	CreditNotesService_ModifyCreditNoteItem_FullMethodName                   = "/Scailo.CreditNotesService/ModifyCreditNoteItem"
	CreditNotesService_ApproveCreditNoteItem_FullMethodName                  = "/Scailo.CreditNotesService/ApproveCreditNoteItem"
	CreditNotesService_DeleteCreditNoteItem_FullMethodName                   = "/Scailo.CreditNotesService/DeleteCreditNoteItem"
	CreditNotesService_ReorderCreditNoteItems_FullMethodName                 = "/Scailo.CreditNotesService/ReorderCreditNoteItems"
	CreditNotesService_ViewCreditNoteItemByID_FullMethodName                 = "/Scailo.CreditNotesService/ViewCreditNoteItemByID"
	CreditNotesService_ViewApprovedCreditNoteItems_FullMethodName            = "/Scailo.CreditNotesService/ViewApprovedCreditNoteItems"
	CreditNotesService_ViewUnapprovedCreditNoteItems_FullMethodName          = "/Scailo.CreditNotesService/ViewUnapprovedCreditNoteItems"
	CreditNotesService_ViewCreditNoteItemHistory_FullMethodName              = "/Scailo.CreditNotesService/ViewCreditNoteItemHistory"
	CreditNotesService_ViewPaginatedApprovedCreditNoteItems_FullMethodName   = "/Scailo.CreditNotesService/ViewPaginatedApprovedCreditNoteItems"
	CreditNotesService_ViewPaginatedUnapprovedCreditNoteItems_FullMethodName = "/Scailo.CreditNotesService/ViewPaginatedUnapprovedCreditNoteItems"
	CreditNotesService_SearchItemsWithPagination_FullMethodName              = "/Scailo.CreditNotesService/SearchItemsWithPagination"
	CreditNotesService_DownloadItemsAsCSV_FullMethodName                     = "/Scailo.CreditNotesService/DownloadItemsAsCSV"
	CreditNotesService_DownloadItemsTemplateAsCSV_FullMethodName             = "/Scailo.CreditNotesService/DownloadItemsTemplateAsCSV"
	CreditNotesService_UploadCreditNoteItems_FullMethodName                  = "/Scailo.CreditNotesService/UploadCreditNoteItems"
	CreditNotesService_AddCreditNoteReference_FullMethodName                 = "/Scailo.CreditNotesService/AddCreditNoteReference"
	CreditNotesService_ApproveCreditNoteReference_FullMethodName             = "/Scailo.CreditNotesService/ApproveCreditNoteReference"
	CreditNotesService_DeleteCreditNoteReference_FullMethodName              = "/Scailo.CreditNotesService/DeleteCreditNoteReference"
	CreditNotesService_ViewCreditNoteReferenceByID_FullMethodName            = "/Scailo.CreditNotesService/ViewCreditNoteReferenceByID"
	CreditNotesService_ViewCreditNoteReferences_FullMethodName               = "/Scailo.CreditNotesService/ViewCreditNoteReferences"
	CreditNotesService_ViewByID_FullMethodName                               = "/Scailo.CreditNotesService/ViewByID"
	CreditNotesService_ViewByUUID_FullMethodName                             = "/Scailo.CreditNotesService/ViewByUUID"
	CreditNotesService_ViewByReferenceID_FullMethodName                      = "/Scailo.CreditNotesService/ViewByReferenceID"
	CreditNotesService_ViewEssentialByID_FullMethodName                      = "/Scailo.CreditNotesService/ViewEssentialByID"
	CreditNotesService_ViewEssentialByUUID_FullMethodName                    = "/Scailo.CreditNotesService/ViewEssentialByUUID"
	CreditNotesService_ViewFromIDs_FullMethodName                            = "/Scailo.CreditNotesService/ViewFromIDs"
	CreditNotesService_ViewAncillaryParametersByUUID_FullMethodName          = "/Scailo.CreditNotesService/ViewAncillaryParametersByUUID"
	CreditNotesService_ViewAll_FullMethodName                                = "/Scailo.CreditNotesService/ViewAll"
	CreditNotesService_ViewAllForEntityUUID_FullMethodName                   = "/Scailo.CreditNotesService/ViewAllForEntityUUID"
	CreditNotesService_ViewWithPagination_FullMethodName                     = "/Scailo.CreditNotesService/ViewWithPagination"
	CreditNotesService_ViewProspectiveFamilies_FullMethodName                = "/Scailo.CreditNotesService/ViewProspectiveFamilies"
	CreditNotesService_FilterProspectiveFamilies_FullMethodName              = "/Scailo.CreditNotesService/FilterProspectiveFamilies"
	CreditNotesService_ViewProspectiveCreditNoteItem_FullMethodName          = "/Scailo.CreditNotesService/ViewProspectiveCreditNoteItem"
	CreditNotesService_ViewReturnedStatistics_FullMethodName                 = "/Scailo.CreditNotesService/ViewReturnedStatistics"
	CreditNotesService_IsDownloadable_FullMethodName                         = "/Scailo.CreditNotesService/IsDownloadable"
	CreditNotesService_DownloadByUUID_FullMethodName                         = "/Scailo.CreditNotesService/DownloadByUUID"
	CreditNotesService_ViewAddedFamilyQuantityForSource_FullMethodName       = "/Scailo.CreditNotesService/ViewAddedFamilyQuantityForSource"
	CreditNotesService_SearchAll_FullMethodName                              = "/Scailo.CreditNotesService/SearchAll"
	CreditNotesService_Filter_FullMethodName                                 = "/Scailo.CreditNotesService/Filter"
	CreditNotesService_CountInStatus_FullMethodName                          = "/Scailo.CreditNotesService/CountInStatus"
	CreditNotesService_Count_FullMethodName                                  = "/Scailo.CreditNotesService/Count"
	CreditNotesService_AccruedValue_FullMethodName                           = "/Scailo.CreditNotesService/AccruedValue"
	CreditNotesService_DownloadAsCSV_FullMethodName                          = "/Scailo.CreditNotesService/DownloadAsCSV"
)

// CreditNotesServiceClient is the client API for CreditNotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each credit note
type CreditNotesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *CreditNotesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *CreditNotesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *CreditNotesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *CreditNotesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the credit note
	Autofill(ctx context.Context, in *CreditNotesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add an item to a credit note
	AddCreditNoteItem(ctx context.Context, in *CreditNotesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a credit note
	ModifyCreditNoteItem(ctx context.Context, in *CreditNotesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a credit note
	ApproveCreditNoteItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a credit note
	DeleteCreditNoteItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a credit note
	ReorderCreditNoteItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Credit Note Item by ID
	ViewCreditNoteItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*CreditNoteItem, error)
	// View approved credit note items for given credit note ID
	ViewApprovedCreditNoteItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*CreditNoteItemsList, error)
	// View unapproved credit note items for given credit note ID
	ViewUnapprovedCreditNoteItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*CreditNoteItemsList, error)
	// View the history of the credit note item
	ViewCreditNoteItemHistory(ctx context.Context, in *CreditNoteItemHistoryRequest, opts ...grpc.CallOption) (*CreditNoteItemsList, error)
	// View approved credit note items for given credit note ID with pagination
	ViewPaginatedApprovedCreditNoteItems(ctx context.Context, in *CreditNoteItemsSearchRequest, opts ...grpc.CallOption) (*CreditNotesServicePaginatedItemsResponse, error)
	// View unapproved credit note items for given credit note ID with pagination
	ViewPaginatedUnapprovedCreditNoteItems(ctx context.Context, in *CreditNoteItemsSearchRequest, opts ...grpc.CallOption) (*CreditNotesServicePaginatedItemsResponse, error)
	// Search through credit note items with pagination
	SearchItemsWithPagination(ctx context.Context, in *CreditNoteItemsSearchRequest, opts ...grpc.CallOption) (*CreditNotesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadCreditNoteItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a reference
	AddCreditNoteReference(ctx context.Context, in *CreditNotesServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a reference
	ApproveCreditNoteReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a reference
	DeleteCreditNoteReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a reference for the given ID
	ViewCreditNoteReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*CreditNoteReference, error)
	// View all references for given credit note ID
	ViewCreditNoteReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*CreditNoteReferencesList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*CreditNote, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*CreditNote, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*CreditNote, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*CreditNote, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*CreditNote, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*CreditNotesList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*CreditNoteAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*CreditNotesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*CreditNotesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *CreditNotesServicePaginationReq, opts ...grpc.CallOption) (*CreditNotesServicePaginationResponse, error)
	// View prospective families for the given credit note
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective credit note item info for the given family ID and credit note ID
	ViewProspectiveCreditNoteItem(ctx context.Context, in *CreditNoteItemProspectiveInfoRequest, opts ...grpc.CallOption) (*CreditNotesServiceItemCreateRequest, error)
	// View returned (sales return) statistics of the credit note
	ViewReturnedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*CreditNoteReturnStatisticsList, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download credit note with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View already added quantities
	ViewAddedFamilyQuantityForSource(ctx context.Context, in *CreditNotesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *CreditNotesServiceSearchAllReq, opts ...grpc.CallOption) (*CreditNotesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *CreditNotesServiceFilterReq, opts ...grpc.CallOption) (*CreditNotesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *CreditNotesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// Returns the sum of the total value of all the records that match the given criteria
	AccruedValue(ctx context.Context, in *CreditNotesServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *CreditNotesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type creditNotesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditNotesServiceClient(cc grpc.ClientConnInterface) CreditNotesServiceClient {
	return &creditNotesServiceClient{cc}
}

func (c *creditNotesServiceClient) Create(ctx context.Context, in *CreditNotesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Draft(ctx context.Context, in *CreditNotesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) DraftUpdate(ctx context.Context, in *CreditNotesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) RevisionUpdate(ctx context.Context, in *CreditNotesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Autofill(ctx context.Context, in *CreditNotesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, CreditNotesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) AddCreditNoteItem(ctx context.Context, in *CreditNotesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_AddCreditNoteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ModifyCreditNoteItem(ctx context.Context, in *CreditNotesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_ModifyCreditNoteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ApproveCreditNoteItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_ApproveCreditNoteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) DeleteCreditNoteItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_DeleteCreditNoteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ReorderCreditNoteItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_ReorderCreditNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewCreditNoteItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*CreditNoteItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNoteItem)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewCreditNoteItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewApprovedCreditNoteItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*CreditNoteItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNoteItemsList)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewApprovedCreditNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewUnapprovedCreditNoteItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*CreditNoteItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNoteItemsList)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewUnapprovedCreditNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewCreditNoteItemHistory(ctx context.Context, in *CreditNoteItemHistoryRequest, opts ...grpc.CallOption) (*CreditNoteItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNoteItemsList)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewCreditNoteItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewPaginatedApprovedCreditNoteItems(ctx context.Context, in *CreditNoteItemsSearchRequest, opts ...grpc.CallOption) (*CreditNotesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNotesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewPaginatedApprovedCreditNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewPaginatedUnapprovedCreditNoteItems(ctx context.Context, in *CreditNoteItemsSearchRequest, opts ...grpc.CallOption) (*CreditNotesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNotesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewPaginatedUnapprovedCreditNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) SearchItemsWithPagination(ctx context.Context, in *CreditNoteItemsSearchRequest, opts ...grpc.CallOption) (*CreditNotesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNotesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, CreditNotesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, CreditNotesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) UploadCreditNoteItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, CreditNotesService_UploadCreditNoteItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) AddCreditNoteReference(ctx context.Context, in *CreditNotesServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_AddCreditNoteReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ApproveCreditNoteReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_ApproveCreditNoteReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) DeleteCreditNoteReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_DeleteCreditNoteReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewCreditNoteReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*CreditNoteReference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNoteReference)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewCreditNoteReferenceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewCreditNoteReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*CreditNoteReferencesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNoteReferencesList)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewCreditNoteReferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*CreditNote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNote)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*CreditNote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNote)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*CreditNote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNote)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*CreditNote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNote)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*CreditNote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNote)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*CreditNotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNotesList)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*CreditNoteAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNoteAncillaryParameters)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*CreditNotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNotesList)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*CreditNotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNotesList)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewWithPagination(ctx context.Context, in *CreditNotesServicePaginationReq, opts ...grpc.CallOption) (*CreditNotesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNotesServicePaginationResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, CreditNotesService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewProspectiveCreditNoteItem(ctx context.Context, in *CreditNoteItemProspectiveInfoRequest, opts ...grpc.CallOption) (*CreditNotesServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNotesServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewProspectiveCreditNoteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewReturnedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*CreditNoteReturnStatisticsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNoteReturnStatisticsList)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewReturnedStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, CreditNotesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) ViewAddedFamilyQuantityForSource(ctx context.Context, in *CreditNotesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DualQuantitiesResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_ViewAddedFamilyQuantityForSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) SearchAll(ctx context.Context, in *CreditNotesServiceSearchAllReq, opts ...grpc.CallOption) (*CreditNotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNotesList)
	err := c.cc.Invoke(ctx, CreditNotesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Filter(ctx context.Context, in *CreditNotesServiceFilterReq, opts ...grpc.CallOption) (*CreditNotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditNotesList)
	err := c.cc.Invoke(ctx, CreditNotesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) Count(ctx context.Context, in *CreditNotesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) AccruedValue(ctx context.Context, in *CreditNotesServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, CreditNotesService_AccruedValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditNotesServiceClient) DownloadAsCSV(ctx context.Context, in *CreditNotesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, CreditNotesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditNotesService
