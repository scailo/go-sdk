// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: labels.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LabelsService_Create_FullMethodName                = "/Scailo.LabelsService/Create"
	LabelsService_Update_FullMethodName                = "/Scailo.LabelsService/Update"
	LabelsService_Discard_FullMethodName               = "/Scailo.LabelsService/Discard"
	LabelsService_Restore_FullMethodName               = "/Scailo.LabelsService/Restore"
	LabelsService_ViewByID_FullMethodName              = "/Scailo.LabelsService/ViewByID"
	LabelsService_ViewByUUID_FullMethodName            = "/Scailo.LabelsService/ViewByUUID"
	LabelsService_ViewEssentialByID_FullMethodName     = "/Scailo.LabelsService/ViewEssentialByID"
	LabelsService_ViewEssentialByUUID_FullMethodName   = "/Scailo.LabelsService/ViewEssentialByUUID"
	LabelsService_ViewFromIDs_FullMethodName           = "/Scailo.LabelsService/ViewFromIDs"
	LabelsService_ViewAll_FullMethodName               = "/Scailo.LabelsService/ViewAll"
	LabelsService_ViewAllForEntityUUID_FullMethodName  = "/Scailo.LabelsService/ViewAllForEntityUUID"
	LabelsService_ViewWithPagination_FullMethodName    = "/Scailo.LabelsService/ViewWithPagination"
	LabelsService_CheckModifyPermission_FullMethodName = "/Scailo.LabelsService/CheckModifyPermission"
	LabelsService_CheckAddPermission_FullMethodName    = "/Scailo.LabelsService/CheckAddPermission"
	LabelsService_SearchAll_FullMethodName             = "/Scailo.LabelsService/SearchAll"
	LabelsService_Filter_FullMethodName                = "/Scailo.LabelsService/Filter"
	LabelsService_Count_FullMethodName                 = "/Scailo.LabelsService/Count"
	LabelsService_DownloadAsCSV_FullMethodName         = "/Scailo.LabelsService/DownloadAsCSV"
	LabelsService_ImportFromCSV_FullMethodName         = "/Scailo.LabelsService/ImportFromCSV"
)

// LabelsServiceClient is the client API for LabelsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the methods applicable on each label
type LabelsServiceClient interface {
	// Create a label
	Create(ctx context.Context, in *LabelsServiceCreateRequest, opts ...grpc.CallOption) (*Label, error)
	// Update a label
	Update(ctx context.Context, in *LabelsServiceUpdateRequest, opts ...grpc.CallOption) (*Label, error)
	// Discard the label
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore the label
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Label, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Label, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Label, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Label, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*LabelsList, error)
	// View all labels
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*LabelsList, error)
	// View all labels with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LabelsList, error)
	// View labels with pagination
	ViewWithPagination(ctx context.Context, in *LabelsServicePaginationReq, opts ...grpc.CallOption) (*LabelPaginationResp, error)
	// Check if the user has permission to modify an label
	CheckModifyPermission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Check if the user has permission to add an label
	CheckAddPermission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BooleanResponse, error)
	// View all labels that match the given search key
	SearchAll(ctx context.Context, in *LabelsServiceSearchAllReq, opts ...grpc.CallOption) (*LabelsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *LabelsServiceFilterReq, opts ...grpc.CallOption) (*LabelsList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *LabelsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *LabelsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type labelsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabelsServiceClient(cc grpc.ClientConnInterface) LabelsServiceClient {
	return &labelsServiceClient{cc}
}

func (c *labelsServiceClient) Create(ctx context.Context, in *LabelsServiceCreateRequest, opts ...grpc.CallOption) (*Label, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Label)
	err := c.cc.Invoke(ctx, LabelsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) Update(ctx context.Context, in *LabelsServiceUpdateRequest, opts ...grpc.CallOption) (*Label, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Label)
	err := c.cc.Invoke(ctx, LabelsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LabelsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, LabelsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Label, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Label)
	err := c.cc.Invoke(ctx, LabelsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Label, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Label)
	err := c.cc.Invoke(ctx, LabelsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Label, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Label)
	err := c.cc.Invoke(ctx, LabelsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Label, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Label)
	err := c.cc.Invoke(ctx, LabelsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*LabelsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabelsList)
	err := c.cc.Invoke(ctx, LabelsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*LabelsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabelsList)
	err := c.cc.Invoke(ctx, LabelsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*LabelsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabelsList)
	err := c.cc.Invoke(ctx, LabelsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) ViewWithPagination(ctx context.Context, in *LabelsServicePaginationReq, opts ...grpc.CallOption) (*LabelPaginationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabelPaginationResp)
	err := c.cc.Invoke(ctx, LabelsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) CheckModifyPermission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, LabelsService_CheckModifyPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) CheckAddPermission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, LabelsService_CheckAddPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) SearchAll(ctx context.Context, in *LabelsServiceSearchAllReq, opts ...grpc.CallOption) (*LabelsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabelsList)
	err := c.cc.Invoke(ctx, LabelsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) Filter(ctx context.Context, in *LabelsServiceFilterReq, opts ...grpc.CallOption) (*LabelsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabelsList)
	err := c.cc.Invoke(ctx, LabelsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) Count(ctx context.Context, in *LabelsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, LabelsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) DownloadAsCSV(ctx context.Context, in *LabelsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, LabelsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, LabelsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelsService
