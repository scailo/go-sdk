// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sales_invoices.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SalesInvoicesService_Create_FullMethodName                                   = "/Scailo.SalesInvoicesService/Create"
	SalesInvoicesService_Draft_FullMethodName                                    = "/Scailo.SalesInvoicesService/Draft"
	SalesInvoicesService_DraftUpdate_FullMethodName                              = "/Scailo.SalesInvoicesService/DraftUpdate"
	SalesInvoicesService_SendForVerification_FullMethodName                      = "/Scailo.SalesInvoicesService/SendForVerification"
	SalesInvoicesService_Verify_FullMethodName                                   = "/Scailo.SalesInvoicesService/Verify"
	SalesInvoicesService_Approve_FullMethodName                                  = "/Scailo.SalesInvoicesService/Approve"
	SalesInvoicesService_SendForRevision_FullMethodName                          = "/Scailo.SalesInvoicesService/SendForRevision"
	SalesInvoicesService_RevisionUpdate_FullMethodName                           = "/Scailo.SalesInvoicesService/RevisionUpdate"
	SalesInvoicesService_Halt_FullMethodName                                     = "/Scailo.SalesInvoicesService/Halt"
	SalesInvoicesService_Discard_FullMethodName                                  = "/Scailo.SalesInvoicesService/Discard"
	SalesInvoicesService_Restore_FullMethodName                                  = "/Scailo.SalesInvoicesService/Restore"
	SalesInvoicesService_Complete_FullMethodName                                 = "/Scailo.SalesInvoicesService/Complete"
	SalesInvoicesService_Repeat_FullMethodName                                   = "/Scailo.SalesInvoicesService/Repeat"
	SalesInvoicesService_Reopen_FullMethodName                                   = "/Scailo.SalesInvoicesService/Reopen"
	SalesInvoicesService_CommentAdd_FullMethodName                               = "/Scailo.SalesInvoicesService/CommentAdd"
	SalesInvoicesService_SendEmail_FullMethodName                                = "/Scailo.SalesInvoicesService/SendEmail"
	SalesInvoicesService_Autofill_FullMethodName                                 = "/Scailo.SalesInvoicesService/Autofill"
	SalesInvoicesService_Amend_FullMethodName                                    = "/Scailo.SalesInvoicesService/Amend"
	SalesInvoicesService_CreateMagicLink_FullMethodName                          = "/Scailo.SalesInvoicesService/CreateMagicLink"
	SalesInvoicesService_AddSalesInvoiceItem_FullMethodName                      = "/Scailo.SalesInvoicesService/AddSalesInvoiceItem"
	SalesInvoicesService_ModifySalesInvoiceItem_FullMethodName                   = "/Scailo.SalesInvoicesService/ModifySalesInvoiceItem"
	SalesInvoicesService_ApproveSalesInvoiceItem_FullMethodName                  = "/Scailo.SalesInvoicesService/ApproveSalesInvoiceItem"
	SalesInvoicesService_DeleteSalesInvoiceItem_FullMethodName                   = "/Scailo.SalesInvoicesService/DeleteSalesInvoiceItem"
	SalesInvoicesService_ReorderSalesInvoiceItems_FullMethodName                 = "/Scailo.SalesInvoicesService/ReorderSalesInvoiceItems"
	SalesInvoicesService_ViewSalesInvoiceItemByID_FullMethodName                 = "/Scailo.SalesInvoicesService/ViewSalesInvoiceItemByID"
	SalesInvoicesService_ViewApprovedSalesInvoiceItems_FullMethodName            = "/Scailo.SalesInvoicesService/ViewApprovedSalesInvoiceItems"
	SalesInvoicesService_ViewUnapprovedSalesInvoiceItems_FullMethodName          = "/Scailo.SalesInvoicesService/ViewUnapprovedSalesInvoiceItems"
	SalesInvoicesService_ViewSalesInvoiceItemHistory_FullMethodName              = "/Scailo.SalesInvoicesService/ViewSalesInvoiceItemHistory"
	SalesInvoicesService_ViewPaginatedApprovedSalesInvoiceItems_FullMethodName   = "/Scailo.SalesInvoicesService/ViewPaginatedApprovedSalesInvoiceItems"
	SalesInvoicesService_ViewPaginatedUnapprovedSalesInvoiceItems_FullMethodName = "/Scailo.SalesInvoicesService/ViewPaginatedUnapprovedSalesInvoiceItems"
	SalesInvoicesService_SearchItemsWithPagination_FullMethodName                = "/Scailo.SalesInvoicesService/SearchItemsWithPagination"
	SalesInvoicesService_DownloadItemsAsCSV_FullMethodName                       = "/Scailo.SalesInvoicesService/DownloadItemsAsCSV"
	SalesInvoicesService_DownloadItemsTemplateAsCSV_FullMethodName               = "/Scailo.SalesInvoicesService/DownloadItemsTemplateAsCSV"
	SalesInvoicesService_UploadSalesInvoiceItems_FullMethodName                  = "/Scailo.SalesInvoicesService/UploadSalesInvoiceItems"
	SalesInvoicesService_AddSalesInvoiceReference_FullMethodName                 = "/Scailo.SalesInvoicesService/AddSalesInvoiceReference"
	SalesInvoicesService_ApproveSalesInvoiceReference_FullMethodName             = "/Scailo.SalesInvoicesService/ApproveSalesInvoiceReference"
	SalesInvoicesService_DeleteSalesInvoiceReference_FullMethodName              = "/Scailo.SalesInvoicesService/DeleteSalesInvoiceReference"
	SalesInvoicesService_ViewSalesInvoiceReferenceByID_FullMethodName            = "/Scailo.SalesInvoicesService/ViewSalesInvoiceReferenceByID"
	SalesInvoicesService_ViewSalesInvoiceReferences_FullMethodName               = "/Scailo.SalesInvoicesService/ViewSalesInvoiceReferences"
	SalesInvoicesService_ViewByID_FullMethodName                                 = "/Scailo.SalesInvoicesService/ViewByID"
	SalesInvoicesService_ViewByUUID_FullMethodName                               = "/Scailo.SalesInvoicesService/ViewByUUID"
	SalesInvoicesService_ViewByReferenceID_FullMethodName                        = "/Scailo.SalesInvoicesService/ViewByReferenceID"
	SalesInvoicesService_ViewEssentialByID_FullMethodName                        = "/Scailo.SalesInvoicesService/ViewEssentialByID"
	SalesInvoicesService_ViewEssentialByUUID_FullMethodName                      = "/Scailo.SalesInvoicesService/ViewEssentialByUUID"
	SalesInvoicesService_ViewFromIDs_FullMethodName                              = "/Scailo.SalesInvoicesService/ViewFromIDs"
	SalesInvoicesService_ViewAncillaryParametersByUUID_FullMethodName            = "/Scailo.SalesInvoicesService/ViewAncillaryParametersByUUID"
	SalesInvoicesService_ViewAll_FullMethodName                                  = "/Scailo.SalesInvoicesService/ViewAll"
	SalesInvoicesService_ViewAllForEntityUUID_FullMethodName                     = "/Scailo.SalesInvoicesService/ViewAllForEntityUUID"
	SalesInvoicesService_ViewWithPagination_FullMethodName                       = "/Scailo.SalesInvoicesService/ViewWithPagination"
	SalesInvoicesService_ViewAmendments_FullMethodName                           = "/Scailo.SalesInvoicesService/ViewAmendments"
	SalesInvoicesService_ViewProspectiveFamilies_FullMethodName                  = "/Scailo.SalesInvoicesService/ViewProspectiveFamilies"
	SalesInvoicesService_FilterProspectiveFamilies_FullMethodName                = "/Scailo.SalesInvoicesService/FilterProspectiveFamilies"
	SalesInvoicesService_ViewProspectiveSalesInvoiceItem_FullMethodName          = "/Scailo.SalesInvoicesService/ViewProspectiveSalesInvoiceItem"
	SalesInvoicesService_ViewDispatchedStatistics_FullMethodName                 = "/Scailo.SalesInvoicesService/ViewDispatchedStatistics"
	SalesInvoicesService_ViewAddedFamilyQuantityForSource_FullMethodName         = "/Scailo.SalesInvoicesService/ViewAddedFamilyQuantityForSource"
	SalesInvoicesService_IsDownloadable_FullMethodName                           = "/Scailo.SalesInvoicesService/IsDownloadable"
	SalesInvoicesService_DownloadByUUID_FullMethodName                           = "/Scailo.SalesInvoicesService/DownloadByUUID"
	SalesInvoicesService_SearchAll_FullMethodName                                = "/Scailo.SalesInvoicesService/SearchAll"
	SalesInvoicesService_Filter_FullMethodName                                   = "/Scailo.SalesInvoicesService/Filter"
	SalesInvoicesService_CountInStatus_FullMethodName                            = "/Scailo.SalesInvoicesService/CountInStatus"
	SalesInvoicesService_Count_FullMethodName                                    = "/Scailo.SalesInvoicesService/Count"
	SalesInvoicesService_AccruedValue_FullMethodName                             = "/Scailo.SalesInvoicesService/AccruedValue"
	SalesInvoicesService_DownloadAsCSV_FullMethodName                            = "/Scailo.SalesInvoicesService/DownloadAsCSV"
)

// SalesInvoicesServiceClient is the client API for SalesInvoicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each sales invoice
type SalesInvoicesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *SalesInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *SalesInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *SalesInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *SalesInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the sales invoice
	Autofill(ctx context.Context, in *SalesInvoicesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Amend the sales invoice and send for revision
	Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add an item to a sales invoice
	AddSalesInvoiceItem(ctx context.Context, in *SalesInvoicesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a sales invoice
	ModifySalesInvoiceItem(ctx context.Context, in *SalesInvoicesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a sales invoice
	ApproveSalesInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a sales invoice
	DeleteSalesInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a sales invoice
	ReorderSalesInvoiceItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Sales Invoice Item by ID
	ViewSalesInvoiceItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesInvoiceItem, error)
	// View approved sales invoice items for given sales invoice ID
	ViewApprovedSalesInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesInvoiceItemsList, error)
	// View unapproved sales invoice items for given sales invoice ID
	ViewUnapprovedSalesInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesInvoiceItemsList, error)
	// View the history of the sales invoice item
	ViewSalesInvoiceItemHistory(ctx context.Context, in *SalesInvoiceItemHistoryRequest, opts ...grpc.CallOption) (*SalesInvoiceItemsList, error)
	// View approved sales invoice items for given sales invoice ID with pagination
	ViewPaginatedApprovedSalesInvoiceItems(ctx context.Context, in *SalesInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*SalesInvoicesServicePaginatedItemsResponse, error)
	// View unapproved sales invoice items for given sales invoice ID with pagination
	ViewPaginatedUnapprovedSalesInvoiceItems(ctx context.Context, in *SalesInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*SalesInvoicesServicePaginatedItemsResponse, error)
	// Search through sales invoice items with pagination
	SearchItemsWithPagination(ctx context.Context, in *SalesInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*SalesInvoicesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadSalesInvoiceItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// Add a reference
	AddSalesInvoiceReference(ctx context.Context, in *SalesInvoicesServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a reference
	ApproveSalesInvoiceReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a reference
	DeleteSalesInvoiceReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View a reference for the given ID
	ViewSalesInvoiceReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesInvoiceReference, error)
	// View all references for given sales invoice ID
	ViewSalesInvoiceReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesInvoiceReferencesList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesInvoice, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesInvoice, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SalesInvoice, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesInvoice, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesInvoice, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalesInvoicesList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesInvoiceAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalesInvoicesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesInvoicesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *SalesInvoicesServicePaginationReq, opts ...grpc.CallOption) (*SalesInvoicesServicePaginationResponse, error)
	// View all the amendments made
	ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error)
	// View prospective families for the given sales invoice
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective sales invoice item info for the given family ID and sales invoice ID
	ViewProspectiveSalesInvoiceItem(ctx context.Context, in *SalesInvoiceItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalesInvoicesServiceItemCreateRequest, error)
	// View dispatched (goods dispatch) statistics of the sales invoice
	ViewDispatchedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesInvoiceDispatchedStatisticsList, error)
	// View already added quantities
	ViewAddedFamilyQuantityForSource(ctx context.Context, in *SalesInvoicesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download sales invoice with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *SalesInvoicesServiceSearchAllReq, opts ...grpc.CallOption) (*SalesInvoicesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *SalesInvoicesServiceFilterReq, opts ...grpc.CallOption) (*SalesInvoicesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *SalesInvoicesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// Returns the sum of the total value of all the records that match the given criteria
	AccruedValue(ctx context.Context, in *SalesInvoicesServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *SalesInvoicesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type salesInvoicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesInvoicesServiceClient(cc grpc.ClientConnInterface) SalesInvoicesServiceClient {
	return &salesInvoicesServiceClient{cc}
}

func (c *salesInvoicesServiceClient) Create(ctx context.Context, in *SalesInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Draft(ctx context.Context, in *SalesInvoicesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) DraftUpdate(ctx context.Context, in *SalesInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) RevisionUpdate(ctx context.Context, in *SalesInvoicesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Autofill(ctx context.Context, in *SalesInvoicesServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, SalesInvoicesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) AddSalesInvoiceItem(ctx context.Context, in *SalesInvoicesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_AddSalesInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ModifySalesInvoiceItem(ctx context.Context, in *SalesInvoicesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ModifySalesInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ApproveSalesInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ApproveSalesInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) DeleteSalesInvoiceItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_DeleteSalesInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ReorderSalesInvoiceItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ReorderSalesInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewSalesInvoiceItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesInvoiceItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoiceItem)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewSalesInvoiceItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewApprovedSalesInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesInvoiceItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoiceItemsList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewApprovedSalesInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewUnapprovedSalesInvoiceItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SalesInvoiceItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoiceItemsList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewUnapprovedSalesInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewSalesInvoiceItemHistory(ctx context.Context, in *SalesInvoiceItemHistoryRequest, opts ...grpc.CallOption) (*SalesInvoiceItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoiceItemsList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewSalesInvoiceItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewPaginatedApprovedSalesInvoiceItems(ctx context.Context, in *SalesInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*SalesInvoicesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoicesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewPaginatedApprovedSalesInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewPaginatedUnapprovedSalesInvoiceItems(ctx context.Context, in *SalesInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*SalesInvoicesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoicesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewPaginatedUnapprovedSalesInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) SearchItemsWithPagination(ctx context.Context, in *SalesInvoiceItemsSearchRequest, opts ...grpc.CallOption) (*SalesInvoicesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoicesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesInvoicesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesInvoicesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) UploadSalesInvoiceItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_UploadSalesInvoiceItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) AddSalesInvoiceReference(ctx context.Context, in *SalesInvoicesServiceReferenceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_AddSalesInvoiceReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ApproveSalesInvoiceReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ApproveSalesInvoiceReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) DeleteSalesInvoiceReference(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_DeleteSalesInvoiceReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewSalesInvoiceReferenceByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesInvoiceReference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoiceReference)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewSalesInvoiceReferenceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewSalesInvoiceReferences(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesInvoiceReferencesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoiceReferencesList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewSalesInvoiceReferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoice)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoice)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SalesInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoice)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SalesInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoice)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesInvoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoice)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SalesInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoicesList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesInvoiceAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoiceAncillaryParameters)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SalesInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoicesList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoicesList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewWithPagination(ctx context.Context, in *SalesInvoicesServicePaginationReq, opts ...grpc.CallOption) (*SalesInvoicesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoicesServicePaginationResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendmentLogsList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewProspectiveSalesInvoiceItem(ctx context.Context, in *SalesInvoiceItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SalesInvoicesServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoicesServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewProspectiveSalesInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewDispatchedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SalesInvoiceDispatchedStatisticsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoiceDispatchedStatisticsList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewDispatchedStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) ViewAddedFamilyQuantityForSource(ctx context.Context, in *SalesInvoicesServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DualQuantitiesResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_ViewAddedFamilyQuantityForSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesInvoicesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) SearchAll(ctx context.Context, in *SalesInvoicesServiceSearchAllReq, opts ...grpc.CallOption) (*SalesInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoicesList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Filter(ctx context.Context, in *SalesInvoicesServiceFilterReq, opts ...grpc.CallOption) (*SalesInvoicesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesInvoicesList)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) Count(ctx context.Context, in *SalesInvoicesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) AccruedValue(ctx context.Context, in *SalesInvoicesServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, SalesInvoicesService_AccruedValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesInvoicesServiceClient) DownloadAsCSV(ctx context.Context, in *SalesInvoicesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SalesInvoicesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesInvoicesService
