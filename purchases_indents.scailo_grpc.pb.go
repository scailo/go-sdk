// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: purchases_indents.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PurchasesIndentsService_Create_FullMethodName                                     = "/Scailo.PurchasesIndentsService/Create"
	PurchasesIndentsService_Draft_FullMethodName                                      = "/Scailo.PurchasesIndentsService/Draft"
	PurchasesIndentsService_DraftUpdate_FullMethodName                                = "/Scailo.PurchasesIndentsService/DraftUpdate"
	PurchasesIndentsService_SendForVerification_FullMethodName                        = "/Scailo.PurchasesIndentsService/SendForVerification"
	PurchasesIndentsService_Verify_FullMethodName                                     = "/Scailo.PurchasesIndentsService/Verify"
	PurchasesIndentsService_Approve_FullMethodName                                    = "/Scailo.PurchasesIndentsService/Approve"
	PurchasesIndentsService_SendForRevision_FullMethodName                            = "/Scailo.PurchasesIndentsService/SendForRevision"
	PurchasesIndentsService_RevisionUpdate_FullMethodName                             = "/Scailo.PurchasesIndentsService/RevisionUpdate"
	PurchasesIndentsService_Halt_FullMethodName                                       = "/Scailo.PurchasesIndentsService/Halt"
	PurchasesIndentsService_Discard_FullMethodName                                    = "/Scailo.PurchasesIndentsService/Discard"
	PurchasesIndentsService_Restore_FullMethodName                                    = "/Scailo.PurchasesIndentsService/Restore"
	PurchasesIndentsService_Complete_FullMethodName                                   = "/Scailo.PurchasesIndentsService/Complete"
	PurchasesIndentsService_Repeat_FullMethodName                                     = "/Scailo.PurchasesIndentsService/Repeat"
	PurchasesIndentsService_Reopen_FullMethodName                                     = "/Scailo.PurchasesIndentsService/Reopen"
	PurchasesIndentsService_CommentAdd_FullMethodName                                 = "/Scailo.PurchasesIndentsService/CommentAdd"
	PurchasesIndentsService_SendEmail_FullMethodName                                  = "/Scailo.PurchasesIndentsService/SendEmail"
	PurchasesIndentsService_CreateMagicLink_FullMethodName                            = "/Scailo.PurchasesIndentsService/CreateMagicLink"
	PurchasesIndentsService_Autofill_FullMethodName                                   = "/Scailo.PurchasesIndentsService/Autofill"
	PurchasesIndentsService_IsCompletable_FullMethodName                              = "/Scailo.PurchasesIndentsService/IsCompletable"
	PurchasesIndentsService_AddMultiplePurchaseIndentItems_FullMethodName             = "/Scailo.PurchasesIndentsService/AddMultiplePurchaseIndentItems"
	PurchasesIndentsService_AddPurchaseIndentItem_FullMethodName                      = "/Scailo.PurchasesIndentsService/AddPurchaseIndentItem"
	PurchasesIndentsService_ModifyPurchaseIndentItem_FullMethodName                   = "/Scailo.PurchasesIndentsService/ModifyPurchaseIndentItem"
	PurchasesIndentsService_ApprovePurchaseIndentItem_FullMethodName                  = "/Scailo.PurchasesIndentsService/ApprovePurchaseIndentItem"
	PurchasesIndentsService_DeletePurchaseIndentItem_FullMethodName                   = "/Scailo.PurchasesIndentsService/DeletePurchaseIndentItem"
	PurchasesIndentsService_ReorderPurchaseIndentItems_FullMethodName                 = "/Scailo.PurchasesIndentsService/ReorderPurchaseIndentItems"
	PurchasesIndentsService_ViewPurchaseIndentItemByID_FullMethodName                 = "/Scailo.PurchasesIndentsService/ViewPurchaseIndentItemByID"
	PurchasesIndentsService_ViewApprovedPurchaseIndentItems_FullMethodName            = "/Scailo.PurchasesIndentsService/ViewApprovedPurchaseIndentItems"
	PurchasesIndentsService_ViewUnapprovedPurchaseIndentItems_FullMethodName          = "/Scailo.PurchasesIndentsService/ViewUnapprovedPurchaseIndentItems"
	PurchasesIndentsService_ViewPurchaseIndentItemHistory_FullMethodName              = "/Scailo.PurchasesIndentsService/ViewPurchaseIndentItemHistory"
	PurchasesIndentsService_ViewPaginatedApprovedPurchaseIndentItems_FullMethodName   = "/Scailo.PurchasesIndentsService/ViewPaginatedApprovedPurchaseIndentItems"
	PurchasesIndentsService_ViewPaginatedUnapprovedPurchaseIndentItems_FullMethodName = "/Scailo.PurchasesIndentsService/ViewPaginatedUnapprovedPurchaseIndentItems"
	PurchasesIndentsService_SearchItemsWithPagination_FullMethodName                  = "/Scailo.PurchasesIndentsService/SearchItemsWithPagination"
	PurchasesIndentsService_DownloadItemsAsCSV_FullMethodName                         = "/Scailo.PurchasesIndentsService/DownloadItemsAsCSV"
	PurchasesIndentsService_DownloadItemsTemplateAsCSV_FullMethodName                 = "/Scailo.PurchasesIndentsService/DownloadItemsTemplateAsCSV"
	PurchasesIndentsService_UploadPurchaseIndentItems_FullMethodName                  = "/Scailo.PurchasesIndentsService/UploadPurchaseIndentItems"
	PurchasesIndentsService_ViewByID_FullMethodName                                   = "/Scailo.PurchasesIndentsService/ViewByID"
	PurchasesIndentsService_ViewByUUID_FullMethodName                                 = "/Scailo.PurchasesIndentsService/ViewByUUID"
	PurchasesIndentsService_ViewByReferenceID_FullMethodName                          = "/Scailo.PurchasesIndentsService/ViewByReferenceID"
	PurchasesIndentsService_ViewEssentialByID_FullMethodName                          = "/Scailo.PurchasesIndentsService/ViewEssentialByID"
	PurchasesIndentsService_ViewEssentialByUUID_FullMethodName                        = "/Scailo.PurchasesIndentsService/ViewEssentialByUUID"
	PurchasesIndentsService_ViewFromIDs_FullMethodName                                = "/Scailo.PurchasesIndentsService/ViewFromIDs"
	PurchasesIndentsService_ViewAll_FullMethodName                                    = "/Scailo.PurchasesIndentsService/ViewAll"
	PurchasesIndentsService_ViewAllForEntityUUID_FullMethodName                       = "/Scailo.PurchasesIndentsService/ViewAllForEntityUUID"
	PurchasesIndentsService_ViewWithPagination_FullMethodName                         = "/Scailo.PurchasesIndentsService/ViewWithPagination"
	PurchasesIndentsService_ViewAssociatedPurchaseOrderIDs_FullMethodName             = "/Scailo.PurchasesIndentsService/ViewAssociatedPurchaseOrderIDs"
	PurchasesIndentsService_ViewProspectiveFamilies_FullMethodName                    = "/Scailo.PurchasesIndentsService/ViewProspectiveFamilies"
	PurchasesIndentsService_FilterProspectiveFamilies_FullMethodName                  = "/Scailo.PurchasesIndentsService/FilterProspectiveFamilies"
	PurchasesIndentsService_ViewProspectivePurchaseIndentItem_FullMethodName          = "/Scailo.PurchasesIndentsService/ViewProspectivePurchaseIndentItem"
	PurchasesIndentsService_ViewOrderedStatistics_FullMethodName                      = "/Scailo.PurchasesIndentsService/ViewOrderedStatistics"
	PurchasesIndentsService_IsDownloadable_FullMethodName                             = "/Scailo.PurchasesIndentsService/IsDownloadable"
	PurchasesIndentsService_DownloadByUUID_FullMethodName                             = "/Scailo.PurchasesIndentsService/DownloadByUUID"
	PurchasesIndentsService_SearchAll_FullMethodName                                  = "/Scailo.PurchasesIndentsService/SearchAll"
	PurchasesIndentsService_Filter_FullMethodName                                     = "/Scailo.PurchasesIndentsService/Filter"
	PurchasesIndentsService_CountInStatus_FullMethodName                              = "/Scailo.PurchasesIndentsService/CountInStatus"
	PurchasesIndentsService_Count_FullMethodName                                      = "/Scailo.PurchasesIndentsService/Count"
	PurchasesIndentsService_DownloadAsCSV_FullMethodName                              = "/Scailo.PurchasesIndentsService/DownloadAsCSV"
)

// PurchasesIndentsServiceClient is the client API for PurchasesIndentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each purchase indent
type PurchasesIndentsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *PurchasesIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *PurchasesIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *PurchasesIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *PurchasesIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Autofill the purchase indent
	Autofill(ctx context.Context, in *PurchasesIndentsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Purchase Indent can be marked as completed
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Add multiple items to a purchase indent
	AddMultiplePurchaseIndentItems(ctx context.Context, in *PurchasesIndentsServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a purchase indent
	AddPurchaseIndentItem(ctx context.Context, in *PurchasesIndentsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a purchase indent
	ModifyPurchaseIndentItem(ctx context.Context, in *PurchasesIndentsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a purchase indent
	ApprovePurchaseIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a purchase indent
	DeletePurchaseIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a purchase indent
	ReorderPurchaseIndentItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Purchase Indent Item by ID
	ViewPurchaseIndentItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseIndentItem, error)
	// View approved purchase indent items for given purchase indent ID
	ViewApprovedPurchaseIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesIndentsItemsList, error)
	// View unapproved purchase indent items for given purchase indent ID
	ViewUnapprovedPurchaseIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesIndentsItemsList, error)
	// View the history of the purchase indent item
	ViewPurchaseIndentItemHistory(ctx context.Context, in *PurchaseIndentItemHistoryRequest, opts ...grpc.CallOption) (*PurchasesIndentsItemsList, error)
	// View approved purchase indent items for given purchase indent ID with pagination
	ViewPaginatedApprovedPurchaseIndentItems(ctx context.Context, in *PurchaseIndentItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesIndentsServicePaginatedItemsResponse, error)
	// View unapproved purchase indent items for given purchase indent ID with pagination
	ViewPaginatedUnapprovedPurchaseIndentItems(ctx context.Context, in *PurchaseIndentItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesIndentsServicePaginatedItemsResponse, error)
	// Search through purchase indent items with pagination
	SearchItemsWithPagination(ctx context.Context, in *PurchaseIndentItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesIndentsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadPurchaseIndentItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseIndent, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseIndent, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PurchaseIndent, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseIndent, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseIndent, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PurchasesIndentsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PurchasesIndentsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasesIndentsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *PurchasesIndentsServicePaginationReq, opts ...grpc.CallOption) (*PurchasesIndentsServicePaginationResponse, error)
	// View all purchase order IDs that are associated with the given purchase indent ID
	ViewAssociatedPurchaseOrderIDs(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View prospective items for the given purchase indent
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective purchase indent item info for the given family ID and purchase indent ID
	ViewProspectivePurchaseIndentItem(ctx context.Context, in *PurchaseIndentItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PurchasesIndentsServiceItemCreateRequest, error)
	// View ordered (purchase order) statistics of the purchase indent
	ViewOrderedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseIndentOrderedStatisticsList, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download equation with the given IdentifierUUID
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *PurchasesIndentsServiceSearchAllReq, opts ...grpc.CallOption) (*PurchasesIndentsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *PurchasesIndentsServiceFilterReq, opts ...grpc.CallOption) (*PurchasesIndentsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *PurchasesIndentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *PurchasesIndentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type purchasesIndentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchasesIndentsServiceClient(cc grpc.ClientConnInterface) PurchasesIndentsServiceClient {
	return &purchasesIndentsServiceClient{cc}
}

func (c *purchasesIndentsServiceClient) Create(ctx context.Context, in *PurchasesIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Draft(ctx context.Context, in *PurchasesIndentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) DraftUpdate(ctx context.Context, in *PurchasesIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) RevisionUpdate(ctx context.Context, in *PurchasesIndentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Autofill(ctx context.Context, in *PurchasesIndentsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) AddMultiplePurchaseIndentItems(ctx context.Context, in *PurchasesIndentsServiceMultipleItemsCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_AddMultiplePurchaseIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) AddPurchaseIndentItem(ctx context.Context, in *PurchasesIndentsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_AddPurchaseIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ModifyPurchaseIndentItem(ctx context.Context, in *PurchasesIndentsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ModifyPurchaseIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ApprovePurchaseIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ApprovePurchaseIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) DeletePurchaseIndentItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_DeletePurchaseIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ReorderPurchaseIndentItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ReorderPurchaseIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewPurchaseIndentItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseIndentItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseIndentItem)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewPurchaseIndentItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewApprovedPurchaseIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesIndentsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsItemsList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewApprovedPurchaseIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewUnapprovedPurchaseIndentItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PurchasesIndentsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsItemsList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewUnapprovedPurchaseIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewPurchaseIndentItemHistory(ctx context.Context, in *PurchaseIndentItemHistoryRequest, opts ...grpc.CallOption) (*PurchasesIndentsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsItemsList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewPurchaseIndentItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewPaginatedApprovedPurchaseIndentItems(ctx context.Context, in *PurchaseIndentItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesIndentsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewPaginatedApprovedPurchaseIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewPaginatedUnapprovedPurchaseIndentItems(ctx context.Context, in *PurchaseIndentItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesIndentsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewPaginatedUnapprovedPurchaseIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) SearchItemsWithPagination(ctx context.Context, in *PurchaseIndentItemsSearchRequest, opts ...grpc.CallOption) (*PurchasesIndentsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) UploadPurchaseIndentItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_UploadPurchaseIndentItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseIndent)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseIndent)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PurchaseIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseIndent)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PurchaseIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseIndent)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseIndent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseIndent)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PurchasesIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PurchasesIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchasesIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewWithPagination(ctx context.Context, in *PurchasesIndentsServicePaginationReq, opts ...grpc.CallOption) (*PurchasesIndentsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsServicePaginationResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewAssociatedPurchaseOrderIDs(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewAssociatedPurchaseOrderIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewProspectivePurchaseIndentItem(ctx context.Context, in *PurchaseIndentItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PurchasesIndentsServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewProspectivePurchaseIndentItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) ViewOrderedStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PurchaseIndentOrderedStatisticsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseIndentOrderedStatisticsList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_ViewOrderedStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) SearchAll(ctx context.Context, in *PurchasesIndentsServiceSearchAllReq, opts ...grpc.CallOption) (*PurchasesIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Filter(ctx context.Context, in *PurchasesIndentsServiceFilterReq, opts ...grpc.CallOption) (*PurchasesIndentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchasesIndentsList)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) Count(ctx context.Context, in *PurchasesIndentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchasesIndentsServiceClient) DownloadAsCSV(ctx context.Context, in *PurchasesIndentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PurchasesIndentsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchasesIndentsService
