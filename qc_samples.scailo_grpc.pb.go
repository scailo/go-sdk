// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qc_samples.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QCSamplesService_Create_FullMethodName                         = "/Scailo.QCSamplesService/Create"
	QCSamplesService_Update_FullMethodName                         = "/Scailo.QCSamplesService/Update"
	QCSamplesService_Finish_FullMethodName                         = "/Scailo.QCSamplesService/Finish"
	QCSamplesService_Accept_FullMethodName                         = "/Scailo.QCSamplesService/Accept"
	QCSamplesService_AcceptWithDeviation_FullMethodName            = "/Scailo.QCSamplesService/AcceptWithDeviation"
	QCSamplesService_Reject_FullMethodName                         = "/Scailo.QCSamplesService/Reject"
	QCSamplesService_Cancel_FullMethodName                         = "/Scailo.QCSamplesService/Cancel"
	QCSamplesService_Reopen_FullMethodName                         = "/Scailo.QCSamplesService/Reopen"
	QCSamplesService_CommentAdd_FullMethodName                     = "/Scailo.QCSamplesService/CommentAdd"
	QCSamplesService_SendEmail_FullMethodName                      = "/Scailo.QCSamplesService/SendEmail"
	QCSamplesService_CreateMagicLink_FullMethodName                = "/Scailo.QCSamplesService/CreateMagicLink"
	QCSamplesService_UpdateParameter_FullMethodName                = "/Scailo.QCSamplesService/UpdateParameter"
	QCSamplesService_ViewParameterByID_FullMethodName              = "/Scailo.QCSamplesService/ViewParameterByID"
	QCSamplesService_ViewParameters_FullMethodName                 = "/Scailo.QCSamplesService/ViewParameters"
	QCSamplesService_ViewParameterHistory_FullMethodName           = "/Scailo.QCSamplesService/ViewParameterHistory"
	QCSamplesService_ViewPaginatedParameters_FullMethodName        = "/Scailo.QCSamplesService/ViewPaginatedParameters"
	QCSamplesService_SearchParametersWithPagination_FullMethodName = "/Scailo.QCSamplesService/SearchParametersWithPagination"
	QCSamplesService_DownloadParametersAsCSV_FullMethodName        = "/Scailo.QCSamplesService/DownloadParametersAsCSV"
	QCSamplesService_ViewByID_FullMethodName                       = "/Scailo.QCSamplesService/ViewByID"
	QCSamplesService_ViewByUUID_FullMethodName                     = "/Scailo.QCSamplesService/ViewByUUID"
	QCSamplesService_ViewEssentialByID_FullMethodName              = "/Scailo.QCSamplesService/ViewEssentialByID"
	QCSamplesService_ViewEssentialByUUID_FullMethodName            = "/Scailo.QCSamplesService/ViewEssentialByUUID"
	QCSamplesService_ViewFromIDs_FullMethodName                    = "/Scailo.QCSamplesService/ViewFromIDs"
	QCSamplesService_ViewAncillaryParametersByUUID_FullMethodName  = "/Scailo.QCSamplesService/ViewAncillaryParametersByUUID"
	QCSamplesService_ViewAll_FullMethodName                        = "/Scailo.QCSamplesService/ViewAll"
	QCSamplesService_ViewAllForEntityUUID_FullMethodName           = "/Scailo.QCSamplesService/ViewAllForEntityUUID"
	QCSamplesService_ViewWithPagination_FullMethodName             = "/Scailo.QCSamplesService/ViewWithPagination"
	QCSamplesService_IsDownloadable_FullMethodName                 = "/Scailo.QCSamplesService/IsDownloadable"
	QCSamplesService_DownloadByUUID_FullMethodName                 = "/Scailo.QCSamplesService/DownloadByUUID"
	QCSamplesService_SearchAll_FullMethodName                      = "/Scailo.QCSamplesService/SearchAll"
	QCSamplesService_Filter_FullMethodName                         = "/Scailo.QCSamplesService/Filter"
	QCSamplesService_Count_FullMethodName                          = "/Scailo.QCSamplesService/Count"
	QCSamplesService_CountsForInventoryItem_FullMethodName         = "/Scailo.QCSamplesService/CountsForInventoryItem"
	QCSamplesService_DownloadAsCSV_FullMethodName                  = "/Scailo.QCSamplesService/DownloadAsCSV"
)

// QCSamplesServiceClient is the client API for QCSamplesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each qc sample
type QCSamplesServiceClient interface {
	// Create
	Create(ctx context.Context, in *QCSamplesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
	// Update
	Update(ctx context.Context, in *QCSamplesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Finish
	Finish(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Accept
	Accept(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Accept With Deviation
	AcceptWithDeviation(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reject
	Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Cancel
	Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Modify an parameter in a qc sample
	UpdateParameter(ctx context.Context, in *QCSamplesServiceParameterUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View QCSample Parameter by ID
	ViewParameterByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCSampleParameter, error)
	// View all parameters for given qc sample UUID
	ViewParameters(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSampleParametersList, error)
	// View the history of the qc sample parameter
	ViewParameterHistory(ctx context.Context, in *QCSampleParameterHistoryRequest, opts ...grpc.CallOption) (*QCSampleParameterHistoryList, error)
	// View qc sample parameters for given qc sample ID with pagination
	ViewPaginatedParameters(ctx context.Context, in *QCSampleParametersSearchRequest, opts ...grpc.CallOption) (*QCSamplesServicePaginatedParametersResponse, error)
	// Search through qc sample parameters with pagination
	SearchParametersWithPagination(ctx context.Context, in *QCSampleParametersSearchRequest, opts ...grpc.CallOption) (*QCSamplesServicePaginatedParametersResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of parameters in each qc sample represented by the given identifier UUID
	DownloadParametersAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCSample, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSample, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCSample, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSample, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*QCSamplesList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSampleAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*QCSamplesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSamplesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *QCSamplesServicePaginationReq, opts ...grpc.CallOption) (*QCSamplesServicePaginationResponse, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download qc sample with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *QCSamplesServiceSearchAllReq, opts ...grpc.CallOption) (*QCSamplesWithMetadataList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *QCSamplesServiceFilterReq, opts ...grpc.CallOption) (*QCSamplesList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *QCSamplesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all the qc samples in various statuses for the inventory item with the given UUID
	CountsForInventoryItem(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSamplesCountStatistics, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *QCSamplesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type qCSamplesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQCSamplesServiceClient(cc grpc.ClientConnInterface) QCSamplesServiceClient {
	return &qCSamplesServiceClient{cc}
}

func (c *qCSamplesServiceClient) Create(ctx context.Context, in *QCSamplesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, QCSamplesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) Update(ctx context.Context, in *QCSamplesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) Finish(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_Finish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) Accept(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) AcceptWithDeviation(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_AcceptWithDeviation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_Reject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, QCSamplesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) UpdateParameter(ctx context.Context, in *QCSamplesServiceParameterUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_UpdateParameter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewParameterByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCSampleParameter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSampleParameter)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewParameterByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewParameters(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSampleParametersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSampleParametersList)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewParameterHistory(ctx context.Context, in *QCSampleParameterHistoryRequest, opts ...grpc.CallOption) (*QCSampleParameterHistoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSampleParameterHistoryList)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewParameterHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewPaginatedParameters(ctx context.Context, in *QCSampleParametersSearchRequest, opts ...grpc.CallOption) (*QCSamplesServicePaginatedParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSamplesServicePaginatedParametersResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewPaginatedParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) SearchParametersWithPagination(ctx context.Context, in *QCSampleParametersSearchRequest, opts ...grpc.CallOption) (*QCSamplesServicePaginatedParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSamplesServicePaginatedParametersResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_SearchParametersWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) DownloadParametersAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QCSamplesService_DownloadParametersAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCSample, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSample)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSample, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSample)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QCSample, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSample)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSample, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSample)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*QCSamplesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSamplesList)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSampleAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSampleAncillaryParameters)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*QCSamplesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSamplesList)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSamplesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSamplesList)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) ViewWithPagination(ctx context.Context, in *QCSamplesServicePaginationReq, opts ...grpc.CallOption) (*QCSamplesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSamplesServicePaginationResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QCSamplesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) SearchAll(ctx context.Context, in *QCSamplesServiceSearchAllReq, opts ...grpc.CallOption) (*QCSamplesWithMetadataList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSamplesWithMetadataList)
	err := c.cc.Invoke(ctx, QCSamplesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) Filter(ctx context.Context, in *QCSamplesServiceFilterReq, opts ...grpc.CallOption) (*QCSamplesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSamplesList)
	err := c.cc.Invoke(ctx, QCSamplesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) Count(ctx context.Context, in *QCSamplesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, QCSamplesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) CountsForInventoryItem(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QCSamplesCountStatistics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QCSamplesCountStatistics)
	err := c.cc.Invoke(ctx, QCSamplesService_CountsForInventoryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qCSamplesServiceClient) DownloadAsCSV(ctx context.Context, in *QCSamplesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QCSamplesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QCSamplesService
