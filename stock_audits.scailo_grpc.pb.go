// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: stock_audits.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockAuditsService_Create_FullMethodName                                 = "/Scailo.StockAuditsService/Create"
	StockAuditsService_Draft_FullMethodName                                  = "/Scailo.StockAuditsService/Draft"
	StockAuditsService_DraftUpdate_FullMethodName                            = "/Scailo.StockAuditsService/DraftUpdate"
	StockAuditsService_SendForVerification_FullMethodName                    = "/Scailo.StockAuditsService/SendForVerification"
	StockAuditsService_Verify_FullMethodName                                 = "/Scailo.StockAuditsService/Verify"
	StockAuditsService_Approve_FullMethodName                                = "/Scailo.StockAuditsService/Approve"
	StockAuditsService_SendForRevision_FullMethodName                        = "/Scailo.StockAuditsService/SendForRevision"
	StockAuditsService_RevisionUpdate_FullMethodName                         = "/Scailo.StockAuditsService/RevisionUpdate"
	StockAuditsService_Halt_FullMethodName                                   = "/Scailo.StockAuditsService/Halt"
	StockAuditsService_Discard_FullMethodName                                = "/Scailo.StockAuditsService/Discard"
	StockAuditsService_Restore_FullMethodName                                = "/Scailo.StockAuditsService/Restore"
	StockAuditsService_Complete_FullMethodName                               = "/Scailo.StockAuditsService/Complete"
	StockAuditsService_Repeat_FullMethodName                                 = "/Scailo.StockAuditsService/Repeat"
	StockAuditsService_Reopen_FullMethodName                                 = "/Scailo.StockAuditsService/Reopen"
	StockAuditsService_CommentAdd_FullMethodName                             = "/Scailo.StockAuditsService/CommentAdd"
	StockAuditsService_SendEmail_FullMethodName                              = "/Scailo.StockAuditsService/SendEmail"
	StockAuditsService_CreateMagicLink_FullMethodName                        = "/Scailo.StockAuditsService/CreateMagicLink"
	StockAuditsService_IsCompletable_FullMethodName                          = "/Scailo.StockAuditsService/IsCompletable"
	StockAuditsService_AddStockAuditItem_FullMethodName                      = "/Scailo.StockAuditsService/AddStockAuditItem"
	StockAuditsService_ModifyStockAuditItem_FullMethodName                   = "/Scailo.StockAuditsService/ModifyStockAuditItem"
	StockAuditsService_ApproveStockAuditItem_FullMethodName                  = "/Scailo.StockAuditsService/ApproveStockAuditItem"
	StockAuditsService_DeleteStockAuditItem_FullMethodName                   = "/Scailo.StockAuditsService/DeleteStockAuditItem"
	StockAuditsService_ReorderStockAuditItems_FullMethodName                 = "/Scailo.StockAuditsService/ReorderStockAuditItems"
	StockAuditsService_ViewStockAuditItemByID_FullMethodName                 = "/Scailo.StockAuditsService/ViewStockAuditItemByID"
	StockAuditsService_ViewStockAuditItemByInventoryHash_FullMethodName      = "/Scailo.StockAuditsService/ViewStockAuditItemByInventoryHash"
	StockAuditsService_ViewApprovedStockAuditItems_FullMethodName            = "/Scailo.StockAuditsService/ViewApprovedStockAuditItems"
	StockAuditsService_ViewUnapprovedStockAuditItems_FullMethodName          = "/Scailo.StockAuditsService/ViewUnapprovedStockAuditItems"
	StockAuditsService_ViewStockAuditItemHistory_FullMethodName              = "/Scailo.StockAuditsService/ViewStockAuditItemHistory"
	StockAuditsService_ViewPaginatedApprovedStockAuditItems_FullMethodName   = "/Scailo.StockAuditsService/ViewPaginatedApprovedStockAuditItems"
	StockAuditsService_ViewPaginatedUnapprovedStockAuditItems_FullMethodName = "/Scailo.StockAuditsService/ViewPaginatedUnapprovedStockAuditItems"
	StockAuditsService_SearchItemsWithPagination_FullMethodName              = "/Scailo.StockAuditsService/SearchItemsWithPagination"
	StockAuditsService_DownloadItemsAsCSV_FullMethodName                     = "/Scailo.StockAuditsService/DownloadItemsAsCSV"
	StockAuditsService_DownloadItemsTemplateAsCSV_FullMethodName             = "/Scailo.StockAuditsService/DownloadItemsTemplateAsCSV"
	StockAuditsService_UploadStockAuditItems_FullMethodName                  = "/Scailo.StockAuditsService/UploadStockAuditItems"
	StockAuditsService_ViewByID_FullMethodName                               = "/Scailo.StockAuditsService/ViewByID"
	StockAuditsService_ViewByUUID_FullMethodName                             = "/Scailo.StockAuditsService/ViewByUUID"
	StockAuditsService_ViewByReferenceID_FullMethodName                      = "/Scailo.StockAuditsService/ViewByReferenceID"
	StockAuditsService_ViewEssentialByID_FullMethodName                      = "/Scailo.StockAuditsService/ViewEssentialByID"
	StockAuditsService_ViewEssentialByUUID_FullMethodName                    = "/Scailo.StockAuditsService/ViewEssentialByUUID"
	StockAuditsService_ViewFromIDs_FullMethodName                            = "/Scailo.StockAuditsService/ViewFromIDs"
	StockAuditsService_ViewAll_FullMethodName                                = "/Scailo.StockAuditsService/ViewAll"
	StockAuditsService_ViewAllForEntityUUID_FullMethodName                   = "/Scailo.StockAuditsService/ViewAllForEntityUUID"
	StockAuditsService_ViewWithPagination_FullMethodName                     = "/Scailo.StockAuditsService/ViewWithPagination"
	StockAuditsService_ViewProspectiveFamilies_FullMethodName                = "/Scailo.StockAuditsService/ViewProspectiveFamilies"
	StockAuditsService_FilterProspectiveFamilies_FullMethodName              = "/Scailo.StockAuditsService/FilterProspectiveFamilies"
	StockAuditsService_ViewProspectiveStockAuditItem_FullMethodName          = "/Scailo.StockAuditsService/ViewProspectiveStockAuditItem"
	StockAuditsService_DownloadLabelByUUID_FullMethodName                    = "/Scailo.StockAuditsService/DownloadLabelByUUID"
	StockAuditsService_IsDownloadable_FullMethodName                         = "/Scailo.StockAuditsService/IsDownloadable"
	StockAuditsService_DownloadByUUID_FullMethodName                         = "/Scailo.StockAuditsService/DownloadByUUID"
	StockAuditsService_SearchAll_FullMethodName                              = "/Scailo.StockAuditsService/SearchAll"
	StockAuditsService_Filter_FullMethodName                                 = "/Scailo.StockAuditsService/Filter"
	StockAuditsService_CountInStatus_FullMethodName                          = "/Scailo.StockAuditsService/CountInStatus"
	StockAuditsService_Count_FullMethodName                                  = "/Scailo.StockAuditsService/Count"
	StockAuditsService_DownloadAsCSV_FullMethodName                          = "/Scailo.StockAuditsService/DownloadAsCSV"
)

// StockAuditsServiceClient is the client API for StockAuditsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each stock audit
type StockAuditsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *StockAuditsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *StockAuditsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *StockAuditsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *StockAuditsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Checks if the Stock Audit can be marked as completed
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Add an item to a stock audit
	AddStockAuditItem(ctx context.Context, in *StockAuditsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a stock audit
	ModifyStockAuditItem(ctx context.Context, in *StockAuditsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a stock audit
	ApproveStockAuditItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a stock audit
	DeleteStockAuditItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a stock audit
	ReorderStockAuditItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Stock Audit Item by ID
	ViewStockAuditItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockAuditItem, error)
	// View Stock Audit Item by Inventory Hash
	ViewStockAuditItemByInventoryHash(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockAuditItem, error)
	// View approved stock audit items for given stock audit ID
	ViewApprovedStockAuditItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockAuditsItemsList, error)
	// View unapproved stock audit items for given stock audit ID
	ViewUnapprovedStockAuditItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockAuditsItemsList, error)
	// View the history of the stock audit item
	ViewStockAuditItemHistory(ctx context.Context, in *StockAuditItemHistoryRequest, opts ...grpc.CallOption) (*StockAuditsItemsList, error)
	// View approved stock audit items for given stock audit ID with pagination
	ViewPaginatedApprovedStockAuditItems(ctx context.Context, in *StockAuditItemsSearchRequest, opts ...grpc.CallOption) (*StockAuditsServicePaginatedItemsResponse, error)
	// View unapproved stock audit items for given stock audit ID with pagination
	ViewPaginatedUnapprovedStockAuditItems(ctx context.Context, in *StockAuditItemsSearchRequest, opts ...grpc.CallOption) (*StockAuditsServicePaginatedItemsResponse, error)
	// Search through stock audit items with pagination
	SearchItemsWithPagination(ctx context.Context, in *StockAuditItemsSearchRequest, opts ...grpc.CallOption) (*StockAuditsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadStockAuditItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockAudit, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockAudit, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockAudit, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockAudit, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockAudit, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*StockAuditsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*StockAuditsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockAuditsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *StockAuditsServicePaginationReq, opts ...grpc.CallOption) (*StockAuditsServicePaginationResponse, error)
	// View prospective families for the given stock audit
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective stock audit item info for the given family ID and stock audit ID
	ViewProspectiveStockAuditItem(ctx context.Context, in *StockAuditItemProspectiveInfoRequest, opts ...grpc.CallOption) (*StockAuditsServiceItemCreateRequest, error)
	// Download the label for the stock audit with the given IdentifierUUID
	DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download stock audit with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *StockAuditsServiceSearchAllReq, opts ...grpc.CallOption) (*StockAuditsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *StockAuditsServiceFilterReq, opts ...grpc.CallOption) (*StockAuditsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *StockAuditsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *StockAuditsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type stockAuditsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockAuditsServiceClient(cc grpc.ClientConnInterface) StockAuditsServiceClient {
	return &stockAuditsServiceClient{cc}
}

func (c *stockAuditsServiceClient) Create(ctx context.Context, in *StockAuditsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Draft(ctx context.Context, in *StockAuditsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) DraftUpdate(ctx context.Context, in *StockAuditsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) RevisionUpdate(ctx context.Context, in *StockAuditsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, StockAuditsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) AddStockAuditItem(ctx context.Context, in *StockAuditsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_AddStockAuditItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ModifyStockAuditItem(ctx context.Context, in *StockAuditsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_ModifyStockAuditItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ApproveStockAuditItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_ApproveStockAuditItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) DeleteStockAuditItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_DeleteStockAuditItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ReorderStockAuditItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_ReorderStockAuditItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewStockAuditItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockAuditItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditItem)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewStockAuditItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewStockAuditItemByInventoryHash(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockAuditItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditItem)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewStockAuditItemByInventoryHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewApprovedStockAuditItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockAuditsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsItemsList)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewApprovedStockAuditItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewUnapprovedStockAuditItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*StockAuditsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsItemsList)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewUnapprovedStockAuditItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewStockAuditItemHistory(ctx context.Context, in *StockAuditItemHistoryRequest, opts ...grpc.CallOption) (*StockAuditsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsItemsList)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewStockAuditItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewPaginatedApprovedStockAuditItems(ctx context.Context, in *StockAuditItemsSearchRequest, opts ...grpc.CallOption) (*StockAuditsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewPaginatedApprovedStockAuditItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewPaginatedUnapprovedStockAuditItems(ctx context.Context, in *StockAuditItemsSearchRequest, opts ...grpc.CallOption) (*StockAuditsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewPaginatedUnapprovedStockAuditItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) SearchItemsWithPagination(ctx context.Context, in *StockAuditItemsSearchRequest, opts ...grpc.CallOption) (*StockAuditsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockAuditsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockAuditsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) UploadStockAuditItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, StockAuditsService_UploadStockAuditItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockAudit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAudit)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockAudit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAudit)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*StockAudit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAudit)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StockAudit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAudit)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockAudit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAudit)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*StockAuditsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsList)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*StockAuditsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsList)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StockAuditsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsList)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewWithPagination(ctx context.Context, in *StockAuditsServicePaginationReq, opts ...grpc.CallOption) (*StockAuditsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsServicePaginationResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, StockAuditsService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) ViewProspectiveStockAuditItem(ctx context.Context, in *StockAuditItemProspectiveInfoRequest, opts ...grpc.CallOption) (*StockAuditsServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, StockAuditsService_ViewProspectiveStockAuditItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockAuditsService_DownloadLabelByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockAuditsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) SearchAll(ctx context.Context, in *StockAuditsServiceSearchAllReq, opts ...grpc.CallOption) (*StockAuditsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsList)
	err := c.cc.Invoke(ctx, StockAuditsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Filter(ctx context.Context, in *StockAuditsServiceFilterReq, opts ...grpc.CallOption) (*StockAuditsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockAuditsList)
	err := c.cc.Invoke(ctx, StockAuditsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) Count(ctx context.Context, in *StockAuditsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, StockAuditsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockAuditsServiceClient) DownloadAsCSV(ctx context.Context, in *StockAuditsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, StockAuditsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockAuditsService
