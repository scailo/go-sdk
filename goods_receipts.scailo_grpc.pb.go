// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: goods_receipts.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoodsReceiptsService_Create_FullMethodName                                   = "/Scailo.GoodsReceiptsService/Create"
	GoodsReceiptsService_Draft_FullMethodName                                    = "/Scailo.GoodsReceiptsService/Draft"
	GoodsReceiptsService_DraftUpdate_FullMethodName                              = "/Scailo.GoodsReceiptsService/DraftUpdate"
	GoodsReceiptsService_SendForVerification_FullMethodName                      = "/Scailo.GoodsReceiptsService/SendForVerification"
	GoodsReceiptsService_Verify_FullMethodName                                   = "/Scailo.GoodsReceiptsService/Verify"
	GoodsReceiptsService_Approve_FullMethodName                                  = "/Scailo.GoodsReceiptsService/Approve"
	GoodsReceiptsService_SendForRevision_FullMethodName                          = "/Scailo.GoodsReceiptsService/SendForRevision"
	GoodsReceiptsService_RevisionUpdate_FullMethodName                           = "/Scailo.GoodsReceiptsService/RevisionUpdate"
	GoodsReceiptsService_Halt_FullMethodName                                     = "/Scailo.GoodsReceiptsService/Halt"
	GoodsReceiptsService_Discard_FullMethodName                                  = "/Scailo.GoodsReceiptsService/Discard"
	GoodsReceiptsService_Restore_FullMethodName                                  = "/Scailo.GoodsReceiptsService/Restore"
	GoodsReceiptsService_Complete_FullMethodName                                 = "/Scailo.GoodsReceiptsService/Complete"
	GoodsReceiptsService_Repeat_FullMethodName                                   = "/Scailo.GoodsReceiptsService/Repeat"
	GoodsReceiptsService_Reopen_FullMethodName                                   = "/Scailo.GoodsReceiptsService/Reopen"
	GoodsReceiptsService_CommentAdd_FullMethodName                               = "/Scailo.GoodsReceiptsService/CommentAdd"
	GoodsReceiptsService_SendEmail_FullMethodName                                = "/Scailo.GoodsReceiptsService/SendEmail"
	GoodsReceiptsService_Autofill_FullMethodName                                 = "/Scailo.GoodsReceiptsService/Autofill"
	GoodsReceiptsService_IsCompletable_FullMethodName                            = "/Scailo.GoodsReceiptsService/IsCompletable"
	GoodsReceiptsService_CreateMagicLink_FullMethodName                          = "/Scailo.GoodsReceiptsService/CreateMagicLink"
	GoodsReceiptsService_AddGoodsReceiptItem_FullMethodName                      = "/Scailo.GoodsReceiptsService/AddGoodsReceiptItem"
	GoodsReceiptsService_ModifyGoodsReceiptItem_FullMethodName                   = "/Scailo.GoodsReceiptsService/ModifyGoodsReceiptItem"
	GoodsReceiptsService_ApproveGoodsReceiptItem_FullMethodName                  = "/Scailo.GoodsReceiptsService/ApproveGoodsReceiptItem"
	GoodsReceiptsService_DeleteGoodsReceiptItem_FullMethodName                   = "/Scailo.GoodsReceiptsService/DeleteGoodsReceiptItem"
	GoodsReceiptsService_ReorderGoodsReceiptItems_FullMethodName                 = "/Scailo.GoodsReceiptsService/ReorderGoodsReceiptItems"
	GoodsReceiptsService_ViewGoodsReceiptItemByID_FullMethodName                 = "/Scailo.GoodsReceiptsService/ViewGoodsReceiptItemByID"
	GoodsReceiptsService_ViewApprovedGoodsReceiptItems_FullMethodName            = "/Scailo.GoodsReceiptsService/ViewApprovedGoodsReceiptItems"
	GoodsReceiptsService_ViewUnapprovedGoodsReceiptItems_FullMethodName          = "/Scailo.GoodsReceiptsService/ViewUnapprovedGoodsReceiptItems"
	GoodsReceiptsService_ViewGoodsReceiptItemHistory_FullMethodName              = "/Scailo.GoodsReceiptsService/ViewGoodsReceiptItemHistory"
	GoodsReceiptsService_ViewPaginatedApprovedGoodsReceiptItems_FullMethodName   = "/Scailo.GoodsReceiptsService/ViewPaginatedApprovedGoodsReceiptItems"
	GoodsReceiptsService_ViewPaginatedUnapprovedGoodsReceiptItems_FullMethodName = "/Scailo.GoodsReceiptsService/ViewPaginatedUnapprovedGoodsReceiptItems"
	GoodsReceiptsService_SearchItemsWithPagination_FullMethodName                = "/Scailo.GoodsReceiptsService/SearchItemsWithPagination"
	GoodsReceiptsService_DownloadItemsAsCSV_FullMethodName                       = "/Scailo.GoodsReceiptsService/DownloadItemsAsCSV"
	GoodsReceiptsService_DownloadItemsTemplateAsCSV_FullMethodName               = "/Scailo.GoodsReceiptsService/DownloadItemsTemplateAsCSV"
	GoodsReceiptsService_UploadGoodsReceiptItems_FullMethodName                  = "/Scailo.GoodsReceiptsService/UploadGoodsReceiptItems"
	GoodsReceiptsService_ViewByID_FullMethodName                                 = "/Scailo.GoodsReceiptsService/ViewByID"
	GoodsReceiptsService_ViewByUUID_FullMethodName                               = "/Scailo.GoodsReceiptsService/ViewByUUID"
	GoodsReceiptsService_ViewByReferenceID_FullMethodName                        = "/Scailo.GoodsReceiptsService/ViewByReferenceID"
	GoodsReceiptsService_ViewEssentialByID_FullMethodName                        = "/Scailo.GoodsReceiptsService/ViewEssentialByID"
	GoodsReceiptsService_ViewEssentialByUUID_FullMethodName                      = "/Scailo.GoodsReceiptsService/ViewEssentialByUUID"
	GoodsReceiptsService_ViewFromIDs_FullMethodName                              = "/Scailo.GoodsReceiptsService/ViewFromIDs"
	GoodsReceiptsService_ViewAncillaryParametersByUUID_FullMethodName            = "/Scailo.GoodsReceiptsService/ViewAncillaryParametersByUUID"
	GoodsReceiptsService_ViewAll_FullMethodName                                  = "/Scailo.GoodsReceiptsService/ViewAll"
	GoodsReceiptsService_ViewAllForEntityUUID_FullMethodName                     = "/Scailo.GoodsReceiptsService/ViewAllForEntityUUID"
	GoodsReceiptsService_ViewWithPagination_FullMethodName                       = "/Scailo.GoodsReceiptsService/ViewWithPagination"
	GoodsReceiptsService_ViewProspectiveFamilies_FullMethodName                  = "/Scailo.GoodsReceiptsService/ViewProspectiveFamilies"
	GoodsReceiptsService_FilterProspectiveFamilies_FullMethodName                = "/Scailo.GoodsReceiptsService/FilterProspectiveFamilies"
	GoodsReceiptsService_ViewProspectiveGoodsReceiptItem_FullMethodName          = "/Scailo.GoodsReceiptsService/ViewProspectiveGoodsReceiptItem"
	GoodsReceiptsService_IsDownloadable_FullMethodName                           = "/Scailo.GoodsReceiptsService/IsDownloadable"
	GoodsReceiptsService_DownloadByUUID_FullMethodName                           = "/Scailo.GoodsReceiptsService/DownloadByUUID"
	GoodsReceiptsService_DownloadLabelByUUID_FullMethodName                      = "/Scailo.GoodsReceiptsService/DownloadLabelByUUID"
	GoodsReceiptsService_ViewAssociatedVendorInvoiceInfo_FullMethodName          = "/Scailo.GoodsReceiptsService/ViewAssociatedVendorInvoiceInfo"
	GoodsReceiptsService_IsBilled_FullMethodName                                 = "/Scailo.GoodsReceiptsService/IsBilled"
	GoodsReceiptsService_ViewAddedFamilyQuantityForSource_FullMethodName         = "/Scailo.GoodsReceiptsService/ViewAddedFamilyQuantityForSource"
	GoodsReceiptsService_SearchAll_FullMethodName                                = "/Scailo.GoodsReceiptsService/SearchAll"
	GoodsReceiptsService_Filter_FullMethodName                                   = "/Scailo.GoodsReceiptsService/Filter"
	GoodsReceiptsService_CountInStatus_FullMethodName                            = "/Scailo.GoodsReceiptsService/CountInStatus"
	GoodsReceiptsService_Count_FullMethodName                                    = "/Scailo.GoodsReceiptsService/Count"
	GoodsReceiptsService_DownloadAsCSV_FullMethodName                            = "/Scailo.GoodsReceiptsService/DownloadAsCSV"
)

// GoodsReceiptsServiceClient is the client API for GoodsReceiptsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each goods receipt
type GoodsReceiptsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *GoodsReceiptsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *GoodsReceiptsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *GoodsReceiptsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *GoodsReceiptsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Autofill the goods receipt
	Autofill(ctx context.Context, in *GoodsReceiptsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Goods Receipt can be marked as completed
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add an item to a goods receipt
	AddGoodsReceiptItem(ctx context.Context, in *GoodsReceiptsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a goods receipt
	ModifyGoodsReceiptItem(ctx context.Context, in *GoodsReceiptsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a goods receipt
	ApproveGoodsReceiptItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a goods receipt
	DeleteGoodsReceiptItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a goods receipt
	ReorderGoodsReceiptItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Goods Receipt Item by ID
	ViewGoodsReceiptItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GoodsReceiptItem, error)
	// View approved goods receipt items for given goods receipt ID
	ViewApprovedGoodsReceiptItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*GoodsReceiptsItemsList, error)
	// View unapproved goods receipt items for given goods receipt ID
	ViewUnapprovedGoodsReceiptItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*GoodsReceiptsItemsList, error)
	// View the history of the goods receipt item
	ViewGoodsReceiptItemHistory(ctx context.Context, in *GoodsReceiptItemHistoryRequest, opts ...grpc.CallOption) (*GoodsReceiptsItemsList, error)
	// View approved goods receipt items for given goods receipt ID with pagination
	ViewPaginatedApprovedGoodsReceiptItems(ctx context.Context, in *GoodsReceiptItemsSearchRequest, opts ...grpc.CallOption) (*GoodsReceiptsServicePaginatedItemsResponse, error)
	// View unapproved goods receipt items for given goods receipt ID with pagination
	ViewPaginatedUnapprovedGoodsReceiptItems(ctx context.Context, in *GoodsReceiptItemsSearchRequest, opts ...grpc.CallOption) (*GoodsReceiptsServicePaginatedItemsResponse, error)
	// Search through goods receipt items with pagination
	SearchItemsWithPagination(ctx context.Context, in *GoodsReceiptItemsSearchRequest, opts ...grpc.CallOption) (*GoodsReceiptsServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadGoodsReceiptItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GoodsReceipt, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GoodsReceipt, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*GoodsReceipt, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GoodsReceipt, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GoodsReceipt, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*GoodsReceiptsList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GoodsReceiptAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*GoodsReceiptsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GoodsReceiptsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *GoodsReceiptsServicePaginationReq, opts ...grpc.CallOption) (*GoodsReceiptsServicePaginationResponse, error)
	// View prospective families for the given goods receipt
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective goods receipt item info for the given family ID and goods receipt ID
	ViewProspectiveGoodsReceiptItem(ctx context.Context, in *GoodsReceiptItemProspectiveInfoRequest, opts ...grpc.CallOption) (*GoodsReceiptsServiceItemCreateRequest, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download goods receipt with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the label for the goods receipt with the given IdentifierUUID
	DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View the associated vendor invoice information that is denoted by the identifier in the response for the goods receipt that is denoted by the identifier UUID in the request
	ViewAssociatedVendorInvoiceInfo(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Goods Receipt has been billed
	IsBilled(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// View already added quantities
	ViewAddedFamilyQuantityForSource(ctx context.Context, in *GoodsReceiptsServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *GoodsReceiptsServiceSearchAllReq, opts ...grpc.CallOption) (*GoodsReceiptsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *GoodsReceiptsServiceFilterReq, opts ...grpc.CallOption) (*GoodsReceiptsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *GoodsReceiptsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *GoodsReceiptsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type goodsReceiptsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsReceiptsServiceClient(cc grpc.ClientConnInterface) GoodsReceiptsServiceClient {
	return &goodsReceiptsServiceClient{cc}
}

func (c *goodsReceiptsServiceClient) Create(ctx context.Context, in *GoodsReceiptsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Draft(ctx context.Context, in *GoodsReceiptsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) DraftUpdate(ctx context.Context, in *GoodsReceiptsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) RevisionUpdate(ctx context.Context, in *GoodsReceiptsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Autofill(ctx context.Context, in *GoodsReceiptsServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) AddGoodsReceiptItem(ctx context.Context, in *GoodsReceiptsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_AddGoodsReceiptItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ModifyGoodsReceiptItem(ctx context.Context, in *GoodsReceiptsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ModifyGoodsReceiptItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ApproveGoodsReceiptItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ApproveGoodsReceiptItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) DeleteGoodsReceiptItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_DeleteGoodsReceiptItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ReorderGoodsReceiptItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ReorderGoodsReceiptItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewGoodsReceiptItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GoodsReceiptItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptItem)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewGoodsReceiptItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewApprovedGoodsReceiptItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*GoodsReceiptsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsItemsList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewApprovedGoodsReceiptItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewUnapprovedGoodsReceiptItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*GoodsReceiptsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsItemsList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewUnapprovedGoodsReceiptItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewGoodsReceiptItemHistory(ctx context.Context, in *GoodsReceiptItemHistoryRequest, opts ...grpc.CallOption) (*GoodsReceiptsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsItemsList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewGoodsReceiptItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewPaginatedApprovedGoodsReceiptItems(ctx context.Context, in *GoodsReceiptItemsSearchRequest, opts ...grpc.CallOption) (*GoodsReceiptsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewPaginatedApprovedGoodsReceiptItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewPaginatedUnapprovedGoodsReceiptItems(ctx context.Context, in *GoodsReceiptItemsSearchRequest, opts ...grpc.CallOption) (*GoodsReceiptsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewPaginatedUnapprovedGoodsReceiptItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) SearchItemsWithPagination(ctx context.Context, in *GoodsReceiptItemsSearchRequest, opts ...grpc.CallOption) (*GoodsReceiptsServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) UploadGoodsReceiptItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_UploadGoodsReceiptItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GoodsReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceipt)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GoodsReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceipt)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*GoodsReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceipt)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*GoodsReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceipt)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GoodsReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceipt)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*GoodsReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GoodsReceiptAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptAncillaryParameters)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*GoodsReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GoodsReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewWithPagination(ctx context.Context, in *GoodsReceiptsServicePaginationReq, opts ...grpc.CallOption) (*GoodsReceiptsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsServicePaginationResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewProspectiveGoodsReceiptItem(ctx context.Context, in *GoodsReceiptItemProspectiveInfoRequest, opts ...grpc.CallOption) (*GoodsReceiptsServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewProspectiveGoodsReceiptItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_DownloadLabelByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewAssociatedVendorInvoiceInfo(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewAssociatedVendorInvoiceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) IsBilled(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_IsBilled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) ViewAddedFamilyQuantityForSource(ctx context.Context, in *GoodsReceiptsServiceAlreadyAddedQuantityForSourceRequest, opts ...grpc.CallOption) (*DualQuantitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DualQuantitiesResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_ViewAddedFamilyQuantityForSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) SearchAll(ctx context.Context, in *GoodsReceiptsServiceSearchAllReq, opts ...grpc.CallOption) (*GoodsReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Filter(ctx context.Context, in *GoodsReceiptsServiceFilterReq, opts ...grpc.CallOption) (*GoodsReceiptsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsReceiptsList)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) Count(ctx context.Context, in *GoodsReceiptsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsReceiptsServiceClient) DownloadAsCSV(ctx context.Context, in *GoodsReceiptsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, GoodsReceiptsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsReceiptsService
