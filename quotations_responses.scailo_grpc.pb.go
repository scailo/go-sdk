// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: quotations_responses.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuotationsResponsesService_Create_FullMethodName                                        = "/Scailo.QuotationsResponsesService/Create"
	QuotationsResponsesService_Draft_FullMethodName                                         = "/Scailo.QuotationsResponsesService/Draft"
	QuotationsResponsesService_DraftUpdate_FullMethodName                                   = "/Scailo.QuotationsResponsesService/DraftUpdate"
	QuotationsResponsesService_SendForVerification_FullMethodName                           = "/Scailo.QuotationsResponsesService/SendForVerification"
	QuotationsResponsesService_Verify_FullMethodName                                        = "/Scailo.QuotationsResponsesService/Verify"
	QuotationsResponsesService_Approve_FullMethodName                                       = "/Scailo.QuotationsResponsesService/Approve"
	QuotationsResponsesService_SendForRevision_FullMethodName                               = "/Scailo.QuotationsResponsesService/SendForRevision"
	QuotationsResponsesService_RevisionUpdate_FullMethodName                                = "/Scailo.QuotationsResponsesService/RevisionUpdate"
	QuotationsResponsesService_Halt_FullMethodName                                          = "/Scailo.QuotationsResponsesService/Halt"
	QuotationsResponsesService_Discard_FullMethodName                                       = "/Scailo.QuotationsResponsesService/Discard"
	QuotationsResponsesService_Restore_FullMethodName                                       = "/Scailo.QuotationsResponsesService/Restore"
	QuotationsResponsesService_Complete_FullMethodName                                      = "/Scailo.QuotationsResponsesService/Complete"
	QuotationsResponsesService_Repeat_FullMethodName                                        = "/Scailo.QuotationsResponsesService/Repeat"
	QuotationsResponsesService_Reopen_FullMethodName                                        = "/Scailo.QuotationsResponsesService/Reopen"
	QuotationsResponsesService_CommentAdd_FullMethodName                                    = "/Scailo.QuotationsResponsesService/CommentAdd"
	QuotationsResponsesService_CreateMagicLink_FullMethodName                               = "/Scailo.QuotationsResponsesService/CreateMagicLink"
	QuotationsResponsesService_AddQuotationResponseItem_FullMethodName                      = "/Scailo.QuotationsResponsesService/AddQuotationResponseItem"
	QuotationsResponsesService_ModifyQuotationResponseItem_FullMethodName                   = "/Scailo.QuotationsResponsesService/ModifyQuotationResponseItem"
	QuotationsResponsesService_ApproveQuotationResponseItem_FullMethodName                  = "/Scailo.QuotationsResponsesService/ApproveQuotationResponseItem"
	QuotationsResponsesService_DeleteQuotationResponseItem_FullMethodName                   = "/Scailo.QuotationsResponsesService/DeleteQuotationResponseItem"
	QuotationsResponsesService_ReorderQuotationResponseItems_FullMethodName                 = "/Scailo.QuotationsResponsesService/ReorderQuotationResponseItems"
	QuotationsResponsesService_ViewQuotationResponseItemByID_FullMethodName                 = "/Scailo.QuotationsResponsesService/ViewQuotationResponseItemByID"
	QuotationsResponsesService_ViewApprovedQuotationResponseItems_FullMethodName            = "/Scailo.QuotationsResponsesService/ViewApprovedQuotationResponseItems"
	QuotationsResponsesService_ViewUnapprovedQuotationResponseItems_FullMethodName          = "/Scailo.QuotationsResponsesService/ViewUnapprovedQuotationResponseItems"
	QuotationsResponsesService_ViewQuotationResponseItemHistory_FullMethodName              = "/Scailo.QuotationsResponsesService/ViewQuotationResponseItemHistory"
	QuotationsResponsesService_FilterItems_FullMethodName                                   = "/Scailo.QuotationsResponsesService/FilterItems"
	QuotationsResponsesService_ViewPaginatedApprovedQuotationResponseItems_FullMethodName   = "/Scailo.QuotationsResponsesService/ViewPaginatedApprovedQuotationResponseItems"
	QuotationsResponsesService_ViewPaginatedUnapprovedQuotationResponseItems_FullMethodName = "/Scailo.QuotationsResponsesService/ViewPaginatedUnapprovedQuotationResponseItems"
	QuotationsResponsesService_SearchItemsWithPagination_FullMethodName                     = "/Scailo.QuotationsResponsesService/SearchItemsWithPagination"
	QuotationsResponsesService_ViewByID_FullMethodName                                      = "/Scailo.QuotationsResponsesService/ViewByID"
	QuotationsResponsesService_ViewByUUID_FullMethodName                                    = "/Scailo.QuotationsResponsesService/ViewByUUID"
	QuotationsResponsesService_ViewByReferenceID_FullMethodName                             = "/Scailo.QuotationsResponsesService/ViewByReferenceID"
	QuotationsResponsesService_ViewEssentialByID_FullMethodName                             = "/Scailo.QuotationsResponsesService/ViewEssentialByID"
	QuotationsResponsesService_ViewEssentialByUUID_FullMethodName                           = "/Scailo.QuotationsResponsesService/ViewEssentialByUUID"
	QuotationsResponsesService_ViewFromIDs_FullMethodName                                   = "/Scailo.QuotationsResponsesService/ViewFromIDs"
	QuotationsResponsesService_ViewAncillaryParametersByUUID_FullMethodName                 = "/Scailo.QuotationsResponsesService/ViewAncillaryParametersByUUID"
	QuotationsResponsesService_ViewAll_FullMethodName                                       = "/Scailo.QuotationsResponsesService/ViewAll"
	QuotationsResponsesService_ViewAllForEntityUUID_FullMethodName                          = "/Scailo.QuotationsResponsesService/ViewAllForEntityUUID"
	QuotationsResponsesService_ViewWithPagination_FullMethodName                            = "/Scailo.QuotationsResponsesService/ViewWithPagination"
	QuotationsResponsesService_IsDownloadable_FullMethodName                                = "/Scailo.QuotationsResponsesService/IsDownloadable"
	QuotationsResponsesService_DownloadByUUID_FullMethodName                                = "/Scailo.QuotationsResponsesService/DownloadByUUID"
	QuotationsResponsesService_SearchAll_FullMethodName                                     = "/Scailo.QuotationsResponsesService/SearchAll"
	QuotationsResponsesService_Filter_FullMethodName                                        = "/Scailo.QuotationsResponsesService/Filter"
	QuotationsResponsesService_CountInStatus_FullMethodName                                 = "/Scailo.QuotationsResponsesService/CountInStatus"
	QuotationsResponsesService_Count_FullMethodName                                         = "/Scailo.QuotationsResponsesService/Count"
	QuotationsResponsesService_DownloadAsCSV_FullMethodName                                 = "/Scailo.QuotationsResponsesService/DownloadAsCSV"
)

// QuotationsResponsesServiceClient is the client API for QuotationsResponsesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each quotation response
type QuotationsResponsesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *QuotationsResponsesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *QuotationsResponsesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *QuotationsResponsesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *QuotationsResponsesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Add an item to a quotation response
	AddQuotationResponseItem(ctx context.Context, in *QuotationsResponsesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a quotation response
	ModifyQuotationResponseItem(ctx context.Context, in *QuotationsResponsesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a quotation response
	ApproveQuotationResponseItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a quotation response
	DeleteQuotationResponseItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a quotation response
	ReorderQuotationResponseItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View quotation response Item by ID
	ViewQuotationResponseItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationResponseItem, error)
	// View approved quotation response items for given quotation response ID
	ViewApprovedQuotationResponseItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QuotationsResponsesItemsList, error)
	// View unapproved quotation response items for given quotation response ID
	ViewUnapprovedQuotationResponseItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QuotationsResponsesItemsList, error)
	// View the history of the quotation response item
	ViewQuotationResponseItemHistory(ctx context.Context, in *QuotationResponseItemHistoryRequest, opts ...grpc.CallOption) (*QuotationsResponsesItemsList, error)
	// View all the quotation response items that match the given filter criteria
	FilterItems(ctx context.Context, in *QuotationsResponsesServiceItemsFilterReq, opts ...grpc.CallOption) (*QuotationsResponsesItemsList, error)
	// View approved quotation response items for given quotation response ID with pagination
	ViewPaginatedApprovedQuotationResponseItems(ctx context.Context, in *QuotationResponseItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsResponsesServicePaginatedItemsResponse, error)
	// View unapproved quotation response items for given quotation response ID with pagination
	ViewPaginatedUnapprovedQuotationResponseItems(ctx context.Context, in *QuotationResponseItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsResponsesServicePaginatedItemsResponse, error)
	// Search through quotation response items with pagination
	SearchItemsWithPagination(ctx context.Context, in *QuotationResponseItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsResponsesServicePaginatedItemsResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationResponse, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationResponse, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*QuotationResponse, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationResponse, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationResponse, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*QuotationsResponsesList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationResponseAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*QuotationsResponsesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationsResponsesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *QuotationsResponsesServicePaginationReq, opts ...grpc.CallOption) (*QuotationsResponsesServicePaginationResponse, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download quotation response with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *QuotationsResponsesServiceSearchAllReq, opts ...grpc.CallOption) (*QuotationsResponsesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *QuotationsResponsesServiceFilterReq, opts ...grpc.CallOption) (*QuotationsResponsesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *QuotationsResponsesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *QuotationsResponsesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type quotationsResponsesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotationsResponsesServiceClient(cc grpc.ClientConnInterface) QuotationsResponsesServiceClient {
	return &quotationsResponsesServiceClient{cc}
}

func (c *quotationsResponsesServiceClient) Create(ctx context.Context, in *QuotationsResponsesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Draft(ctx context.Context, in *QuotationsResponsesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) DraftUpdate(ctx context.Context, in *QuotationsResponsesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) RevisionUpdate(ctx context.Context, in *QuotationsResponsesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) AddQuotationResponseItem(ctx context.Context, in *QuotationsResponsesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_AddQuotationResponseItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ModifyQuotationResponseItem(ctx context.Context, in *QuotationsResponsesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ModifyQuotationResponseItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ApproveQuotationResponseItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ApproveQuotationResponseItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) DeleteQuotationResponseItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_DeleteQuotationResponseItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ReorderQuotationResponseItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ReorderQuotationResponseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewQuotationResponseItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationResponseItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationResponseItem)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewQuotationResponseItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewApprovedQuotationResponseItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QuotationsResponsesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesItemsList)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewApprovedQuotationResponseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewUnapprovedQuotationResponseItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*QuotationsResponsesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesItemsList)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewUnapprovedQuotationResponseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewQuotationResponseItemHistory(ctx context.Context, in *QuotationResponseItemHistoryRequest, opts ...grpc.CallOption) (*QuotationsResponsesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesItemsList)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewQuotationResponseItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) FilterItems(ctx context.Context, in *QuotationsResponsesServiceItemsFilterReq, opts ...grpc.CallOption) (*QuotationsResponsesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesItemsList)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_FilterItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewPaginatedApprovedQuotationResponseItems(ctx context.Context, in *QuotationResponseItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsResponsesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewPaginatedApprovedQuotationResponseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewPaginatedUnapprovedQuotationResponseItems(ctx context.Context, in *QuotationResponseItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsResponsesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewPaginatedUnapprovedQuotationResponseItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) SearchItemsWithPagination(ctx context.Context, in *QuotationResponseItemsSearchRequest, opts ...grpc.CallOption) (*QuotationsResponsesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*QuotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*QuotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*QuotationsResponsesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesList)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationResponseAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationResponseAncillaryParameters)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*QuotationsResponsesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesList)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*QuotationsResponsesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesList)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) ViewWithPagination(ctx context.Context, in *QuotationsResponsesServicePaginationReq, opts ...grpc.CallOption) (*QuotationsResponsesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesServicePaginationResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) SearchAll(ctx context.Context, in *QuotationsResponsesServiceSearchAllReq, opts ...grpc.CallOption) (*QuotationsResponsesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesList)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Filter(ctx context.Context, in *QuotationsResponsesServiceFilterReq, opts ...grpc.CallOption) (*QuotationsResponsesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotationsResponsesList)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) Count(ctx context.Context, in *QuotationsResponsesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotationsResponsesServiceClient) DownloadAsCSV(ctx context.Context, in *QuotationsResponsesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, QuotationsResponsesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotationsResponsesService
