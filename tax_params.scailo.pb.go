// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: tax_params.scailo.proto

package sdk

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the available value types for a tax param
type TAX_PARAM_VALUE_TYPE int32

const (
	// The default value type, and is useful only for filter and search queries when the value type needs to be disregarded
	TAX_PARAM_VALUE_TYPE_TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED TAX_PARAM_VALUE_TYPE = 0
	// Denotes that the value type is percentage (tax is calculated as a percentage over the base value)
	TAX_PARAM_VALUE_TYPE_TAX_PARAM_VALUE_TYPE_PERCENTAGE TAX_PARAM_VALUE_TYPE = 1
	// Denotes that the value type is fixed (tax is a fixed value)
	TAX_PARAM_VALUE_TYPE_TAX_PARAM_VALUE_TYPE_FIXED TAX_PARAM_VALUE_TYPE = 2
)

// Enum value maps for TAX_PARAM_VALUE_TYPE.
var (
	TAX_PARAM_VALUE_TYPE_name = map[int32]string{
		0: "TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED",
		1: "TAX_PARAM_VALUE_TYPE_PERCENTAGE",
		2: "TAX_PARAM_VALUE_TYPE_FIXED",
	}
	TAX_PARAM_VALUE_TYPE_value = map[string]int32{
		"TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED": 0,
		"TAX_PARAM_VALUE_TYPE_PERCENTAGE":      1,
		"TAX_PARAM_VALUE_TYPE_FIXED":           2,
	}
)

func (x TAX_PARAM_VALUE_TYPE) Enum() *TAX_PARAM_VALUE_TYPE {
	p := new(TAX_PARAM_VALUE_TYPE)
	*p = x
	return p
}

func (x TAX_PARAM_VALUE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TAX_PARAM_VALUE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_tax_params_scailo_proto_enumTypes[0].Descriptor()
}

func (TAX_PARAM_VALUE_TYPE) Type() protoreflect.EnumType {
	return &file_tax_params_scailo_proto_enumTypes[0]
}

func (x TAX_PARAM_VALUE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TAX_PARAM_VALUE_TYPE.Descriptor instead.
func (TAX_PARAM_VALUE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{0}
}

// Describes the available categories for a tax param
type TAX_PARAM_CATEGORY int32

const (
	// The default category, and is useful only for filter and search queries when the category needs to be disregarded
	TAX_PARAM_CATEGORY_TAX_PARAM_CATEGORY_ANY_UNSPECIFIED TAX_PARAM_CATEGORY = 0
	// Denotes that the tax param belongs to the general category (applicable on purchase and sales)
	TAX_PARAM_CATEGORY_TAX_PARAM_CATEGORY_GENERAL TAX_PARAM_CATEGORY = 1
	// Denotes that the tax param belongs to the payroll category (applicable when computing payroll)
	TAX_PARAM_CATEGORY_TAX_PARAM_CATEGORY_PAYROLL TAX_PARAM_CATEGORY = 2
)

// Enum value maps for TAX_PARAM_CATEGORY.
var (
	TAX_PARAM_CATEGORY_name = map[int32]string{
		0: "TAX_PARAM_CATEGORY_ANY_UNSPECIFIED",
		1: "TAX_PARAM_CATEGORY_GENERAL",
		2: "TAX_PARAM_CATEGORY_PAYROLL",
	}
	TAX_PARAM_CATEGORY_value = map[string]int32{
		"TAX_PARAM_CATEGORY_ANY_UNSPECIFIED": 0,
		"TAX_PARAM_CATEGORY_GENERAL":         1,
		"TAX_PARAM_CATEGORY_PAYROLL":         2,
	}
)

func (x TAX_PARAM_CATEGORY) Enum() *TAX_PARAM_CATEGORY {
	p := new(TAX_PARAM_CATEGORY)
	*p = x
	return p
}

func (x TAX_PARAM_CATEGORY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TAX_PARAM_CATEGORY) Descriptor() protoreflect.EnumDescriptor {
	return file_tax_params_scailo_proto_enumTypes[1].Descriptor()
}

func (TAX_PARAM_CATEGORY) Type() protoreflect.EnumType {
	return &file_tax_params_scailo_proto_enumTypes[1]
}

func (x TAX_PARAM_CATEGORY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TAX_PARAM_CATEGORY.Descriptor instead.
func (TAX_PARAM_CATEGORY) EnumDescriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{1}
}

// Describes the available sort keys
type TAX_PARAM_SORT_KEY int32

const (
	// Fetch ordered results by id
	TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_ID_UNSPECIFIED TAX_PARAM_SORT_KEY = 0
	// Fetch ordered results by the creation timestamp
	TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_CREATED_AT TAX_PARAM_SORT_KEY = 1
	// Fetch ordered results by the modified timestamp
	TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_MODIFIED_AT TAX_PARAM_SORT_KEY = 2
	// Fetch ordered results by the approved on timestamp
	TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_APPROVED_ON TAX_PARAM_SORT_KEY = 3
	// Fetch ordered results by the approved by field
	TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_APPROVED_BY TAX_PARAM_SORT_KEY = 4
	// Fetch ordered results by the approver's role ID
	TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID TAX_PARAM_SORT_KEY = 5
	// Fetch ordered results by the name
	TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_NAME TAX_PARAM_SORT_KEY = 10
	// Fetch ordered results by the tax rate percentage
	TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE TAX_PARAM_SORT_KEY = 11
	// Fetch ordered results by the code
	TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_CODE TAX_PARAM_SORT_KEY = 21
)

// Enum value maps for TAX_PARAM_SORT_KEY.
var (
	TAX_PARAM_SORT_KEY_name = map[int32]string{
		0:  "TAX_PARAM_SORT_KEY_ID_UNSPECIFIED",
		1:  "TAX_PARAM_SORT_KEY_CREATED_AT",
		2:  "TAX_PARAM_SORT_KEY_MODIFIED_AT",
		3:  "TAX_PARAM_SORT_KEY_APPROVED_ON",
		4:  "TAX_PARAM_SORT_KEY_APPROVED_BY",
		5:  "TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID",
		10: "TAX_PARAM_SORT_KEY_NAME",
		11: "TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE",
		21: "TAX_PARAM_SORT_KEY_CODE",
	}
	TAX_PARAM_SORT_KEY_value = map[string]int32{
		"TAX_PARAM_SORT_KEY_ID_UNSPECIFIED":      0,
		"TAX_PARAM_SORT_KEY_CREATED_AT":          1,
		"TAX_PARAM_SORT_KEY_MODIFIED_AT":         2,
		"TAX_PARAM_SORT_KEY_APPROVED_ON":         3,
		"TAX_PARAM_SORT_KEY_APPROVED_BY":         4,
		"TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID":    5,
		"TAX_PARAM_SORT_KEY_NAME":                10,
		"TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE": 11,
		"TAX_PARAM_SORT_KEY_CODE":                21,
	}
)

func (x TAX_PARAM_SORT_KEY) Enum() *TAX_PARAM_SORT_KEY {
	p := new(TAX_PARAM_SORT_KEY)
	*p = x
	return p
}

func (x TAX_PARAM_SORT_KEY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TAX_PARAM_SORT_KEY) Descriptor() protoreflect.EnumDescriptor {
	return file_tax_params_scailo_proto_enumTypes[2].Descriptor()
}

func (TAX_PARAM_SORT_KEY) Type() protoreflect.EnumType {
	return &file_tax_params_scailo_proto_enumTypes[2]
}

func (x TAX_PARAM_SORT_KEY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TAX_PARAM_SORT_KEY.Descriptor instead.
func (TAX_PARAM_SORT_KEY) EnumDescriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{2}
}

// Describes the parameters necessary to create a record
type TaxParamsServiceCreateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TaxParams a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// TaxParams any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,2,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The name of the tax param
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The unique code by which the tax param is classified
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The type of the tax param
	ValueType TAX_PARAM_VALUE_TYPE `protobuf:"varint,11,opt,name=value_type,json=valueType,proto3,enum=Scailo.TAX_PARAM_VALUE_TYPE" json:"value_type,omitempty"`
	// The fixed amount of tax (applicable only if value type is fixed)
	TaxFixedAmount uint64 `protobuf:"varint,12,opt,name=tax_fixed_amount,json=taxFixedAmount,proto3" json:"tax_fixed_amount,omitempty"`
	// The percentage of tax (applicable only if value type is percentage)
	TaxRatePercentage uint64 `protobuf:"varint,13,opt,name=tax_rate_percentage,json=taxRatePercentage,proto3" json:"tax_rate_percentage,omitempty"`
	// The divisor that is defined in order to normalize tax rate percentage
	Divisor uint64 `protobuf:"varint,14,opt,name=divisor,proto3" json:"divisor,omitempty"`
	// The input credit percentage that is applicable
	InputCreditPercentage uint64 `protobuf:"varint,15,opt,name=input_credit_percentage,json=inputCreditPercentage,proto3" json:"input_credit_percentage,omitempty"`
	// The minimum amount of applicable tax (will be disregarded if value is -100)
	MinAmount int64 `protobuf:"varint,16,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// The maximum amount of applicable tax (will be disregarded if value is -100)
	MaxAmount int64 `protobuf:"varint,17,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	// The category of the tax param
	Category TAX_PARAM_CATEGORY `protobuf:"varint,18,opt,name=category,proto3,enum=Scailo.TAX_PARAM_CATEGORY" json:"category,omitempty"`
	// The description of the tax param
	Description   string `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxParamsServiceCreateRequest) Reset() {
	*x = TaxParamsServiceCreateRequest{}
	mi := &file_tax_params_scailo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxParamsServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxParamsServiceCreateRequest) ProtoMessage() {}

func (x *TaxParamsServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_params_scailo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxParamsServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*TaxParamsServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{0}
}

func (x *TaxParamsServiceCreateRequest) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxParamsServiceCreateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *TaxParamsServiceCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxParamsServiceCreateRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaxParamsServiceCreateRequest) GetValueType() TAX_PARAM_VALUE_TYPE {
	if x != nil {
		return x.ValueType
	}
	return TAX_PARAM_VALUE_TYPE_TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceCreateRequest) GetTaxFixedAmount() uint64 {
	if x != nil {
		return x.TaxFixedAmount
	}
	return 0
}

func (x *TaxParamsServiceCreateRequest) GetTaxRatePercentage() uint64 {
	if x != nil {
		return x.TaxRatePercentage
	}
	return 0
}

func (x *TaxParamsServiceCreateRequest) GetDivisor() uint64 {
	if x != nil {
		return x.Divisor
	}
	return 0
}

func (x *TaxParamsServiceCreateRequest) GetInputCreditPercentage() uint64 {
	if x != nil {
		return x.InputCreditPercentage
	}
	return 0
}

func (x *TaxParamsServiceCreateRequest) GetMinAmount() int64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *TaxParamsServiceCreateRequest) GetMaxAmount() int64 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

func (x *TaxParamsServiceCreateRequest) GetCategory() TAX_PARAM_CATEGORY {
	if x != nil {
		return x.Category
	}
	return TAX_PARAM_CATEGORY_TAX_PARAM_CATEGORY_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the parameters necessary to update a record
type TaxParamsServiceUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TaxParams any comment that the user might add during this operation
	UserComment string `protobuf:"bytes,1,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The ID of the record that needs to be updated
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Optional boolean value that denotes if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
	NotifyUsers bool `protobuf:"varint,3,opt,name=notify_users,json=notifyUsers,proto3" json:"notify_users,omitempty"`
	// The name of the tax param
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The unique code by which the tax param is classified
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The description of the tax param
	Description   string `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxParamsServiceUpdateRequest) Reset() {
	*x = TaxParamsServiceUpdateRequest{}
	mi := &file_tax_params_scailo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxParamsServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxParamsServiceUpdateRequest) ProtoMessage() {}

func (x *TaxParamsServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tax_params_scailo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxParamsServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*TaxParamsServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{1}
}

func (x *TaxParamsServiceUpdateRequest) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *TaxParamsServiceUpdateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaxParamsServiceUpdateRequest) GetNotifyUsers() bool {
	if x != nil {
		return x.NotifyUsers
	}
	return false
}

func (x *TaxParamsServiceUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxParamsServiceUpdateRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaxParamsServiceUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the parameters that are part of a standard response
type TaxParam struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TaxParams a globally unique entity UUID. This will be set at the organization level
	EntityUuid string `protobuf:"bytes,1,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// TaxParams the metadata of this tax param
	Metadata *EmployeeMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// TaxParams the approval metadata
	ApprovalMetadata *ApprovalMetadata `protobuf:"bytes,3,opt,name=approval_metadata,json=approvalMetadata,proto3" json:"approval_metadata,omitempty"`
	// The status of this tax param
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,4,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// TaxParams the logs of every operation performed on this tax param
	Logs []*LogbookLogConciseSLC `protobuf:"bytes,5,rep,name=logs,proto3" json:"logs,omitempty"`
	// The name of the tax param
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The unique code by which the tax param is classified
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The type of the tax param
	ValueType TAX_PARAM_VALUE_TYPE `protobuf:"varint,11,opt,name=value_type,json=valueType,proto3,enum=Scailo.TAX_PARAM_VALUE_TYPE" json:"value_type,omitempty"`
	// The fixed amount of tax (applicable only if value type is fixed)
	TaxFixedAmount uint64 `protobuf:"varint,12,opt,name=tax_fixed_amount,json=taxFixedAmount,proto3" json:"tax_fixed_amount,omitempty"`
	// The percentage of tax (applicable only if value type is percentage)
	TaxRatePercentage uint64 `protobuf:"varint,13,opt,name=tax_rate_percentage,json=taxRatePercentage,proto3" json:"tax_rate_percentage,omitempty"`
	// The divisor that is defined in order to normalize tax rate percentage
	Divisor uint64 `protobuf:"varint,14,opt,name=divisor,proto3" json:"divisor,omitempty"`
	// The input credit percentage that is applicable
	InputCreditPercentage uint64 `protobuf:"varint,15,opt,name=input_credit_percentage,json=inputCreditPercentage,proto3" json:"input_credit_percentage,omitempty"`
	// The minimum amount of applicable tax (will be disregarded if value is -100)
	MinAmount int64 `protobuf:"varint,16,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// The maximum amount of applicable tax (will be disregarded if value is -100)
	MaxAmount int64 `protobuf:"varint,17,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	// The category of the tax param
	Category TAX_PARAM_CATEGORY `protobuf:"varint,18,opt,name=category,proto3,enum=Scailo.TAX_PARAM_CATEGORY" json:"category,omitempty"`
	// The description of the tax param
	Description   string `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxParam) Reset() {
	*x = TaxParam{}
	mi := &file_tax_params_scailo_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxParam) ProtoMessage() {}

func (x *TaxParam) ProtoReflect() protoreflect.Message {
	mi := &file_tax_params_scailo_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxParam.ProtoReflect.Descriptor instead.
func (*TaxParam) Descriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{2}
}

func (x *TaxParam) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxParam) GetMetadata() *EmployeeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaxParam) GetApprovalMetadata() *ApprovalMetadata {
	if x != nil {
		return x.ApprovalMetadata
	}
	return nil
}

func (x *TaxParam) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *TaxParam) GetLogs() []*LogbookLogConciseSLC {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TaxParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxParam) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaxParam) GetValueType() TAX_PARAM_VALUE_TYPE {
	if x != nil {
		return x.ValueType
	}
	return TAX_PARAM_VALUE_TYPE_TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED
}

func (x *TaxParam) GetTaxFixedAmount() uint64 {
	if x != nil {
		return x.TaxFixedAmount
	}
	return 0
}

func (x *TaxParam) GetTaxRatePercentage() uint64 {
	if x != nil {
		return x.TaxRatePercentage
	}
	return 0
}

func (x *TaxParam) GetDivisor() uint64 {
	if x != nil {
		return x.Divisor
	}
	return 0
}

func (x *TaxParam) GetInputCreditPercentage() uint64 {
	if x != nil {
		return x.InputCreditPercentage
	}
	return 0
}

func (x *TaxParam) GetMinAmount() int64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *TaxParam) GetMaxAmount() int64 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

func (x *TaxParam) GetCategory() TAX_PARAM_CATEGORY {
	if x != nil {
		return x.Category
	}
	return TAX_PARAM_CATEGORY_TAX_PARAM_CATEGORY_ANY_UNSPECIFIED
}

func (x *TaxParam) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the message consisting of the list of records
type TaxParamsList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of records
	List          []*TaxParam `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxParamsList) Reset() {
	*x = TaxParamsList{}
	mi := &file_tax_params_scailo_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxParamsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxParamsList) ProtoMessage() {}

func (x *TaxParamsList) ProtoReflect() protoreflect.Message {
	mi := &file_tax_params_scailo_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxParamsList.ProtoReflect.Descriptor instead.
func (*TaxParamsList) Descriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{3}
}

func (x *TaxParamsList) GetList() []*TaxParam {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes a pagination request to retrieve records
type TaxParamsServicePaginationReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey TAX_PARAM_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.TAX_PARAM_SORT_KEY" json:"sort_key,omitempty"`
	// The status of this tax param
	Status        STANDARD_LIFECYCLE_STATUS `protobuf:"varint,6,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxParamsServicePaginationReq) Reset() {
	*x = TaxParamsServicePaginationReq{}
	mi := &file_tax_params_scailo_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxParamsServicePaginationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxParamsServicePaginationReq) ProtoMessage() {}

func (x *TaxParamsServicePaginationReq) ProtoReflect() protoreflect.Message {
	mi := &file_tax_params_scailo_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxParamsServicePaginationReq.ProtoReflect.Descriptor instead.
func (*TaxParamsServicePaginationReq) Descriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{4}
}

func (x *TaxParamsServicePaginationReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *TaxParamsServicePaginationReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaxParamsServicePaginationReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaxParamsServicePaginationReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *TaxParamsServicePaginationReq) GetSortKey() TAX_PARAM_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_ID_UNSPECIFIED
}

func (x *TaxParamsServicePaginationReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

// Describes the response to a pagination request
type TaxParamsServicePaginationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of records in this payload
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The total number of records that are available
	Total uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// The list of records
	Payload       []*TaxParam `protobuf:"bytes,4,rep,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxParamsServicePaginationResponse) Reset() {
	*x = TaxParamsServicePaginationResponse{}
	mi := &file_tax_params_scailo_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxParamsServicePaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxParamsServicePaginationResponse) ProtoMessage() {}

func (x *TaxParamsServicePaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tax_params_scailo_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxParamsServicePaginationResponse.ProtoReflect.Descriptor instead.
func (*TaxParamsServicePaginationResponse) Descriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{5}
}

func (x *TaxParamsServicePaginationResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaxParamsServicePaginationResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaxParamsServicePaginationResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaxParamsServicePaginationResponse) GetPayload() []*TaxParam {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Describes the base request payload of a filter search
type TaxParamsServiceFilterReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey TAX_PARAM_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.TAX_PARAM_SORT_KEY" json:"sort_key,omitempty"`
	// The minimum timestamp that needs to be considered to filter by creation
	CreationTimestampStart uint64 `protobuf:"varint,101,opt,name=creation_timestamp_start,json=creationTimestampStart,proto3" json:"creation_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by creation
	CreationTimestampEnd uint64 `protobuf:"varint,102,opt,name=creation_timestamp_end,json=creationTimestampEnd,proto3" json:"creation_timestamp_end,omitempty"`
	// The minimum timestamp that needs to be considered to filter by modification
	ModificationTimestampStart uint64 `protobuf:"varint,103,opt,name=modification_timestamp_start,json=modificationTimestampStart,proto3" json:"modification_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by modification
	ModificationTimestampEnd uint64 `protobuf:"varint,104,opt,name=modification_timestamp_end,json=modificationTimestampEnd,proto3" json:"modification_timestamp_end,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,8,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// The status of this tax param
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// The start range of approved timestamp
	ApprovedOnStart uint64 `protobuf:"varint,11,opt,name=approved_on_start,json=approvedOnStart,proto3" json:"approved_on_start,omitempty"`
	// The end range of approved timestamp
	ApprovedOnEnd uint64 `protobuf:"varint,12,opt,name=approved_on_end,json=approvedOnEnd,proto3" json:"approved_on_end,omitempty"`
	// The ID of the approver
	ApprovedByUserId uint64 `protobuf:"varint,13,opt,name=approved_by_user_id,json=approvedByUserId,proto3" json:"approved_by_user_id,omitempty"`
	// The role ID of the approver
	ApproverRoleId uint64 `protobuf:"varint,14,opt,name=approver_role_id,json=approverRoleId,proto3" json:"approver_role_id,omitempty"`
	// The name of the tax param
	Name string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// The unique code by which the tax param is classified
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The type of the tax param
	ValueType TAX_PARAM_VALUE_TYPE `protobuf:"varint,31,opt,name=value_type,json=valueType,proto3,enum=Scailo.TAX_PARAM_VALUE_TYPE" json:"value_type,omitempty"`
	// The category of the tax param
	Category      TAX_PARAM_CATEGORY `protobuf:"varint,32,opt,name=category,proto3,enum=Scailo.TAX_PARAM_CATEGORY" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxParamsServiceFilterReq) Reset() {
	*x = TaxParamsServiceFilterReq{}
	mi := &file_tax_params_scailo_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxParamsServiceFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxParamsServiceFilterReq) ProtoMessage() {}

func (x *TaxParamsServiceFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_tax_params_scailo_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxParamsServiceFilterReq.ProtoReflect.Descriptor instead.
func (*TaxParamsServiceFilterReq) Descriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{6}
}

func (x *TaxParamsServiceFilterReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceFilterReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaxParamsServiceFilterReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaxParamsServiceFilterReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *TaxParamsServiceFilterReq) GetSortKey() TAX_PARAM_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_ID_UNSPECIFIED
}

func (x *TaxParamsServiceFilterReq) GetCreationTimestampStart() uint64 {
	if x != nil {
		return x.CreationTimestampStart
	}
	return 0
}

func (x *TaxParamsServiceFilterReq) GetCreationTimestampEnd() uint64 {
	if x != nil {
		return x.CreationTimestampEnd
	}
	return 0
}

func (x *TaxParamsServiceFilterReq) GetModificationTimestampStart() uint64 {
	if x != nil {
		return x.ModificationTimestampStart
	}
	return 0
}

func (x *TaxParamsServiceFilterReq) GetModificationTimestampEnd() uint64 {
	if x != nil {
		return x.ModificationTimestampEnd
	}
	return 0
}

func (x *TaxParamsServiceFilterReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxParamsServiceFilterReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceFilterReq) GetApprovedOnStart() uint64 {
	if x != nil {
		return x.ApprovedOnStart
	}
	return 0
}

func (x *TaxParamsServiceFilterReq) GetApprovedOnEnd() uint64 {
	if x != nil {
		return x.ApprovedOnEnd
	}
	return 0
}

func (x *TaxParamsServiceFilterReq) GetApprovedByUserId() uint64 {
	if x != nil {
		return x.ApprovedByUserId
	}
	return 0
}

func (x *TaxParamsServiceFilterReq) GetApproverRoleId() uint64 {
	if x != nil {
		return x.ApproverRoleId
	}
	return 0
}

func (x *TaxParamsServiceFilterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxParamsServiceFilterReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaxParamsServiceFilterReq) GetValueType() TAX_PARAM_VALUE_TYPE {
	if x != nil {
		return x.ValueType
	}
	return TAX_PARAM_VALUE_TYPE_TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceFilterReq) GetCategory() TAX_PARAM_CATEGORY {
	if x != nil {
		return x.Category
	}
	return TAX_PARAM_CATEGORY_TAX_PARAM_CATEGORY_ANY_UNSPECIFIED
}

// Describes the base request payload of a count search
type TaxParamsServiceCountReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The minimum timestamp that needs to be considered to filter by creation
	CreationTimestampStart uint64 `protobuf:"varint,101,opt,name=creation_timestamp_start,json=creationTimestampStart,proto3" json:"creation_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by creation
	CreationTimestampEnd uint64 `protobuf:"varint,102,opt,name=creation_timestamp_end,json=creationTimestampEnd,proto3" json:"creation_timestamp_end,omitempty"`
	// The minimum timestamp that needs to be considered to filter by modification
	ModificationTimestampStart uint64 `protobuf:"varint,103,opt,name=modification_timestamp_start,json=modificationTimestampStart,proto3" json:"modification_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by modification
	ModificationTimestampEnd uint64 `protobuf:"varint,104,opt,name=modification_timestamp_end,json=modificationTimestampEnd,proto3" json:"modification_timestamp_end,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,8,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// The status of this tax param
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// The start range of approved timestamp
	ApprovedOnStart uint64 `protobuf:"varint,11,opt,name=approved_on_start,json=approvedOnStart,proto3" json:"approved_on_start,omitempty"`
	// The end range of approved timestamp
	ApprovedOnEnd uint64 `protobuf:"varint,12,opt,name=approved_on_end,json=approvedOnEnd,proto3" json:"approved_on_end,omitempty"`
	// The ID of the approver
	ApprovedByUserId uint64 `protobuf:"varint,13,opt,name=approved_by_user_id,json=approvedByUserId,proto3" json:"approved_by_user_id,omitempty"`
	// The role ID of the approver
	ApproverRoleId uint64 `protobuf:"varint,14,opt,name=approver_role_id,json=approverRoleId,proto3" json:"approver_role_id,omitempty"`
	// The name of the tax param
	Name string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// The unique code by which the tax param is classified
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// The type of the tax param
	ValueType TAX_PARAM_VALUE_TYPE `protobuf:"varint,31,opt,name=value_type,json=valueType,proto3,enum=Scailo.TAX_PARAM_VALUE_TYPE" json:"value_type,omitempty"`
	// The category of the tax param
	Category      TAX_PARAM_CATEGORY `protobuf:"varint,32,opt,name=category,proto3,enum=Scailo.TAX_PARAM_CATEGORY" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxParamsServiceCountReq) Reset() {
	*x = TaxParamsServiceCountReq{}
	mi := &file_tax_params_scailo_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxParamsServiceCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxParamsServiceCountReq) ProtoMessage() {}

func (x *TaxParamsServiceCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_tax_params_scailo_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxParamsServiceCountReq.ProtoReflect.Descriptor instead.
func (*TaxParamsServiceCountReq) Descriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{7}
}

func (x *TaxParamsServiceCountReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceCountReq) GetCreationTimestampStart() uint64 {
	if x != nil {
		return x.CreationTimestampStart
	}
	return 0
}

func (x *TaxParamsServiceCountReq) GetCreationTimestampEnd() uint64 {
	if x != nil {
		return x.CreationTimestampEnd
	}
	return 0
}

func (x *TaxParamsServiceCountReq) GetModificationTimestampStart() uint64 {
	if x != nil {
		return x.ModificationTimestampStart
	}
	return 0
}

func (x *TaxParamsServiceCountReq) GetModificationTimestampEnd() uint64 {
	if x != nil {
		return x.ModificationTimestampEnd
	}
	return 0
}

func (x *TaxParamsServiceCountReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxParamsServiceCountReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceCountReq) GetApprovedOnStart() uint64 {
	if x != nil {
		return x.ApprovedOnStart
	}
	return 0
}

func (x *TaxParamsServiceCountReq) GetApprovedOnEnd() uint64 {
	if x != nil {
		return x.ApprovedOnEnd
	}
	return 0
}

func (x *TaxParamsServiceCountReq) GetApprovedByUserId() uint64 {
	if x != nil {
		return x.ApprovedByUserId
	}
	return 0
}

func (x *TaxParamsServiceCountReq) GetApproverRoleId() uint64 {
	if x != nil {
		return x.ApproverRoleId
	}
	return 0
}

func (x *TaxParamsServiceCountReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaxParamsServiceCountReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TaxParamsServiceCountReq) GetValueType() TAX_PARAM_VALUE_TYPE {
	if x != nil {
		return x.ValueType
	}
	return TAX_PARAM_VALUE_TYPE_TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceCountReq) GetCategory() TAX_PARAM_CATEGORY {
	if x != nil {
		return x.Category
	}
	return TAX_PARAM_CATEGORY_TAX_PARAM_CATEGORY_ANY_UNSPECIFIED
}

// Describes the request payload for performing a generic search operation on records
type TaxParamsServiceSearchAllReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, then returns only active records. If false, then returns only inactive records
	IsActive BOOL_FILTER `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3,enum=Scailo.BOOL_FILTER" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=Scailo.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey TAX_PARAM_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=Scailo.TAX_PARAM_SORT_KEY" json:"sort_key,omitempty"`
	// The entity UUID that is to be used to filter records
	EntityUuid string `protobuf:"bytes,6,opt,name=entity_uuid,json=entityUuid,proto3" json:"entity_uuid,omitempty"`
	// Limit the search space to the given status
	Status STANDARD_LIFECYCLE_STATUS `protobuf:"varint,10,opt,name=status,proto3,enum=Scailo.STANDARD_LIFECYCLE_STATUS" json:"status,omitempty"`
	// Describes the key with which the search operation needs to be performed
	SearchKey string `protobuf:"bytes,11,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	// The type of the tax param
	ValueType TAX_PARAM_VALUE_TYPE `protobuf:"varint,31,opt,name=value_type,json=valueType,proto3,enum=Scailo.TAX_PARAM_VALUE_TYPE" json:"value_type,omitempty"`
	// The category of the tax param
	Category      TAX_PARAM_CATEGORY `protobuf:"varint,32,opt,name=category,proto3,enum=Scailo.TAX_PARAM_CATEGORY" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaxParamsServiceSearchAllReq) Reset() {
	*x = TaxParamsServiceSearchAllReq{}
	mi := &file_tax_params_scailo_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaxParamsServiceSearchAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxParamsServiceSearchAllReq) ProtoMessage() {}

func (x *TaxParamsServiceSearchAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_tax_params_scailo_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxParamsServiceSearchAllReq.ProtoReflect.Descriptor instead.
func (*TaxParamsServiceSearchAllReq) Descriptor() ([]byte, []int) {
	return file_tax_params_scailo_proto_rawDescGZIP(), []int{8}
}

func (x *TaxParamsServiceSearchAllReq) GetIsActive() BOOL_FILTER {
	if x != nil {
		return x.IsActive
	}
	return BOOL_FILTER_BOOL_FILTER_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceSearchAllReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaxParamsServiceSearchAllReq) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaxParamsServiceSearchAllReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *TaxParamsServiceSearchAllReq) GetSortKey() TAX_PARAM_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return TAX_PARAM_SORT_KEY_TAX_PARAM_SORT_KEY_ID_UNSPECIFIED
}

func (x *TaxParamsServiceSearchAllReq) GetEntityUuid() string {
	if x != nil {
		return x.EntityUuid
	}
	return ""
}

func (x *TaxParamsServiceSearchAllReq) GetStatus() STANDARD_LIFECYCLE_STATUS {
	if x != nil {
		return x.Status
	}
	return STANDARD_LIFECYCLE_STATUS_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceSearchAllReq) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *TaxParamsServiceSearchAllReq) GetValueType() TAX_PARAM_VALUE_TYPE {
	if x != nil {
		return x.ValueType
	}
	return TAX_PARAM_VALUE_TYPE_TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED
}

func (x *TaxParamsServiceSearchAllReq) GetCategory() TAX_PARAM_CATEGORY {
	if x != nil {
		return x.Category
	}
	return TAX_PARAM_CATEGORY_TAX_PARAM_CATEGORY_ANY_UNSPECIFIED
}

var File_tax_params_scailo_proto protoreflect.FileDescriptor

const file_tax_params_scailo_proto_rawDesc = "" +
	"\n" +
	"\x17tax_params.scailo.proto\x12\x06Scailo\x1a\x11base.scailo.proto\x1a\x1bbuf/validate/validate.proto\"\xe6\x04\n" +
	"\x1dTaxParamsServiceCreateRequest\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x12!\n" +
	"\fuser_comment\x18\x02 \x01(\tR\vuserComment\x12\x1b\n" +
	"\x04name\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12\x1b\n" +
	"\x04code\x18\x15 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04code\x12;\n" +
	"\n" +
	"value_type\x18\v \x01(\x0e2\x1c.Scailo.TAX_PARAM_VALUE_TYPER\tvalueType\x121\n" +
	"\x10tax_fixed_amount\x18\f \x01(\x04B\a\xbaH\x042\x02(\x00R\x0etaxFixedAmount\x127\n" +
	"\x13tax_rate_percentage\x18\r \x01(\x04B\a\xbaH\x042\x02(\x00R\x11taxRatePercentage\x12!\n" +
	"\adivisor\x18\x0e \x01(\x04B\a\xbaH\x042\x02 \x00R\adivisor\x12?\n" +
	"\x17input_credit_percentage\x18\x0f \x01(\x04B\a\xbaH\x042\x02(\x00R\x15inputCreditPercentage\x12/\n" +
	"\n" +
	"min_amount\x18\x10 \x01(\x03B\x10\xbaH\r\"\v(\x9c\xff\xff\xff\xff\xff\xff\xff\xff\x01R\tminAmount\x12/\n" +
	"\n" +
	"max_amount\x18\x11 \x01(\x03B\x10\xbaH\r\"\v(\x9c\xff\xff\xff\xff\xff\xff\xff\xff\x01R\tmaxAmount\x126\n" +
	"\bcategory\x18\x12 \x01(\x0e2\x1a.Scailo.TAX_PARAM_CATEGORYR\bcategory\x12 \n" +
	"\vdescription\x18\x14 \x01(\tR\vdescription\"\xda\x01\n" +
	"\x1dTaxParamsServiceUpdateRequest\x12!\n" +
	"\fuser_comment\x18\x01 \x01(\tR\vuserComment\x12\x17\n" +
	"\x02id\x18\x02 \x01(\x04B\a\xbaH\x042\x02 \x00R\x02id\x12!\n" +
	"\fnotify_users\x18\x03 \x01(\bR\vnotifyUsers\x12\x1b\n" +
	"\x04name\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04name\x12\x1b\n" +
	"\x04code\x18\x15 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x04code\x12 \n" +
	"\vdescription\x18\x14 \x01(\tR\vdescription\"\xbe\x05\n" +
	"\bTaxParam\x12\x1f\n" +
	"\ventity_uuid\x18\x01 \x01(\tR\n" +
	"entityUuid\x124\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.Scailo.EmployeeMetadataR\bmetadata\x12E\n" +
	"\x11approval_metadata\x18\x03 \x01(\v2\x18.Scailo.ApprovalMetadataR\x10approvalMetadata\x129\n" +
	"\x06status\x18\x04 \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x120\n" +
	"\x04logs\x18\x05 \x03(\v2\x1c.Scailo.LogbookLogConciseSLCR\x04logs\x12\x12\n" +
	"\x04name\x18\n" +
	" \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\x15 \x01(\tR\x04code\x12;\n" +
	"\n" +
	"value_type\x18\v \x01(\x0e2\x1c.Scailo.TAX_PARAM_VALUE_TYPER\tvalueType\x12(\n" +
	"\x10tax_fixed_amount\x18\f \x01(\x04R\x0etaxFixedAmount\x12.\n" +
	"\x13tax_rate_percentage\x18\r \x01(\x04R\x11taxRatePercentage\x12\x18\n" +
	"\adivisor\x18\x0e \x01(\x04R\adivisor\x126\n" +
	"\x17input_credit_percentage\x18\x0f \x01(\x04R\x15inputCreditPercentage\x12\x1d\n" +
	"\n" +
	"min_amount\x18\x10 \x01(\x03R\tminAmount\x12\x1d\n" +
	"\n" +
	"max_amount\x18\x11 \x01(\x03R\tmaxAmount\x126\n" +
	"\bcategory\x18\x12 \x01(\x0e2\x1a.Scailo.TAX_PARAM_CATEGORYR\bcategory\x12 \n" +
	"\vdescription\x18\x14 \x01(\tR\vdescription\"5\n" +
	"\rTaxParamsList\x12$\n" +
	"\x04list\x18\x01 \x03(\v2\x10.Scailo.TaxParamR\x04list\"\xb6\x02\n" +
	"\x1dTaxParamsServicePaginationReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12\x1d\n" +
	"\x05count\x18\x02 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x125\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1a.Scailo.TAX_PARAM_SORT_KEYR\asortKey\x129\n" +
	"\x06status\x18\x06 \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\"\x94\x01\n" +
	"\"TaxParamsServicePaginationResponse\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x04R\x05count\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x04R\x06offset\x12\x14\n" +
	"\x05total\x18\x03 \x01(\x04R\x05total\x12*\n" +
	"\apayload\x18\x04 \x03(\v2\x10.Scailo.TaxParamR\apayload\"\x96\a\n" +
	"\x19TaxParamsServiceFilterReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12&\n" +
	"\x05count\x18\x02 \x01(\x03B\x10\xbaH\r\"\v(\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x125\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1a.Scailo.TAX_PARAM_SORT_KEYR\asortKey\x128\n" +
	"\x18creation_timestamp_start\x18e \x01(\x04R\x16creationTimestampStart\x124\n" +
	"\x16creation_timestamp_end\x18f \x01(\x04R\x14creationTimestampEnd\x12@\n" +
	"\x1cmodification_timestamp_start\x18g \x01(\x04R\x1amodificationTimestampStart\x12<\n" +
	"\x1amodification_timestamp_end\x18h \x01(\x04R\x18modificationTimestampEnd\x12\x1f\n" +
	"\ventity_uuid\x18\b \x01(\tR\n" +
	"entityUuid\x129\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x12*\n" +
	"\x11approved_on_start\x18\v \x01(\x04R\x0fapprovedOnStart\x12&\n" +
	"\x0fapproved_on_end\x18\f \x01(\x04R\rapprovedOnEnd\x12-\n" +
	"\x13approved_by_user_id\x18\r \x01(\x04R\x10approvedByUserId\x12(\n" +
	"\x10approver_role_id\x18\x0e \x01(\x04R\x0eapproverRoleId\x12\x12\n" +
	"\x04name\x18\x14 \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\x15 \x01(\tR\x04code\x12;\n" +
	"\n" +
	"value_type\x18\x1f \x01(\x0e2\x1c.Scailo.TAX_PARAM_VALUE_TYPER\tvalueType\x126\n" +
	"\bcategory\x18  \x01(\x0e2\x1a.Scailo.TAX_PARAM_CATEGORYR\bcategory\"\xe2\x05\n" +
	"\x18TaxParamsServiceCountReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x128\n" +
	"\x18creation_timestamp_start\x18e \x01(\x04R\x16creationTimestampStart\x124\n" +
	"\x16creation_timestamp_end\x18f \x01(\x04R\x14creationTimestampEnd\x12@\n" +
	"\x1cmodification_timestamp_start\x18g \x01(\x04R\x1amodificationTimestampStart\x12<\n" +
	"\x1amodification_timestamp_end\x18h \x01(\x04R\x18modificationTimestampEnd\x12\x1f\n" +
	"\ventity_uuid\x18\b \x01(\tR\n" +
	"entityUuid\x129\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x12*\n" +
	"\x11approved_on_start\x18\v \x01(\x04R\x0fapprovedOnStart\x12&\n" +
	"\x0fapproved_on_end\x18\f \x01(\x04R\rapprovedOnEnd\x12-\n" +
	"\x13approved_by_user_id\x18\r \x01(\x04R\x10approvedByUserId\x12(\n" +
	"\x10approver_role_id\x18\x0e \x01(\x04R\x0eapproverRoleId\x12\x12\n" +
	"\x04name\x18\x14 \x01(\tR\x04name\x12\x12\n" +
	"\x04code\x18\x15 \x01(\tR\x04code\x12;\n" +
	"\n" +
	"value_type\x18\x1f \x01(\x0e2\x1c.Scailo.TAX_PARAM_VALUE_TYPER\tvalueType\x126\n" +
	"\bcategory\x18  \x01(\x0e2\x1a.Scailo.TAX_PARAM_CATEGORYR\bcategory\"\xf3\x03\n" +
	"\x1cTaxParamsServiceSearchAllReq\x120\n" +
	"\tis_active\x18\x01 \x01(\x0e2\x13.Scailo.BOOL_FILTERR\bisActive\x12&\n" +
	"\x05count\x18\x02 \x01(\x03B\x10\xbaH\r\"\v(\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01R\x05count\x12\x1f\n" +
	"\x06offset\x18\x03 \x01(\x04B\a\xbaH\x042\x02(\x00R\x06offset\x121\n" +
	"\n" +
	"sort_order\x18\x04 \x01(\x0e2\x12.Scailo.SORT_ORDERR\tsortOrder\x125\n" +
	"\bsort_key\x18\x05 \x01(\x0e2\x1a.Scailo.TAX_PARAM_SORT_KEYR\asortKey\x12\x1f\n" +
	"\ventity_uuid\x18\x06 \x01(\tR\n" +
	"entityUuid\x129\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2!.Scailo.STANDARD_LIFECYCLE_STATUSR\x06status\x12\x1d\n" +
	"\n" +
	"search_key\x18\v \x01(\tR\tsearchKey\x12;\n" +
	"\n" +
	"value_type\x18\x1f \x01(\x0e2\x1c.Scailo.TAX_PARAM_VALUE_TYPER\tvalueType\x126\n" +
	"\bcategory\x18  \x01(\x0e2\x1a.Scailo.TAX_PARAM_CATEGORYR\bcategory*\x85\x01\n" +
	"\x14TAX_PARAM_VALUE_TYPE\x12(\n" +
	"$TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fTAX_PARAM_VALUE_TYPE_PERCENTAGE\x10\x01\x12\x1e\n" +
	"\x1aTAX_PARAM_VALUE_TYPE_FIXED\x10\x02*|\n" +
	"\x12TAX_PARAM_CATEGORY\x12&\n" +
	"\"TAX_PARAM_CATEGORY_ANY_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aTAX_PARAM_CATEGORY_GENERAL\x10\x01\x12\x1e\n" +
	"\x1aTAX_PARAM_CATEGORY_PAYROLL\x10\x02*\xd9\x02\n" +
	"\x12TAX_PARAM_SORT_KEY\x12%\n" +
	"!TAX_PARAM_SORT_KEY_ID_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dTAX_PARAM_SORT_KEY_CREATED_AT\x10\x01\x12\"\n" +
	"\x1eTAX_PARAM_SORT_KEY_MODIFIED_AT\x10\x02\x12\"\n" +
	"\x1eTAX_PARAM_SORT_KEY_APPROVED_ON\x10\x03\x12\"\n" +
	"\x1eTAX_PARAM_SORT_KEY_APPROVED_BY\x10\x04\x12'\n" +
	"#TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID\x10\x05\x12\x1b\n" +
	"\x17TAX_PARAM_SORT_KEY_NAME\x10\n" +
	"\x12*\n" +
	"&TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE\x10\v\x12\x1b\n" +
	"\x17TAX_PARAM_SORT_KEY_CODE\x10\x152\x89\x0f\n" +
	"\x10TaxParamsService\x12K\n" +
	"\x06Create\x12%.Scailo.TaxParamsServiceCreateRequest\x1a\x1a.Scailo.IdentifierResponse\x12J\n" +
	"\x05Draft\x12%.Scailo.TaxParamsServiceCreateRequest\x1a\x1a.Scailo.IdentifierResponse\x12P\n" +
	"\vDraftUpdate\x12%.Scailo.TaxParamsServiceUpdateRequest\x1a\x1a.Scailo.IdentifierResponse\x12X\n" +
	"\x13SendForVerification\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12K\n" +
	"\x06Verify\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12L\n" +
	"\aApprove\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12T\n" +
	"\x0fSendForRevision\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12S\n" +
	"\x0eRevisionUpdate\x12%.Scailo.TaxParamsServiceUpdateRequest\x1a\x1a.Scailo.IdentifierResponse\x12I\n" +
	"\x04Halt\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12L\n" +
	"\aDiscard\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12L\n" +
	"\aRestore\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x12O\n" +
	"\n" +
	"CommentAdd\x12%.Scailo.IdentifierUUIDWithUserComment\x1a\x1a.Scailo.IdentifierResponse\x120\n" +
	"\bViewByID\x12\x12.Scailo.Identifier\x1a\x10.Scailo.TaxParam\x126\n" +
	"\n" +
	"ViewByUUID\x12\x16.Scailo.IdentifierUUID\x1a\x10.Scailo.TaxParam\x129\n" +
	"\x11ViewEssentialByID\x12\x12.Scailo.Identifier\x1a\x10.Scailo.TaxParam\x12?\n" +
	"\x13ViewEssentialByUUID\x12\x16.Scailo.IdentifierUUID\x1a\x10.Scailo.TaxParam\x12=\n" +
	"\vViewFromIDs\x12\x17.Scailo.IdentifiersList\x1a\x15.Scailo.TaxParamsList\x126\n" +
	"\aViewAll\x12\x14.Scailo.ActiveStatus\x1a\x15.Scailo.TaxParamsList\x12E\n" +
	"\x14ViewAllForEntityUUID\x12\x16.Scailo.IdentifierUUID\x1a\x15.Scailo.TaxParamsList\x12g\n" +
	"\x12ViewWithPagination\x12%.Scailo.TaxParamsServicePaginationReq\x1a*.Scailo.TaxParamsServicePaginationResponse\x12H\n" +
	"\tSearchAll\x12$.Scailo.TaxParamsServiceSearchAllReq\x1a\x15.Scailo.TaxParamsList\x12B\n" +
	"\x06Filter\x12!.Scailo.TaxParamsServiceFilterReq\x1a\x15.Scailo.TaxParamsList\x12G\n" +
	"\rCountInStatus\x12\x1f.Scailo.CountInSLCStatusRequest\x1a\x15.Scailo.CountResponse\x12@\n" +
	"\x05Count\x12 .Scailo.TaxParamsServiceCountReq\x1a\x15.Scailo.CountResponse\x12H\n" +
	"\rDownloadAsCSV\x12!.Scailo.TaxParamsServiceFilterReq\x1a\x14.Scailo.StandardFile\x12B\n" +
	"\rImportFromCSV\x12\x14.Scailo.StandardFile\x1a\x1b.Scailo.IdentifierUUIDsListBf\n" +
	"\n" +
	"com.ScailoB\x14TaxParamsScailoProtoP\x01Z\n" +
	"Scailo/sdk\xa2\x02\x03SXX\xaa\x02\x06Scailo\xca\x02\x06Scailo\xe2\x02\x12Scailo\\GPBMetadata\xea\x02\x06Scailob\x06proto3"

var (
	file_tax_params_scailo_proto_rawDescOnce sync.Once
	file_tax_params_scailo_proto_rawDescData []byte
)

func file_tax_params_scailo_proto_rawDescGZIP() []byte {
	file_tax_params_scailo_proto_rawDescOnce.Do(func() {
		file_tax_params_scailo_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tax_params_scailo_proto_rawDesc), len(file_tax_params_scailo_proto_rawDesc)))
	})
	return file_tax_params_scailo_proto_rawDescData
}

var file_tax_params_scailo_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tax_params_scailo_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_tax_params_scailo_proto_goTypes = []any{
	(TAX_PARAM_VALUE_TYPE)(0),                  // 0: Scailo.TAX_PARAM_VALUE_TYPE
	(TAX_PARAM_CATEGORY)(0),                    // 1: Scailo.TAX_PARAM_CATEGORY
	(TAX_PARAM_SORT_KEY)(0),                    // 2: Scailo.TAX_PARAM_SORT_KEY
	(*TaxParamsServiceCreateRequest)(nil),      // 3: Scailo.TaxParamsServiceCreateRequest
	(*TaxParamsServiceUpdateRequest)(nil),      // 4: Scailo.TaxParamsServiceUpdateRequest
	(*TaxParam)(nil),                           // 5: Scailo.TaxParam
	(*TaxParamsList)(nil),                      // 6: Scailo.TaxParamsList
	(*TaxParamsServicePaginationReq)(nil),      // 7: Scailo.TaxParamsServicePaginationReq
	(*TaxParamsServicePaginationResponse)(nil), // 8: Scailo.TaxParamsServicePaginationResponse
	(*TaxParamsServiceFilterReq)(nil),          // 9: Scailo.TaxParamsServiceFilterReq
	(*TaxParamsServiceCountReq)(nil),           // 10: Scailo.TaxParamsServiceCountReq
	(*TaxParamsServiceSearchAllReq)(nil),       // 11: Scailo.TaxParamsServiceSearchAllReq
	(*EmployeeMetadata)(nil),                   // 12: Scailo.EmployeeMetadata
	(*ApprovalMetadata)(nil),                   // 13: Scailo.ApprovalMetadata
	(STANDARD_LIFECYCLE_STATUS)(0),             // 14: Scailo.STANDARD_LIFECYCLE_STATUS
	(*LogbookLogConciseSLC)(nil),               // 15: Scailo.LogbookLogConciseSLC
	(BOOL_FILTER)(0),                           // 16: Scailo.BOOL_FILTER
	(SORT_ORDER)(0),                            // 17: Scailo.SORT_ORDER
	(*IdentifierUUIDWithUserComment)(nil),      // 18: Scailo.IdentifierUUIDWithUserComment
	(*Identifier)(nil),                         // 19: Scailo.Identifier
	(*IdentifierUUID)(nil),                     // 20: Scailo.IdentifierUUID
	(*IdentifiersList)(nil),                    // 21: Scailo.IdentifiersList
	(*ActiveStatus)(nil),                       // 22: Scailo.ActiveStatus
	(*CountInSLCStatusRequest)(nil),            // 23: Scailo.CountInSLCStatusRequest
	(*StandardFile)(nil),                       // 24: Scailo.StandardFile
	(*IdentifierResponse)(nil),                 // 25: Scailo.IdentifierResponse
	(*CountResponse)(nil),                      // 26: Scailo.CountResponse
	(*IdentifierUUIDsList)(nil),                // 27: Scailo.IdentifierUUIDsList
}
var file_tax_params_scailo_proto_depIdxs = []int32{
	0,  // 0: Scailo.TaxParamsServiceCreateRequest.value_type:type_name -> Scailo.TAX_PARAM_VALUE_TYPE
	1,  // 1: Scailo.TaxParamsServiceCreateRequest.category:type_name -> Scailo.TAX_PARAM_CATEGORY
	12, // 2: Scailo.TaxParam.metadata:type_name -> Scailo.EmployeeMetadata
	13, // 3: Scailo.TaxParam.approval_metadata:type_name -> Scailo.ApprovalMetadata
	14, // 4: Scailo.TaxParam.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	15, // 5: Scailo.TaxParam.logs:type_name -> Scailo.LogbookLogConciseSLC
	0,  // 6: Scailo.TaxParam.value_type:type_name -> Scailo.TAX_PARAM_VALUE_TYPE
	1,  // 7: Scailo.TaxParam.category:type_name -> Scailo.TAX_PARAM_CATEGORY
	5,  // 8: Scailo.TaxParamsList.list:type_name -> Scailo.TaxParam
	16, // 9: Scailo.TaxParamsServicePaginationReq.is_active:type_name -> Scailo.BOOL_FILTER
	17, // 10: Scailo.TaxParamsServicePaginationReq.sort_order:type_name -> Scailo.SORT_ORDER
	2,  // 11: Scailo.TaxParamsServicePaginationReq.sort_key:type_name -> Scailo.TAX_PARAM_SORT_KEY
	14, // 12: Scailo.TaxParamsServicePaginationReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	5,  // 13: Scailo.TaxParamsServicePaginationResponse.payload:type_name -> Scailo.TaxParam
	16, // 14: Scailo.TaxParamsServiceFilterReq.is_active:type_name -> Scailo.BOOL_FILTER
	17, // 15: Scailo.TaxParamsServiceFilterReq.sort_order:type_name -> Scailo.SORT_ORDER
	2,  // 16: Scailo.TaxParamsServiceFilterReq.sort_key:type_name -> Scailo.TAX_PARAM_SORT_KEY
	14, // 17: Scailo.TaxParamsServiceFilterReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	0,  // 18: Scailo.TaxParamsServiceFilterReq.value_type:type_name -> Scailo.TAX_PARAM_VALUE_TYPE
	1,  // 19: Scailo.TaxParamsServiceFilterReq.category:type_name -> Scailo.TAX_PARAM_CATEGORY
	16, // 20: Scailo.TaxParamsServiceCountReq.is_active:type_name -> Scailo.BOOL_FILTER
	14, // 21: Scailo.TaxParamsServiceCountReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	0,  // 22: Scailo.TaxParamsServiceCountReq.value_type:type_name -> Scailo.TAX_PARAM_VALUE_TYPE
	1,  // 23: Scailo.TaxParamsServiceCountReq.category:type_name -> Scailo.TAX_PARAM_CATEGORY
	16, // 24: Scailo.TaxParamsServiceSearchAllReq.is_active:type_name -> Scailo.BOOL_FILTER
	17, // 25: Scailo.TaxParamsServiceSearchAllReq.sort_order:type_name -> Scailo.SORT_ORDER
	2,  // 26: Scailo.TaxParamsServiceSearchAllReq.sort_key:type_name -> Scailo.TAX_PARAM_SORT_KEY
	14, // 27: Scailo.TaxParamsServiceSearchAllReq.status:type_name -> Scailo.STANDARD_LIFECYCLE_STATUS
	0,  // 28: Scailo.TaxParamsServiceSearchAllReq.value_type:type_name -> Scailo.TAX_PARAM_VALUE_TYPE
	1,  // 29: Scailo.TaxParamsServiceSearchAllReq.category:type_name -> Scailo.TAX_PARAM_CATEGORY
	3,  // 30: Scailo.TaxParamsService.Create:input_type -> Scailo.TaxParamsServiceCreateRequest
	3,  // 31: Scailo.TaxParamsService.Draft:input_type -> Scailo.TaxParamsServiceCreateRequest
	4,  // 32: Scailo.TaxParamsService.DraftUpdate:input_type -> Scailo.TaxParamsServiceUpdateRequest
	18, // 33: Scailo.TaxParamsService.SendForVerification:input_type -> Scailo.IdentifierUUIDWithUserComment
	18, // 34: Scailo.TaxParamsService.Verify:input_type -> Scailo.IdentifierUUIDWithUserComment
	18, // 35: Scailo.TaxParamsService.Approve:input_type -> Scailo.IdentifierUUIDWithUserComment
	18, // 36: Scailo.TaxParamsService.SendForRevision:input_type -> Scailo.IdentifierUUIDWithUserComment
	4,  // 37: Scailo.TaxParamsService.RevisionUpdate:input_type -> Scailo.TaxParamsServiceUpdateRequest
	18, // 38: Scailo.TaxParamsService.Halt:input_type -> Scailo.IdentifierUUIDWithUserComment
	18, // 39: Scailo.TaxParamsService.Discard:input_type -> Scailo.IdentifierUUIDWithUserComment
	18, // 40: Scailo.TaxParamsService.Restore:input_type -> Scailo.IdentifierUUIDWithUserComment
	18, // 41: Scailo.TaxParamsService.CommentAdd:input_type -> Scailo.IdentifierUUIDWithUserComment
	19, // 42: Scailo.TaxParamsService.ViewByID:input_type -> Scailo.Identifier
	20, // 43: Scailo.TaxParamsService.ViewByUUID:input_type -> Scailo.IdentifierUUID
	19, // 44: Scailo.TaxParamsService.ViewEssentialByID:input_type -> Scailo.Identifier
	20, // 45: Scailo.TaxParamsService.ViewEssentialByUUID:input_type -> Scailo.IdentifierUUID
	21, // 46: Scailo.TaxParamsService.ViewFromIDs:input_type -> Scailo.IdentifiersList
	22, // 47: Scailo.TaxParamsService.ViewAll:input_type -> Scailo.ActiveStatus
	20, // 48: Scailo.TaxParamsService.ViewAllForEntityUUID:input_type -> Scailo.IdentifierUUID
	7,  // 49: Scailo.TaxParamsService.ViewWithPagination:input_type -> Scailo.TaxParamsServicePaginationReq
	11, // 50: Scailo.TaxParamsService.SearchAll:input_type -> Scailo.TaxParamsServiceSearchAllReq
	9,  // 51: Scailo.TaxParamsService.Filter:input_type -> Scailo.TaxParamsServiceFilterReq
	23, // 52: Scailo.TaxParamsService.CountInStatus:input_type -> Scailo.CountInSLCStatusRequest
	10, // 53: Scailo.TaxParamsService.Count:input_type -> Scailo.TaxParamsServiceCountReq
	9,  // 54: Scailo.TaxParamsService.DownloadAsCSV:input_type -> Scailo.TaxParamsServiceFilterReq
	24, // 55: Scailo.TaxParamsService.ImportFromCSV:input_type -> Scailo.StandardFile
	25, // 56: Scailo.TaxParamsService.Create:output_type -> Scailo.IdentifierResponse
	25, // 57: Scailo.TaxParamsService.Draft:output_type -> Scailo.IdentifierResponse
	25, // 58: Scailo.TaxParamsService.DraftUpdate:output_type -> Scailo.IdentifierResponse
	25, // 59: Scailo.TaxParamsService.SendForVerification:output_type -> Scailo.IdentifierResponse
	25, // 60: Scailo.TaxParamsService.Verify:output_type -> Scailo.IdentifierResponse
	25, // 61: Scailo.TaxParamsService.Approve:output_type -> Scailo.IdentifierResponse
	25, // 62: Scailo.TaxParamsService.SendForRevision:output_type -> Scailo.IdentifierResponse
	25, // 63: Scailo.TaxParamsService.RevisionUpdate:output_type -> Scailo.IdentifierResponse
	25, // 64: Scailo.TaxParamsService.Halt:output_type -> Scailo.IdentifierResponse
	25, // 65: Scailo.TaxParamsService.Discard:output_type -> Scailo.IdentifierResponse
	25, // 66: Scailo.TaxParamsService.Restore:output_type -> Scailo.IdentifierResponse
	25, // 67: Scailo.TaxParamsService.CommentAdd:output_type -> Scailo.IdentifierResponse
	5,  // 68: Scailo.TaxParamsService.ViewByID:output_type -> Scailo.TaxParam
	5,  // 69: Scailo.TaxParamsService.ViewByUUID:output_type -> Scailo.TaxParam
	5,  // 70: Scailo.TaxParamsService.ViewEssentialByID:output_type -> Scailo.TaxParam
	5,  // 71: Scailo.TaxParamsService.ViewEssentialByUUID:output_type -> Scailo.TaxParam
	6,  // 72: Scailo.TaxParamsService.ViewFromIDs:output_type -> Scailo.TaxParamsList
	6,  // 73: Scailo.TaxParamsService.ViewAll:output_type -> Scailo.TaxParamsList
	6,  // 74: Scailo.TaxParamsService.ViewAllForEntityUUID:output_type -> Scailo.TaxParamsList
	8,  // 75: Scailo.TaxParamsService.ViewWithPagination:output_type -> Scailo.TaxParamsServicePaginationResponse
	6,  // 76: Scailo.TaxParamsService.SearchAll:output_type -> Scailo.TaxParamsList
	6,  // 77: Scailo.TaxParamsService.Filter:output_type -> Scailo.TaxParamsList
	26, // 78: Scailo.TaxParamsService.CountInStatus:output_type -> Scailo.CountResponse
	26, // 79: Scailo.TaxParamsService.Count:output_type -> Scailo.CountResponse
	24, // 80: Scailo.TaxParamsService.DownloadAsCSV:output_type -> Scailo.StandardFile
	27, // 81: Scailo.TaxParamsService.ImportFromCSV:output_type -> Scailo.IdentifierUUIDsList
	56, // [56:82] is the sub-list for method output_type
	30, // [30:56] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_tax_params_scailo_proto_init() }
func file_tax_params_scailo_proto_init() {
	if File_tax_params_scailo_proto != nil {
		return
	}
	file_base_scailo_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tax_params_scailo_proto_rawDesc), len(file_tax_params_scailo_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tax_params_scailo_proto_goTypes,
		DependencyIndexes: file_tax_params_scailo_proto_depIdxs,
		EnumInfos:         file_tax_params_scailo_proto_enumTypes,
		MessageInfos:      file_tax_params_scailo_proto_msgTypes,
	}.Build()
	File_tax_params_scailo_proto = out.File
	file_tax_params_scailo_proto_goTypes = nil
	file_tax_params_scailo_proto_depIdxs = nil
}
