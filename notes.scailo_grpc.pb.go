// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: notes.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotesService_Create_FullMethodName               = "/Scailo.NotesService/Create"
	NotesService_Update_FullMethodName               = "/Scailo.NotesService/Update"
	NotesService_Cancel_FullMethodName               = "/Scailo.NotesService/Cancel"
	NotesService_Complete_FullMethodName             = "/Scailo.NotesService/Complete"
	NotesService_Reopen_FullMethodName               = "/Scailo.NotesService/Reopen"
	NotesService_Repeat_FullMethodName               = "/Scailo.NotesService/Repeat"
	NotesService_CommentAdd_FullMethodName           = "/Scailo.NotesService/CommentAdd"
	NotesService_SendEmail_FullMethodName            = "/Scailo.NotesService/SendEmail"
	NotesService_ViewByID_FullMethodName             = "/Scailo.NotesService/ViewByID"
	NotesService_ViewByUUID_FullMethodName           = "/Scailo.NotesService/ViewByUUID"
	NotesService_ViewEssentialByID_FullMethodName    = "/Scailo.NotesService/ViewEssentialByID"
	NotesService_ViewEssentialByUUID_FullMethodName  = "/Scailo.NotesService/ViewEssentialByUUID"
	NotesService_ViewFromIDs_FullMethodName          = "/Scailo.NotesService/ViewFromIDs"
	NotesService_ViewAll_FullMethodName              = "/Scailo.NotesService/ViewAll"
	NotesService_ViewAllForEntityUUID_FullMethodName = "/Scailo.NotesService/ViewAllForEntityUUID"
	NotesService_ViewWithPagination_FullMethodName   = "/Scailo.NotesService/ViewWithPagination"
	NotesService_SearchAll_FullMethodName            = "/Scailo.NotesService/SearchAll"
	NotesService_Filter_FullMethodName               = "/Scailo.NotesService/Filter"
	NotesService_Count_FullMethodName                = "/Scailo.NotesService/Count"
)

// NotesServiceClient is the client API for NotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each note
type NotesServiceClient interface {
	// Create
	Create(ctx context.Context, in *NotesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Update
	Update(ctx context.Context, in *NotesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Cancel
	Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierUUID, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Note, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Note, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Note, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Note, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*NotesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*NotesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*NotesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *NotesServicePaginationReq, opts ...grpc.CallOption) (*NotesServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *NotesServiceSearchAllReq, opts ...grpc.CallOption) (*NotesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *NotesServiceFilterReq, opts ...grpc.CallOption) (*NotesList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *NotesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
}

type notesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotesServiceClient(cc grpc.ClientConnInterface) NotesServiceClient {
	return &notesServiceClient{cc}
}

func (c *notesServiceClient) Create(ctx context.Context, in *NotesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, NotesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) Update(ctx context.Context, in *NotesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, NotesService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) Cancel(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, NotesService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, NotesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, NotesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, NotesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, NotesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierUUID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUID)
	err := c.cc.Invoke(ctx, NotesService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Note, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Note)
	err := c.cc.Invoke(ctx, NotesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Note, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Note)
	err := c.cc.Invoke(ctx, NotesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Note, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Note)
	err := c.cc.Invoke(ctx, NotesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Note, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Note)
	err := c.cc.Invoke(ctx, NotesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*NotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotesList)
	err := c.cc.Invoke(ctx, NotesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*NotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotesList)
	err := c.cc.Invoke(ctx, NotesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*NotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotesList)
	err := c.cc.Invoke(ctx, NotesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) ViewWithPagination(ctx context.Context, in *NotesServicePaginationReq, opts ...grpc.CallOption) (*NotesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotesServicePaginationResponse)
	err := c.cc.Invoke(ctx, NotesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) SearchAll(ctx context.Context, in *NotesServiceSearchAllReq, opts ...grpc.CallOption) (*NotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotesList)
	err := c.cc.Invoke(ctx, NotesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) Filter(ctx context.Context, in *NotesServiceFilterReq, opts ...grpc.CallOption) (*NotesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotesList)
	err := c.cc.Invoke(ctx, NotesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesServiceClient) Count(ctx context.Context, in *NotesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, NotesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotesService
