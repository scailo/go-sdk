// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: visitations.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VisitationsService_Create_FullMethodName                  = "/Scailo.VisitationsService/Create"
	VisitationsService_Draft_FullMethodName                   = "/Scailo.VisitationsService/Draft"
	VisitationsService_DraftUpdate_FullMethodName             = "/Scailo.VisitationsService/DraftUpdate"
	VisitationsService_SendForVerification_FullMethodName     = "/Scailo.VisitationsService/SendForVerification"
	VisitationsService_Verify_FullMethodName                  = "/Scailo.VisitationsService/Verify"
	VisitationsService_Approve_FullMethodName                 = "/Scailo.VisitationsService/Approve"
	VisitationsService_SendForRevision_FullMethodName         = "/Scailo.VisitationsService/SendForRevision"
	VisitationsService_RevisionUpdate_FullMethodName          = "/Scailo.VisitationsService/RevisionUpdate"
	VisitationsService_Halt_FullMethodName                    = "/Scailo.VisitationsService/Halt"
	VisitationsService_Discard_FullMethodName                 = "/Scailo.VisitationsService/Discard"
	VisitationsService_Restore_FullMethodName                 = "/Scailo.VisitationsService/Restore"
	VisitationsService_Complete_FullMethodName                = "/Scailo.VisitationsService/Complete"
	VisitationsService_Repeat_FullMethodName                  = "/Scailo.VisitationsService/Repeat"
	VisitationsService_CommentAdd_FullMethodName              = "/Scailo.VisitationsService/CommentAdd"
	VisitationsService_CreateMagicLink_FullMethodName         = "/Scailo.VisitationsService/CreateMagicLink"
	VisitationsService_RecordImageEntry_FullMethodName        = "/Scailo.VisitationsService/RecordImageEntry"
	VisitationsService_RecordImageExit_FullMethodName         = "/Scailo.VisitationsService/RecordImageExit"
	VisitationsService_ViewByID_FullMethodName                = "/Scailo.VisitationsService/ViewByID"
	VisitationsService_ViewByUUID_FullMethodName              = "/Scailo.VisitationsService/ViewByUUID"
	VisitationsService_ViewEssentialByID_FullMethodName       = "/Scailo.VisitationsService/ViewEssentialByID"
	VisitationsService_ViewEssentialByUUID_FullMethodName     = "/Scailo.VisitationsService/ViewEssentialByUUID"
	VisitationsService_ViewFromIDs_FullMethodName             = "/Scailo.VisitationsService/ViewFromIDs"
	VisitationsService_ViewAll_FullMethodName                 = "/Scailo.VisitationsService/ViewAll"
	VisitationsService_ViewAllForEntityUUID_FullMethodName    = "/Scailo.VisitationsService/ViewAllForEntityUUID"
	VisitationsService_ViewWithPagination_FullMethodName      = "/Scailo.VisitationsService/ViewWithPagination"
	VisitationsService_ViewEntryImage_FullMethodName          = "/Scailo.VisitationsService/ViewEntryImage"
	VisitationsService_ViewExitImage_FullMethodName           = "/Scailo.VisitationsService/ViewExitImage"
	VisitationsService_ViewEntryGPSCoordinates_FullMethodName = "/Scailo.VisitationsService/ViewEntryGPSCoordinates"
	VisitationsService_ViewExitGPSCoordinates_FullMethodName  = "/Scailo.VisitationsService/ViewExitGPSCoordinates"
	VisitationsService_ViewEntryGPSStaticImage_FullMethodName = "/Scailo.VisitationsService/ViewEntryGPSStaticImage"
	VisitationsService_ViewExitGPSStaticImage_FullMethodName  = "/Scailo.VisitationsService/ViewExitGPSStaticImage"
	VisitationsService_ViewQRCode_FullMethodName              = "/Scailo.VisitationsService/ViewQRCode"
	VisitationsService_SearchAll_FullMethodName               = "/Scailo.VisitationsService/SearchAll"
	VisitationsService_Filter_FullMethodName                  = "/Scailo.VisitationsService/Filter"
	VisitationsService_CountInStatus_FullMethodName           = "/Scailo.VisitationsService/CountInStatus"
	VisitationsService_Count_FullMethodName                   = "/Scailo.VisitationsService/Count"
	VisitationsService_DownloadAsCSV_FullMethodName           = "/Scailo.VisitationsService/DownloadAsCSV"
)

// VisitationsServiceClient is the client API for VisitationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each visitation
type VisitationsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *VisitationsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *VisitationsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *VisitationsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *VisitationsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	// rpc SendEmail (Identifier) returns (IdentifierResponse);
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Store entry time
	RecordImageEntry(ctx context.Context, in *VisitationsServiceImageEntryRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Store exit time
	RecordImageExit(ctx context.Context, in *VisitationsServiceImageExitRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Visitation, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Visitation, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Visitation, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Visitation, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*VisitationsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*VisitationsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VisitationsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *VisitationsServicePaginationReq, opts ...grpc.CallOption) (*VisitationsServicePaginationResponse, error)
	// View entry image for visitation UUID
	ViewEntryImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View exit image for visitation UUID
	ViewExitImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View entry GPS coordinates for visitation UUID
	ViewEntryGPSCoordinates(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GPSCoordinatesResponse, error)
	// View exit GPS coordinates for visitation UUID
	ViewExitGPSCoordinates(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GPSCoordinatesResponse, error)
	// View entry GPS static image from Google Maps
	ViewEntryGPSStaticImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View exit GPS static image from Google Maps
	ViewExitGPSStaticImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View QR Code
	ViewQRCode(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *VisitationsServiceSearchAllReq, opts ...grpc.CallOption) (*VisitationsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *VisitationsServiceFilterReq, opts ...grpc.CallOption) (*VisitationsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *VisitationsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *VisitationsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type visitationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisitationsServiceClient(cc grpc.ClientConnInterface) VisitationsServiceClient {
	return &visitationsServiceClient{cc}
}

func (c *visitationsServiceClient) Create(ctx context.Context, in *VisitationsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) Draft(ctx context.Context, in *VisitationsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) DraftUpdate(ctx context.Context, in *VisitationsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) RevisionUpdate(ctx context.Context, in *VisitationsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, VisitationsService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) RecordImageEntry(ctx context.Context, in *VisitationsServiceImageEntryRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_RecordImageEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) RecordImageExit(ctx context.Context, in *VisitationsServiceImageExitRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, VisitationsService_RecordImageExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Visitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Visitation)
	err := c.cc.Invoke(ctx, VisitationsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Visitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Visitation)
	err := c.cc.Invoke(ctx, VisitationsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Visitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Visitation)
	err := c.cc.Invoke(ctx, VisitationsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Visitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Visitation)
	err := c.cc.Invoke(ctx, VisitationsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*VisitationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisitationsList)
	err := c.cc.Invoke(ctx, VisitationsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*VisitationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisitationsList)
	err := c.cc.Invoke(ctx, VisitationsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*VisitationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisitationsList)
	err := c.cc.Invoke(ctx, VisitationsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewWithPagination(ctx context.Context, in *VisitationsServicePaginationReq, opts ...grpc.CallOption) (*VisitationsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisitationsServicePaginationResponse)
	err := c.cc.Invoke(ctx, VisitationsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewEntryImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, VisitationsService_ViewEntryImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewExitImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, VisitationsService_ViewExitImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewEntryGPSCoordinates(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GPSCoordinatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPSCoordinatesResponse)
	err := c.cc.Invoke(ctx, VisitationsService_ViewEntryGPSCoordinates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewExitGPSCoordinates(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*GPSCoordinatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPSCoordinatesResponse)
	err := c.cc.Invoke(ctx, VisitationsService_ViewExitGPSCoordinates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewEntryGPSStaticImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, VisitationsService_ViewEntryGPSStaticImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewExitGPSStaticImage(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, VisitationsService_ViewExitGPSStaticImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) ViewQRCode(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, VisitationsService_ViewQRCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) SearchAll(ctx context.Context, in *VisitationsServiceSearchAllReq, opts ...grpc.CallOption) (*VisitationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisitationsList)
	err := c.cc.Invoke(ctx, VisitationsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) Filter(ctx context.Context, in *VisitationsServiceFilterReq, opts ...grpc.CallOption) (*VisitationsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisitationsList)
	err := c.cc.Invoke(ctx, VisitationsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, VisitationsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) Count(ctx context.Context, in *VisitationsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, VisitationsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitationsServiceClient) DownloadAsCSV(ctx context.Context, in *VisitationsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, VisitationsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisitationsService
