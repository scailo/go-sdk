// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: supply_offers.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SupplyOffersService_Create_FullMethodName                                  = "/Scailo.SupplyOffersService/Create"
	SupplyOffersService_Draft_FullMethodName                                   = "/Scailo.SupplyOffersService/Draft"
	SupplyOffersService_DraftUpdate_FullMethodName                             = "/Scailo.SupplyOffersService/DraftUpdate"
	SupplyOffersService_SendForVerification_FullMethodName                     = "/Scailo.SupplyOffersService/SendForVerification"
	SupplyOffersService_Verify_FullMethodName                                  = "/Scailo.SupplyOffersService/Verify"
	SupplyOffersService_Approve_FullMethodName                                 = "/Scailo.SupplyOffersService/Approve"
	SupplyOffersService_SendForRevision_FullMethodName                         = "/Scailo.SupplyOffersService/SendForRevision"
	SupplyOffersService_RevisionUpdate_FullMethodName                          = "/Scailo.SupplyOffersService/RevisionUpdate"
	SupplyOffersService_Halt_FullMethodName                                    = "/Scailo.SupplyOffersService/Halt"
	SupplyOffersService_Discard_FullMethodName                                 = "/Scailo.SupplyOffersService/Discard"
	SupplyOffersService_Restore_FullMethodName                                 = "/Scailo.SupplyOffersService/Restore"
	SupplyOffersService_Complete_FullMethodName                                = "/Scailo.SupplyOffersService/Complete"
	SupplyOffersService_Repeat_FullMethodName                                  = "/Scailo.SupplyOffersService/Repeat"
	SupplyOffersService_Reopen_FullMethodName                                  = "/Scailo.SupplyOffersService/Reopen"
	SupplyOffersService_CommentAdd_FullMethodName                              = "/Scailo.SupplyOffersService/CommentAdd"
	SupplyOffersService_SendEmail_FullMethodName                               = "/Scailo.SupplyOffersService/SendEmail"
	SupplyOffersService_CreateMagicLink_FullMethodName                         = "/Scailo.SupplyOffersService/CreateMagicLink"
	SupplyOffersService_Autofill_FullMethodName                                = "/Scailo.SupplyOffersService/Autofill"
	SupplyOffersService_Amend_FullMethodName                                   = "/Scailo.SupplyOffersService/Amend"
	SupplyOffersService_AddSupplyOfferItem_FullMethodName                      = "/Scailo.SupplyOffersService/AddSupplyOfferItem"
	SupplyOffersService_ModifySupplyOfferItem_FullMethodName                   = "/Scailo.SupplyOffersService/ModifySupplyOfferItem"
	SupplyOffersService_ApproveSupplyOfferItem_FullMethodName                  = "/Scailo.SupplyOffersService/ApproveSupplyOfferItem"
	SupplyOffersService_DeleteSupplyOfferItem_FullMethodName                   = "/Scailo.SupplyOffersService/DeleteSupplyOfferItem"
	SupplyOffersService_ReorderSupplyOfferItems_FullMethodName                 = "/Scailo.SupplyOffersService/ReorderSupplyOfferItems"
	SupplyOffersService_ViewSupplyOfferItemByID_FullMethodName                 = "/Scailo.SupplyOffersService/ViewSupplyOfferItemByID"
	SupplyOffersService_ViewSupplyOfferItemPrice_FullMethodName                = "/Scailo.SupplyOffersService/ViewSupplyOfferItemPrice"
	SupplyOffersService_ViewApprovedSupplyOfferItems_FullMethodName            = "/Scailo.SupplyOffersService/ViewApprovedSupplyOfferItems"
	SupplyOffersService_ViewUnapprovedSupplyOfferItems_FullMethodName          = "/Scailo.SupplyOffersService/ViewUnapprovedSupplyOfferItems"
	SupplyOffersService_ViewSupplyOfferItemHistory_FullMethodName              = "/Scailo.SupplyOffersService/ViewSupplyOfferItemHistory"
	SupplyOffersService_ViewPaginatedApprovedSupplyOfferItems_FullMethodName   = "/Scailo.SupplyOffersService/ViewPaginatedApprovedSupplyOfferItems"
	SupplyOffersService_ViewPaginatedUnapprovedSupplyOfferItems_FullMethodName = "/Scailo.SupplyOffersService/ViewPaginatedUnapprovedSupplyOfferItems"
	SupplyOffersService_SearchItemsWithPagination_FullMethodName               = "/Scailo.SupplyOffersService/SearchItemsWithPagination"
	SupplyOffersService_DownloadItemsAsCSV_FullMethodName                      = "/Scailo.SupplyOffersService/DownloadItemsAsCSV"
	SupplyOffersService_DownloadItemsTemplateAsCSV_FullMethodName              = "/Scailo.SupplyOffersService/DownloadItemsTemplateAsCSV"
	SupplyOffersService_UploadSupplyOfferItems_FullMethodName                  = "/Scailo.SupplyOffersService/UploadSupplyOfferItems"
	SupplyOffersService_ViewByID_FullMethodName                                = "/Scailo.SupplyOffersService/ViewByID"
	SupplyOffersService_ViewByUUID_FullMethodName                              = "/Scailo.SupplyOffersService/ViewByUUID"
	SupplyOffersService_ViewByReferenceID_FullMethodName                       = "/Scailo.SupplyOffersService/ViewByReferenceID"
	SupplyOffersService_ViewEssentialByID_FullMethodName                       = "/Scailo.SupplyOffersService/ViewEssentialByID"
	SupplyOffersService_ViewEssentialByUUID_FullMethodName                     = "/Scailo.SupplyOffersService/ViewEssentialByUUID"
	SupplyOffersService_ViewFromIDs_FullMethodName                             = "/Scailo.SupplyOffersService/ViewFromIDs"
	SupplyOffersService_ViewAncillaryParametersByUUID_FullMethodName           = "/Scailo.SupplyOffersService/ViewAncillaryParametersByUUID"
	SupplyOffersService_ViewAll_FullMethodName                                 = "/Scailo.SupplyOffersService/ViewAll"
	SupplyOffersService_ViewAllForEntityUUID_FullMethodName                    = "/Scailo.SupplyOffersService/ViewAllForEntityUUID"
	SupplyOffersService_ViewWithPagination_FullMethodName                      = "/Scailo.SupplyOffersService/ViewWithPagination"
	SupplyOffersService_ViewAmendments_FullMethodName                          = "/Scailo.SupplyOffersService/ViewAmendments"
	SupplyOffersService_ViewProspectiveFamilies_FullMethodName                 = "/Scailo.SupplyOffersService/ViewProspectiveFamilies"
	SupplyOffersService_FilterProspectiveFamilies_FullMethodName               = "/Scailo.SupplyOffersService/FilterProspectiveFamilies"
	SupplyOffersService_ViewProspectiveSupplyOfferItem_FullMethodName          = "/Scailo.SupplyOffersService/ViewProspectiveSupplyOfferItem"
	SupplyOffersService_IsDownloadable_FullMethodName                          = "/Scailo.SupplyOffersService/IsDownloadable"
	SupplyOffersService_DownloadByUUID_FullMethodName                          = "/Scailo.SupplyOffersService/DownloadByUUID"
	SupplyOffersService_SearchAll_FullMethodName                               = "/Scailo.SupplyOffersService/SearchAll"
	SupplyOffersService_Filter_FullMethodName                                  = "/Scailo.SupplyOffersService/Filter"
	SupplyOffersService_CountInStatus_FullMethodName                           = "/Scailo.SupplyOffersService/CountInStatus"
	SupplyOffersService_Count_FullMethodName                                   = "/Scailo.SupplyOffersService/Count"
	SupplyOffersService_AccruedValue_FullMethodName                            = "/Scailo.SupplyOffersService/AccruedValue"
	SupplyOffersService_DownloadAsCSV_FullMethodName                           = "/Scailo.SupplyOffersService/DownloadAsCSV"
)

// SupplyOffersServiceClient is the client API for SupplyOffersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each supply offer
type SupplyOffersServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *SupplyOffersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *SupplyOffersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *SupplyOffersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *SupplyOffersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Autofill the supply offer
	Autofill(ctx context.Context, in *SupplyOffersServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Amend the supply offer and send for revision
	Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a supply offer
	AddSupplyOfferItem(ctx context.Context, in *SupplyOffersServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a supply offer
	ModifySupplyOfferItem(ctx context.Context, in *SupplyOffersServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a supply offer
	ApproveSupplyOfferItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a supply offer
	DeleteSupplyOfferItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a supply offer
	ReorderSupplyOfferItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Supply Offer Item by ID
	ViewSupplyOfferItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SupplyOfferItem, error)
	// View Supply Offer Item's price after factoring in the discount
	ViewSupplyOfferItemPrice(ctx context.Context, in *SupplyOfferItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PriceResponse, error)
	// View approved supply offer items for given supply offer ID
	ViewApprovedSupplyOfferItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SupplyOfferItemsList, error)
	// View unapproved supply offer items for given supply offer ID
	ViewUnapprovedSupplyOfferItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SupplyOfferItemsList, error)
	// View the history of the supply offer item
	ViewSupplyOfferItemHistory(ctx context.Context, in *SupplyOfferItemHistoryRequest, opts ...grpc.CallOption) (*SupplyOfferItemsList, error)
	// View approved supply offer items for given supply offer ID with pagination
	ViewPaginatedApprovedSupplyOfferItems(ctx context.Context, in *SupplyOfferItemsSearchRequest, opts ...grpc.CallOption) (*SupplyOffersServicePaginatedItemsResponse, error)
	// View unapproved supply offer items for given supply offer ID with pagination
	ViewPaginatedUnapprovedSupplyOfferItems(ctx context.Context, in *SupplyOfferItemsSearchRequest, opts ...grpc.CallOption) (*SupplyOffersServicePaginatedItemsResponse, error)
	// Search through supply offer items with pagination
	SearchItemsWithPagination(ctx context.Context, in *SupplyOfferItemsSearchRequest, opts ...grpc.CallOption) (*SupplyOffersServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadSupplyOfferItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SupplyOffer, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SupplyOffer, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SupplyOffer, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SupplyOffer, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SupplyOffer, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SupplyOffersList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SupplyOfferAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SupplyOffersList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SupplyOffersList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *SupplyOffersServicePaginationReq, opts ...grpc.CallOption) (*SupplyOffersServicePaginationResponse, error)
	// View all the amendments made
	ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error)
	// View prospective families for the given supply offer
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective supply offer item info for the given family ID and supply offer ID
	ViewProspectiveSupplyOfferItem(ctx context.Context, in *SupplyOfferItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SupplyOffersServiceItemCreateRequest, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download supply offer with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *SupplyOffersServiceSearchAllReq, opts ...grpc.CallOption) (*SupplyOffersList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *SupplyOffersServiceFilterReq, opts ...grpc.CallOption) (*SupplyOffersList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *SupplyOffersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// Returns the sum of the total value of all the records that match the given criteria
	AccruedValue(ctx context.Context, in *SupplyOffersServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *SupplyOffersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type supplyOffersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupplyOffersServiceClient(cc grpc.ClientConnInterface) SupplyOffersServiceClient {
	return &supplyOffersServiceClient{cc}
}

func (c *supplyOffersServiceClient) Create(ctx context.Context, in *SupplyOffersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Draft(ctx context.Context, in *SupplyOffersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) DraftUpdate(ctx context.Context, in *SupplyOffersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) RevisionUpdate(ctx context.Context, in *SupplyOffersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, SupplyOffersService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Autofill(ctx context.Context, in *SupplyOffersServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) AddSupplyOfferItem(ctx context.Context, in *SupplyOffersServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_AddSupplyOfferItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ModifySupplyOfferItem(ctx context.Context, in *SupplyOffersServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_ModifySupplyOfferItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ApproveSupplyOfferItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_ApproveSupplyOfferItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) DeleteSupplyOfferItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_DeleteSupplyOfferItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ReorderSupplyOfferItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_ReorderSupplyOfferItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewSupplyOfferItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SupplyOfferItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOfferItem)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewSupplyOfferItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewSupplyOfferItemPrice(ctx context.Context, in *SupplyOfferItemProspectiveInfoRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewSupplyOfferItemPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewApprovedSupplyOfferItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SupplyOfferItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOfferItemsList)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewApprovedSupplyOfferItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewUnapprovedSupplyOfferItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*SupplyOfferItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOfferItemsList)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewUnapprovedSupplyOfferItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewSupplyOfferItemHistory(ctx context.Context, in *SupplyOfferItemHistoryRequest, opts ...grpc.CallOption) (*SupplyOfferItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOfferItemsList)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewSupplyOfferItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewPaginatedApprovedSupplyOfferItems(ctx context.Context, in *SupplyOfferItemsSearchRequest, opts ...grpc.CallOption) (*SupplyOffersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewPaginatedApprovedSupplyOfferItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewPaginatedUnapprovedSupplyOfferItems(ctx context.Context, in *SupplyOfferItemsSearchRequest, opts ...grpc.CallOption) (*SupplyOffersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewPaginatedUnapprovedSupplyOfferItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) SearchItemsWithPagination(ctx context.Context, in *SupplyOfferItemsSearchRequest, opts ...grpc.CallOption) (*SupplyOffersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SupplyOffersService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SupplyOffersService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) UploadSupplyOfferItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, SupplyOffersService_UploadSupplyOfferItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SupplyOffer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffer)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SupplyOffer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffer)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*SupplyOffer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffer)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*SupplyOffer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffer)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SupplyOffer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffer)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*SupplyOffersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffersList)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SupplyOfferAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOfferAncillaryParameters)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*SupplyOffersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffersList)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*SupplyOffersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffersList)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewWithPagination(ctx context.Context, in *SupplyOffersServicePaginationReq, opts ...grpc.CallOption) (*SupplyOffersServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffersServicePaginationResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendmentLogsList)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, SupplyOffersService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) ViewProspectiveSupplyOfferItem(ctx context.Context, in *SupplyOfferItemProspectiveInfoRequest, opts ...grpc.CallOption) (*SupplyOffersServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffersServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, SupplyOffersService_ViewProspectiveSupplyOfferItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SupplyOffersService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) SearchAll(ctx context.Context, in *SupplyOffersServiceSearchAllReq, opts ...grpc.CallOption) (*SupplyOffersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffersList)
	err := c.cc.Invoke(ctx, SupplyOffersService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Filter(ctx context.Context, in *SupplyOffersServiceFilterReq, opts ...grpc.CallOption) (*SupplyOffersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyOffersList)
	err := c.cc.Invoke(ctx, SupplyOffersService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) Count(ctx context.Context, in *SupplyOffersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) AccruedValue(ctx context.Context, in *SupplyOffersServiceCountReq, opts ...grpc.CallOption) (*SumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, SupplyOffersService_AccruedValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyOffersServiceClient) DownloadAsCSV(ctx context.Context, in *SupplyOffersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, SupplyOffersService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplyOffersService
