// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: payroll_groups.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PayrollGroupsService_Create_FullMethodName                          = "/Scailo.PayrollGroupsService/Create"
	PayrollGroupsService_Draft_FullMethodName                           = "/Scailo.PayrollGroupsService/Draft"
	PayrollGroupsService_DraftUpdate_FullMethodName                     = "/Scailo.PayrollGroupsService/DraftUpdate"
	PayrollGroupsService_SendForVerification_FullMethodName             = "/Scailo.PayrollGroupsService/SendForVerification"
	PayrollGroupsService_Verify_FullMethodName                          = "/Scailo.PayrollGroupsService/Verify"
	PayrollGroupsService_Approve_FullMethodName                         = "/Scailo.PayrollGroupsService/Approve"
	PayrollGroupsService_SendForRevision_FullMethodName                 = "/Scailo.PayrollGroupsService/SendForRevision"
	PayrollGroupsService_RevisionUpdate_FullMethodName                  = "/Scailo.PayrollGroupsService/RevisionUpdate"
	PayrollGroupsService_Halt_FullMethodName                            = "/Scailo.PayrollGroupsService/Halt"
	PayrollGroupsService_Discard_FullMethodName                         = "/Scailo.PayrollGroupsService/Discard"
	PayrollGroupsService_Restore_FullMethodName                         = "/Scailo.PayrollGroupsService/Restore"
	PayrollGroupsService_Complete_FullMethodName                        = "/Scailo.PayrollGroupsService/Complete"
	PayrollGroupsService_Repeat_FullMethodName                          = "/Scailo.PayrollGroupsService/Repeat"
	PayrollGroupsService_Reopen_FullMethodName                          = "/Scailo.PayrollGroupsService/Reopen"
	PayrollGroupsService_CommentAdd_FullMethodName                      = "/Scailo.PayrollGroupsService/CommentAdd"
	PayrollGroupsService_Clone_FullMethodName                           = "/Scailo.PayrollGroupsService/Clone"
	PayrollGroupsService_AddPayrollGroupItem_FullMethodName             = "/Scailo.PayrollGroupsService/AddPayrollGroupItem"
	PayrollGroupsService_ModifyPayrollGroupItem_FullMethodName          = "/Scailo.PayrollGroupsService/ModifyPayrollGroupItem"
	PayrollGroupsService_ApprovePayrollGroupItem_FullMethodName         = "/Scailo.PayrollGroupsService/ApprovePayrollGroupItem"
	PayrollGroupsService_DeletePayrollGroupItem_FullMethodName          = "/Scailo.PayrollGroupsService/DeletePayrollGroupItem"
	PayrollGroupsService_ReorderPayrollGroupItems_FullMethodName        = "/Scailo.PayrollGroupsService/ReorderPayrollGroupItems"
	PayrollGroupsService_ViewPayrollGroupItemByID_FullMethodName        = "/Scailo.PayrollGroupsService/ViewPayrollGroupItemByID"
	PayrollGroupsService_ViewApprovedPayrollGroupItems_FullMethodName   = "/Scailo.PayrollGroupsService/ViewApprovedPayrollGroupItems"
	PayrollGroupsService_ViewUnapprovedPayrollGroupItems_FullMethodName = "/Scailo.PayrollGroupsService/ViewUnapprovedPayrollGroupItems"
	PayrollGroupsService_ViewPayrollGroupItemHistory_FullMethodName     = "/Scailo.PayrollGroupsService/ViewPayrollGroupItemHistory"
	PayrollGroupsService_DownloadItemsAsCSV_FullMethodName              = "/Scailo.PayrollGroupsService/DownloadItemsAsCSV"
	PayrollGroupsService_DownloadItemsTemplateAsCSV_FullMethodName      = "/Scailo.PayrollGroupsService/DownloadItemsTemplateAsCSV"
	PayrollGroupsService_UploadPayrollGroupItems_FullMethodName         = "/Scailo.PayrollGroupsService/UploadPayrollGroupItems"
	PayrollGroupsService_ViewByID_FullMethodName                        = "/Scailo.PayrollGroupsService/ViewByID"
	PayrollGroupsService_ViewByUUID_FullMethodName                      = "/Scailo.PayrollGroupsService/ViewByUUID"
	PayrollGroupsService_ViewByCode_FullMethodName                      = "/Scailo.PayrollGroupsService/ViewByCode"
	PayrollGroupsService_ViewEssentialByID_FullMethodName               = "/Scailo.PayrollGroupsService/ViewEssentialByID"
	PayrollGroupsService_ViewEssentialByUUID_FullMethodName             = "/Scailo.PayrollGroupsService/ViewEssentialByUUID"
	PayrollGroupsService_ViewFromIDs_FullMethodName                     = "/Scailo.PayrollGroupsService/ViewFromIDs"
	PayrollGroupsService_ViewAll_FullMethodName                         = "/Scailo.PayrollGroupsService/ViewAll"
	PayrollGroupsService_ViewAllForEntityUUID_FullMethodName            = "/Scailo.PayrollGroupsService/ViewAllForEntityUUID"
	PayrollGroupsService_ViewWithPagination_FullMethodName              = "/Scailo.PayrollGroupsService/ViewWithPagination"
	PayrollGroupsService_SearchAll_FullMethodName                       = "/Scailo.PayrollGroupsService/SearchAll"
	PayrollGroupsService_Filter_FullMethodName                          = "/Scailo.PayrollGroupsService/Filter"
	PayrollGroupsService_CountInStatus_FullMethodName                   = "/Scailo.PayrollGroupsService/CountInStatus"
	PayrollGroupsService_Count_FullMethodName                           = "/Scailo.PayrollGroupsService/Count"
	PayrollGroupsService_DownloadAsCSV_FullMethodName                   = "/Scailo.PayrollGroupsService/DownloadAsCSV"
	PayrollGroupsService_ImportFromCSV_FullMethodName                   = "/Scailo.PayrollGroupsService/ImportFromCSV"
)

// PayrollGroupsServiceClient is the client API for PayrollGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each payroll group
type PayrollGroupsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *PayrollGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *PayrollGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *PayrollGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *PayrollGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Clone payroll group from an existing payroll group (denoted by the identifier)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add a param to a payroll group
	AddPayrollGroupItem(ctx context.Context, in *PayrollGroupsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify a param in a payroll group
	ModifyPayrollGroupItem(ctx context.Context, in *PayrollGroupsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve a param in a payroll group
	ApprovePayrollGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete a param in a payroll group
	DeletePayrollGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder params in a payroll group
	ReorderPayrollGroupItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Payroll Group Item by ID
	ViewPayrollGroupItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PayrollGroupItem, error)
	// View approved payroll group params for given payroll group ID
	ViewApprovedPayrollGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PayrollGroupsItemsList, error)
	// View unapproved payroll group params for given payroll group ID
	ViewUnapprovedPayrollGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PayrollGroupsItemsList, error)
	// View the history of the payroll group item
	ViewPayrollGroupItemHistory(ctx context.Context, in *PayrollGroupItemHistoryRequest, opts ...grpc.CallOption) (*PayrollGroupsItemsList, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadPayrollGroupItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PayrollGroup, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PayrollGroup, error)
	// View by Code (returns the latest record in case of duplicates)
	ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PayrollGroup, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PayrollGroup, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PayrollGroup, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PayrollGroupsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PayrollGroupsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PayrollGroupsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *PayrollGroupsServicePaginationReq, opts ...grpc.CallOption) (*PayrollGroupsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *PayrollGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*PayrollGroupsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *PayrollGroupsServiceFilterReq, opts ...grpc.CallOption) (*PayrollGroupsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *PayrollGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *PayrollGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type payrollGroupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayrollGroupsServiceClient(cc grpc.ClientConnInterface) PayrollGroupsServiceClient {
	return &payrollGroupsServiceClient{cc}
}

func (c *payrollGroupsServiceClient) Create(ctx context.Context, in *PayrollGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Draft(ctx context.Context, in *PayrollGroupsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) DraftUpdate(ctx context.Context, in *PayrollGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) RevisionUpdate(ctx context.Context, in *PayrollGroupsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) AddPayrollGroupItem(ctx context.Context, in *PayrollGroupsServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_AddPayrollGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ModifyPayrollGroupItem(ctx context.Context, in *PayrollGroupsServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ModifyPayrollGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ApprovePayrollGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ApprovePayrollGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) DeletePayrollGroupItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_DeletePayrollGroupItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ReorderPayrollGroupItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ReorderPayrollGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewPayrollGroupItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PayrollGroupItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroupItem)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewPayrollGroupItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewApprovedPayrollGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PayrollGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroupsItemsList)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewApprovedPayrollGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewUnapprovedPayrollGroupItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*PayrollGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroupsItemsList)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewUnapprovedPayrollGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewPayrollGroupItemHistory(ctx context.Context, in *PayrollGroupItemHistoryRequest, opts ...grpc.CallOption) (*PayrollGroupsItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroupsItemsList)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewPayrollGroupItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PayrollGroupsService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PayrollGroupsService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) UploadPayrollGroupItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, PayrollGroupsService_UploadPayrollGroupItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PayrollGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroup)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PayrollGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroup)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewByCode(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*PayrollGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroup)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*PayrollGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroup)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PayrollGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroup)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*PayrollGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroupsList)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*PayrollGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroupsList)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*PayrollGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroupsList)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ViewWithPagination(ctx context.Context, in *PayrollGroupsServicePaginationReq, opts ...grpc.CallOption) (*PayrollGroupsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroupsServicePaginationResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) SearchAll(ctx context.Context, in *PayrollGroupsServiceSearchAllReq, opts ...grpc.CallOption) (*PayrollGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroupsList)
	err := c.cc.Invoke(ctx, PayrollGroupsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Filter(ctx context.Context, in *PayrollGroupsServiceFilterReq, opts ...grpc.CallOption) (*PayrollGroupsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollGroupsList)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) Count(ctx context.Context, in *PayrollGroupsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, PayrollGroupsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) DownloadAsCSV(ctx context.Context, in *PayrollGroupsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, PayrollGroupsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollGroupsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, PayrollGroupsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayrollGroupsService
