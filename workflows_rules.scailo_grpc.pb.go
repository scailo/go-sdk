// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: workflows_rules.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkflowsRulesService_Create_FullMethodName               = "/Scailo.WorkflowsRulesService/Create"
	WorkflowsRulesService_Draft_FullMethodName                = "/Scailo.WorkflowsRulesService/Draft"
	WorkflowsRulesService_DraftUpdate_FullMethodName          = "/Scailo.WorkflowsRulesService/DraftUpdate"
	WorkflowsRulesService_SendForVerification_FullMethodName  = "/Scailo.WorkflowsRulesService/SendForVerification"
	WorkflowsRulesService_Verify_FullMethodName               = "/Scailo.WorkflowsRulesService/Verify"
	WorkflowsRulesService_Approve_FullMethodName              = "/Scailo.WorkflowsRulesService/Approve"
	WorkflowsRulesService_SendForRevision_FullMethodName      = "/Scailo.WorkflowsRulesService/SendForRevision"
	WorkflowsRulesService_RevisionUpdate_FullMethodName       = "/Scailo.WorkflowsRulesService/RevisionUpdate"
	WorkflowsRulesService_Halt_FullMethodName                 = "/Scailo.WorkflowsRulesService/Halt"
	WorkflowsRulesService_Discard_FullMethodName              = "/Scailo.WorkflowsRulesService/Discard"
	WorkflowsRulesService_Restore_FullMethodName              = "/Scailo.WorkflowsRulesService/Restore"
	WorkflowsRulesService_Complete_FullMethodName             = "/Scailo.WorkflowsRulesService/Complete"
	WorkflowsRulesService_Repeat_FullMethodName               = "/Scailo.WorkflowsRulesService/Repeat"
	WorkflowsRulesService_Reopen_FullMethodName               = "/Scailo.WorkflowsRulesService/Reopen"
	WorkflowsRulesService_CommentAdd_FullMethodName           = "/Scailo.WorkflowsRulesService/CommentAdd"
	WorkflowsRulesService_ViewByID_FullMethodName             = "/Scailo.WorkflowsRulesService/ViewByID"
	WorkflowsRulesService_ViewByUUID_FullMethodName           = "/Scailo.WorkflowsRulesService/ViewByUUID"
	WorkflowsRulesService_ViewAll_FullMethodName              = "/Scailo.WorkflowsRulesService/ViewAll"
	WorkflowsRulesService_ViewAllForEntityUUID_FullMethodName = "/Scailo.WorkflowsRulesService/ViewAllForEntityUUID"
	WorkflowsRulesService_ViewWithPagination_FullMethodName   = "/Scailo.WorkflowsRulesService/ViewWithPagination"
	WorkflowsRulesService_SearchAll_FullMethodName            = "/Scailo.WorkflowsRulesService/SearchAll"
	WorkflowsRulesService_Filter_FullMethodName               = "/Scailo.WorkflowsRulesService/Filter"
	WorkflowsRulesService_CountInStatus_FullMethodName        = "/Scailo.WorkflowsRulesService/CountInStatus"
	WorkflowsRulesService_Count_FullMethodName                = "/Scailo.WorkflowsRulesService/Count"
)

// WorkflowsRulesServiceClient is the client API for WorkflowsRulesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each workflow rule
type WorkflowsRulesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *WorkflowsRulesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *WorkflowsRulesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *WorkflowsRulesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *WorkflowsRulesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*WorkflowRule, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkflowRule, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*WorkflowsRulesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkflowsRulesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *WorkflowsRulesServicePaginationReq, opts ...grpc.CallOption) (*WorkflowsRulesServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *WorkflowsRulesServiceSearchAllReq, opts ...grpc.CallOption) (*WorkflowsRulesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *WorkflowsRulesServiceFilterReq, opts ...grpc.CallOption) (*WorkflowsRulesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *WorkflowsRulesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
}

type workflowsRulesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowsRulesServiceClient(cc grpc.ClientConnInterface) WorkflowsRulesServiceClient {
	return &workflowsRulesServiceClient{cc}
}

func (c *workflowsRulesServiceClient) Create(ctx context.Context, in *WorkflowsRulesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Draft(ctx context.Context, in *WorkflowsRulesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) DraftUpdate(ctx context.Context, in *WorkflowsRulesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) RevisionUpdate(ctx context.Context, in *WorkflowsRulesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*WorkflowRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowRule)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkflowRule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowRule)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*WorkflowsRulesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowsRulesList)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkflowsRulesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowsRulesList)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) ViewWithPagination(ctx context.Context, in *WorkflowsRulesServicePaginationReq, opts ...grpc.CallOption) (*WorkflowsRulesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowsRulesServicePaginationResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) SearchAll(ctx context.Context, in *WorkflowsRulesServiceSearchAllReq, opts ...grpc.CallOption) (*WorkflowsRulesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowsRulesList)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Filter(ctx context.Context, in *WorkflowsRulesServiceFilterReq, opts ...grpc.CallOption) (*WorkflowsRulesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowsRulesList)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowsRulesServiceClient) Count(ctx context.Context, in *WorkflowsRulesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, WorkflowsRulesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowsRulesService
