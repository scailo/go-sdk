// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: equations_replaceables.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EquationsReplaceablesService_Create_FullMethodName                                          = "/Scailo.EquationsReplaceablesService/Create"
	EquationsReplaceablesService_Draft_FullMethodName                                           = "/Scailo.EquationsReplaceablesService/Draft"
	EquationsReplaceablesService_DraftUpdate_FullMethodName                                     = "/Scailo.EquationsReplaceablesService/DraftUpdate"
	EquationsReplaceablesService_SendForVerification_FullMethodName                             = "/Scailo.EquationsReplaceablesService/SendForVerification"
	EquationsReplaceablesService_Verify_FullMethodName                                          = "/Scailo.EquationsReplaceablesService/Verify"
	EquationsReplaceablesService_Approve_FullMethodName                                         = "/Scailo.EquationsReplaceablesService/Approve"
	EquationsReplaceablesService_SendForRevision_FullMethodName                                 = "/Scailo.EquationsReplaceablesService/SendForRevision"
	EquationsReplaceablesService_RevisionUpdate_FullMethodName                                  = "/Scailo.EquationsReplaceablesService/RevisionUpdate"
	EquationsReplaceablesService_Halt_FullMethodName                                            = "/Scailo.EquationsReplaceablesService/Halt"
	EquationsReplaceablesService_Discard_FullMethodName                                         = "/Scailo.EquationsReplaceablesService/Discard"
	EquationsReplaceablesService_Restore_FullMethodName                                         = "/Scailo.EquationsReplaceablesService/Restore"
	EquationsReplaceablesService_Complete_FullMethodName                                        = "/Scailo.EquationsReplaceablesService/Complete"
	EquationsReplaceablesService_Repeat_FullMethodName                                          = "/Scailo.EquationsReplaceablesService/Repeat"
	EquationsReplaceablesService_Reopen_FullMethodName                                          = "/Scailo.EquationsReplaceablesService/Reopen"
	EquationsReplaceablesService_CommentAdd_FullMethodName                                      = "/Scailo.EquationsReplaceablesService/CommentAdd"
	EquationsReplaceablesService_CreateMagicLink_FullMethodName                                 = "/Scailo.EquationsReplaceablesService/CreateMagicLink"
	EquationsReplaceablesService_Clone_FullMethodName                                           = "/Scailo.EquationsReplaceablesService/Clone"
	EquationsReplaceablesService_AddEquationReplaceableItem_FullMethodName                      = "/Scailo.EquationsReplaceablesService/AddEquationReplaceableItem"
	EquationsReplaceablesService_ModifyEquationReplaceableItem_FullMethodName                   = "/Scailo.EquationsReplaceablesService/ModifyEquationReplaceableItem"
	EquationsReplaceablesService_ApproveEquationReplaceableItem_FullMethodName                  = "/Scailo.EquationsReplaceablesService/ApproveEquationReplaceableItem"
	EquationsReplaceablesService_DeleteEquationReplaceableItem_FullMethodName                   = "/Scailo.EquationsReplaceablesService/DeleteEquationReplaceableItem"
	EquationsReplaceablesService_ReorderEquationReplaceableItems_FullMethodName                 = "/Scailo.EquationsReplaceablesService/ReorderEquationReplaceableItems"
	EquationsReplaceablesService_ViewEquationReplaceableItemByID_FullMethodName                 = "/Scailo.EquationsReplaceablesService/ViewEquationReplaceableItemByID"
	EquationsReplaceablesService_ViewApprovedEquationReplaceableItems_FullMethodName            = "/Scailo.EquationsReplaceablesService/ViewApprovedEquationReplaceableItems"
	EquationsReplaceablesService_ViewUnapprovedEquationReplaceableItems_FullMethodName          = "/Scailo.EquationsReplaceablesService/ViewUnapprovedEquationReplaceableItems"
	EquationsReplaceablesService_ViewEquationReplaceableItemHistory_FullMethodName              = "/Scailo.EquationsReplaceablesService/ViewEquationReplaceableItemHistory"
	EquationsReplaceablesService_ViewPaginatedApprovedEquationReplaceableItems_FullMethodName   = "/Scailo.EquationsReplaceablesService/ViewPaginatedApprovedEquationReplaceableItems"
	EquationsReplaceablesService_ViewPaginatedUnapprovedEquationReplaceableItems_FullMethodName = "/Scailo.EquationsReplaceablesService/ViewPaginatedUnapprovedEquationReplaceableItems"
	EquationsReplaceablesService_SearchItemsWithPagination_FullMethodName                       = "/Scailo.EquationsReplaceablesService/SearchItemsWithPagination"
	EquationsReplaceablesService_DownloadItemsAsCSV_FullMethodName                              = "/Scailo.EquationsReplaceablesService/DownloadItemsAsCSV"
	EquationsReplaceablesService_DownloadItemsTemplateAsCSV_FullMethodName                      = "/Scailo.EquationsReplaceablesService/DownloadItemsTemplateAsCSV"
	EquationsReplaceablesService_DownloadTreeAsCSV_FullMethodName                               = "/Scailo.EquationsReplaceablesService/DownloadTreeAsCSV"
	EquationsReplaceablesService_UploadEquationReplaceableItems_FullMethodName                  = "/Scailo.EquationsReplaceablesService/UploadEquationReplaceableItems"
	EquationsReplaceablesService_ViewByID_FullMethodName                                        = "/Scailo.EquationsReplaceablesService/ViewByID"
	EquationsReplaceablesService_ViewByUUID_FullMethodName                                      = "/Scailo.EquationsReplaceablesService/ViewByUUID"
	EquationsReplaceablesService_ViewByName_FullMethodName                                      = "/Scailo.EquationsReplaceablesService/ViewByName"
	EquationsReplaceablesService_ViewEssentialByID_FullMethodName                               = "/Scailo.EquationsReplaceablesService/ViewEssentialByID"
	EquationsReplaceablesService_ViewEssentialByUUID_FullMethodName                             = "/Scailo.EquationsReplaceablesService/ViewEssentialByUUID"
	EquationsReplaceablesService_ViewFromIDs_FullMethodName                                     = "/Scailo.EquationsReplaceablesService/ViewFromIDs"
	EquationsReplaceablesService_ViewAll_FullMethodName                                         = "/Scailo.EquationsReplaceablesService/ViewAll"
	EquationsReplaceablesService_ViewAllForEntityUUID_FullMethodName                            = "/Scailo.EquationsReplaceablesService/ViewAllForEntityUUID"
	EquationsReplaceablesService_ViewWithPagination_FullMethodName                              = "/Scailo.EquationsReplaceablesService/ViewWithPagination"
	EquationsReplaceablesService_ViewForFamilyID_FullMethodName                                 = "/Scailo.EquationsReplaceablesService/ViewForFamilyID"
	EquationsReplaceablesService_IsDownloadable_FullMethodName                                  = "/Scailo.EquationsReplaceablesService/IsDownloadable"
	EquationsReplaceablesService_DownloadByUUID_FullMethodName                                  = "/Scailo.EquationsReplaceablesService/DownloadByUUID"
	EquationsReplaceablesService_SearchAll_FullMethodName                                       = "/Scailo.EquationsReplaceablesService/SearchAll"
	EquationsReplaceablesService_Filter_FullMethodName                                          = "/Scailo.EquationsReplaceablesService/Filter"
	EquationsReplaceablesService_CountInStatus_FullMethodName                                   = "/Scailo.EquationsReplaceablesService/CountInStatus"
	EquationsReplaceablesService_Count_FullMethodName                                           = "/Scailo.EquationsReplaceablesService/Count"
	EquationsReplaceablesService_DownloadAsCSV_FullMethodName                                   = "/Scailo.EquationsReplaceablesService/DownloadAsCSV"
	EquationsReplaceablesService_ImportFromCSV_FullMethodName                                   = "/Scailo.EquationsReplaceablesService/ImportFromCSV"
)

// EquationsReplaceablesServiceClient is the client API for EquationsReplaceablesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each equation replaceable
type EquationsReplaceablesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *EquationsReplaceablesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *EquationsReplaceablesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *EquationsReplaceablesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *EquationsReplaceablesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	// rpc SendEmail (IdentifierWithEmailAttributes) returns (IdentifierResponse);
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Clone equation from an existing equation (denoted by the identifier)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a equation replaceable
	AddEquationReplaceableItem(ctx context.Context, in *EquationsReplaceablesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a equation replaceable
	ModifyEquationReplaceableItem(ctx context.Context, in *EquationsReplaceablesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a equation replaceable
	ApproveEquationReplaceableItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a equation replaceable
	DeleteEquationReplaceableItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a equation replaceable
	ReorderEquationReplaceableItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Equation Replaceable Item by ID
	ViewEquationReplaceableItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationReplaceableItem, error)
	// View approved equation replaceable items for given equation replaceable ID
	ViewApprovedEquationReplaceableItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsReplaceablesItemsList, error)
	// View unapproved equation replaceable items for given equation replaceable ID
	ViewUnapprovedEquationReplaceableItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsReplaceablesItemsList, error)
	// View the history of the equation replaceable item
	ViewEquationReplaceableItemHistory(ctx context.Context, in *EquationReplaceableItemHistoryRequest, opts ...grpc.CallOption) (*EquationsReplaceablesItemsList, error)
	// View approved equation replaceable items for given equation replaceable ID with pagination
	ViewPaginatedApprovedEquationReplaceableItems(ctx context.Context, in *EquationReplaceableItemsSearchRequest, opts ...grpc.CallOption) (*EquationsReplaceablesServicePaginatedItemsResponse, error)
	// View unapproved equation replaceable items for given equation replaceable ID with pagination
	ViewPaginatedUnapprovedEquationReplaceableItems(ctx context.Context, in *EquationReplaceableItemsSearchRequest, opts ...grpc.CallOption) (*EquationsReplaceablesServicePaginatedItemsResponse, error)
	// Search through equation replaceable items with pagination
	SearchItemsWithPagination(ctx context.Context, in *EquationReplaceableItemsSearchRequest, opts ...grpc.CallOption) (*EquationsReplaceablesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV file with the entire dependency tree. Useful for identifying quantities necessary from all the dependencies.
	DownloadTreeAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadEquationReplaceableItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationReplaceable, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationReplaceable, error)
	// View by Name (returns the latest record in case of duplicates)
	ViewByName(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*EquationReplaceable, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationReplaceable, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationReplaceable, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*EquationsReplaceablesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*EquationsReplaceablesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationsReplaceablesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *EquationsReplaceablesServicePaginationReq, opts ...grpc.CallOption) (*EquationsReplaceablesServicePaginationResponse, error)
	// View the latest equation for a family (denoted by the given identifier)
	ViewForFamilyID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationReplaceable, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download equation with the given IdentifierUUID
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *EquationsReplaceablesServiceSearchAllReq, opts ...grpc.CallOption) (*EquationsReplaceablesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *EquationsReplaceablesServiceFilterReq, opts ...grpc.CallOption) (*EquationsReplaceablesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *EquationsReplaceablesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *EquationsReplaceablesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type equationsReplaceablesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquationsReplaceablesServiceClient(cc grpc.ClientConnInterface) EquationsReplaceablesServiceClient {
	return &equationsReplaceablesServiceClient{cc}
}

func (c *equationsReplaceablesServiceClient) Create(ctx context.Context, in *EquationsReplaceablesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Draft(ctx context.Context, in *EquationsReplaceablesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) DraftUpdate(ctx context.Context, in *EquationsReplaceablesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) RevisionUpdate(ctx context.Context, in *EquationsReplaceablesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) AddEquationReplaceableItem(ctx context.Context, in *EquationsReplaceablesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_AddEquationReplaceableItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ModifyEquationReplaceableItem(ctx context.Context, in *EquationsReplaceablesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ModifyEquationReplaceableItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ApproveEquationReplaceableItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ApproveEquationReplaceableItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) DeleteEquationReplaceableItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_DeleteEquationReplaceableItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ReorderEquationReplaceableItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ReorderEquationReplaceableItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewEquationReplaceableItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationReplaceableItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationReplaceableItem)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewEquationReplaceableItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewApprovedEquationReplaceableItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsReplaceablesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesItemsList)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewApprovedEquationReplaceableItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewUnapprovedEquationReplaceableItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsReplaceablesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesItemsList)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewUnapprovedEquationReplaceableItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewEquationReplaceableItemHistory(ctx context.Context, in *EquationReplaceableItemHistoryRequest, opts ...grpc.CallOption) (*EquationsReplaceablesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesItemsList)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewEquationReplaceableItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewPaginatedApprovedEquationReplaceableItems(ctx context.Context, in *EquationReplaceableItemsSearchRequest, opts ...grpc.CallOption) (*EquationsReplaceablesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewPaginatedApprovedEquationReplaceableItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewPaginatedUnapprovedEquationReplaceableItems(ctx context.Context, in *EquationReplaceableItemsSearchRequest, opts ...grpc.CallOption) (*EquationsReplaceablesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewPaginatedUnapprovedEquationReplaceableItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) SearchItemsWithPagination(ctx context.Context, in *EquationReplaceableItemsSearchRequest, opts ...grpc.CallOption) (*EquationsReplaceablesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) DownloadTreeAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_DownloadTreeAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) UploadEquationReplaceableItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_UploadEquationReplaceableItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationReplaceable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationReplaceable)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationReplaceable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationReplaceable)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewByName(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*EquationReplaceable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationReplaceable)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationReplaceable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationReplaceable)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationReplaceable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationReplaceable)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*EquationsReplaceablesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesList)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*EquationsReplaceablesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesList)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationsReplaceablesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesList)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewWithPagination(ctx context.Context, in *EquationsReplaceablesServicePaginationReq, opts ...grpc.CallOption) (*EquationsReplaceablesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesServicePaginationResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ViewForFamilyID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationReplaceable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationReplaceable)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ViewForFamilyID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) SearchAll(ctx context.Context, in *EquationsReplaceablesServiceSearchAllReq, opts ...grpc.CallOption) (*EquationsReplaceablesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesList)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Filter(ctx context.Context, in *EquationsReplaceablesServiceFilterReq, opts ...grpc.CallOption) (*EquationsReplaceablesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsReplaceablesList)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) Count(ctx context.Context, in *EquationsReplaceablesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) DownloadAsCSV(ctx context.Context, in *EquationsReplaceablesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsReplaceablesServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, EquationsReplaceablesService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquationsReplaceablesService
