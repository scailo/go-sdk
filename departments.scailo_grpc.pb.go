// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: departments.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DepartmentsService_Create_FullMethodName               = "/Scailo.DepartmentsService/Create"
	DepartmentsService_Draft_FullMethodName                = "/Scailo.DepartmentsService/Draft"
	DepartmentsService_DraftUpdate_FullMethodName          = "/Scailo.DepartmentsService/DraftUpdate"
	DepartmentsService_SendForVerification_FullMethodName  = "/Scailo.DepartmentsService/SendForVerification"
	DepartmentsService_Verify_FullMethodName               = "/Scailo.DepartmentsService/Verify"
	DepartmentsService_Approve_FullMethodName              = "/Scailo.DepartmentsService/Approve"
	DepartmentsService_SendForRevision_FullMethodName      = "/Scailo.DepartmentsService/SendForRevision"
	DepartmentsService_RevisionUpdate_FullMethodName       = "/Scailo.DepartmentsService/RevisionUpdate"
	DepartmentsService_Halt_FullMethodName                 = "/Scailo.DepartmentsService/Halt"
	DepartmentsService_Discard_FullMethodName              = "/Scailo.DepartmentsService/Discard"
	DepartmentsService_Restore_FullMethodName              = "/Scailo.DepartmentsService/Restore"
	DepartmentsService_Complete_FullMethodName             = "/Scailo.DepartmentsService/Complete"
	DepartmentsService_Repeat_FullMethodName               = "/Scailo.DepartmentsService/Repeat"
	DepartmentsService_Reopen_FullMethodName               = "/Scailo.DepartmentsService/Reopen"
	DepartmentsService_CommentAdd_FullMethodName           = "/Scailo.DepartmentsService/CommentAdd"
	DepartmentsService_ViewByID_FullMethodName             = "/Scailo.DepartmentsService/ViewByID"
	DepartmentsService_ViewByUUID_FullMethodName           = "/Scailo.DepartmentsService/ViewByUUID"
	DepartmentsService_ViewEssentialByID_FullMethodName    = "/Scailo.DepartmentsService/ViewEssentialByID"
	DepartmentsService_ViewEssentialByUUID_FullMethodName  = "/Scailo.DepartmentsService/ViewEssentialByUUID"
	DepartmentsService_ViewFromIDs_FullMethodName          = "/Scailo.DepartmentsService/ViewFromIDs"
	DepartmentsService_ViewAll_FullMethodName              = "/Scailo.DepartmentsService/ViewAll"
	DepartmentsService_ViewAllForEntityUUID_FullMethodName = "/Scailo.DepartmentsService/ViewAllForEntityUUID"
	DepartmentsService_ViewWithPagination_FullMethodName   = "/Scailo.DepartmentsService/ViewWithPagination"
	DepartmentsService_SearchAll_FullMethodName            = "/Scailo.DepartmentsService/SearchAll"
	DepartmentsService_Filter_FullMethodName               = "/Scailo.DepartmentsService/Filter"
	DepartmentsService_CountInStatus_FullMethodName        = "/Scailo.DepartmentsService/CountInStatus"
	DepartmentsService_Count_FullMethodName                = "/Scailo.DepartmentsService/Count"
	DepartmentsService_DownloadAsCSV_FullMethodName        = "/Scailo.DepartmentsService/DownloadAsCSV"
	DepartmentsService_ImportFromCSV_FullMethodName        = "/Scailo.DepartmentsService/ImportFromCSV"
)

// DepartmentsServiceClient is the client API for DepartmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each department
type DepartmentsServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *DepartmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *DepartmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *DepartmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *DepartmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Department, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Department, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Department, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Department, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*DepartmentsList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*DepartmentsList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DepartmentsList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *DepartmentsServicePaginationReq, opts ...grpc.CallOption) (*DepartmentsServicePaginationResponse, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *DepartmentsServiceSearchAllReq, opts ...grpc.CallOption) (*DepartmentsList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *DepartmentsServiceFilterReq, opts ...grpc.CallOption) (*DepartmentsList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *DepartmentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *DepartmentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type departmentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentsServiceClient(cc grpc.ClientConnInterface) DepartmentsServiceClient {
	return &departmentsServiceClient{cc}
}

func (c *departmentsServiceClient) Create(ctx context.Context, in *DepartmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Draft(ctx context.Context, in *DepartmentsServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) DraftUpdate(ctx context.Context, in *DepartmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) RevisionUpdate(ctx context.Context, in *DepartmentsServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Department, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Department)
	err := c.cc.Invoke(ctx, DepartmentsService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Department, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Department)
	err := c.cc.Invoke(ctx, DepartmentsService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Department, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Department)
	err := c.cc.Invoke(ctx, DepartmentsService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Department, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Department)
	err := c.cc.Invoke(ctx, DepartmentsService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*DepartmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentsList)
	err := c.cc.Invoke(ctx, DepartmentsService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*DepartmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentsList)
	err := c.cc.Invoke(ctx, DepartmentsService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*DepartmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentsList)
	err := c.cc.Invoke(ctx, DepartmentsService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) ViewWithPagination(ctx context.Context, in *DepartmentsServicePaginationReq, opts ...grpc.CallOption) (*DepartmentsServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentsServicePaginationResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) SearchAll(ctx context.Context, in *DepartmentsServiceSearchAllReq, opts ...grpc.CallOption) (*DepartmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentsList)
	err := c.cc.Invoke(ctx, DepartmentsService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Filter(ctx context.Context, in *DepartmentsServiceFilterReq, opts ...grpc.CallOption) (*DepartmentsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentsList)
	err := c.cc.Invoke(ctx, DepartmentsService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) Count(ctx context.Context, in *DepartmentsServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, DepartmentsService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) DownloadAsCSV(ctx context.Context, in *DepartmentsServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, DepartmentsService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentsServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, DepartmentsService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentsService
