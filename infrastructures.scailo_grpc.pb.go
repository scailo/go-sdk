// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: infrastructures.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InfrastructuresService_Create_FullMethodName                    = "/Scailo.InfrastructuresService/Create"
	InfrastructuresService_SendToStore_FullMethodName               = "/Scailo.InfrastructuresService/SendToStore"
	InfrastructuresService_Update_FullMethodName                    = "/Scailo.InfrastructuresService/Update"
	InfrastructuresService_SendForRework_FullMethodName             = "/Scailo.InfrastructuresService/SendForRework"
	InfrastructuresService_SendForQC_FullMethodName                 = "/Scailo.InfrastructuresService/SendForQC"
	InfrastructuresService_SplitLot_FullMethodName                  = "/Scailo.InfrastructuresService/SplitLot"
	InfrastructuresService_Partition_FullMethodName                 = "/Scailo.InfrastructuresService/Partition"
	InfrastructuresService_Consume_FullMethodName                   = "/Scailo.InfrastructuresService/Consume"
	InfrastructuresService_Reject_FullMethodName                    = "/Scailo.InfrastructuresService/Reject"
	InfrastructuresService_Scrap_FullMethodName                     = "/Scailo.InfrastructuresService/Scrap"
	InfrastructuresService_ReturnMaterial_FullMethodName            = "/Scailo.InfrastructuresService/ReturnMaterial"
	InfrastructuresService_Discard_FullMethodName                   = "/Scailo.InfrastructuresService/Discard"
	InfrastructuresService_CommentAdd_FullMethodName                = "/Scailo.InfrastructuresService/CommentAdd"
	InfrastructuresService_CreateMagicLink_FullMethodName           = "/Scailo.InfrastructuresService/CreateMagicLink"
	InfrastructuresService_ViewByID_FullMethodName                  = "/Scailo.InfrastructuresService/ViewByID"
	InfrastructuresService_ViewByUUID_FullMethodName                = "/Scailo.InfrastructuresService/ViewByUUID"
	InfrastructuresService_ViewEssentialByID_FullMethodName         = "/Scailo.InfrastructuresService/ViewEssentialByID"
	InfrastructuresService_ViewEssentialByUUID_FullMethodName       = "/Scailo.InfrastructuresService/ViewEssentialByUUID"
	InfrastructuresService_ViewFromIDs_FullMethodName               = "/Scailo.InfrastructuresService/ViewFromIDs"
	InfrastructuresService_ViewFromUUIDs_FullMethodName             = "/Scailo.InfrastructuresService/ViewFromUUIDs"
	InfrastructuresService_ViewAll_FullMethodName                   = "/Scailo.InfrastructuresService/ViewAll"
	InfrastructuresService_ViewWithPagination_FullMethodName        = "/Scailo.InfrastructuresService/ViewWithPagination"
	InfrastructuresService_DownloadQCReportByID_FullMethodName      = "/Scailo.InfrastructuresService/DownloadQCReportByID"
	InfrastructuresService_DownloadQCReportByUUID_FullMethodName    = "/Scailo.InfrastructuresService/DownloadQCReportByUUID"
	InfrastructuresService_DownloadLabelByID_FullMethodName         = "/Scailo.InfrastructuresService/DownloadLabelByID"
	InfrastructuresService_DownloadLabelByUUID_FullMethodName       = "/Scailo.InfrastructuresService/DownloadLabelByUUID"
	InfrastructuresService_ViewInventoryInteractions_FullMethodName = "/Scailo.InfrastructuresService/ViewInventoryInteractions"
	InfrastructuresService_SearchAll_FullMethodName                 = "/Scailo.InfrastructuresService/SearchAll"
	InfrastructuresService_Filter_FullMethodName                    = "/Scailo.InfrastructuresService/Filter"
	InfrastructuresService_Count_FullMethodName                     = "/Scailo.InfrastructuresService/Count"
	InfrastructuresService_DownloadAsCSV_FullMethodName             = "/Scailo.InfrastructuresService/DownloadAsCSV"
	InfrastructuresService_DownloadImportTemplate_FullMethodName    = "/Scailo.InfrastructuresService/DownloadImportTemplate"
	InfrastructuresService_ImportFromCSV_FullMethodName             = "/Scailo.InfrastructuresService/ImportFromCSV"
)

// InfrastructuresServiceClient is the client API for InfrastructuresService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each infrastructure
type InfrastructuresServiceClient interface {
	// Create (and Send for QC)
	Create(ctx context.Context, in *InfrastructuresServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send to Store
	SendToStore(ctx context.Context, in *InfrastructuresServiceSendToStoreRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update
	Update(ctx context.Context, in *InfrastructuresServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for Rework
	SendForRework(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for QC
	SendForQC(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Split into unit quantities
	SplitLot(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a partition from the parent lot (and returns the identifier of the new partition)
	Partition(ctx context.Context, in *InventoryPartitionRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Consume
	Consume(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reject
	Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Scrap
	Scrap(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Return
	ReturnMaterial(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Infrastructure, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Infrastructure, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Infrastructure, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Infrastructure, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*InfrastructuresList, error)
	// View all records with the given UUIDs
	ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*InfrastructuresList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*InfrastructuresList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *InfrastructuresServicePaginationReq, opts ...grpc.CallOption) (*InfrastructuresServicePaginationResponse, error)
	// Download QC Report with the given Identifier
	DownloadQCReportByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error)
	// Download QC Report with the given IdentifierUUID (can be used to allow public downloads)
	DownloadQCReportByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download Label for the given Identifier
	DownloadLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error)
	// Download Label for the given IdentifierUUID (can be used to allow public downloads)
	DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all inventory interactions for infrastructure with the given IdentifierUUID
	ViewInventoryInteractions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InventoryInteractionsList, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *InfrastructuresServiceSearchAllReq, opts ...grpc.CallOption) (*InfrastructuresList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *InfrastructuresServiceFilterReq, opts ...grpc.CallOption) (*InfrastructuresList, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *InfrastructuresServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request
	DownloadAsCSV(ctx context.Context, in *InfrastructuresServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload records
	DownloadImportTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file. Imports records as initial stock
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type infrastructuresServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfrastructuresServiceClient(cc grpc.ClientConnInterface) InfrastructuresServiceClient {
	return &infrastructuresServiceClient{cc}
}

func (c *infrastructuresServiceClient) Create(ctx context.Context, in *InfrastructuresServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) SendToStore(ctx context.Context, in *InfrastructuresServiceSendToStoreRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_SendToStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) Update(ctx context.Context, in *InfrastructuresServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) SendForRework(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_SendForRework_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) SendForQC(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_SendForQC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) SplitLot(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_SplitLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) Partition(ctx context.Context, in *InventoryPartitionRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_Partition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) Consume(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_Consume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) Reject(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_Reject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) Scrap(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_Scrap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ReturnMaterial(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_ReturnMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, InfrastructuresService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Infrastructure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Infrastructure)
	err := c.cc.Invoke(ctx, InfrastructuresService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Infrastructure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Infrastructure)
	err := c.cc.Invoke(ctx, InfrastructuresService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Infrastructure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Infrastructure)
	err := c.cc.Invoke(ctx, InfrastructuresService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*Infrastructure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Infrastructure)
	err := c.cc.Invoke(ctx, InfrastructuresService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*InfrastructuresList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfrastructuresList)
	err := c.cc.Invoke(ctx, InfrastructuresService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ViewFromUUIDs(ctx context.Context, in *IdentifierUUIDsList, opts ...grpc.CallOption) (*InfrastructuresList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfrastructuresList)
	err := c.cc.Invoke(ctx, InfrastructuresService_ViewFromUUIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*InfrastructuresList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfrastructuresList)
	err := c.cc.Invoke(ctx, InfrastructuresService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ViewWithPagination(ctx context.Context, in *InfrastructuresServicePaginationReq, opts ...grpc.CallOption) (*InfrastructuresServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfrastructuresServicePaginationResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) DownloadQCReportByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, InfrastructuresService_DownloadQCReportByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) DownloadQCReportByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, InfrastructuresService_DownloadQCReportByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) DownloadLabelByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, InfrastructuresService_DownloadLabelByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) DownloadLabelByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, InfrastructuresService_DownloadLabelByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ViewInventoryInteractions(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*InventoryInteractionsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryInteractionsList)
	err := c.cc.Invoke(ctx, InfrastructuresService_ViewInventoryInteractions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) SearchAll(ctx context.Context, in *InfrastructuresServiceSearchAllReq, opts ...grpc.CallOption) (*InfrastructuresList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfrastructuresList)
	err := c.cc.Invoke(ctx, InfrastructuresService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) Filter(ctx context.Context, in *InfrastructuresServiceFilterReq, opts ...grpc.CallOption) (*InfrastructuresList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfrastructuresList)
	err := c.cc.Invoke(ctx, InfrastructuresService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) Count(ctx context.Context, in *InfrastructuresServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, InfrastructuresService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) DownloadAsCSV(ctx context.Context, in *InfrastructuresServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, InfrastructuresService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) DownloadImportTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, InfrastructuresService_DownloadImportTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infrastructuresServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, InfrastructuresService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfrastructuresService
