// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: work_orders.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkOrdersService_Create_FullMethodName                                = "/Scailo.WorkOrdersService/Create"
	WorkOrdersService_Draft_FullMethodName                                 = "/Scailo.WorkOrdersService/Draft"
	WorkOrdersService_DraftUpdate_FullMethodName                           = "/Scailo.WorkOrdersService/DraftUpdate"
	WorkOrdersService_SendForVerification_FullMethodName                   = "/Scailo.WorkOrdersService/SendForVerification"
	WorkOrdersService_Verify_FullMethodName                                = "/Scailo.WorkOrdersService/Verify"
	WorkOrdersService_Approve_FullMethodName                               = "/Scailo.WorkOrdersService/Approve"
	WorkOrdersService_SendForRevision_FullMethodName                       = "/Scailo.WorkOrdersService/SendForRevision"
	WorkOrdersService_RevisionUpdate_FullMethodName                        = "/Scailo.WorkOrdersService/RevisionUpdate"
	WorkOrdersService_Halt_FullMethodName                                  = "/Scailo.WorkOrdersService/Halt"
	WorkOrdersService_Discard_FullMethodName                               = "/Scailo.WorkOrdersService/Discard"
	WorkOrdersService_Restore_FullMethodName                               = "/Scailo.WorkOrdersService/Restore"
	WorkOrdersService_Complete_FullMethodName                              = "/Scailo.WorkOrdersService/Complete"
	WorkOrdersService_Repeat_FullMethodName                                = "/Scailo.WorkOrdersService/Repeat"
	WorkOrdersService_Reopen_FullMethodName                                = "/Scailo.WorkOrdersService/Reopen"
	WorkOrdersService_CommentAdd_FullMethodName                            = "/Scailo.WorkOrdersService/CommentAdd"
	WorkOrdersService_SendEmail_FullMethodName                             = "/Scailo.WorkOrdersService/SendEmail"
	WorkOrdersService_CreateMagicLink_FullMethodName                       = "/Scailo.WorkOrdersService/CreateMagicLink"
	WorkOrdersService_Autofill_FullMethodName                              = "/Scailo.WorkOrdersService/Autofill"
	WorkOrdersService_Amend_FullMethodName                                 = "/Scailo.WorkOrdersService/Amend"
	WorkOrdersService_IsCompletable_FullMethodName                         = "/Scailo.WorkOrdersService/IsCompletable"
	WorkOrdersService_AddWorkOrderItem_FullMethodName                      = "/Scailo.WorkOrdersService/AddWorkOrderItem"
	WorkOrdersService_ModifyWorkOrderItem_FullMethodName                   = "/Scailo.WorkOrdersService/ModifyWorkOrderItem"
	WorkOrdersService_ApproveWorkOrderItem_FullMethodName                  = "/Scailo.WorkOrdersService/ApproveWorkOrderItem"
	WorkOrdersService_DeleteWorkOrderItem_FullMethodName                   = "/Scailo.WorkOrdersService/DeleteWorkOrderItem"
	WorkOrdersService_ReorderWorkOrderItems_FullMethodName                 = "/Scailo.WorkOrdersService/ReorderWorkOrderItems"
	WorkOrdersService_ViewWorkOrderItemByID_FullMethodName                 = "/Scailo.WorkOrdersService/ViewWorkOrderItemByID"
	WorkOrdersService_ViewApprovedWorkOrderItems_FullMethodName            = "/Scailo.WorkOrdersService/ViewApprovedWorkOrderItems"
	WorkOrdersService_ViewUnapprovedWorkOrderItems_FullMethodName          = "/Scailo.WorkOrdersService/ViewUnapprovedWorkOrderItems"
	WorkOrdersService_ViewWorkOrderItemHistory_FullMethodName              = "/Scailo.WorkOrdersService/ViewWorkOrderItemHistory"
	WorkOrdersService_ViewPaginatedApprovedWorkOrderItems_FullMethodName   = "/Scailo.WorkOrdersService/ViewPaginatedApprovedWorkOrderItems"
	WorkOrdersService_ViewPaginatedUnapprovedWorkOrderItems_FullMethodName = "/Scailo.WorkOrdersService/ViewPaginatedUnapprovedWorkOrderItems"
	WorkOrdersService_SearchItemsWithPagination_FullMethodName             = "/Scailo.WorkOrdersService/SearchItemsWithPagination"
	WorkOrdersService_DownloadItemsAsCSV_FullMethodName                    = "/Scailo.WorkOrdersService/DownloadItemsAsCSV"
	WorkOrdersService_DownloadItemsTemplateAsCSV_FullMethodName            = "/Scailo.WorkOrdersService/DownloadItemsTemplateAsCSV"
	WorkOrdersService_UploadWorkOrderItems_FullMethodName                  = "/Scailo.WorkOrdersService/UploadWorkOrderItems"
	WorkOrdersService_ViewByID_FullMethodName                              = "/Scailo.WorkOrdersService/ViewByID"
	WorkOrdersService_ViewByUUID_FullMethodName                            = "/Scailo.WorkOrdersService/ViewByUUID"
	WorkOrdersService_ViewByReferenceID_FullMethodName                     = "/Scailo.WorkOrdersService/ViewByReferenceID"
	WorkOrdersService_ViewEssentialByID_FullMethodName                     = "/Scailo.WorkOrdersService/ViewEssentialByID"
	WorkOrdersService_ViewEssentialByUUID_FullMethodName                   = "/Scailo.WorkOrdersService/ViewEssentialByUUID"
	WorkOrdersService_ViewFromIDs_FullMethodName                           = "/Scailo.WorkOrdersService/ViewFromIDs"
	WorkOrdersService_ViewAncillaryParametersByUUID_FullMethodName         = "/Scailo.WorkOrdersService/ViewAncillaryParametersByUUID"
	WorkOrdersService_ViewAll_FullMethodName                               = "/Scailo.WorkOrdersService/ViewAll"
	WorkOrdersService_ViewAllForEntityUUID_FullMethodName                  = "/Scailo.WorkOrdersService/ViewAllForEntityUUID"
	WorkOrdersService_ViewWithPagination_FullMethodName                    = "/Scailo.WorkOrdersService/ViewWithPagination"
	WorkOrdersService_ViewAmendments_FullMethodName                        = "/Scailo.WorkOrdersService/ViewAmendments"
	WorkOrdersService_ViewProspectiveFamilies_FullMethodName               = "/Scailo.WorkOrdersService/ViewProspectiveFamilies"
	WorkOrdersService_FilterProspectiveFamilies_FullMethodName             = "/Scailo.WorkOrdersService/FilterProspectiveFamilies"
	WorkOrdersService_ViewProspectiveWorkOrderItem_FullMethodName          = "/Scailo.WorkOrdersService/ViewProspectiveWorkOrderItem"
	WorkOrdersService_ViewRequirementStatistics_FullMethodName             = "/Scailo.WorkOrdersService/ViewRequirementStatistics"
	WorkOrdersService_ViewProductionStatistics_FullMethodName              = "/Scailo.WorkOrdersService/ViewProductionStatistics"
	WorkOrdersService_IsDownloadable_FullMethodName                        = "/Scailo.WorkOrdersService/IsDownloadable"
	WorkOrdersService_DownloadByUUID_FullMethodName                        = "/Scailo.WorkOrdersService/DownloadByUUID"
	WorkOrdersService_SearchAll_FullMethodName                             = "/Scailo.WorkOrdersService/SearchAll"
	WorkOrdersService_Filter_FullMethodName                                = "/Scailo.WorkOrdersService/Filter"
	WorkOrdersService_CountInStatus_FullMethodName                         = "/Scailo.WorkOrdersService/CountInStatus"
	WorkOrdersService_Count_FullMethodName                                 = "/Scailo.WorkOrdersService/Count"
	WorkOrdersService_DownloadAsCSV_FullMethodName                         = "/Scailo.WorkOrdersService/DownloadAsCSV"
)

// WorkOrdersServiceClient is the client API for WorkOrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each work order
type WorkOrdersServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *WorkOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *WorkOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *WorkOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *WorkOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Autofill the work order
	Autofill(ctx context.Context, in *WorkOrdersServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Amend the work order and send for revision
	Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Checks if the Work Order can be marked as completed
	IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Add an item to a work order
	AddWorkOrderItem(ctx context.Context, in *WorkOrdersServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a work order
	ModifyWorkOrderItem(ctx context.Context, in *WorkOrdersServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a work order
	ApproveWorkOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a work order
	DeleteWorkOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a work order
	ReorderWorkOrderItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Work Order Item by ID
	ViewWorkOrderItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*WorkOrderItem, error)
	// View approved work order items for given work order ID
	ViewApprovedWorkOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*WorkOrdersItemsList, error)
	// View unapproved work order items for given work order ID
	ViewUnapprovedWorkOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*WorkOrdersItemsList, error)
	// View the history of the work order item
	ViewWorkOrderItemHistory(ctx context.Context, in *WorkOrderItemHistoryRequest, opts ...grpc.CallOption) (*WorkOrdersItemsList, error)
	// View approved work order items for given work order ID with pagination
	ViewPaginatedApprovedWorkOrderItems(ctx context.Context, in *WorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*WorkOrdersServicePaginatedItemsResponse, error)
	// View unapproved work order items for given work order ID with pagination
	ViewPaginatedUnapprovedWorkOrderItems(ctx context.Context, in *WorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*WorkOrdersServicePaginatedItemsResponse, error)
	// Search through work order items with pagination
	SearchItemsWithPagination(ctx context.Context, in *WorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*WorkOrdersServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadWorkOrderItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*WorkOrder, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrder, error)
	// View by Reference ID (returns the latest record in case of duplicates)
	ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*WorkOrder, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*WorkOrder, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrder, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*WorkOrdersList, error)
	// View the ancillary parameters (UUIDs of the internal references) by UUID
	ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrderAncillaryParameters, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*WorkOrdersList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrdersList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *WorkOrdersServicePaginationReq, opts ...grpc.CallOption) (*WorkOrdersServicePaginationResponse, error)
	// View all the amendments made
	ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error)
	// View prospective families for the given work order
	ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error)
	// Filter prospective families for the record represented by the given UUID identifier
	FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error)
	// View prospective work order item info for the given family ID and work order ID
	ViewProspectiveWorkOrderItem(ctx context.Context, in *WorkOrderItemProspectiveInfoRequest, opts ...grpc.CallOption) (*WorkOrdersServiceItemCreateRequest, error)
	// View requirement statistics (match with the selected sales order) of the work order
	ViewRequirementStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrderRequirementStatisticsList, error)
	// View production statistics (match with all the associated production plans) of the work order
	ViewProductionStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrderProductionStatisticsList, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download work order with the given IdentifierUUID (can be used to allow public downloads)
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *WorkOrdersServiceSearchAllReq, opts ...grpc.CallOption) (*WorkOrdersList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *WorkOrdersServiceFilterReq, opts ...grpc.CallOption) (*WorkOrdersList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Count all that match the given criteria
	Count(ctx context.Context, in *WorkOrdersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *WorkOrdersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
}

type workOrdersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkOrdersServiceClient(cc grpc.ClientConnInterface) WorkOrdersServiceClient {
	return &workOrdersServiceClient{cc}
}

func (c *workOrdersServiceClient) Create(ctx context.Context, in *WorkOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Draft(ctx context.Context, in *WorkOrdersServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) DraftUpdate(ctx context.Context, in *WorkOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) RevisionUpdate(ctx context.Context, in *WorkOrdersServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Repeat(ctx context.Context, in *RepeatWithDeliveryDate, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) SendEmail(ctx context.Context, in *IdentifierWithEmailAttributes, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, WorkOrdersService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Autofill(ctx context.Context, in *WorkOrdersServiceAutofillRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Autofill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Amend(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Amend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) IsCompletable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_IsCompletable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) AddWorkOrderItem(ctx context.Context, in *WorkOrdersServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_AddWorkOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ModifyWorkOrderItem(ctx context.Context, in *WorkOrdersServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_ModifyWorkOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ApproveWorkOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_ApproveWorkOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) DeleteWorkOrderItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_DeleteWorkOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ReorderWorkOrderItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_ReorderWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewWorkOrderItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*WorkOrderItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrderItem)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewWorkOrderItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewApprovedWorkOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*WorkOrdersItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersItemsList)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewApprovedWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewUnapprovedWorkOrderItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*WorkOrdersItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersItemsList)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewUnapprovedWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewWorkOrderItemHistory(ctx context.Context, in *WorkOrderItemHistoryRequest, opts ...grpc.CallOption) (*WorkOrdersItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersItemsList)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewWorkOrderItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewPaginatedApprovedWorkOrderItems(ctx context.Context, in *WorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*WorkOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewPaginatedApprovedWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewPaginatedUnapprovedWorkOrderItems(ctx context.Context, in *WorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*WorkOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewPaginatedUnapprovedWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) SearchItemsWithPagination(ctx context.Context, in *WorkOrderItemsSearchRequest, opts ...grpc.CallOption) (*WorkOrdersServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, WorkOrdersService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, WorkOrdersService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) UploadWorkOrderItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, WorkOrdersService_UploadWorkOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*WorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrder)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrder)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewByReferenceID(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*WorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrder)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewByReferenceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*WorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrder)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrder)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*WorkOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersList)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewAncillaryParametersByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrderAncillaryParameters, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrderAncillaryParameters)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewAncillaryParametersByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*WorkOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersList)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersList)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewWithPagination(ctx context.Context, in *WorkOrdersServicePaginationReq, opts ...grpc.CallOption) (*WorkOrdersServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersServicePaginationResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewAmendments(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*AmendmentLogsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmendmentLogsList)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewAmendments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewProspectiveFamilies(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) FilterProspectiveFamilies(ctx context.Context, in *FilterFamiliesReqForIdentifier, opts ...grpc.CallOption) (*FamiliesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamiliesList)
	err := c.cc.Invoke(ctx, WorkOrdersService_FilterProspectiveFamilies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewProspectiveWorkOrderItem(ctx context.Context, in *WorkOrderItemProspectiveInfoRequest, opts ...grpc.CallOption) (*WorkOrdersServiceItemCreateRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersServiceItemCreateRequest)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewProspectiveWorkOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewRequirementStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrderRequirementStatisticsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrderRequirementStatisticsList)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewRequirementStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) ViewProductionStatistics(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*WorkOrderProductionStatisticsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrderProductionStatisticsList)
	err := c.cc.Invoke(ctx, WorkOrdersService_ViewProductionStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, WorkOrdersService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) SearchAll(ctx context.Context, in *WorkOrdersServiceSearchAllReq, opts ...grpc.CallOption) (*WorkOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersList)
	err := c.cc.Invoke(ctx, WorkOrdersService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Filter(ctx context.Context, in *WorkOrdersServiceFilterReq, opts ...grpc.CallOption) (*WorkOrdersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkOrdersList)
	err := c.cc.Invoke(ctx, WorkOrdersService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) Count(ctx context.Context, in *WorkOrdersServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, WorkOrdersService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrdersServiceClient) DownloadAsCSV(ctx context.Context, in *WorkOrdersServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, WorkOrdersService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkOrdersService
