// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: equations_sales_bundles.scailo.proto

package sdk

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EquationsSalesBundlesService_Create_FullMethodName                                          = "/Scailo.EquationsSalesBundlesService/Create"
	EquationsSalesBundlesService_Draft_FullMethodName                                           = "/Scailo.EquationsSalesBundlesService/Draft"
	EquationsSalesBundlesService_DraftUpdate_FullMethodName                                     = "/Scailo.EquationsSalesBundlesService/DraftUpdate"
	EquationsSalesBundlesService_SendForVerification_FullMethodName                             = "/Scailo.EquationsSalesBundlesService/SendForVerification"
	EquationsSalesBundlesService_Verify_FullMethodName                                          = "/Scailo.EquationsSalesBundlesService/Verify"
	EquationsSalesBundlesService_Approve_FullMethodName                                         = "/Scailo.EquationsSalesBundlesService/Approve"
	EquationsSalesBundlesService_SendForRevision_FullMethodName                                 = "/Scailo.EquationsSalesBundlesService/SendForRevision"
	EquationsSalesBundlesService_RevisionUpdate_FullMethodName                                  = "/Scailo.EquationsSalesBundlesService/RevisionUpdate"
	EquationsSalesBundlesService_Halt_FullMethodName                                            = "/Scailo.EquationsSalesBundlesService/Halt"
	EquationsSalesBundlesService_Discard_FullMethodName                                         = "/Scailo.EquationsSalesBundlesService/Discard"
	EquationsSalesBundlesService_Restore_FullMethodName                                         = "/Scailo.EquationsSalesBundlesService/Restore"
	EquationsSalesBundlesService_Complete_FullMethodName                                        = "/Scailo.EquationsSalesBundlesService/Complete"
	EquationsSalesBundlesService_Repeat_FullMethodName                                          = "/Scailo.EquationsSalesBundlesService/Repeat"
	EquationsSalesBundlesService_Reopen_FullMethodName                                          = "/Scailo.EquationsSalesBundlesService/Reopen"
	EquationsSalesBundlesService_CommentAdd_FullMethodName                                      = "/Scailo.EquationsSalesBundlesService/CommentAdd"
	EquationsSalesBundlesService_CreateMagicLink_FullMethodName                                 = "/Scailo.EquationsSalesBundlesService/CreateMagicLink"
	EquationsSalesBundlesService_Clone_FullMethodName                                           = "/Scailo.EquationsSalesBundlesService/Clone"
	EquationsSalesBundlesService_AddEquationSalesBundleItem_FullMethodName                      = "/Scailo.EquationsSalesBundlesService/AddEquationSalesBundleItem"
	EquationsSalesBundlesService_ModifyEquationSalesBundleItem_FullMethodName                   = "/Scailo.EquationsSalesBundlesService/ModifyEquationSalesBundleItem"
	EquationsSalesBundlesService_ApproveEquationSalesBundleItem_FullMethodName                  = "/Scailo.EquationsSalesBundlesService/ApproveEquationSalesBundleItem"
	EquationsSalesBundlesService_DeleteEquationSalesBundleItem_FullMethodName                   = "/Scailo.EquationsSalesBundlesService/DeleteEquationSalesBundleItem"
	EquationsSalesBundlesService_ReorderEquationSalesBundleItems_FullMethodName                 = "/Scailo.EquationsSalesBundlesService/ReorderEquationSalesBundleItems"
	EquationsSalesBundlesService_ViewEquationSalesBundleItemByID_FullMethodName                 = "/Scailo.EquationsSalesBundlesService/ViewEquationSalesBundleItemByID"
	EquationsSalesBundlesService_ViewApprovedEquationSalesBundleItems_FullMethodName            = "/Scailo.EquationsSalesBundlesService/ViewApprovedEquationSalesBundleItems"
	EquationsSalesBundlesService_ViewUnapprovedEquationSalesBundleItems_FullMethodName          = "/Scailo.EquationsSalesBundlesService/ViewUnapprovedEquationSalesBundleItems"
	EquationsSalesBundlesService_ViewEquationSalesBundleItemHistory_FullMethodName              = "/Scailo.EquationsSalesBundlesService/ViewEquationSalesBundleItemHistory"
	EquationsSalesBundlesService_ViewPaginatedApprovedEquationSalesBundleItems_FullMethodName   = "/Scailo.EquationsSalesBundlesService/ViewPaginatedApprovedEquationSalesBundleItems"
	EquationsSalesBundlesService_ViewPaginatedUnapprovedEquationSalesBundleItems_FullMethodName = "/Scailo.EquationsSalesBundlesService/ViewPaginatedUnapprovedEquationSalesBundleItems"
	EquationsSalesBundlesService_SearchItemsWithPagination_FullMethodName                       = "/Scailo.EquationsSalesBundlesService/SearchItemsWithPagination"
	EquationsSalesBundlesService_DownloadItemsAsCSV_FullMethodName                              = "/Scailo.EquationsSalesBundlesService/DownloadItemsAsCSV"
	EquationsSalesBundlesService_DownloadItemsTemplateAsCSV_FullMethodName                      = "/Scailo.EquationsSalesBundlesService/DownloadItemsTemplateAsCSV"
	EquationsSalesBundlesService_DownloadTreeAsCSV_FullMethodName                               = "/Scailo.EquationsSalesBundlesService/DownloadTreeAsCSV"
	EquationsSalesBundlesService_UploadEquationSalesBundleItems_FullMethodName                  = "/Scailo.EquationsSalesBundlesService/UploadEquationSalesBundleItems"
	EquationsSalesBundlesService_ViewByID_FullMethodName                                        = "/Scailo.EquationsSalesBundlesService/ViewByID"
	EquationsSalesBundlesService_ViewByUUID_FullMethodName                                      = "/Scailo.EquationsSalesBundlesService/ViewByUUID"
	EquationsSalesBundlesService_ViewByName_FullMethodName                                      = "/Scailo.EquationsSalesBundlesService/ViewByName"
	EquationsSalesBundlesService_ViewEssentialByID_FullMethodName                               = "/Scailo.EquationsSalesBundlesService/ViewEssentialByID"
	EquationsSalesBundlesService_ViewEssentialByUUID_FullMethodName                             = "/Scailo.EquationsSalesBundlesService/ViewEssentialByUUID"
	EquationsSalesBundlesService_ViewFromIDs_FullMethodName                                     = "/Scailo.EquationsSalesBundlesService/ViewFromIDs"
	EquationsSalesBundlesService_ViewAll_FullMethodName                                         = "/Scailo.EquationsSalesBundlesService/ViewAll"
	EquationsSalesBundlesService_ViewAllForEntityUUID_FullMethodName                            = "/Scailo.EquationsSalesBundlesService/ViewAllForEntityUUID"
	EquationsSalesBundlesService_ViewWithPagination_FullMethodName                              = "/Scailo.EquationsSalesBundlesService/ViewWithPagination"
	EquationsSalesBundlesService_ViewForFamilyID_FullMethodName                                 = "/Scailo.EquationsSalesBundlesService/ViewForFamilyID"
	EquationsSalesBundlesService_IsDownloadable_FullMethodName                                  = "/Scailo.EquationsSalesBundlesService/IsDownloadable"
	EquationsSalesBundlesService_DownloadByUUID_FullMethodName                                  = "/Scailo.EquationsSalesBundlesService/DownloadByUUID"
	EquationsSalesBundlesService_SearchAll_FullMethodName                                       = "/Scailo.EquationsSalesBundlesService/SearchAll"
	EquationsSalesBundlesService_Filter_FullMethodName                                          = "/Scailo.EquationsSalesBundlesService/Filter"
	EquationsSalesBundlesService_CountInStatus_FullMethodName                                   = "/Scailo.EquationsSalesBundlesService/CountInStatus"
	EquationsSalesBundlesService_Count_FullMethodName                                           = "/Scailo.EquationsSalesBundlesService/Count"
	EquationsSalesBundlesService_DownloadAsCSV_FullMethodName                                   = "/Scailo.EquationsSalesBundlesService/DownloadAsCSV"
	EquationsSalesBundlesService_ImportFromCSV_FullMethodName                                   = "/Scailo.EquationsSalesBundlesService/ImportFromCSV"
)

// EquationsSalesBundlesServiceClient is the client API for EquationsSalesBundlesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the common methods applicable on each equation sales bundle
type EquationsSalesBundlesServiceClient interface {
	// Create and send for verification
	Create(ctx context.Context, in *EquationsSalesBundlesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Create and save as draft
	Draft(ctx context.Context, in *EquationsSalesBundlesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update draft
	DraftUpdate(ctx context.Context, in *EquationsSalesBundlesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send for verification
	SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Verify
	Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve
	Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send For Revision
	SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Update revision
	RevisionUpdate(ctx context.Context, in *EquationsSalesBundlesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Halt
	Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Discard
	Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Restore
	Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Complete
	Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Repeat
	Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reopen
	Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add comment
	CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Send Email
	// rpc SendEmail (IdentifierWithEmailAttributes) returns (IdentifierResponse);
	// Create a magic link
	CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error)
	// Clone equation from an existing equation (denoted by the identifier)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Add an item to a equation sales bundle
	AddEquationSalesBundleItem(ctx context.Context, in *EquationsSalesBundlesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Modify an item in a equation sales bundle
	ModifyEquationSalesBundleItem(ctx context.Context, in *EquationsSalesBundlesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Approve an item in a equation sales bundle
	ApproveEquationSalesBundleItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Delete an item in a equation sales bundle
	DeleteEquationSalesBundleItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// Reorder items in a equation sales bundle
	ReorderEquationSalesBundleItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error)
	// View Equation Sales Bundle Item by ID
	ViewEquationSalesBundleItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationSalesBundleItem, error)
	// View approved equation sales bundle items for given equation sales bundle ID
	ViewApprovedEquationSalesBundleItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsSalesBundlesItemsList, error)
	// View unapproved equation sales bundle items for given equation sales bundle ID
	ViewUnapprovedEquationSalesBundleItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsSalesBundlesItemsList, error)
	// View the history of the equation sales bundle item
	ViewEquationSalesBundleItemHistory(ctx context.Context, in *EquationSalesBundleItemHistoryRequest, opts ...grpc.CallOption) (*EquationsSalesBundlesItemsList, error)
	// View approved equation sales bundle items for given equation sales bundle ID with pagination
	ViewPaginatedApprovedEquationSalesBundleItems(ctx context.Context, in *EquationSalesBundleItemsSearchRequest, opts ...grpc.CallOption) (*EquationsSalesBundlesServicePaginatedItemsResponse, error)
	// View unapproved equation sales bundle items for given equation sales bundle ID with pagination
	ViewPaginatedUnapprovedEquationSalesBundleItems(ctx context.Context, in *EquationSalesBundleItemsSearchRequest, opts ...grpc.CallOption) (*EquationsSalesBundlesServicePaginatedItemsResponse, error)
	// Search through equation sales bundle items with pagination
	SearchItemsWithPagination(ctx context.Context, in *EquationSalesBundleItemsSearchRequest, opts ...grpc.CallOption) (*EquationsSalesBundlesServicePaginatedItemsResponse, error)
	// CSV operations
	// Download the CSV file with the associated line items. The same file could then be used to upload line items.
	DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV template that could be used to upload items
	DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error)
	// Download the CSV file with the entire dependency tree. Useful for identifying quantities necessary from all the dependencies.
	DownloadTreeAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
	UploadEquationSalesBundleItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error)
	// View by ID
	ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationSalesBundle, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationSalesBundle, error)
	// View by Name (returns the latest record in case of duplicates)
	ViewByName(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*EquationSalesBundle, error)
	// View only essential components by ID (without logs)
	ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationSalesBundle, error)
	// View only essential components (without logs) that matches the given UUID
	ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationSalesBundle, error)
	// View all records with the given IDs
	ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*EquationsSalesBundlesList, error)
	// View all
	ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*EquationsSalesBundlesList, error)
	// View all with the given entity UUID
	ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationsSalesBundlesList, error)
	// View with pagination
	ViewWithPagination(ctx context.Context, in *EquationsSalesBundlesServicePaginationReq, opts ...grpc.CallOption) (*EquationsSalesBundlesServicePaginationResponse, error)
	// View the latest equation for a family (denoted by the given identifier)
	ViewForFamilyID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationSalesBundle, error)
	// Checks if the record is downloadable (checks if the custom download function has been implemented)
	IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Download equation with the given IdentifierUUID
	DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error)
	// View all that match the given search key
	SearchAll(ctx context.Context, in *EquationsSalesBundlesServiceSearchAllReq, opts ...grpc.CallOption) (*EquationsSalesBundlesList, error)
	// View all that match the given filter criteria
	Filter(ctx context.Context, in *EquationsSalesBundlesServiceFilterReq, opts ...grpc.CallOption) (*EquationsSalesBundlesList, error)
	// Count in status
	CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// View all that match the given count criteria
	Count(ctx context.Context, in *EquationsSalesBundlesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error)
	// CSV operations
	// Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
	DownloadAsCSV(ctx context.Context, in *EquationsSalesBundlesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error)
	// Import records using a CSV file (duplicate codes will be skipped)
	ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error)
}

type equationsSalesBundlesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquationsSalesBundlesServiceClient(cc grpc.ClientConnInterface) EquationsSalesBundlesServiceClient {
	return &equationsSalesBundlesServiceClient{cc}
}

func (c *equationsSalesBundlesServiceClient) Create(ctx context.Context, in *EquationsSalesBundlesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Draft(ctx context.Context, in *EquationsSalesBundlesServiceCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Draft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) DraftUpdate(ctx context.Context, in *EquationsSalesBundlesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_DraftUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) SendForVerification(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_SendForVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Verify(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Approve(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) SendForRevision(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_SendForRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) RevisionUpdate(ctx context.Context, in *EquationsSalesBundlesServiceUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_RevisionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Halt(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Halt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Discard(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Discard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Restore(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Restore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Complete(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Repeat(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Repeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Reopen(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Reopen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) CommentAdd(ctx context.Context, in *IdentifierUUIDWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_CommentAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) CreateMagicLink(ctx context.Context, in *MagicLinksServiceCreateRequestForSpecificResource, opts ...grpc.CallOption) (*MagicLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MagicLink)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_CreateMagicLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) AddEquationSalesBundleItem(ctx context.Context, in *EquationsSalesBundlesServiceItemCreateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_AddEquationSalesBundleItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ModifyEquationSalesBundleItem(ctx context.Context, in *EquationsSalesBundlesServiceItemUpdateRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ModifyEquationSalesBundleItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ApproveEquationSalesBundleItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ApproveEquationSalesBundleItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) DeleteEquationSalesBundleItem(ctx context.Context, in *IdentifierWithUserComment, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_DeleteEquationSalesBundleItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ReorderEquationSalesBundleItems(ctx context.Context, in *ReorderItemsRequest, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ReorderEquationSalesBundleItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewEquationSalesBundleItemByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationSalesBundleItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationSalesBundleItem)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewEquationSalesBundleItemByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewApprovedEquationSalesBundleItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsSalesBundlesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesItemsList)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewApprovedEquationSalesBundleItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewUnapprovedEquationSalesBundleItems(ctx context.Context, in *IdentifierWithSearchKey, opts ...grpc.CallOption) (*EquationsSalesBundlesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesItemsList)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewUnapprovedEquationSalesBundleItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewEquationSalesBundleItemHistory(ctx context.Context, in *EquationSalesBundleItemHistoryRequest, opts ...grpc.CallOption) (*EquationsSalesBundlesItemsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesItemsList)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewEquationSalesBundleItemHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewPaginatedApprovedEquationSalesBundleItems(ctx context.Context, in *EquationSalesBundleItemsSearchRequest, opts ...grpc.CallOption) (*EquationsSalesBundlesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewPaginatedApprovedEquationSalesBundleItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewPaginatedUnapprovedEquationSalesBundleItems(ctx context.Context, in *EquationSalesBundleItemsSearchRequest, opts ...grpc.CallOption) (*EquationsSalesBundlesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewPaginatedUnapprovedEquationSalesBundleItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) SearchItemsWithPagination(ctx context.Context, in *EquationSalesBundleItemsSearchRequest, opts ...grpc.CallOption) (*EquationsSalesBundlesServicePaginatedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesServicePaginatedItemsResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_SearchItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) DownloadItemsAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_DownloadItemsAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) DownloadItemsTemplateAsCSV(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_DownloadItemsTemplateAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) DownloadTreeAsCSV(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_DownloadTreeAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) UploadEquationSalesBundleItems(ctx context.Context, in *IdentifierUUIDWithFile, opts ...grpc.CallOption) (*IdentifiersList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifiersList)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_UploadEquationSalesBundleItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationSalesBundle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationSalesBundle)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationSalesBundle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationSalesBundle)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewByName(ctx context.Context, in *SimpleSearchReq, opts ...grpc.CallOption) (*EquationSalesBundle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationSalesBundle)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewEssentialByID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationSalesBundle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationSalesBundle)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewEssentialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewEssentialByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationSalesBundle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationSalesBundle)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewEssentialByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewFromIDs(ctx context.Context, in *IdentifiersList, opts ...grpc.CallOption) (*EquationsSalesBundlesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesList)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewFromIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewAll(ctx context.Context, in *ActiveStatus, opts ...grpc.CallOption) (*EquationsSalesBundlesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesList)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewAllForEntityUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*EquationsSalesBundlesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesList)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewAllForEntityUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewWithPagination(ctx context.Context, in *EquationsSalesBundlesServicePaginationReq, opts ...grpc.CallOption) (*EquationsSalesBundlesServicePaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesServicePaginationResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ViewForFamilyID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*EquationSalesBundle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationSalesBundle)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ViewForFamilyID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) IsDownloadable(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_IsDownloadable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) DownloadByUUID(ctx context.Context, in *IdentifierUUID, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_DownloadByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) SearchAll(ctx context.Context, in *EquationsSalesBundlesServiceSearchAllReq, opts ...grpc.CallOption) (*EquationsSalesBundlesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesList)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_SearchAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Filter(ctx context.Context, in *EquationsSalesBundlesServiceFilterReq, opts ...grpc.CallOption) (*EquationsSalesBundlesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquationsSalesBundlesList)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Filter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) CountInStatus(ctx context.Context, in *CountInSLCStatusRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_CountInStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) Count(ctx context.Context, in *EquationsSalesBundlesServiceCountReq, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) DownloadAsCSV(ctx context.Context, in *EquationsSalesBundlesServiceFilterReq, opts ...grpc.CallOption) (*StandardFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardFile)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_DownloadAsCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equationsSalesBundlesServiceClient) ImportFromCSV(ctx context.Context, in *StandardFile, opts ...grpc.CallOption) (*IdentifierUUIDsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentifierUUIDsList)
	err := c.cc.Invoke(ctx, EquationsSalesBundlesService_ImportFromCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquationsSalesBundlesService
